/******/ module.exports = (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 137);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var __extends = undefined && undefined.__extends || function () {
    var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
        d.__proto__ = b;
    } || function (d, b) {
        for (var p in b) {
            if (b.hasOwnProperty(p)) d[p] = b[p];
        }
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
Object.defineProperty(exports, "__esModule", { value: true });
var UniNode_1 = __webpack_require__(34);
var UniExpr = /** @class */function (_super) {
    __extends(UniExpr, _super);
    function UniExpr() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return UniExpr;
}(UniNode_1.default);
exports.default = UniExpr;

/***/ }),
/* 1 */
/***/ (function(module, exports) {

/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

function arrayToString(a) {
    return "[" + a.join(", ") + "]";
}

String.prototype.seed = String.prototype.seed || Math.round(Math.random() * Math.pow(2, 32));

String.prototype.hashCode = function () {
    var remainder, bytes, h1, h1b, c1, c1b, c2, c2b, k1, i,
        key = this.toString();

    remainder = key.length & 3; // key.length % 4
    bytes = key.length - remainder;
    h1 = String.prototype.seed;
    c1 = 0xcc9e2d51;
    c2 = 0x1b873593;
    i = 0;

    while (i < bytes) {
        k1 =
            ((key.charCodeAt(i) & 0xff)) |
            ((key.charCodeAt(++i) & 0xff) << 8) |
            ((key.charCodeAt(++i) & 0xff) << 16) |
            ((key.charCodeAt(++i) & 0xff) << 24);
        ++i;

        k1 = ((((k1 & 0xffff) * c1) + ((((k1 >>> 16) * c1) & 0xffff) << 16))) & 0xffffffff;
        k1 = (k1 << 15) | (k1 >>> 17);
        k1 = ((((k1 & 0xffff) * c2) + ((((k1 >>> 16) * c2) & 0xffff) << 16))) & 0xffffffff;

        h1 ^= k1;
        h1 = (h1 << 13) | (h1 >>> 19);
        h1b = ((((h1 & 0xffff) * 5) + ((((h1 >>> 16) * 5) & 0xffff) << 16))) & 0xffffffff;
        h1 = (((h1b & 0xffff) + 0x6b64) + ((((h1b >>> 16) + 0xe654) & 0xffff) << 16));
    }

    k1 = 0;

    switch (remainder) {
        case 3:
            k1 ^= (key.charCodeAt(i + 2) & 0xff) << 16;
        case 2:
            k1 ^= (key.charCodeAt(i + 1) & 0xff) << 8;
        case 1:
            k1 ^= (key.charCodeAt(i) & 0xff);

            k1 = (((k1 & 0xffff) * c1) + ((((k1 >>> 16) * c1) & 0xffff) << 16)) & 0xffffffff;
            k1 = (k1 << 15) | (k1 >>> 17);
            k1 = (((k1 & 0xffff) * c2) + ((((k1 >>> 16) * c2) & 0xffff) << 16)) & 0xffffffff;
            h1 ^= k1;
    }

    h1 ^= key.length;

    h1 ^= h1 >>> 16;
    h1 = (((h1 & 0xffff) * 0x85ebca6b) + ((((h1 >>> 16) * 0x85ebca6b) & 0xffff) << 16)) & 0xffffffff;
    h1 ^= h1 >>> 13;
    h1 = ((((h1 & 0xffff) * 0xc2b2ae35) + ((((h1 >>> 16) * 0xc2b2ae35) & 0xffff) << 16))) & 0xffffffff;
    h1 ^= h1 >>> 16;

    return h1 >>> 0;
};

function standardEqualsFunction(a, b) {
    return a.equals(b);
}

function standardHashCodeFunction(a) {
    return a.hashCode();
}

function Set(hashFunction, equalsFunction) {
    this.data = {};
    this.hashFunction = hashFunction || standardHashCodeFunction;
    this.equalsFunction = equalsFunction || standardEqualsFunction;
    return this;
}

Object.defineProperty(Set.prototype, "length", {
    get: function () {
        var l = 0;
        for (var key in this.data) {
            if (key.indexOf("hash_") === 0) {
                l = l + this.data[key].length;
            }
        }
        return l;
    }
});

Set.prototype.add = function (value) {
    var hash = this.hashFunction(value);
    var key = "hash_" + hash;
    if (key in this.data) {
        var values = this.data[key];
        for (var i = 0; i < values.length; i++) {
            if (this.equalsFunction(value, values[i])) {
                return values[i];
            }
        }
        values.push(value);
        return value;
    } else {
        this.data[key] = [value];
        return value;
    }
};

Set.prototype.contains = function (value) {
    return this.get(value) != null;
};

Set.prototype.get = function (value) {
    var hash = this.hashFunction(value);
    var key = "hash_" + hash;
    if (key in this.data) {
        var values = this.data[key];
        for (var i = 0; i < values.length; i++) {
            if (this.equalsFunction(value, values[i])) {
                return values[i];
            }
        }
    }
    return null;
};

Set.prototype.values = function () {
    var l = [];
    for (var key in this.data) {
        if (key.indexOf("hash_") === 0) {
            l = l.concat(this.data[key]);
        }
    }
    return l;
};

Set.prototype.toString = function () {
    return arrayToString(this.values());
};

function BitSet() {
    this.data = [];
    return this;
}

BitSet.prototype.add = function (value) {
    this.data[value] = true;
};

BitSet.prototype.or = function (set) {
    var bits = this;
    Object.keys(set.data).map(function (alt) {
        bits.add(alt);
    });
};

BitSet.prototype.remove = function (value) {
    delete this.data[value];
};

BitSet.prototype.contains = function (value) {
    return this.data[value] === true;
};

BitSet.prototype.values = function () {
    return Object.keys(this.data);
};

BitSet.prototype.minValue = function () {
    return Math.min.apply(null, this.values());
};

BitSet.prototype.hashCode = function () {
    var hash = new Hash();
    hash.update(this.values());
    return hash.finish();
};

BitSet.prototype.equals = function (other) {
    if (!(other instanceof BitSet)) {
        return false;
    }
    return this.hashCode() === other.hashCode();
};

Object.defineProperty(BitSet.prototype, "length", {
    get: function () {
        return this.values().length;
    }
});

BitSet.prototype.toString = function () {
    return "{" + this.values().join(", ") + "}";
};

function Map(hashFunction, equalsFunction) {
    this.data = {};
    this.hashFunction = hashFunction || standardHashCodeFunction;
    this.equalsFunction = equalsFunction || standardEqualsFunction;
    return this;
}

Object.defineProperty(Map.prototype, "length", {
    get: function () {
        var l = 0;
        for (var hashKey in this.data) {
            if (hashKey.indexOf("hash_") === 0) {
                l = l + this.data[hashKey].length;
            }
        }
        return l;
    }
});

Map.prototype.put = function (key, value) {
    var hashKey = "hash_" + this.hashFunction(key);
    if (hashKey in this.data) {
        var entries = this.data[hashKey];
        for (var i = 0; i < entries.length; i++) {
            var entry = entries[i];
            if (this.equalsFunction(key, entry.key)) {
                var oldValue = entry.value;
                entry.value = value;
                return oldValue;
            }
        }
        entries.push({key:key, value:value});
        return value;
    } else {
        this.data[hashKey] = [{key:key, value:value}];
        return value;
    }
};

Map.prototype.containsKey = function (key) {
    var hashKey = "hash_" + this.hashFunction(key);
    if(hashKey in this.data) {
        var entries = this.data[hashKey];
        for (var i = 0; i < entries.length; i++) {
            var entry = entries[i];
            if (this.equalsFunction(key, entry.key))
                return true;
        }
    }
    return false;
};

Map.prototype.get = function (key) {
    var hashKey = "hash_" + this.hashFunction(key);
    if(hashKey in this.data) {
        var entries = this.data[hashKey];
        for (var i = 0; i < entries.length; i++) {
            var entry = entries[i];
            if (this.equalsFunction(key, entry.key))
                return entry.value;
        }
    }
    return null;
};

Map.prototype.entries = function () {
    var l = [];
    for (var key in this.data) {
        if (key.indexOf("hash_") === 0) {
            l = l.concat(this.data[key]);
        }
    }
    return l;
};


Map.prototype.getKeys = function () {
    return this.entries().map(function(e) {
        return e.key;
    });
};


Map.prototype.getValues = function () {
    return this.entries().map(function(e) {
            return e.value;
    });
};


Map.prototype.toString = function () {
    var ss = this.entries().map(function(entry) {
        return '{' + entry.key + ':' + entry.value + '}';
    });
    return '[' + ss.join(", ") + ']';
};


function AltDict() {
    this.data = {};
    return this;
}


AltDict.prototype.get = function (key) {
    key = "k-" + key;
    if (key in this.data) {
        return this.data[key];
    } else {
        return null;
    }
};

AltDict.prototype.put = function (key, value) {
    key = "k-" + key;
    this.data[key] = value;
};

AltDict.prototype.values = function () {
    var data = this.data;
    var keys = Object.keys(this.data);
    return keys.map(function (key) {
        return data[key];
    });
};

function DoubleDict() {
    return this;
}

function Hash() {
    this.count = 0;
    this.hash = 0;
    return this;
}

Hash.prototype.update = function () {
    for(var i=0;i<arguments.length;i++) {
        var value = arguments[i];
        if (value == null)
            continue;
        if(Array.isArray(value))
            this.update.apply(value);
        else {
            var k = 0;
            switch (typeof(value)) {
                case 'undefined':
                case 'function':
                    continue;
                case 'number':
                case 'boolean':
                    k = value;
                    break;
                case 'string':
                    k = value.hashCode();
                    break;
                default:
                    value.updateHashCode(this);
                    continue;
            }
            k = k * 0xCC9E2D51;
            k = (k << 15) | (k >>> (32 - 15));
            k = k * 0x1B873593;
            this.count = this.count + 1;
            var hash = this.hash ^ k;
            hash = (hash << 13) | (hash >>> (32 - 13));
            hash = hash * 5 + 0xE6546B64;
            this.hash = hash;
        }
    }
}

Hash.prototype.finish = function () {
    var hash = this.hash ^ (this.count * 4);
    hash = hash ^ (hash >>> 16);
    hash = hash * 0x85EBCA6B;
    hash = hash ^ (hash >>> 13);
    hash = hash * 0xC2B2AE35;
    hash = hash ^ (hash >>> 16);
    return hash;
}

function hashStuff() {
    var hash = new Hash();
    hash.update.apply(arguments);
    return hash.finish();
}

DoubleDict.prototype.get = function (a, b) {
    var d = this[a] || null;
    return d === null ? null : (d[b] || null);
};

DoubleDict.prototype.set = function (a, b, o) {
    var d = this[a] || null;
    if (d === null) {
        d = {};
        this[a] = d;
    }
    d[b] = o;
};


function escapeWhitespace(s, escapeSpaces) {
    s = s.replace(/\t/g, "\\t")
         .replace(/\n/g, "\\n")
         .replace(/\r/g, "\\r");
    if (escapeSpaces) {
        s = s.replace(/ /g, "\u00B7");
    }
    return s;
}

function titleCase(str) {
    return str.replace(/\w\S*/g, function (txt) {
        return txt.charAt(0).toUpperCase() + txt.substr(1);
    });
};

function equalArrays(a, b)
{
    if (!Array.isArray(a) || !Array.isArray(b))
        return false;
    if (a == b)
        return true;
    if (a.length != b.length)
        return false;
    for (var i = 0; i < a.length; i++) {
        if (a[i] == b[i])
            continue;
        if (!a[i].equals(b[i]))
            return false;
    }
    return true;
};

exports.Hash = Hash;
exports.Set = Set;
exports.Map = Map;
exports.BitSet = BitSet;
exports.AltDict = AltDict;
exports.DoubleDict = DoubleDict;
exports.hashStuff = hashStuff;
exports.escapeWhitespace = escapeWhitespace;
exports.arrayToString = arrayToString;
exports.titleCase = titleCase;
exports.equalArrays = equalArrays;


/***/ }),
/* 2 */
/***/ (function(module, exports) {

/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
//

// A token has properties: text, type, line, character position in the line
// (so we can ignore tabs), token channel, index, and source from which
// we obtained this token.

function Token() {
	this.source = null;
	this.type = null; // token type of the token
	this.channel = null; // The parser ignores everything not on DEFAULT_CHANNEL
	this.start = null; // optional; return -1 if not implemented.
	this.stop = null; // optional; return -1 if not implemented.
	this.tokenIndex = null; // from 0..n-1 of the token object in the input stream
	this.line = null; // line=1..n of the 1st character
	this.column = null; // beginning of the line at which it occurs, 0..n-1
	this._text = null; // text of the token.
	return this;
}

Token.INVALID_TYPE = 0;

// During lookahead operations, this "token" signifies we hit rule end ATN state
// and did not follow it despite needing to.
Token.EPSILON = -2;

Token.MIN_USER_TOKEN_TYPE = 1;

Token.EOF = -1;

// All tokens go to the parser (unless skip() is called in that rule)
// on a particular "channel". The parser tunes to a particular channel
// so that whitespace etc... can go to the parser on a "hidden" channel.

Token.DEFAULT_CHANNEL = 0;

// Anything on different channel than DEFAULT_CHANNEL is not parsed
// by parser.

Token.HIDDEN_CHANNEL = 1;

// Explicitly set the text for this token. If {code text} is not
// {@code null}, then {@link //getText} will return this value rather than
// extracting the text from the input.
//
// @param text The explicit text of the token, or {@code null} if the text
// should be obtained from the input along with the start and stop indexes
// of the token.

Object.defineProperty(Token.prototype, "text", {
	get : function() {
		return this._text;
	},
	set : function(text) {
		this._text = text;
	}
});

Token.prototype.getTokenSource = function() {
	return this.source[0];
};

Token.prototype.getInputStream = function() {
	return this.source[1];
};

function CommonToken(source, type, channel, start, stop) {
	Token.call(this);
	this.source = source !== undefined ? source : CommonToken.EMPTY_SOURCE;
	this.type = type !== undefined ? type : null;
	this.channel = channel !== undefined ? channel : Token.DEFAULT_CHANNEL;
	this.start = start !== undefined ? start : -1;
	this.stop = stop !== undefined ? stop : -1;
	this.tokenIndex = -1;
	if (this.source[0] !== null) {
		this.line = source[0].line;
		this.column = source[0].column;
	} else {
		this.column = -1;
	}
	return this;
}

CommonToken.prototype = Object.create(Token.prototype);
CommonToken.prototype.constructor = CommonToken;

// An empty {@link Pair} which is used as the default value of
// {@link //source} for tokens that do not have a source.
CommonToken.EMPTY_SOURCE = [ null, null ];

// Constructs a new {@link CommonToken} as a copy of another {@link Token}.
//
// <p>
// If {@code oldToken} is also a {@link CommonToken} instance, the newly
// constructed token will share a reference to the {@link //text} field and
// the {@link Pair} stored in {@link //source}. Otherwise, {@link //text} will
// be assigned the result of calling {@link //getText}, and {@link //source}
// will be constructed from the result of {@link Token//getTokenSource} and
// {@link Token//getInputStream}.</p>
//
// @param oldToken The token to copy.
//
CommonToken.prototype.clone = function() {
	var t = new CommonToken(this.source, this.type, this.channel, this.start,
			this.stop);
	t.tokenIndex = this.tokenIndex;
	t.line = this.line;
	t.column = this.column;
	t.text = this.text;
	return t;
};

Object.defineProperty(CommonToken.prototype, "text", {
	get : function() {
		if (this._text !== null) {
			return this._text;
		}
		var input = this.getInputStream();
		if (input === null) {
			return null;
		}
		var n = input.size;
		if (this.start < n && this.stop < n) {
			return input.getText(this.start, this.stop);
		} else {
			return "<EOF>";
		}
	},
	set : function(text) {
		this._text = text;
	}
});

CommonToken.prototype.toString = function() {
	var txt = this.text;
	if (txt !== null) {
		txt = txt.replace(/\n/g, "\\n").replace(/\r/g, "\\r").replace(/\t/g, "\\t");
	} else {
		txt = "<no text>";
	}
	return "[@" + this.tokenIndex + "," + this.start + ":" + this.stop + "='" +
			txt + "',<" + this.type + ">" +
			(this.channel > 0 ? ",channel=" + this.channel : "") + "," +
			this.line + ":" + this.column + "]";
};

exports.Token = Token;
exports.CommonToken = CommonToken;


/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var __extends = undefined && undefined.__extends || function () {
    var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
        d.__proto__ = b;
    } || function (d, b) {
        for (var p in b) {
            if (b.hasOwnProperty(p)) d[p] = b[p];
        }
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
Object.defineProperty(exports, "__esModule", { value: true });
var UniExpr_1 = __webpack_require__(0);
var UniStatement = /** @class */function (_super) {
    __extends(UniStatement, _super);
    function UniStatement() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return UniStatement;
}(UniExpr_1.default);
exports.default = UniStatement;

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

/*jslint smarttabs:true */

var Token = __webpack_require__(2).Token;

/* stop is not included! */
function Interval(start, stop) {
	this.start = start;
	this.stop = stop;
	return this;
}

Interval.prototype.contains = function(item) {
	return item >= this.start && item < this.stop;
};

Interval.prototype.toString = function() {
	if(this.start===this.stop-1) {
		return this.start.toString();
	} else {
		return this.start.toString() + ".." + (this.stop-1).toString();
	}
};


Object.defineProperty(Interval.prototype, "length", {
	get : function() {
		return this.stop - this.start;
	}
});

function IntervalSet() {
	this.intervals = null;
	this.readOnly = false;
}

IntervalSet.prototype.first = function(v) {
	if (this.intervals === null || this.intervals.length===0) {
		return Token.INVALID_TYPE;
	} else {
		return this.intervals[0].start;
	}
};

IntervalSet.prototype.addOne = function(v) {
	this.addInterval(new Interval(v, v + 1));
};

IntervalSet.prototype.addRange = function(l, h) {
	this.addInterval(new Interval(l, h + 1));
};

IntervalSet.prototype.addInterval = function(v) {
	if (this.intervals === null) {
		this.intervals = [];
		this.intervals.push(v);
	} else {
		// find insert pos
		for (var k = 0; k < this.intervals.length; k++) {
			var i = this.intervals[k];
			// distinct range -> insert
			if (v.stop < i.start) {
				this.intervals.splice(k, 0, v);
				return;
			}
			// contiguous range -> adjust
			else if (v.stop === i.start) {
				this.intervals[k].start = v.start;
				return;
			}
			// overlapping range -> adjust and reduce
			else if (v.start <= i.stop) {
				this.intervals[k] = new Interval(Math.min(i.start, v.start), Math.max(i.stop, v.stop));
				this.reduce(k);
				return;
			}
		}
		// greater than any existing
		this.intervals.push(v);
	}
};

IntervalSet.prototype.addSet = function(other) {
	if (other.intervals !== null) {
		for (var k = 0; k < other.intervals.length; k++) {
			var i = other.intervals[k];
			this.addInterval(new Interval(i.start, i.stop));
		}
	}
	return this;
};

IntervalSet.prototype.reduce = function(k) {
	// only need to reduce if k is not the last
	if (k < this.intervalslength - 1) {
		var l = this.intervals[k];
		var r = this.intervals[k + 1];
		// if r contained in l
		if (l.stop >= r.stop) {
			this.intervals.pop(k + 1);
			this.reduce(k);
		} else if (l.stop >= r.start) {
			this.intervals[k] = new Interval(l.start, r.stop);
			this.intervals.pop(k + 1);
		}
	}
};

IntervalSet.prototype.complement = function(start, stop) {
    var result = new IntervalSet();
    result.addInterval(new Interval(start,stop+1));
    for(var i=0; i<this.intervals.length; i++) {
        result.removeRange(this.intervals[i]);
    }
    return result;
};

IntervalSet.prototype.contains = function(item) {
	if (this.intervals === null) {
		return false;
	} else {
		for (var k = 0; k < this.intervals.length; k++) {
			if(this.intervals[k].contains(item)) {
				return true;
			}
		}
		return false;
	}
};

Object.defineProperty(IntervalSet.prototype, "length", {
	get : function() {
		var len = 0;
		this.intervals.map(function(i) {len += i.length;});
		return len;
	}
});

IntervalSet.prototype.removeRange = function(v) {
    if(v.start===v.stop-1) {
        this.removeOne(v.start);
    } else if (this.intervals!==null) {
        var k = 0;
        for(var n=0; n<this.intervals.length; n++) {
            var i = this.intervals[k];
            // intervals are ordered
            if (v.stop<=i.start) {
                return;
            }
            // check for including range, split it
            else if(v.start>i.start && v.stop<i.stop) {
                this.intervals[k] = new Interval(i.start, v.start);
                var x = new Interval(v.stop, i.stop);
                this.intervals.splice(k, 0, x);
                return;
            }
            // check for included range, remove it
            else if(v.start<=i.start && v.stop>=i.stop) {
                this.intervals.splice(k, 1);
                k = k - 1; // need another pass
            }
            // check for lower boundary
            else if(v.start<i.stop) {
                this.intervals[k] = new Interval(i.start, v.start);
            }
            // check for upper boundary
            else if(v.stop<i.stop) {
                this.intervals[k] = new Interval(v.stop, i.stop);
            }
            k += 1;
        }
    }
};

IntervalSet.prototype.removeOne = function(v) {
	if (this.intervals !== null) {
		for (var k = 0; k < this.intervals.length; k++) {
			var i = this.intervals[k];
			// intervals is ordered
			if (v < i.start) {
				return;
			}
			// check for single value range
			else if (v === i.start && v === i.stop - 1) {
				this.intervals.splice(k, 1);
				return;
			}
			// check for lower boundary
			else if (v === i.start) {
				this.intervals[k] = new Interval(i.start + 1, i.stop);
				return;
			}
			// check for upper boundary
			else if (v === i.stop - 1) {
				this.intervals[k] = new Interval(i.start, i.stop - 1);
				return;
			}
			// split existing range
			else if (v < i.stop - 1) {
				var x = new Interval(i.start, v);
				i.start = v + 1;
				this.intervals.splice(k, 0, x);
				return;
			}
		}
	}
};

IntervalSet.prototype.toString = function(literalNames, symbolicNames, elemsAreChar) {
	literalNames = literalNames || null;
	symbolicNames = symbolicNames || null;
	elemsAreChar = elemsAreChar || false;
	if (this.intervals === null) {
		return "{}";
	} else if(literalNames!==null || symbolicNames!==null) {
		return this.toTokenString(literalNames, symbolicNames);
	} else if(elemsAreChar) {
		return this.toCharString();
	} else {
		return this.toIndexString();
	}
};

IntervalSet.prototype.toCharString = function() {
	var names = [];
	for (var i = 0; i < this.intervals.length; i++) {
		var v = this.intervals[i];
		if(v.stop===v.start+1) {
			if ( v.start===Token.EOF ) {
				names.push("<EOF>");
			} else {
				names.push("'" + String.fromCharCode(v.start) + "'");
			}
		} else {
			names.push("'" + String.fromCharCode(v.start) + "'..'" + String.fromCharCode(v.stop-1) + "'");
		}
	}
	if (names.length > 1) {
		return "{" + names.join(", ") + "}";
	} else {
		return names[0];
	}
};


IntervalSet.prototype.toIndexString = function() {
	var names = [];
	for (var i = 0; i < this.intervals.length; i++) {
		var v = this.intervals[i];
		if(v.stop===v.start+1) {
			if ( v.start===Token.EOF ) {
				names.push("<EOF>");
			} else {
				names.push(v.start.toString());
			}
		} else {
			names.push(v.start.toString() + ".." + (v.stop-1).toString());
		}
	}
	if (names.length > 1) {
		return "{" + names.join(", ") + "}";
	} else {
		return names[0];
	}
};


IntervalSet.prototype.toTokenString = function(literalNames, symbolicNames) {
	var names = [];
	for (var i = 0; i < this.intervals.length; i++) {
		var v = this.intervals[i];
		for (var j = v.start; j < v.stop; j++) {
			names.push(this.elementName(literalNames, symbolicNames, j));
		}
	}
	if (names.length > 1) {
		return "{" + names.join(", ") + "}";
	} else {
		return names[0];
	}
};

IntervalSet.prototype.elementName = function(literalNames, symbolicNames, a) {
	if (a === Token.EOF) {
		return "<EOF>";
	} else if (a === Token.EPSILON) {
		return "<EPSILON>";
	} else {
		return literalNames[a] || symbolicNames[a];
	}
};

exports.Interval = Interval;
exports.IntervalSet = IntervalSet;


/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
///

// The basic notion of a tree has a parent, a payload, and a list of children.
//  It is the most abstract interface for all the trees used by ANTLR.
///

var Token = __webpack_require__(2).Token;
var Interval = __webpack_require__(4).Interval;
var INVALID_INTERVAL = new Interval(-1, -2);
var Utils = __webpack_require__(1);


function Tree() {
	return this;
}

function SyntaxTree() {
	Tree.call(this);
	return this;
}

SyntaxTree.prototype = Object.create(Tree.prototype);
SyntaxTree.prototype.constructor = SyntaxTree;

function ParseTree() {
	SyntaxTree.call(this);
	return this;
}

ParseTree.prototype = Object.create(SyntaxTree.prototype);
ParseTree.prototype.constructor = ParseTree;

function RuleNode() {
	ParseTree.call(this);
	return this;
}

RuleNode.prototype = Object.create(ParseTree.prototype);
RuleNode.prototype.constructor = RuleNode;

function TerminalNode() {
	ParseTree.call(this);
	return this;
}

TerminalNode.prototype = Object.create(ParseTree.prototype);
TerminalNode.prototype.constructor = TerminalNode;

function ErrorNode() {
	TerminalNode.call(this);
	return this;
}

ErrorNode.prototype = Object.create(TerminalNode.prototype);
ErrorNode.prototype.constructor = ErrorNode;

function ParseTreeVisitor() {
	return this;
}

ParseTreeVisitor.prototype.visit = function(ctx) {
 	if (Array.isArray(ctx)) {
		return ctx.map(function(child) {
            return child.accept(this);
        }, this);
	} else {
		return ctx.accept(this);
	}
};

ParseTreeVisitor.prototype.visitChildren = function(ctx) {
  return this.visit(ctx.children);
}

ParseTreeVisitor.prototype.visitTerminal = function(node) {
};

ParseTreeVisitor.prototype.visitErrorNode = function(node) {
};


function ParseTreeListener() {
	return this;
}

ParseTreeListener.prototype.visitTerminal = function(node) {
};

ParseTreeListener.prototype.visitErrorNode = function(node) {
};

ParseTreeListener.prototype.enterEveryRule = function(node) {
};

ParseTreeListener.prototype.exitEveryRule = function(node) {
};

function TerminalNodeImpl(symbol) {
	TerminalNode.call(this);
	this.parentCtx = null;
	this.symbol = symbol;
	return this;
}

TerminalNodeImpl.prototype = Object.create(TerminalNode.prototype);
TerminalNodeImpl.prototype.constructor = TerminalNodeImpl;

TerminalNodeImpl.prototype.getChild = function(i) {
	return null;
};

TerminalNodeImpl.prototype.getSymbol = function() {
	return this.symbol;
};

TerminalNodeImpl.prototype.getParent = function() {
	return this.parentCtx;
};

TerminalNodeImpl.prototype.getPayload = function() {
	return this.symbol;
};

TerminalNodeImpl.prototype.getSourceInterval = function() {
	if (this.symbol === null) {
		return INVALID_INTERVAL;
	}
	var tokenIndex = this.symbol.tokenIndex;
	return new Interval(tokenIndex, tokenIndex);
};

TerminalNodeImpl.prototype.getChildCount = function() {
	return 0;
};

TerminalNodeImpl.prototype.accept = function(visitor) {
	return visitor.visitTerminal(this);
};

TerminalNodeImpl.prototype.getText = function() {
	return this.symbol.text;
};

TerminalNodeImpl.prototype.toString = function() {
	if (this.symbol.type === Token.EOF) {
		return "<EOF>";
	} else {
		return this.symbol.text;
	}
};

// Represents a token that was consumed during resynchronization
// rather than during a valid match operation. For example,
// we will create this kind of a node during single token insertion
// and deletion as well as during "consume until error recovery set"
// upon no viable alternative exceptions.

function ErrorNodeImpl(token) {
	TerminalNodeImpl.call(this, token);
	return this;
}

ErrorNodeImpl.prototype = Object.create(TerminalNodeImpl.prototype);
ErrorNodeImpl.prototype.constructor = ErrorNodeImpl;

ErrorNodeImpl.prototype.isErrorNode = function() {
	return true;
};

ErrorNodeImpl.prototype.accept = function(visitor) {
	return visitor.visitErrorNode(this);
};

function ParseTreeWalker() {
	return this;
}

ParseTreeWalker.prototype.walk = function(listener, t) {
	var errorNode = t instanceof ErrorNode ||
			(t.isErrorNode !== undefined && t.isErrorNode());
	if (errorNode) {
		listener.visitErrorNode(t);
	} else if (t instanceof TerminalNode) {
		listener.visitTerminal(t);
	} else {
		this.enterRule(listener, t);
		for (var i = 0; i < t.getChildCount(); i++) {
			var child = t.getChild(i);
			this.walk(listener, child);
		}
		this.exitRule(listener, t);
	}
};
//
// The discovery of a rule node, involves sending two events: the generic
// {@link ParseTreeListener//enterEveryRule} and a
// {@link RuleContext}-specific event. First we trigger the generic and then
// the rule specific. We to them in reverse order upon finishing the node.
//
ParseTreeWalker.prototype.enterRule = function(listener, r) {
	var ctx = r.getRuleContext();
	listener.enterEveryRule(ctx);
	ctx.enterRule(listener);
};

ParseTreeWalker.prototype.exitRule = function(listener, r) {
	var ctx = r.getRuleContext();
	ctx.exitRule(listener);
	listener.exitEveryRule(ctx);
};

ParseTreeWalker.DEFAULT = new ParseTreeWalker();

exports.RuleNode = RuleNode;
exports.ErrorNode = ErrorNode;
exports.TerminalNode = TerminalNode;
exports.ErrorNodeImpl = ErrorNodeImpl;
exports.TerminalNodeImpl = TerminalNodeImpl;
exports.ParseTreeListener = ParseTreeListener;
exports.ParseTreeVisitor = ParseTreeVisitor;
exports.ParseTreeWalker = ParseTreeWalker;
exports.INVALID_INTERVAL = INVALID_INTERVAL;


/***/ }),
/* 6 */
/***/ (function(module, exports) {

/*!
 * Chai - flag utility
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

/**
 * ### .flag(object, key, [value])
 *
 * Get or set a flag value on an object. If a
 * value is provided it will be set, else it will
 * return the currently set value or `undefined` if
 * the value is not set.
 *
 *     utils.flag(this, 'foo', 'bar'); // setter
 *     utils.flag(this, 'foo'); // getter, returns `bar`
 *
 * @param {Object} object constructed Assertion
 * @param {String} key
 * @param {Mixed} value (optional)
 * @namespace Utils
 * @name flag
 * @api private
 */

module.exports = function flag(obj, key, value) {
  var flags = obj.__flags || (obj.__flags = Object.create(null));
  if (arguments.length === 3) {
    flags[key] = value;
  } else {
    return flags[key];
  }
};


/***/ }),
/* 7 */
/***/ (function(module, exports) {

//
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
//

// The following images show the relation of states and
// {@link ATNState//transitions} for various grammar constructs.
//
// <ul>
//
// <li>Solid edges marked with an &//0949; indicate a required
// {@link EpsilonTransition}.</li>
//
// <li>Dashed edges indicate locations where any transition derived from
// {@link Transition} might appear.</li>
//
// <li>Dashed nodes are place holders for either a sequence of linked
// {@link BasicState} states or the inclusion of a block representing a nested
// construct in one of the forms below.</li>
//
// <li>Nodes showing multiple outgoing alternatives with a {@code ...} support
// any number of alternatives (one or more). Nodes without the {@code ...} only
// support the exact number of alternatives shown in the diagram.</li>
//
// </ul>
//
// <h2>Basic Blocks</h2>
//
// <h3>Rule</h3>
//
// <embed src="images/Rule.svg" type="image/svg+xml"/>
//
// <h3>Block of 1 or more alternatives</h3>
//
// <embed src="images/Block.svg" type="image/svg+xml"/>
//
// <h2>Greedy Loops</h2>
//
// <h3>Greedy Closure: {@code (...)*}</h3>
//
// <embed src="images/ClosureGreedy.svg" type="image/svg+xml"/>
//
// <h3>Greedy Positive Closure: {@code (...)+}</h3>
//
// <embed src="images/PositiveClosureGreedy.svg" type="image/svg+xml"/>
//
// <h3>Greedy Optional: {@code (...)?}</h3>
//
// <embed src="images/OptionalGreedy.svg" type="image/svg+xml"/>
//
// <h2>Non-Greedy Loops</h2>
//
// <h3>Non-Greedy Closure: {@code (...)*?}</h3>
//
// <embed src="images/ClosureNonGreedy.svg" type="image/svg+xml"/>
//
// <h3>Non-Greedy Positive Closure: {@code (...)+?}</h3>
//
// <embed src="images/PositiveClosureNonGreedy.svg" type="image/svg+xml"/>
//
// <h3>Non-Greedy Optional: {@code (...)??}</h3>
//
// <embed src="images/OptionalNonGreedy.svg" type="image/svg+xml"/>
//

var INITIAL_NUM_TRANSITIONS = 4;

function ATNState() {
    // Which ATN are we in?
    this.atn = null;
    this.stateNumber = ATNState.INVALID_STATE_NUMBER;
    this.stateType = null;
    this.ruleIndex = 0; // at runtime, we don't have Rule objects
    this.epsilonOnlyTransitions = false;
    // Track the transitions emanating from this ATN state.
    this.transitions = [];
    // Used to cache lookahead during parsing, not used during construction
    this.nextTokenWithinRule = null;
    return this;
}

// constants for serialization
ATNState.INVALID_TYPE = 0;
ATNState.BASIC = 1;
ATNState.RULE_START = 2;
ATNState.BLOCK_START = 3;
ATNState.PLUS_BLOCK_START = 4;
ATNState.STAR_BLOCK_START = 5;
ATNState.TOKEN_START = 6;
ATNState.RULE_STOP = 7;
ATNState.BLOCK_END = 8;
ATNState.STAR_LOOP_BACK = 9;
ATNState.STAR_LOOP_ENTRY = 10;
ATNState.PLUS_LOOP_BACK = 11;
ATNState.LOOP_END = 12;

ATNState.serializationNames = [
            "INVALID",
            "BASIC",
            "RULE_START",
            "BLOCK_START",
            "PLUS_BLOCK_START",
            "STAR_BLOCK_START",
            "TOKEN_START",
            "RULE_STOP",
            "BLOCK_END",
            "STAR_LOOP_BACK",
            "STAR_LOOP_ENTRY",
            "PLUS_LOOP_BACK",
            "LOOP_END" ];

ATNState.INVALID_STATE_NUMBER = -1;

ATNState.prototype.toString = function() {
	return this.stateNumber;
};

ATNState.prototype.equals = function(other) {
    if (other instanceof ATNState) {
        return this.stateNumber===other.stateNumber;
    } else {
        return false;
    }
};

ATNState.prototype.isNonGreedyExitState = function() {
    return false;
};


ATNState.prototype.addTransition = function(trans, index) {
	if(index===undefined) {
		index = -1;
	}
    if (this.transitions.length===0) {
        this.epsilonOnlyTransitions = trans.isEpsilon;
    } else if(this.epsilonOnlyTransitions !== trans.isEpsilon) {
        this.epsilonOnlyTransitions = false;
    }
    if (index===-1) {
        this.transitions.push(trans);
    } else {
        this.transitions.splice(index, 1, trans);
    }
};

function BasicState() {
	ATNState.call(this);
    this.stateType = ATNState.BASIC;
    return this;
}

BasicState.prototype = Object.create(ATNState.prototype);
BasicState.prototype.constructor = BasicState;


function DecisionState() {
	ATNState.call(this);
    this.decision = -1;
    this.nonGreedy = false;
    return this;
}

DecisionState.prototype = Object.create(ATNState.prototype);
DecisionState.prototype.constructor = DecisionState;


//  The start of a regular {@code (...)} block.
function BlockStartState() {
	DecisionState.call(this);
	this.endState = null;
	return this;
}

BlockStartState.prototype = Object.create(DecisionState.prototype);
BlockStartState.prototype.constructor = BlockStartState;


function BasicBlockStartState() {
	BlockStartState.call(this);
	this.stateType = ATNState.BLOCK_START;
	return this;
}

BasicBlockStartState.prototype = Object.create(BlockStartState.prototype);
BasicBlockStartState.prototype.constructor = BasicBlockStartState;


// Terminal node of a simple {@code (a|b|c)} block.
function BlockEndState() {
	ATNState.call(this);
	this.stateType = ATNState.BLOCK_END;
    this.startState = null;
    return this;
}

BlockEndState.prototype = Object.create(ATNState.prototype);
BlockEndState.prototype.constructor = BlockEndState;


// The last node in the ATN for a rule, unless that rule is the start symbol.
//  In that case, there is one transition to EOF. Later, we might encode
//  references to all calls to this rule to compute FOLLOW sets for
//  error handling.
//
function RuleStopState() {
	ATNState.call(this);
    this.stateType = ATNState.RULE_STOP;
    return this;
}

RuleStopState.prototype = Object.create(ATNState.prototype);
RuleStopState.prototype.constructor = RuleStopState;

function RuleStartState() {
	ATNState.call(this);
	this.stateType = ATNState.RULE_START;
	this.stopState = null;
	this.isPrecedenceRule = false;
	return this;
}

RuleStartState.prototype = Object.create(ATNState.prototype);
RuleStartState.prototype.constructor = RuleStartState;

// Decision state for {@code A+} and {@code (A|B)+}.  It has two transitions:
//  one to the loop back to start of the block and one to exit.
//
function PlusLoopbackState() {
	DecisionState.call(this);
	this.stateType = ATNState.PLUS_LOOP_BACK;
	return this;
}

PlusLoopbackState.prototype = Object.create(DecisionState.prototype);
PlusLoopbackState.prototype.constructor = PlusLoopbackState;


// Start of {@code (A|B|...)+} loop. Technically a decision state, but
//  we don't use for code generation; somebody might need it, so I'm defining
//  it for completeness. In reality, the {@link PlusLoopbackState} node is the
//  real decision-making note for {@code A+}.
//
function PlusBlockStartState() {
	BlockStartState.call(this);
	this.stateType = ATNState.PLUS_BLOCK_START;
    this.loopBackState = null;
    return this;
}

PlusBlockStartState.prototype = Object.create(BlockStartState.prototype);
PlusBlockStartState.prototype.constructor = PlusBlockStartState;

// The block that begins a closure loop.
function StarBlockStartState() {
	BlockStartState.call(this);
	this.stateType = ATNState.STAR_BLOCK_START;
	return this;
}

StarBlockStartState.prototype = Object.create(BlockStartState.prototype);
StarBlockStartState.prototype.constructor = StarBlockStartState;


function StarLoopbackState() {
	ATNState.call(this);
	this.stateType = ATNState.STAR_LOOP_BACK;
	return this;
}

StarLoopbackState.prototype = Object.create(ATNState.prototype);
StarLoopbackState.prototype.constructor = StarLoopbackState;


function StarLoopEntryState() {
	DecisionState.call(this);
	this.stateType = ATNState.STAR_LOOP_ENTRY;
    this.loopBackState = null;
    // Indicates whether this state can benefit from a precedence DFA during SLL decision making.
    this.isPrecedenceDecision = null;
    return this;
}

StarLoopEntryState.prototype = Object.create(DecisionState.prototype);
StarLoopEntryState.prototype.constructor = StarLoopEntryState;


// Mark the end of a * or + loop.
function LoopEndState() {
	ATNState.call(this);
	this.stateType = ATNState.LOOP_END;
	this.loopBackState = null;
	return this;
}

LoopEndState.prototype = Object.create(ATNState.prototype);
LoopEndState.prototype.constructor = LoopEndState;


// The Tokens rule start state linking to each lexer rule start state */
function TokensStartState() {
	DecisionState.call(this);
	this.stateType = ATNState.TOKEN_START;
	return this;
}

TokensStartState.prototype = Object.create(DecisionState.prototype);
TokensStartState.prototype.constructor = TokensStartState;

exports.ATNState = ATNState;
exports.BasicState = BasicState;
exports.DecisionState = DecisionState;
exports.BlockStartState = BlockStartState;
exports.BlockEndState = BlockEndState;
exports.LoopEndState = LoopEndState;
exports.RuleStartState = RuleStartState;
exports.RuleStopState = RuleStopState;
exports.TokensStartState = TokensStartState;
exports.PlusLoopbackState = PlusLoopbackState;
exports.StarLoopbackState = StarLoopbackState;
exports.StarLoopEntryState = StarLoopEntryState;
exports.PlusBlockStartState = PlusBlockStartState;
exports.StarBlockStartState = StarBlockStartState;
exports.BasicBlockStartState = BasicBlockStartState;


/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

// The root of the ANTLR exception hierarchy. In general, ANTLR tracks just
//  3 kinds of errors: prediction errors, failed predicate errors, and
//  mismatched input errors. In each case, the parser knows where it is
//  in the input, where it is in the ATN, the rule invocation stack,
//  and what kind of problem occurred.

var PredicateTransition = __webpack_require__(11).PredicateTransition;

function RecognitionException(params) {
	Error.call(this);
	if (!!Error.captureStackTrace) {
        Error.captureStackTrace(this, RecognitionException);
	} else {
		var stack = new Error().stack;
	}
	this.message = params.message;
    this.recognizer = params.recognizer;
    this.input = params.input;
    this.ctx = params.ctx;
    // The current {@link Token} when an error occurred. Since not all streams
    // support accessing symbols by index, we have to track the {@link Token}
    // instance itself.
    this.offendingToken = null;
    // Get the ATN state number the parser was in at the time the error
    // occurred. For {@link NoViableAltException} and
    // {@link LexerNoViableAltException} exceptions, this is the
    // {@link DecisionState} number. For others, it is the state whose outgoing
    // edge we couldn't match.
    this.offendingState = -1;
    if (this.recognizer!==null) {
        this.offendingState = this.recognizer.state;
    }
    return this;
}

RecognitionException.prototype = Object.create(Error.prototype);
RecognitionException.prototype.constructor = RecognitionException;

// <p>If the state number is not known, this method returns -1.</p>

//
// Gets the set of input symbols which could potentially follow the
// previously matched symbol at the time this exception was thrown.
//
// <p>If the set of expected tokens is not known and could not be computed,
// this method returns {@code null}.</p>
//
// @return The set of token types that could potentially follow the current
// state in the ATN, or {@code null} if the information is not available.
// /
RecognitionException.prototype.getExpectedTokens = function() {
    if (this.recognizer!==null) {
        return this.recognizer.atn.getExpectedTokens(this.offendingState, this.ctx);
    } else {
        return null;
    }
};

RecognitionException.prototype.toString = function() {
    return this.message;
};

function LexerNoViableAltException(lexer, input, startIndex, deadEndConfigs) {
	RecognitionException.call(this, {message:"", recognizer:lexer, input:input, ctx:null});
    this.startIndex = startIndex;
    this.deadEndConfigs = deadEndConfigs;
    return this;
}

LexerNoViableAltException.prototype = Object.create(RecognitionException.prototype);
LexerNoViableAltException.prototype.constructor = LexerNoViableAltException;

LexerNoViableAltException.prototype.toString = function() {
    var symbol = "";
    if (this.startIndex >= 0 && this.startIndex < this.input.size) {
        symbol = this.input.getText((this.startIndex,this.startIndex));
    }
    return "LexerNoViableAltException" + symbol;
};

// Indicates that the parser could not decide which of two or more paths
// to take based upon the remaining input. It tracks the starting token
// of the offending input and also knows where the parser was
// in the various paths when the error. Reported by reportNoViableAlternative()
//
function NoViableAltException(recognizer, input, startToken, offendingToken, deadEndConfigs, ctx) {
	ctx = ctx || recognizer._ctx;
	offendingToken = offendingToken || recognizer.getCurrentToken();
	startToken = startToken || recognizer.getCurrentToken();
	input = input || recognizer.getInputStream();
	RecognitionException.call(this, {message:"", recognizer:recognizer, input:input, ctx:ctx});
    // Which configurations did we try at input.index() that couldn't match
	// input.LT(1)?//
    this.deadEndConfigs = deadEndConfigs;
    // The token object at the start index; the input stream might
    // not be buffering tokens so get a reference to it. (At the
    // time the error occurred, of course the stream needs to keep a
    // buffer all of the tokens but later we might not have access to those.)
    this.startToken = startToken;
    this.offendingToken = offendingToken;
}

NoViableAltException.prototype = Object.create(RecognitionException.prototype);
NoViableAltException.prototype.constructor = NoViableAltException;

// This signifies any kind of mismatched input exceptions such as
// when the current input does not match the expected token.
//
function InputMismatchException(recognizer) {
	RecognitionException.call(this, {message:"", recognizer:recognizer, input:recognizer.getInputStream(), ctx:recognizer._ctx});
    this.offendingToken = recognizer.getCurrentToken();
}

InputMismatchException.prototype = Object.create(RecognitionException.prototype);
InputMismatchException.prototype.constructor = InputMismatchException;

// A semantic predicate failed during validation. Validation of predicates
// occurs when normally parsing the alternative just like matching a token.
// Disambiguating predicate evaluation occurs when we test a predicate during
// prediction.

function FailedPredicateException(recognizer, predicate, message) {
	RecognitionException.call(this, {message:this.formatMessage(predicate,message || null), recognizer:recognizer,
                         input:recognizer.getInputStream(), ctx:recognizer._ctx});
    var s = recognizer._interp.atn.states[recognizer.state];
    var trans = s.transitions[0];
    if (trans instanceof PredicateTransition) {
        this.ruleIndex = trans.ruleIndex;
        this.predicateIndex = trans.predIndex;
    } else {
        this.ruleIndex = 0;
        this.predicateIndex = 0;
    }
    this.predicate = predicate;
    this.offendingToken = recognizer.getCurrentToken();
    return this;
}

FailedPredicateException.prototype = Object.create(RecognitionException.prototype);
FailedPredicateException.prototype.constructor = FailedPredicateException;

FailedPredicateException.prototype.formatMessage = function(predicate, message) {
    if (message !==null) {
        return message;
    } else {
        return "failed predicate: {" + predicate + "}?";
    }
};

function ParseCancellationException() {
	Error.call(this);
	Error.captureStackTrace(this, ParseCancellationException);
	return this;
}

ParseCancellationException.prototype = Object.create(Error.prototype);
ParseCancellationException.prototype.constructor = ParseCancellationException;

exports.RecognitionException = RecognitionException;
exports.NoViableAltException = NoViableAltException;
exports.LexerNoViableAltException = LexerNoViableAltException;
exports.InputMismatchException = InputMismatchException;
exports.FailedPredicateException = FailedPredicateException;
exports.ParseCancellationException = ParseCancellationException;


/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

//
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
///

var RuleContext = __webpack_require__(20).RuleContext;
var Hash = __webpack_require__(1).Hash;

function PredictionContext(cachedHashCode) {
	this.cachedHashCode = cachedHashCode;
}

// Represents {@code $} in local context prediction, which means wildcard.
// {@code//+x =//}.
// /
PredictionContext.EMPTY = null;

// Represents {@code $} in an array in full context mode, when {@code $}
// doesn't mean wildcard: {@code $ + x = [$,x]}. Here,
// {@code $} = {@link //EMPTY_RETURN_STATE}.
// /
PredictionContext.EMPTY_RETURN_STATE = 0x7FFFFFFF;

PredictionContext.globalNodeCount = 1;
PredictionContext.id = PredictionContext.globalNodeCount;

// Stores the computed hash code of this {@link PredictionContext}. The hash
// code is computed in parts to match the following reference algorithm.
//
// <pre>
// private int referenceHashCode() {
// int hash = {@link MurmurHash//initialize MurmurHash.initialize}({@link
// //INITIAL_HASH});
//
// for (int i = 0; i &lt; {@link //size()}; i++) {
// hash = {@link MurmurHash//update MurmurHash.update}(hash, {@link //getParent
// getParent}(i));
// }
//
// for (int i = 0; i &lt; {@link //size()}; i++) {
// hash = {@link MurmurHash//update MurmurHash.update}(hash, {@link
// //getReturnState getReturnState}(i));
// }
//
// hash = {@link MurmurHash//finish MurmurHash.finish}(hash, 2// {@link
// //size()});
// return hash;
// }
// </pre>
// /

// This means only the {@link //EMPTY} context is in set.
PredictionContext.prototype.isEmpty = function() {
	return this === PredictionContext.EMPTY;
};

PredictionContext.prototype.hasEmptyPath = function() {
	return this.getReturnState(this.length - 1) === PredictionContext.EMPTY_RETURN_STATE;
};

PredictionContext.prototype.hashCode = function() {
	return this.cachedHashCode;
};


PredictionContext.prototype.updateHashCode = function(hash) {
    hash.update(this.cachedHashCode);
};
/*
function calculateHashString(parent, returnState) {
	return "" + parent + returnState;
}
*/

// Used to cache {@link PredictionContext} objects. Its used for the shared
// context cash associated with contexts in DFA states. This cache
// can be used for both lexers and parsers.

function PredictionContextCache() {
	this.cache = {};
	return this;
}

// Add a context to the cache and return it. If the context already exists,
// return that one instead and do not add a new context to the cache.
// Protect shared cache from unsafe thread access.
//
PredictionContextCache.prototype.add = function(ctx) {
	if (ctx === PredictionContext.EMPTY) {
		return PredictionContext.EMPTY;
	}
	var existing = this.cache[ctx] || null;
	if (existing !== null) {
		return existing;
	}
	this.cache[ctx] = ctx;
	return ctx;
};

PredictionContextCache.prototype.get = function(ctx) {
	return this.cache[ctx] || null;
};

Object.defineProperty(PredictionContextCache.prototype, "length", {
	get : function() {
		return this.cache.length;
	}
});

function SingletonPredictionContext(parent, returnState) {
	var hashCode = 0;
	if(parent !== null) {
		var hash = new Hash();
		hash.update(parent, returnState);
        hashCode = hash.finish();
	}
	PredictionContext.call(this, hashCode);
	this.parentCtx = parent;
	this.returnState = returnState;
}

SingletonPredictionContext.prototype = Object.create(PredictionContext.prototype);
SingletonPredictionContext.prototype.contructor = SingletonPredictionContext;

SingletonPredictionContext.create = function(parent, returnState) {
	if (returnState === PredictionContext.EMPTY_RETURN_STATE && parent === null) {
		// someone can pass in the bits of an array ctx that mean $
		return PredictionContext.EMPTY;
	} else {
		return new SingletonPredictionContext(parent, returnState);
	}
};

Object.defineProperty(SingletonPredictionContext.prototype, "length", {
	get : function() {
		return 1;
	}
});

SingletonPredictionContext.prototype.getParent = function(index) {
	return this.parentCtx;
};

SingletonPredictionContext.prototype.getReturnState = function(index) {
	return this.returnState;
};

SingletonPredictionContext.prototype.equals = function(other) {
	if (this === other) {
		return true;
	} else if (!(other instanceof SingletonPredictionContext)) {
		return false;
	} else if (this.hashCode() !== other.hashCode()) {
		return false; // can't be same if hash is different
	} else {
		if(this.returnState !== other.returnState)
            return false;
        else if(this.parentCtx==null)
            return other.parentCtx==null
		else
            return this.parentCtx.equals(other.parentCtx);
	}
};

SingletonPredictionContext.prototype.toString = function() {
	var up = this.parentCtx === null ? "" : this.parentCtx.toString();
	if (up.length === 0) {
		if (this.returnState === PredictionContext.EMPTY_RETURN_STATE) {
			return "$";
		} else {
			return "" + this.returnState;
		}
	} else {
		return "" + this.returnState + " " + up;
	}
};

function EmptyPredictionContext() {
	SingletonPredictionContext.call(this, null, PredictionContext.EMPTY_RETURN_STATE);
	return this;
}

EmptyPredictionContext.prototype = Object.create(SingletonPredictionContext.prototype);
EmptyPredictionContext.prototype.constructor = EmptyPredictionContext;

EmptyPredictionContext.prototype.isEmpty = function() {
	return true;
};

EmptyPredictionContext.prototype.getParent = function(index) {
	return null;
};

EmptyPredictionContext.prototype.getReturnState = function(index) {
	return this.returnState;
};

EmptyPredictionContext.prototype.equals = function(other) {
	return this === other;
};

EmptyPredictionContext.prototype.toString = function() {
	return "$";
};

PredictionContext.EMPTY = new EmptyPredictionContext();

function ArrayPredictionContext(parents, returnStates) {
	// Parent can be null only if full ctx mode and we make an array
	// from {@link //EMPTY} and non-empty. We merge {@link //EMPTY} by using
	// null parent and
	// returnState == {@link //EMPTY_RETURN_STATE}.
	var h = new Hash();
	h.update(parents, returnStates);
	var hashCode = h.finish();
	PredictionContext.call(this, hashCode);
	this.parents = parents;
	this.returnStates = returnStates;
	return this;
}

ArrayPredictionContext.prototype = Object.create(PredictionContext.prototype);
ArrayPredictionContext.prototype.constructor = ArrayPredictionContext;

ArrayPredictionContext.prototype.isEmpty = function() {
	// since EMPTY_RETURN_STATE can only appear in the last position, we
	// don't need to verify that size==1
	return this.returnStates[0] === PredictionContext.EMPTY_RETURN_STATE;
};

Object.defineProperty(ArrayPredictionContext.prototype, "length", {
	get : function() {
		return this.returnStates.length;
	}
});

ArrayPredictionContext.prototype.getParent = function(index) {
	return this.parents[index];
};

ArrayPredictionContext.prototype.getReturnState = function(index) {
	return this.returnStates[index];
};

ArrayPredictionContext.prototype.equals = function(other) {
	if (this === other) {
		return true;
	} else if (!(other instanceof ArrayPredictionContext)) {
		return false;
	} else if (this.hashCode() !== other.hashCode()) {
		return false; // can't be same if hash is different
	} else {
		return this.returnStates === other.returnStates &&
				this.parents === other.parents;
	}
};

ArrayPredictionContext.prototype.toString = function() {
	if (this.isEmpty()) {
		return "[]";
	} else {
		var s = "[";
		for (var i = 0; i < this.returnStates.length; i++) {
			if (i > 0) {
				s = s + ", ";
			}
			if (this.returnStates[i] === PredictionContext.EMPTY_RETURN_STATE) {
				s = s + "$";
				continue;
			}
			s = s + this.returnStates[i];
			if (this.parents[i] !== null) {
				s = s + " " + this.parents[i];
			} else {
				s = s + "null";
			}
		}
		return s + "]";
	}
};

// Convert a {@link RuleContext} tree to a {@link PredictionContext} graph.
// Return {@link //EMPTY} if {@code outerContext} is empty or null.
// /
function predictionContextFromRuleContext(atn, outerContext) {
	if (outerContext === undefined || outerContext === null) {
		outerContext = RuleContext.EMPTY;
	}
	// if we are in RuleContext of start rule, s, then PredictionContext
	// is EMPTY. Nobody called us. (if we are empty, return empty)
	if (outerContext.parentCtx === null || outerContext === RuleContext.EMPTY) {
		return PredictionContext.EMPTY;
	}
	// If we have a parent, convert it to a PredictionContext graph
	var parent = predictionContextFromRuleContext(atn, outerContext.parentCtx);
	var state = atn.states[outerContext.invokingState];
	var transition = state.transitions[0];
	return SingletonPredictionContext.create(parent, transition.followState.stateNumber);
}
/*
function calculateListsHashString(parents, returnStates) {
	var s = "";
	parents.map(function(p) {
		s = s + p;
	});
	returnStates.map(function(r) {
		s = s + r;
	});
	return s;
}
*/
function merge(a, b, rootIsWildcard, mergeCache) {
	// share same graph if both same
	if (a === b) {
		return a;
	}
	if (a instanceof SingletonPredictionContext && b instanceof SingletonPredictionContext) {
		return mergeSingletons(a, b, rootIsWildcard, mergeCache);
	}
	// At least one of a or b is array
	// If one is $ and rootIsWildcard, return $ as// wildcard
	if (rootIsWildcard) {
		if (a instanceof EmptyPredictionContext) {
			return a;
		}
		if (b instanceof EmptyPredictionContext) {
			return b;
		}
	}
	// convert singleton so both are arrays to normalize
	if (a instanceof SingletonPredictionContext) {
		a = new ArrayPredictionContext([a.getParent()], [a.returnState]);
	}
	if (b instanceof SingletonPredictionContext) {
		b = new ArrayPredictionContext([b.getParent()], [b.returnState]);
	}
	return mergeArrays(a, b, rootIsWildcard, mergeCache);
}

//
// Merge two {@link SingletonPredictionContext} instances.
//
// <p>Stack tops equal, parents merge is same; return left graph.<br>
// <embed src="images/SingletonMerge_SameRootSamePar.svg"
// type="image/svg+xml"/></p>
//
// <p>Same stack top, parents differ; merge parents giving array node, then
// remainders of those graphs. A new root node is created to point to the
// merged parents.<br>
// <embed src="images/SingletonMerge_SameRootDiffPar.svg"
// type="image/svg+xml"/></p>
//
// <p>Different stack tops pointing to same parent. Make array node for the
// root where both element in the root point to the same (original)
// parent.<br>
// <embed src="images/SingletonMerge_DiffRootSamePar.svg"
// type="image/svg+xml"/></p>
//
// <p>Different stack tops pointing to different parents. Make array node for
// the root where each element points to the corresponding original
// parent.<br>
// <embed src="images/SingletonMerge_DiffRootDiffPar.svg"
// type="image/svg+xml"/></p>
//
// @param a the first {@link SingletonPredictionContext}
// @param b the second {@link SingletonPredictionContext}
// @param rootIsWildcard {@code true} if this is a local-context merge,
// otherwise false to indicate a full-context merge
// @param mergeCache
// /
function mergeSingletons(a, b, rootIsWildcard, mergeCache) {
	if (mergeCache !== null) {
		var previous = mergeCache.get(a, b);
		if (previous !== null) {
			return previous;
		}
		previous = mergeCache.get(b, a);
		if (previous !== null) {
			return previous;
		}
	}

	var rootMerge = mergeRoot(a, b, rootIsWildcard);
	if (rootMerge !== null) {
		if (mergeCache !== null) {
			mergeCache.set(a, b, rootMerge);
		}
		return rootMerge;
	}
	if (a.returnState === b.returnState) {
		var parent = merge(a.parentCtx, b.parentCtx, rootIsWildcard, mergeCache);
		// if parent is same as existing a or b parent or reduced to a parent,
		// return it
		if (parent === a.parentCtx) {
			return a; // ax + bx = ax, if a=b
		}
		if (parent === b.parentCtx) {
			return b; // ax + bx = bx, if a=b
		}
		// else: ax + ay = a'[x,y]
		// merge parents x and y, giving array node with x,y then remainders
		// of those graphs. dup a, a' points at merged array
		// new joined parent so create new singleton pointing to it, a'
		var spc = SingletonPredictionContext.create(parent, a.returnState);
		if (mergeCache !== null) {
			mergeCache.set(a, b, spc);
		}
		return spc;
	} else { // a != b payloads differ
		// see if we can collapse parents due to $+x parents if local ctx
		var singleParent = null;
		if (a === b || (a.parentCtx !== null && a.parentCtx === b.parentCtx)) { // ax +
																				// bx =
																				// [a,b]x
			singleParent = a.parentCtx;
		}
		if (singleParent !== null) { // parents are same
			// sort payloads and use same parent
			var payloads = [ a.returnState, b.returnState ];
			if (a.returnState > b.returnState) {
				payloads[0] = b.returnState;
				payloads[1] = a.returnState;
			}
			var parents = [ singleParent, singleParent ];
			var apc = new ArrayPredictionContext(parents, payloads);
			if (mergeCache !== null) {
				mergeCache.set(a, b, apc);
			}
			return apc;
		}
		// parents differ and can't merge them. Just pack together
		// into array; can't merge.
		// ax + by = [ax,by]
		var payloads = [ a.returnState, b.returnState ];
		var parents = [ a.parentCtx, b.parentCtx ];
		if (a.returnState > b.returnState) { // sort by payload
			payloads[0] = b.returnState;
			payloads[1] = a.returnState;
			parents = [ b.parentCtx, a.parentCtx ];
		}
		var a_ = new ArrayPredictionContext(parents, payloads);
		if (mergeCache !== null) {
			mergeCache.set(a, b, a_);
		}
		return a_;
	}
}

//
// Handle case where at least one of {@code a} or {@code b} is
// {@link //EMPTY}. In the following diagrams, the symbol {@code $} is used
// to represent {@link //EMPTY}.
//
// <h2>Local-Context Merges</h2>
//
// <p>These local-context merge operations are used when {@code rootIsWildcard}
// is true.</p>
//
// <p>{@link //EMPTY} is superset of any graph; return {@link //EMPTY}.<br>
// <embed src="images/LocalMerge_EmptyRoot.svg" type="image/svg+xml"/></p>
//
// <p>{@link //EMPTY} and anything is {@code //EMPTY}, so merged parent is
// {@code //EMPTY}; return left graph.<br>
// <embed src="images/LocalMerge_EmptyParent.svg" type="image/svg+xml"/></p>
//
// <p>Special case of last merge if local context.<br>
// <embed src="images/LocalMerge_DiffRoots.svg" type="image/svg+xml"/></p>
//
// <h2>Full-Context Merges</h2>
//
// <p>These full-context merge operations are used when {@code rootIsWildcard}
// is false.</p>
//
// <p><embed src="images/FullMerge_EmptyRoots.svg" type="image/svg+xml"/></p>
//
// <p>Must keep all contexts; {@link //EMPTY} in array is a special value (and
// null parent).<br>
// <embed src="images/FullMerge_EmptyRoot.svg" type="image/svg+xml"/></p>
//
// <p><embed src="images/FullMerge_SameRoot.svg" type="image/svg+xml"/></p>
//
// @param a the first {@link SingletonPredictionContext}
// @param b the second {@link SingletonPredictionContext}
// @param rootIsWildcard {@code true} if this is a local-context merge,
// otherwise false to indicate a full-context merge
// /
function mergeRoot(a, b, rootIsWildcard) {
	if (rootIsWildcard) {
		if (a === PredictionContext.EMPTY) {
			return PredictionContext.EMPTY; // // + b =//
		}
		if (b === PredictionContext.EMPTY) {
			return PredictionContext.EMPTY; // a +// =//
		}
	} else {
		if (a === PredictionContext.EMPTY && b === PredictionContext.EMPTY) {
			return PredictionContext.EMPTY; // $ + $ = $
		} else if (a === PredictionContext.EMPTY) { // $ + x = [$,x]
			var payloads = [ b.returnState,
					PredictionContext.EMPTY_RETURN_STATE ];
			var parents = [ b.parentCtx, null ];
			return new ArrayPredictionContext(parents, payloads);
		} else if (b === PredictionContext.EMPTY) { // x + $ = [$,x] ($ is always first if present)
			var payloads = [ a.returnState, PredictionContext.EMPTY_RETURN_STATE ];
			var parents = [ a.parentCtx, null ];
			return new ArrayPredictionContext(parents, payloads);
		}
	}
	return null;
}

//
// Merge two {@link ArrayPredictionContext} instances.
//
// <p>Different tops, different parents.<br>
// <embed src="images/ArrayMerge_DiffTopDiffPar.svg" type="image/svg+xml"/></p>
//
// <p>Shared top, same parents.<br>
// <embed src="images/ArrayMerge_ShareTopSamePar.svg" type="image/svg+xml"/></p>
//
// <p>Shared top, different parents.<br>
// <embed src="images/ArrayMerge_ShareTopDiffPar.svg" type="image/svg+xml"/></p>
//
// <p>Shared top, all shared parents.<br>
// <embed src="images/ArrayMerge_ShareTopSharePar.svg"
// type="image/svg+xml"/></p>
//
// <p>Equal tops, merge parents and reduce top to
// {@link SingletonPredictionContext}.<br>
// <embed src="images/ArrayMerge_EqualTop.svg" type="image/svg+xml"/></p>
// /
function mergeArrays(a, b, rootIsWildcard, mergeCache) {
	if (mergeCache !== null) {
		var previous = mergeCache.get(a, b);
		if (previous !== null) {
			return previous;
		}
		previous = mergeCache.get(b, a);
		if (previous !== null) {
			return previous;
		}
	}
	// merge sorted payloads a + b => M
	var i = 0; // walks a
	var j = 0; // walks b
	var k = 0; // walks target M array

	var mergedReturnStates = [];
	var mergedParents = [];
	// walk and merge to yield mergedParents, mergedReturnStates
	while (i < a.returnStates.length && j < b.returnStates.length) {
		var a_parent = a.parents[i];
		var b_parent = b.parents[j];
		if (a.returnStates[i] === b.returnStates[j]) {
			// same payload (stack tops are equal), must yield merged singleton
			var payload = a.returnStates[i];
			// $+$ = $
			var bothDollars = payload === PredictionContext.EMPTY_RETURN_STATE &&
					a_parent === null && b_parent === null;
			var ax_ax = (a_parent !== null && b_parent !== null && a_parent === b_parent); // ax+ax
																							// ->
																							// ax
			if (bothDollars || ax_ax) {
				mergedParents[k] = a_parent; // choose left
				mergedReturnStates[k] = payload;
			} else { // ax+ay -> a'[x,y]
				var mergedParent = merge(a_parent, b_parent, rootIsWildcard, mergeCache);
				mergedParents[k] = mergedParent;
				mergedReturnStates[k] = payload;
			}
			i += 1; // hop over left one as usual
			j += 1; // but also skip one in right side since we merge
		} else if (a.returnStates[i] < b.returnStates[j]) { // copy a[i] to M
			mergedParents[k] = a_parent;
			mergedReturnStates[k] = a.returnStates[i];
			i += 1;
		} else { // b > a, copy b[j] to M
			mergedParents[k] = b_parent;
			mergedReturnStates[k] = b.returnStates[j];
			j += 1;
		}
		k += 1;
	}
	// copy over any payloads remaining in either array
	if (i < a.returnStates.length) {
		for (var p = i; p < a.returnStates.length; p++) {
			mergedParents[k] = a.parents[p];
			mergedReturnStates[k] = a.returnStates[p];
			k += 1;
		}
	} else {
		for (var p = j; p < b.returnStates.length; p++) {
			mergedParents[k] = b.parents[p];
			mergedReturnStates[k] = b.returnStates[p];
			k += 1;
		}
	}
	// trim merged if we combined a few that had same stack tops
	if (k < mergedParents.length) { // write index < last position; trim
		if (k === 1) { // for just one merged element, return singleton top
			var a_ = SingletonPredictionContext.create(mergedParents[0],
					mergedReturnStates[0]);
			if (mergeCache !== null) {
				mergeCache.set(a, b, a_);
			}
			return a_;
		}
		mergedParents = mergedParents.slice(0, k);
		mergedReturnStates = mergedReturnStates.slice(0, k);
	}

	var M = new ArrayPredictionContext(mergedParents, mergedReturnStates);

	// if we created same array as a or b, return that instead
	// TODO: track whether this is possible above during merge sort for speed
	if (M === a) {
		if (mergeCache !== null) {
			mergeCache.set(a, b, a);
		}
		return a;
	}
	if (M === b) {
		if (mergeCache !== null) {
			mergeCache.set(a, b, b);
		}
		return b;
	}
	combineCommonParents(mergedParents);

	if (mergeCache !== null) {
		mergeCache.set(a, b, M);
	}
	return M;
}

//
// Make pass over all <em>M</em> {@code parents}; merge any {@code equals()}
// ones.
// /
function combineCommonParents(parents) {
	var uniqueParents = {};

	for (var p = 0; p < parents.length; p++) {
		var parent = parents[p];
		if (!(parent in uniqueParents)) {
			uniqueParents[parent] = parent;
		}
	}
	for (var q = 0; q < parents.length; q++) {
		parents[q] = uniqueParents[parents[q]];
	}
}

function getCachedPredictionContext(context, contextCache, visited) {
	if (context.isEmpty()) {
		return context;
	}
	var existing = visited[context] || null;
	if (existing !== null) {
		return existing;
	}
	existing = contextCache.get(context);
	if (existing !== null) {
		visited[context] = existing;
		return existing;
	}
	var changed = false;
	var parents = [];
	for (var i = 0; i < parents.length; i++) {
		var parent = getCachedPredictionContext(context.getParent(i), contextCache, visited);
		if (changed || parent !== context.getParent(i)) {
			if (!changed) {
				parents = [];
				for (var j = 0; j < context.length; j++) {
					parents[j] = context.getParent(j);
				}
				changed = true;
			}
			parents[i] = parent;
		}
	}
	if (!changed) {
		contextCache.add(context);
		visited[context] = context;
		return context;
	}
	var updated = null;
	if (parents.length === 0) {
		updated = PredictionContext.EMPTY;
	} else if (parents.length === 1) {
		updated = SingletonPredictionContext.create(parents[0], context
				.getReturnState(0));
	} else {
		updated = new ArrayPredictionContext(parents, context.returnStates);
	}
	contextCache.add(updated);
	visited[updated] = updated;
	visited[context] = updated;

	return updated;
}

// ter's recursive version of Sam's getAllNodes()
function getAllContextNodes(context, nodes, visited) {
	if (nodes === null) {
		nodes = [];
		return getAllContextNodes(context, nodes, visited);
	} else if (visited === null) {
		visited = {};
		return getAllContextNodes(context, nodes, visited);
	} else {
		if (context === null || visited[context] !== null) {
			return nodes;
		}
		visited[context] = context;
		nodes.push(context);
		for (var i = 0; i < context.length; i++) {
			getAllContextNodes(context.getParent(i), nodes, visited);
		}
		return nodes;
	}
}

exports.merge = merge;
exports.PredictionContext = PredictionContext;
exports.PredictionContextCache = PredictionContextCache;
exports.SingletonPredictionContext = SingletonPredictionContext;
exports.predictionContextFromRuleContext = predictionContextFromRuleContext;
exports.getCachedPredictionContext = getCachedPredictionContext;


/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

var LL1Analyzer = __webpack_require__(114).LL1Analyzer;
var IntervalSet = __webpack_require__(4).IntervalSet;

function ATN(grammarType , maxTokenType) {

    // Used for runtime deserialization of ATNs from strings///
    // The type of the ATN.
    this.grammarType = grammarType;
    // The maximum value for any symbol recognized by a transition in the ATN.
    this.maxTokenType = maxTokenType;
    this.states = [];
    // Each subrule/rule is a decision point and we must track them so we
    //  can go back later and build DFA predictors for them.  This includes
    //  all the rules, subrules, optional blocks, ()+, ()* etc...
    this.decisionToState = [];
    // Maps from rule index to starting state number.
    this.ruleToStartState = [];
    // Maps from rule index to stop state number.
    this.ruleToStopState = null;
    this.modeNameToStartState = {};
    // For lexer ATNs, this maps the rule index to the resulting token type.
    // For parser ATNs, this maps the rule index to the generated bypass token
    // type if the
    // {@link ATNDeserializationOptions//isGenerateRuleBypassTransitions}
    // deserialization option was specified; otherwise, this is {@code null}.
    this.ruleToTokenType = null;
    // For lexer ATNs, this is an array of {@link LexerAction} objects which may
    // be referenced by action transitions in the ATN.
    this.lexerActions = null;
    this.modeToStartState = [];

    return this;
}

// Compute the set of valid tokens that can occur starting in state {@code s}.
//  If {@code ctx} is null, the set of tokens will not include what can follow
//  the rule surrounding {@code s}. In other words, the set will be
//  restricted to tokens reachable staying within {@code s}'s rule.
ATN.prototype.nextTokensInContext = function(s, ctx) {
    var anal = new LL1Analyzer(this);
    return anal.LOOK(s, null, ctx);
};

// Compute the set of valid tokens that can occur starting in {@code s} and
// staying in same rule. {@link Token//EPSILON} is in set if we reach end of
// rule.
ATN.prototype.nextTokensNoContext = function(s) {
    if (s.nextTokenWithinRule !== null ) {
        return s.nextTokenWithinRule;
    }
    s.nextTokenWithinRule = this.nextTokensInContext(s, null);
    s.nextTokenWithinRule.readOnly = true;
    return s.nextTokenWithinRule;
};

ATN.prototype.nextTokens = function(s, ctx) {
    if ( ctx===undefined ) {
        return this.nextTokensNoContext(s);
    } else {
        return this.nextTokensInContext(s, ctx);
    }
};

ATN.prototype.addState = function( state) {
    if ( state !== null ) {
        state.atn = this;
        state.stateNumber = this.states.length;
    }
    this.states.push(state);
};

ATN.prototype.removeState = function( state) {
    this.states[state.stateNumber] = null; // just free mem, don't shift states in list
};

ATN.prototype.defineDecisionState = function( s) {
    this.decisionToState.push(s);
    s.decision = this.decisionToState.length-1;
    return s.decision;
};

ATN.prototype.getDecisionState = function( decision) {
    if (this.decisionToState.length===0) {
        return null;
    } else {
        return this.decisionToState[decision];
    }
};

// Computes the set of input symbols which could follow ATN state number
// {@code stateNumber} in the specified full {@code context}. This method
// considers the complete parser context, but does not evaluate semantic
// predicates (i.e. all predicates encountered during the calculation are
// assumed true). If a path in the ATN exists from the starting state to the
// {@link RuleStopState} of the outermost context without matching any
// symbols, {@link Token//EOF} is added to the returned set.
//
// <p>If {@code context} is {@code null}, it is treated as
// {@link ParserRuleContext//EMPTY}.</p>
//
// @param stateNumber the ATN state number
// @param context the full parse context
// @return The set of potentially valid input symbols which could follow the
// specified state in the specified context.
// @throws IllegalArgumentException if the ATN does not contain a state with
// number {@code stateNumber}
var Token = __webpack_require__(2).Token;

ATN.prototype.getExpectedTokens = function( stateNumber, ctx ) {
    if ( stateNumber < 0 || stateNumber >= this.states.length ) {
        throw("Invalid state number.");
    }
    var s = this.states[stateNumber];
    var following = this.nextTokens(s);
    if (!following.contains(Token.EPSILON)) {
        return following;
    }
    var expected = new IntervalSet();
    expected.addSet(following);
    expected.removeOne(Token.EPSILON);
    while (ctx !== null && ctx.invokingState >= 0 && following.contains(Token.EPSILON)) {
        var invokingState = this.states[ctx.invokingState];
        var rt = invokingState.transitions[0];
        following = this.nextTokens(rt.followState);
        expected.addSet(following);
        expected.removeOne(Token.EPSILON);
        ctx = ctx.parentCtx;
    }
    if (following.contains(Token.EPSILON)) {
        expected.addOne(Token.EOF);
    }
    return expected;
};

ATN.INVALID_ALT_NUMBER = 0;

exports.ATN = ATN;

/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
//

//  An ATN transition between any two ATN states.  Subclasses define
//  atom, set, epsilon, action, predicate, rule transitions.
//
//  <p>This is a one way link.  It emanates from a state (usually via a list of
//  transitions) and has a target state.</p>
//
//  <p>Since we never have to change the ATN transitions once we construct it,
//  we can fix these transitions as specific classes. The DFA transitions
//  on the other hand need to update the labels as it adds transitions to
//  the states. We'll use the term Edge for the DFA to distinguish them from
//  ATN transitions.</p>

var Token = __webpack_require__(2).Token;
var Interval = __webpack_require__(4).Interval;
var IntervalSet = __webpack_require__(4).IntervalSet;
var Predicate = __webpack_require__(17).Predicate;
var PrecedencePredicate = __webpack_require__(17).PrecedencePredicate;

function Transition (target) {
    // The target of this transition.
    if (target===undefined || target===null) {
        throw "target cannot be null.";
    }
    this.target = target;
    // Are we epsilon, action, sempred?
    this.isEpsilon = false;
    this.label = null;
    return this;
}
    // constants for serialization
Transition.EPSILON = 1;
Transition.RANGE = 2;
Transition.RULE = 3;
Transition.PREDICATE = 4; // e.g., {isType(input.LT(1))}?
Transition.ATOM = 5;
Transition.ACTION = 6;
Transition.SET = 7; // ~(A|B) or ~atom, wildcard, which convert to next 2
Transition.NOT_SET = 8;
Transition.WILDCARD = 9;
Transition.PRECEDENCE = 10;

Transition.serializationNames = [
            "INVALID",
            "EPSILON",
            "RANGE",
            "RULE",
            "PREDICATE",
            "ATOM",
            "ACTION",
            "SET",
            "NOT_SET",
            "WILDCARD",
            "PRECEDENCE"
        ];

Transition.serializationTypes = {
        EpsilonTransition: Transition.EPSILON,
        RangeTransition: Transition.RANGE,
        RuleTransition: Transition.RULE,
        PredicateTransition: Transition.PREDICATE,
        AtomTransition: Transition.ATOM,
        ActionTransition: Transition.ACTION,
        SetTransition: Transition.SET,
        NotSetTransition: Transition.NOT_SET,
        WildcardTransition: Transition.WILDCARD,
        PrecedencePredicateTransition: Transition.PRECEDENCE
    };


// TODO: make all transitions sets? no, should remove set edges
function AtomTransition(target, label) {
	Transition.call(this, target);
	this.label_ = label; // The token type or character value; or, signifies special label.
    this.label = this.makeLabel();
    this.serializationType = Transition.ATOM;
    return this;
}

AtomTransition.prototype = Object.create(Transition.prototype);
AtomTransition.prototype.constructor = AtomTransition;

AtomTransition.prototype.makeLabel = function() {
	var s = new IntervalSet();
    s.addOne(this.label_);
    return s;
};

AtomTransition.prototype.matches = function( symbol, minVocabSymbol,  maxVocabSymbol) {
    return this.label_ === symbol;
};

AtomTransition.prototype.toString = function() {
	return this.label_;
};

function RuleTransition(ruleStart, ruleIndex, precedence, followState) {
	Transition.call(this, ruleStart);
    this.ruleIndex = ruleIndex; // ptr to the rule definition object for this rule ref
    this.precedence = precedence;
    this.followState = followState; // what node to begin computations following ref to rule
    this.serializationType = Transition.RULE;
    this.isEpsilon = true;
    return this;
}

RuleTransition.prototype = Object.create(Transition.prototype);
RuleTransition.prototype.constructor = RuleTransition;

RuleTransition.prototype.matches = function(symbol, minVocabSymbol,  maxVocabSymbol) {
	return false;
};


function EpsilonTransition(target, outermostPrecedenceReturn) {
	Transition.call(this, target);
    this.serializationType = Transition.EPSILON;
    this.isEpsilon = true;
    this.outermostPrecedenceReturn = outermostPrecedenceReturn;
    return this;
}

EpsilonTransition.prototype = Object.create(Transition.prototype);
EpsilonTransition.prototype.constructor = EpsilonTransition;

EpsilonTransition.prototype.matches = function( symbol, minVocabSymbol,  maxVocabSymbol) {
	return false;
};

EpsilonTransition.prototype.toString = function() {
	return "epsilon";
};

function RangeTransition(target, start, stop) {
	Transition.call(this, target);
	this.serializationType = Transition.RANGE;
    this.start = start;
    this.stop = stop;
    this.label = this.makeLabel();
    return this;
}

RangeTransition.prototype = Object.create(Transition.prototype);
RangeTransition.prototype.constructor = RangeTransition;

RangeTransition.prototype.makeLabel = function() {
    var s = new IntervalSet();
    s.addRange(this.start, this.stop);
    return s;
};

RangeTransition.prototype.matches = function(symbol, minVocabSymbol,  maxVocabSymbol) {
	return symbol >= this.start && symbol <= this.stop;
};

RangeTransition.prototype.toString = function() {
	return "'" + String.fromCharCode(this.start) + "'..'" + String.fromCharCode(this.stop) + "'";
};

function AbstractPredicateTransition(target) {
	Transition.call(this, target);
	return this;
}

AbstractPredicateTransition.prototype = Object.create(Transition.prototype);
AbstractPredicateTransition.prototype.constructor = AbstractPredicateTransition;

function PredicateTransition(target, ruleIndex, predIndex, isCtxDependent) {
	AbstractPredicateTransition.call(this, target);
    this.serializationType = Transition.PREDICATE;
    this.ruleIndex = ruleIndex;
    this.predIndex = predIndex;
    this.isCtxDependent = isCtxDependent; // e.g., $i ref in pred
    this.isEpsilon = true;
    return this;
}

PredicateTransition.prototype = Object.create(AbstractPredicateTransition.prototype);
PredicateTransition.prototype.constructor = PredicateTransition;

PredicateTransition.prototype.matches = function(symbol, minVocabSymbol,  maxVocabSymbol) {
	return false;
};

PredicateTransition.prototype.getPredicate = function() {
	return new Predicate(this.ruleIndex, this.predIndex, this.isCtxDependent);
};

PredicateTransition.prototype.toString = function() {
	return "pred_" + this.ruleIndex + ":" + this.predIndex;
};

function ActionTransition(target, ruleIndex, actionIndex, isCtxDependent) {
	Transition.call(this, target);
    this.serializationType = Transition.ACTION;
    this.ruleIndex = ruleIndex;
    this.actionIndex = actionIndex===undefined ? -1 : actionIndex;
    this.isCtxDependent = isCtxDependent===undefined ? false : isCtxDependent; // e.g., $i ref in pred
    this.isEpsilon = true;
    return this;
}

ActionTransition.prototype = Object.create(Transition.prototype);
ActionTransition.prototype.constructor = ActionTransition;


ActionTransition.prototype.matches = function(symbol, minVocabSymbol,  maxVocabSymbol) {
	return false;
};

ActionTransition.prototype.toString = function() {
	return "action_" + this.ruleIndex + ":" + this.actionIndex;
};


// A transition containing a set of values.
function SetTransition(target, set) {
	Transition.call(this, target);
	this.serializationType = Transition.SET;
    if (set !==undefined && set !==null) {
        this.label = set;
    } else {
        this.label = new IntervalSet();
        this.label.addOne(Token.INVALID_TYPE);
    }
    return this;
}

SetTransition.prototype = Object.create(Transition.prototype);
SetTransition.prototype.constructor = SetTransition;

SetTransition.prototype.matches = function(symbol, minVocabSymbol,  maxVocabSymbol) {
	return this.label.contains(symbol);
};


SetTransition.prototype.toString = function() {
	return this.label.toString();
};

function NotSetTransition(target, set) {
	SetTransition.call(this, target, set);
	this.serializationType = Transition.NOT_SET;
	return this;
}

NotSetTransition.prototype = Object.create(SetTransition.prototype);
NotSetTransition.prototype.constructor = NotSetTransition;

NotSetTransition.prototype.matches = function(symbol, minVocabSymbol,  maxVocabSymbol) {
	return symbol >= minVocabSymbol && symbol <= maxVocabSymbol &&
			!SetTransition.prototype.matches.call(this, symbol, minVocabSymbol, maxVocabSymbol);
};

NotSetTransition.prototype.toString = function() {
	return '~' + SetTransition.prototype.toString.call(this);
};

function WildcardTransition(target) {
	Transition.call(this, target);
	this.serializationType = Transition.WILDCARD;
	return this;
}

WildcardTransition.prototype = Object.create(Transition.prototype);
WildcardTransition.prototype.constructor = WildcardTransition;


WildcardTransition.prototype.matches = function(symbol, minVocabSymbol,  maxVocabSymbol) {
	return symbol >= minVocabSymbol && symbol <= maxVocabSymbol;
};

WildcardTransition.prototype.toString = function() {
	return ".";
};

function PrecedencePredicateTransition(target, precedence) {
	AbstractPredicateTransition.call(this, target);
    this.serializationType = Transition.PRECEDENCE;
    this.precedence = precedence;
    this.isEpsilon = true;
    return this;
}

PrecedencePredicateTransition.prototype = Object.create(AbstractPredicateTransition.prototype);
PrecedencePredicateTransition.prototype.constructor = PrecedencePredicateTransition;

PrecedencePredicateTransition.prototype.matches = function(symbol, minVocabSymbol,  maxVocabSymbol) {
	return false;
};

PrecedencePredicateTransition.prototype.getPredicate = function() {
	return new PrecedencePredicate(this.precedence);
};

PrecedencePredicateTransition.prototype.toString = function() {
	return this.precedence + " >= _p";
};

exports.Transition = Transition;
exports.AtomTransition = AtomTransition;
exports.SetTransition = SetTransition;
exports.NotSetTransition = NotSetTransition;
exports.RuleTransition = RuleTransition;
exports.ActionTransition = ActionTransition;
exports.EpsilonTransition = EpsilonTransition;
exports.RangeTransition = RangeTransition;
exports.WildcardTransition = WildcardTransition;
exports.PredicateTransition = PredicateTransition;
exports.PrecedencePredicateTransition = PrecedencePredicateTransition;
exports.AbstractPredicateTransition = AbstractPredicateTransition;

/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

/*!
 * chai
 * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

var used = [];

/*!
 * Chai version
 */

exports.version = '4.1.2';

/*!
 * Assertion Error
 */

exports.AssertionError = __webpack_require__(62);

/*!
 * Utils for plugins (not exported)
 */

var util = __webpack_require__(86);

/**
 * # .use(function)
 *
 * Provides a way to extend the internals of Chai.
 *
 * @param {Function}
 * @returns {this} for chaining
 * @api public
 */

exports.use = function (fn) {
  if (!~used.indexOf(fn)) {
    fn(exports, util);
    used.push(fn);
  }

  return exports;
};

/*!
 * Utility Functions
 */

exports.util = util;

/*!
 * Configuration
 */

var config = __webpack_require__(13);
exports.config = config;

/*!
 * Primary `Assertion` prototype
 */

var assertion = __webpack_require__(103);
exports.use(assertion);

/*!
 * Core Assertions
 */

var core = __webpack_require__(104);
exports.use(core);

/*!
 * Expect interface
 */

var expect = __webpack_require__(105);
exports.use(expect);

/*!
 * Should interface
 */

var should = __webpack_require__(106);
exports.use(should);

/*!
 * Assert interface
 */

var assert = __webpack_require__(107);
exports.use(assert);


/***/ }),
/* 13 */
/***/ (function(module, exports) {

module.exports = {

  /**
   * ### config.includeStack
   *
   * User configurable property, influences whether stack trace
   * is included in Assertion error message. Default of false
   * suppresses stack trace in the error message.
   *
   *     chai.config.includeStack = true;  // enable stack on error
   *
   * @param {Boolean}
   * @api public
   */

  includeStack: false,

  /**
   * ### config.showDiff
   *
   * User configurable property, influences whether or not
   * the `showDiff` flag should be included in the thrown
   * AssertionErrors. `false` will always be `false`; `true`
   * will be true when the assertion has requested a diff
   * be shown.
   *
   * @param {Boolean}
   * @api public
   */

  showDiff: true,

  /**
   * ### config.truncateThreshold
   *
   * User configurable property, sets length threshold for actual and
   * expected values in assertion errors. If this threshold is exceeded, for
   * example for large data structures, the value is replaced with something
   * like `[ Array(3) ]` or `{ Object (prop1, prop2) }`.
   *
   * Set it to zero if you want to disable truncating altogether.
   *
   * This is especially userful when doing assertions on arrays: having this
   * set to a reasonable large value makes the failure messages readily
   * inspectable.
   *
   *     chai.config.truncateThreshold = 0;  // disable truncating
   *
   * @param {Number}
   * @api public
   */

  truncateThreshold: 40,

  /**
   * ### config.useProxy
   *
   * User configurable property, defines if chai will use a Proxy to throw
   * an error when a non-existent property is read, which protects users
   * from typos when using property-based assertions.
   *
   * Set it to false if you want to disable this feature.
   *
   *     chai.config.useProxy = false;  // disable use of Proxy
   *
   * This feature is automatically disabled regardless of this config value
   * in environments that don't support proxies.
   *
   * @param {Boolean}
   * @api public
   */

  useProxy: true,

  /**
   * ### config.proxyExcludedKeys
   *
   * User configurable property, defines which properties should be ignored
   * instead of throwing an error if they do not exist on the assertion.
   * This is only applied if the environment Chai is running in supports proxies and
   * if the `useProxy` configuration setting is enabled.
   * By default, `then` and `inspect` will not throw an error if they do not exist on the
   * assertion object because the `.inspect` property is read by `util.inspect` (for example, when
   * using `console.log` on the assertion object) and `.then` is necessary for promise type-checking.
   *
   *     // By default these keys will not throw an error if they do not exist on the assertion object
   *     chai.config.proxyExcludedKeys = ['then', 'inspect'];
   *
   * @param {Array}
   * @api public
   */

  proxyExcludedKeys: ['then', 'inspect', 'toJSON']
};


/***/ }),
/* 14 */
/***/ (function(module, exports) {

/*!
 * Chai - transferFlags utility
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

/**
 * ### .transferFlags(assertion, object, includeAll = true)
 *
 * Transfer all the flags for `assertion` to `object`. If
 * `includeAll` is set to `false`, then the base Chai
 * assertion flags (namely `object`, `ssfi`, `lockSsfi`,
 * and `message`) will not be transferred.
 *
 *
 *     var newAssertion = new Assertion();
 *     utils.transferFlags(assertion, newAssertion);
 *
 *     var anotherAsseriton = new Assertion(myObj);
 *     utils.transferFlags(assertion, anotherAssertion, false);
 *
 * @param {Assertion} assertion the assertion to transfer the flags from
 * @param {Object} object the object to transfer the flags to; usually a new assertion
 * @param {Boolean} includeAll
 * @namespace Utils
 * @name transferFlags
 * @api private
 */

module.exports = function transferFlags(assertion, object, includeAll) {
  var flags = assertion.__flags || (assertion.__flags = Object.create(null));

  if (!object.__flags) {
    object.__flags = Object.create(null);
  }

  includeAll = arguments.length === 3 ? includeAll : true;

  for (var flag in flags) {
    if (includeAll ||
        (flag !== 'object' && flag !== 'ssfi' && flag !== 'lockSsfi' && flag != 'message')) {
      object.__flags[flag] = flags[flag];
    }
  }
};


/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

//
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

//
// Specialized {@link Set}{@code <}{@link ATNConfig}{@code >} that can track
// info about the set, with support for combining similar configurations using a
// graph-structured stack.
///

var ATN = __webpack_require__(10).ATN;
var Utils = __webpack_require__(1);
var Hash = Utils.Hash;
var Set = Utils.Set;
var SemanticContext = __webpack_require__(17).SemanticContext;
var merge = __webpack_require__(9).merge;

function hashATNConfig(c) {
	return c.hashCodeForConfigSet();
}

function equalATNConfigs(a, b) {
	if ( a===b ) {
		return true;
	} else if ( a===null || b===null ) {
		return false;
	} else
       return a.equalsForConfigSet(b);
 }


function ATNConfigSet(fullCtx) {
	//
	// The reason that we need this is because we don't want the hash map to use
	// the standard hash code and equals. We need all configurations with the
	// same
	// {@code (s,i,_,semctx)} to be equal. Unfortunately, this key effectively
	// doubles
	// the number of objects associated with ATNConfigs. The other solution is
	// to
	// use a hash table that lets us specify the equals/hashcode operation.
	// All configs but hashed by (s, i, _, pi) not including context. Wiped out
	// when we go readonly as this set becomes a DFA state.
	this.configLookup = new Set(hashATNConfig, equalATNConfigs);
	// Indicates that this configuration set is part of a full context
	// LL prediction. It will be used to determine how to merge $. With SLL
	// it's a wildcard whereas it is not for LL context merge.
	this.fullCtx = fullCtx === undefined ? true : fullCtx;
	// Indicates that the set of configurations is read-only. Do not
	// allow any code to manipulate the set; DFA states will point at
	// the sets and they must not change. This does not protect the other
	// fields; in particular, conflictingAlts is set after
	// we've made this readonly.
	this.readOnly = false;
	// Track the elements as they are added to the set; supports get(i)///
	this.configs = [];

	// TODO: these fields make me pretty uncomfortable but nice to pack up info
	// together, saves recomputation
	// TODO: can we track conflicts as they are added to save scanning configs
	// later?
	this.uniqueAlt = 0;
	this.conflictingAlts = null;

	// Used in parser and lexer. In lexer, it indicates we hit a pred
	// while computing a closure operation. Don't make a DFA state from this.
	this.hasSemanticContext = false;
	this.dipsIntoOuterContext = false;

	this.cachedHashCode = -1;

	return this;
}

// Adding a new config means merging contexts with existing configs for
// {@code (s, i, pi, _)}, where {@code s} is the
// {@link ATNConfig//state}, {@code i} is the {@link ATNConfig//alt}, and
// {@code pi} is the {@link ATNConfig//semanticContext}. We use
// {@code (s,i,pi)} as key.
//
// <p>This method updates {@link //dipsIntoOuterContext} and
// {@link //hasSemanticContext} when necessary.</p>
// /
ATNConfigSet.prototype.add = function(config, mergeCache) {
	if (mergeCache === undefined) {
		mergeCache = null;
	}
	if (this.readOnly) {
		throw "This set is readonly";
	}
	if (config.semanticContext !== SemanticContext.NONE) {
		this.hasSemanticContext = true;
	}
	if (config.reachesIntoOuterContext > 0) {
		this.dipsIntoOuterContext = true;
	}
	var existing = this.configLookup.add(config);
	if (existing === config) {
		this.cachedHashCode = -1;
		this.configs.push(config); // track order here
		return true;
	}
	// a previous (s,i,pi,_), merge with it and save result
	var rootIsWildcard = !this.fullCtx;
	var merged = merge(existing.context, config.context, rootIsWildcard, mergeCache);
	// no need to check for existing.context, config.context in cache
	// since only way to create new graphs is "call rule" and here. We
	// cache at both places.
	existing.reachesIntoOuterContext = Math.max( existing.reachesIntoOuterContext, config.reachesIntoOuterContext);
	// make sure to preserve the precedence filter suppression during the merge
	if (config.precedenceFilterSuppressed) {
		existing.precedenceFilterSuppressed = true;
	}
	existing.context = merged; // replace context; no need to alt mapping
	return true;
};

ATNConfigSet.prototype.getStates = function() {
	var states = new Set();
	for (var i = 0; i < this.configs.length; i++) {
		states.add(this.configs[i].state);
	}
	return states;
};

ATNConfigSet.prototype.getPredicates = function() {
	var preds = [];
	for (var i = 0; i < this.configs.length; i++) {
		var c = this.configs[i].semanticContext;
		if (c !== SemanticContext.NONE) {
			preds.push(c.semanticContext);
		}
	}
	return preds;
};

Object.defineProperty(ATNConfigSet.prototype, "items", {
	get : function() {
		return this.configs;
	}
});

ATNConfigSet.prototype.optimizeConfigs = function(interpreter) {
	if (this.readOnly) {
		throw "This set is readonly";
	}
	if (this.configLookup.length === 0) {
		return;
	}
	for (var i = 0; i < this.configs.length; i++) {
		var config = this.configs[i];
		config.context = interpreter.getCachedContext(config.context);
	}
};

ATNConfigSet.prototype.addAll = function(coll) {
	for (var i = 0; i < coll.length; i++) {
		this.add(coll[i]);
	}
	return false;
};

ATNConfigSet.prototype.equals = function(other) {
	return this === other ||
		(other instanceof ATNConfigSet &&
		Utils.equalArrays(this.configs, other.configs) &&
		this.fullCtx === other.fullCtx &&
		this.uniqueAlt === other.uniqueAlt &&
		this.conflictingAlts === other.conflictingAlts &&
		this.hasSemanticContext === other.hasSemanticContext &&
		this.dipsIntoOuterContext === other.dipsIntoOuterContext);
};

ATNConfigSet.prototype.hashCode = function() {
    var hash = new Hash();
    this.updateHashCode(hash);
    return hash.finish();
};


ATNConfigSet.prototype.updateHashCode = function(hash) {
	if (this.readOnly) {
		if (this.cachedHashCode === -1) {
            var hash = new Hash();
            hash.update(this.configs);
			this.cachedHashCode = hash.finish();
		}
        hash.update(this.cachedHashCode);
	} else {
        hash.update(this.configs);
	}
};


Object.defineProperty(ATNConfigSet.prototype, "length", {
	get : function() {
		return this.configs.length;
	}
});

ATNConfigSet.prototype.isEmpty = function() {
	return this.configs.length === 0;
};

ATNConfigSet.prototype.contains = function(item) {
	if (this.configLookup === null) {
		throw "This method is not implemented for readonly sets.";
	}
	return this.configLookup.contains(item);
};

ATNConfigSet.prototype.containsFast = function(item) {
	if (this.configLookup === null) {
		throw "This method is not implemented for readonly sets.";
	}
	return this.configLookup.containsFast(item);
};

ATNConfigSet.prototype.clear = function() {
	if (this.readOnly) {
		throw "This set is readonly";
	}
	this.configs = [];
	this.cachedHashCode = -1;
	this.configLookup = new Set();
};

ATNConfigSet.prototype.setReadonly = function(readOnly) {
	this.readOnly = readOnly;
	if (readOnly) {
		this.configLookup = null; // can't mod, no need for lookup cache
	}
};

ATNConfigSet.prototype.toString = function() {
	return Utils.arrayToString(this.configs) +
		(this.hasSemanticContext ? ",hasSemanticContext=" + this.hasSemanticContext : "") +
		(this.uniqueAlt !== ATN.INVALID_ALT_NUMBER ? ",uniqueAlt=" + this.uniqueAlt : "") +
		(this.conflictingAlts !== null ? ",conflictingAlts=" + this.conflictingAlts : "") +
		(this.dipsIntoOuterContext ? ",dipsIntoOuterContext" : "");
};

function OrderedATNConfigSet() {
	ATNConfigSet.call(this);
	this.configLookup = new Set();
	return this;
}

OrderedATNConfigSet.prototype = Object.create(ATNConfigSet.prototype);
OrderedATNConfigSet.prototype.constructor = OrderedATNConfigSet;

exports.ATNConfigSet = ATNConfigSet;
exports.OrderedATNConfigSet = OrderedATNConfigSet;


/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
exports.atn = __webpack_require__(113);
exports.codepointat = __webpack_require__(77);
exports.dfa = __webpack_require__(120);
exports.fromcodepoint = __webpack_require__(78);
exports.tree = __webpack_require__(122);
exports.error = __webpack_require__(123);
exports.Token = __webpack_require__(2).Token;
exports.CharStreams = __webpack_require__(125).CharStreams;
exports.CommonToken = __webpack_require__(2).CommonToken;
exports.InputStream = __webpack_require__(49).InputStream;
exports.FileStream = __webpack_require__(126).FileStream;
exports.CommonTokenStream = __webpack_require__(127).CommonTokenStream;
exports.Lexer = __webpack_require__(31).Lexer;
exports.Parser = __webpack_require__(129).Parser;
var pc = __webpack_require__(9);
exports.PredictionContextCache = pc.PredictionContextCache;
exports.ParserRuleContext = __webpack_require__(48).ParserRuleContext;
exports.Interval = __webpack_require__(4).Interval;
exports.Utils = __webpack_require__(1);


/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

//
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
//

// A tree structure used to record the semantic context in which
//  an ATN configuration is valid.  It's either a single predicate,
//  a conjunction {@code p1&&p2}, or a sum of products {@code p1||p2}.
//
//  <p>I have scoped the {@link AND}, {@link OR}, and {@link Predicate} subclasses of
//  {@link SemanticContext} within the scope of this outer class.</p>
//

var Set = __webpack_require__(1).Set;
var Hash = __webpack_require__(1).Hash;

function SemanticContext() {
	return this;
}

SemanticContext.prototype.hashCode = function() {
    var hash = new Hash();
    this.updateHashCode(hash);
    return hash.finish();
};

// For context independent predicates, we evaluate them without a local
// context (i.e., null context). That way, we can evaluate them without
// having to create proper rule-specific context during prediction (as
// opposed to the parser, which creates them naturally). In a practical
// sense, this avoids a cast exception from RuleContext to myruleContext.
//
// <p>For context dependent predicates, we must pass in a local context so that
// references such as $arg evaluate properly as _localctx.arg. We only
// capture context dependent predicates in the context in which we begin
// prediction, so we passed in the outer context here in case of context
// dependent predicate evaluation.</p>
//
SemanticContext.prototype.evaluate = function(parser, outerContext) {
};

//
// Evaluate the precedence predicates for the context and reduce the result.
//
// @param parser The parser instance.
// @param outerContext The current parser context object.
// @return The simplified semantic context after precedence predicates are
// evaluated, which will be one of the following values.
// <ul>
// <li>{@link //NONE}: if the predicate simplifies to {@code true} after
// precedence predicates are evaluated.</li>
// <li>{@code null}: if the predicate simplifies to {@code false} after
// precedence predicates are evaluated.</li>
// <li>{@code this}: if the semantic context is not changed as a result of
// precedence predicate evaluation.</li>
// <li>A non-{@code null} {@link SemanticContext}: the new simplified
// semantic context after precedence predicates are evaluated.</li>
// </ul>
//
SemanticContext.prototype.evalPrecedence = function(parser, outerContext) {
	return this;
};

SemanticContext.andContext = function(a, b) {
	if (a === null || a === SemanticContext.NONE) {
		return b;
	}
	if (b === null || b === SemanticContext.NONE) {
		return a;
	}
	var result = new AND(a, b);
	if (result.opnds.length === 1) {
		return result.opnds[0];
	} else {
		return result;
	}
};

SemanticContext.orContext = function(a, b) {
	if (a === null) {
		return b;
	}
	if (b === null) {
		return a;
	}
	if (a === SemanticContext.NONE || b === SemanticContext.NONE) {
		return SemanticContext.NONE;
	}
	var result = new OR(a, b);
	if (result.opnds.length === 1) {
		return result.opnds[0];
	} else {
		return result;
	}
};

function Predicate(ruleIndex, predIndex, isCtxDependent) {
	SemanticContext.call(this);
	this.ruleIndex = ruleIndex === undefined ? -1 : ruleIndex;
	this.predIndex = predIndex === undefined ? -1 : predIndex;
	this.isCtxDependent = isCtxDependent === undefined ? false : isCtxDependent; // e.g., $i ref in pred
	return this;
}

Predicate.prototype = Object.create(SemanticContext.prototype);
Predicate.prototype.constructor = Predicate;

//The default {@link SemanticContext}, which is semantically equivalent to
//a predicate of the form {@code {true}?}.
//
SemanticContext.NONE = new Predicate();


Predicate.prototype.evaluate = function(parser, outerContext) {
	var localctx = this.isCtxDependent ? outerContext : null;
	return parser.sempred(localctx, this.ruleIndex, this.predIndex);
};

Predicate.prototype.updateHashCode = function(hash) {
	hash.update(this.ruleIndex, this.predIndex, this.isCtxDependent);
};

Predicate.prototype.equals = function(other) {
	if (this === other) {
		return true;
	} else if (!(other instanceof Predicate)) {
		return false;
	} else {
		return this.ruleIndex === other.ruleIndex &&
				this.predIndex === other.predIndex &&
				this.isCtxDependent === other.isCtxDependent;
	}
};

Predicate.prototype.toString = function() {
	return "{" + this.ruleIndex + ":" + this.predIndex + "}?";
};

function PrecedencePredicate(precedence) {
	SemanticContext.call(this);
	this.precedence = precedence === undefined ? 0 : precedence;
}

PrecedencePredicate.prototype = Object.create(SemanticContext.prototype);
PrecedencePredicate.prototype.constructor = PrecedencePredicate;

PrecedencePredicate.prototype.evaluate = function(parser, outerContext) {
	return parser.precpred(outerContext, this.precedence);
};

PrecedencePredicate.prototype.evalPrecedence = function(parser, outerContext) {
	if (parser.precpred(outerContext, this.precedence)) {
		return SemanticContext.NONE;
	} else {
		return null;
	}
};

PrecedencePredicate.prototype.compareTo = function(other) {
	return this.precedence - other.precedence;
};

PrecedencePredicate.prototype.updateHashCode = function(hash) {
    hash.update(31);
};

PrecedencePredicate.prototype.equals = function(other) {
	if (this === other) {
		return true;
	} else if (!(other instanceof PrecedencePredicate)) {
		return false;
	} else {
		return this.precedence === other.precedence;
	}
};

PrecedencePredicate.prototype.toString = function() {
	return "{"+this.precedence+">=prec}?";
};



PrecedencePredicate.filterPrecedencePredicates = function(set) {
	var result = [];
	set.values().map( function(context) {
		if (context instanceof PrecedencePredicate) {
			result.push(context);
		}
	});
	return result;
};


// A semantic context which is true whenever none of the contained contexts
// is false.
//
function AND(a, b) {
	SemanticContext.call(this);
	var operands = new Set();
	if (a instanceof AND) {
		a.opnds.map(function(o) {
			operands.add(o);
		});
	} else {
		operands.add(a);
	}
	if (b instanceof AND) {
		b.opnds.map(function(o) {
			operands.add(o);
		});
	} else {
		operands.add(b);
	}
	var precedencePredicates = PrecedencePredicate.filterPrecedencePredicates(operands);
	if (precedencePredicates.length > 0) {
		// interested in the transition with the lowest precedence
		var reduced = null;
		precedencePredicates.map( function(p) {
			if(reduced===null || p.precedence<reduced.precedence) {
				reduced = p;
			}
		});
		operands.add(reduced);
	}
	this.opnds = operands.values();
	return this;
}

AND.prototype = Object.create(SemanticContext.prototype);
AND.prototype.constructor = AND;

AND.prototype.equals = function(other) {
	if (this === other) {
		return true;
	} else if (!(other instanceof AND)) {
		return false;
	} else {
		return this.opnds === other.opnds;
	}
};

AND.prototype.updateHashCode = function(hash) {
    hash.update(this.opnds, "AND");
};
//
// {@inheritDoc}
//
// <p>
// The evaluation of predicates by this context is short-circuiting, but
// unordered.</p>
//
AND.prototype.evaluate = function(parser, outerContext) {
	for (var i = 0; i < this.opnds.length; i++) {
		if (!this.opnds[i].evaluate(parser, outerContext)) {
			return false;
		}
	}
	return true;
};

AND.prototype.evalPrecedence = function(parser, outerContext) {
	var differs = false;
	var operands = [];
	for (var i = 0; i < this.opnds.length; i++) {
		var context = this.opnds[i];
		var evaluated = context.evalPrecedence(parser, outerContext);
		differs |= (evaluated !== context);
		if (evaluated === null) {
			// The AND context is false if any element is false
			return null;
		} else if (evaluated !== SemanticContext.NONE) {
			// Reduce the result by skipping true elements
			operands.push(evaluated);
		}
	}
	if (!differs) {
		return this;
	}
	if (operands.length === 0) {
		// all elements were true, so the AND context is true
		return SemanticContext.NONE;
	}
	var result = null;
	operands.map(function(o) {
		result = result === null ? o : SemanticContext.andContext(result, o);
	});
	return result;
};

AND.prototype.toString = function() {
	var s = "";
	this.opnds.map(function(o) {
		s += "&& " + o.toString();
	});
	return s.length > 3 ? s.slice(3) : s;
};

//
// A semantic context which is true whenever at least one of the contained
// contexts is true.
//
function OR(a, b) {
	SemanticContext.call(this);
	var operands = new Set();
	if (a instanceof OR) {
		a.opnds.map(function(o) {
			operands.add(o);
		});
	} else {
		operands.add(a);
	}
	if (b instanceof OR) {
		b.opnds.map(function(o) {
			operands.add(o);
		});
	} else {
		operands.add(b);
	}

	var precedencePredicates = PrecedencePredicate.filterPrecedencePredicates(operands);
	if (precedencePredicates.length > 0) {
		// interested in the transition with the highest precedence
		var s = precedencePredicates.sort(function(a, b) {
			return a.compareTo(b);
		});
		var reduced = s[s.length-1];
		operands.add(reduced);
	}
	this.opnds = operands.values();
	return this;
}

OR.prototype = Object.create(SemanticContext.prototype);
OR.prototype.constructor = OR;

OR.prototype.constructor = function(other) {
	if (this === other) {
		return true;
	} else if (!(other instanceof OR)) {
		return false;
	} else {
		return this.opnds === other.opnds;
	}
};

OR.prototype.updateHashCode = function(hash) {
    hash.update(this.opnds, "OR");
};

// <p>
// The evaluation of predicates by this context is short-circuiting, but
// unordered.</p>
//
OR.prototype.evaluate = function(parser, outerContext) {
	for (var i = 0; i < this.opnds.length; i++) {
		if (this.opnds[i].evaluate(parser, outerContext)) {
			return true;
		}
	}
	return false;
};

OR.prototype.evalPrecedence = function(parser, outerContext) {
	var differs = false;
	var operands = [];
	for (var i = 0; i < this.opnds.length; i++) {
		var context = this.opnds[i];
		var evaluated = context.evalPrecedence(parser, outerContext);
		differs |= (evaluated !== context);
		if (evaluated === SemanticContext.NONE) {
			// The OR context is true if any element is true
			return SemanticContext.NONE;
		} else if (evaluated !== null) {
			// Reduce the result by skipping false elements
			operands.push(evaluated);
		}
	}
	if (!differs) {
		return this;
	}
	if (operands.length === 0) {
		// all elements were false, so the OR context is false
		return null;
	}
	var result = null;
	operands.map(function(o) {
		return result === null ? o : SemanticContext.orContext(result, o);
	});
	return result;
};

OR.prototype.toString = function() {
	var s = "";
	this.opnds.map(function(o) {
		s += "|| " + o.toString();
	});
	return s.length > 3 ? s.slice(3) : s;
};

exports.SemanticContext = SemanticContext;
exports.PrecedencePredicate = PrecedencePredicate;
exports.Predicate = Predicate;


/***/ }),
/* 18 */
/***/ (function(module, exports, __webpack_require__) {

//
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
///

var ATNConfigSet = __webpack_require__(15).ATNConfigSet;
var Utils = __webpack_require__(1);
var Hash = Utils.Hash;
var Set = Utils.Set;

// Map a predicate to a predicted alternative.///

function PredPrediction(pred, alt) {
	this.alt = alt;
	this.pred = pred;
	return this;
}

PredPrediction.prototype.toString = function() {
	return "(" + this.pred + ", " + this.alt + ")";
};

// A DFA state represents a set of possible ATN configurations.
// As Aho, Sethi, Ullman p. 117 says "The DFA uses its state
// to keep track of all possible states the ATN can be in after
// reading each input symbol. That is to say, after reading
// input a1a2..an, the DFA is in a state that represents the
// subset T of the states of the ATN that are reachable from the
// ATN's start state along some path labeled a1a2..an."
// In conventional NFA&rarr;DFA conversion, therefore, the subset T
// would be a bitset representing the set of states the
// ATN could be in. We need to track the alt predicted by each
// state as well, however. More importantly, we need to maintain
// a stack of states, tracking the closure operations as they
// jump from rule to rule, emulating rule invocations (method calls).
// I have to add a stack to simulate the proper lookahead sequences for
// the underlying LL grammar from which the ATN was derived.
//
// <p>I use a set of ATNConfig objects not simple states. An ATNConfig
// is both a state (ala normal conversion) and a RuleContext describing
// the chain of rules (if any) followed to arrive at that state.</p>
//
// <p>A DFA state may have multiple references to a particular state,
// but with different ATN contexts (with same or different alts)
// meaning that state was reached via a different set of rule invocations.</p>
// /

function DFAState(stateNumber, configs) {
	if (stateNumber === null) {
		stateNumber = -1;
	}
	if (configs === null) {
		configs = new ATNConfigSet();
	}
	this.stateNumber = stateNumber;
	this.configs = configs;
	// {@code edges[symbol]} points to target of symbol. Shift up by 1 so (-1)
	// {@link Token//EOF} maps to {@code edges[0]}.
	this.edges = null;
	this.isAcceptState = false;
	// if accept state, what ttype do we match or alt do we predict?
	// This is set to {@link ATN//INVALID_ALT_NUMBER} when {@link
	// //predicates}{@code !=null} or
	// {@link //requiresFullContext}.
	this.prediction = 0;
	this.lexerActionExecutor = null;
	// Indicates that this state was created during SLL prediction that
	// discovered a conflict between the configurations in the state. Future
	// {@link ParserATNSimulator//execATN} invocations immediately jumped doing
	// full context prediction if this field is true.
	this.requiresFullContext = false;
	// During SLL parsing, this is a list of predicates associated with the
	// ATN configurations of the DFA state. When we have predicates,
	// {@link //requiresFullContext} is {@code false} since full context
	// prediction evaluates predicates
	// on-the-fly. If this is not null, then {@link //prediction} is
	// {@link ATN//INVALID_ALT_NUMBER}.
	//
	// <p>We only use these for non-{@link //requiresFullContext} but
	// conflicting states. That
	// means we know from the context (it's $ or we don't dip into outer
	// context) that it's an ambiguity not a conflict.</p>
	//
	// <p>This list is computed by {@link
	// ParserATNSimulator//predicateDFAState}.</p>
	this.predicates = null;
	return this;
}

// Get the set of all alts mentioned by all ATN configurations in this
// DFA state.
DFAState.prototype.getAltSet = function() {
	var alts = new Set();
	if (this.configs !== null) {
		for (var i = 0; i < this.configs.length; i++) {
			var c = this.configs[i];
			alts.add(c.alt);
		}
	}
	if (alts.length === 0) {
		return null;
	} else {
		return alts;
	}
};

// Two {@link DFAState} instances are equal if their ATN configuration sets
// are the same. This method is used to see if a state already exists.
//
// <p>Because the number of alternatives and number of ATN configurations are
// finite, there is a finite number of DFA states that can be processed.
// This is necessary to show that the algorithm terminates.</p>
//
// <p>Cannot test the DFA state numbers here because in
// {@link ParserATNSimulator//addDFAState} we need to know if any other state
// exists that has this exact set of ATN configurations. The
// {@link //stateNumber} is irrelevant.</p>
DFAState.prototype.equals = function(other) {
	// compare set of ATN configurations in this set with other
	return this === other ||
			(other instanceof DFAState &&
				this.configs.equals(other.configs));
};

DFAState.prototype.toString = function() {
	var s = "" + this.stateNumber + ":" + this.configs;
	if(this.isAcceptState) {
        s = s + "=>";
        if (this.predicates !== null)
            s = s + this.predicates;
        else
            s = s + this.prediction;
    }
	return s;
};

DFAState.prototype.hashCode = function() {
	var hash = new Hash();
	hash.update(this.configs);
	if(this.isAcceptState) {
        if (this.predicates !== null)
            hash.update(this.predicates);
        else
            hash.update(this.prediction);
    }
    return hash.finish();
};

exports.DFAState = DFAState;
exports.PredPrediction = PredPrediction;


/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var __extends = undefined && undefined.__extends || function () {
    var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
        d.__proto__ = b;
    } || function (d, b) {
        for (var p in b) {
            if (b.hasOwnProperty(p)) d[p] = b[p];
        }
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
var __read = undefined && undefined.__read || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o),
        r,
        ar = [],
        e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) {
            ar.push(r.value);
        }
    } catch (error) {
        e = { error: error };
    } finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        } finally {
            if (e) throw e.error;
        }
    }
    return ar;
};
var __spread = undefined && undefined.__spread || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) {
        ar = ar.concat(__read(arguments[i]));
    }return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
var UniStatement_1 = __webpack_require__(3);
var UniBlock = /** @class */function (_super) {
    __extends(UniBlock, _super);
    function UniBlock(blockLabel, body) {
        var _this = _super.call(this) || this;
        if (blockLabel === undefined && body === undefined) {
            _this.blockLabel = null;
            _this.body = [];
        } else if (blockLabel === undefined || body === undefined) {
            throw new Error('invalid arguments');
        } else {
            _this.blockLabel = blockLabel;
            _this.body = body;
        }
        _this.fields.set('blockLabel', String);
        _this.fields.set('body', UniStatement_1.default);
        return _this;
    }
    UniBlock.prototype.toString = function () {
        return 'Block(' + this.blockLabel + ')';
    };
    UniBlock.prototype.equals = function (obj) {
        if (obj == null || !(obj instanceof UniBlock)) return false;
        var that = obj;
        return _super.prototype.equals.call(this, that) && (this.blockLabel == null ? that.blockLabel == null : this.blockLabel === that.blockLabel) && (this.body == null ? that.body == null : this.body.equals(that.body));
    };
    UniBlock.prototype.merge = function (that) {
        _super.prototype.merge.call(this, that);
        if (that.blockLabel != null) {
            this.blockLabel = that.blockLabel;
        }
        if (that.body != null) {
            if (this.body == null) {
                this.body = that.body;
            } else {
                (_a = this.body).push.apply(_a, __spread(that.body));
            }
        }
        var _a;
    };
    return UniBlock;
}(UniStatement_1.default);
exports.default = UniBlock;

/***/ }),
/* 20 */
/***/ (function(module, exports, __webpack_require__) {

/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
///

//  A rule context is a record of a single rule invocation. It knows
//  which context invoked it, if any. If there is no parent context, then
//  naturally the invoking state is not valid.  The parent link
//  provides a chain upwards from the current rule invocation to the root
//  of the invocation tree, forming a stack. We actually carry no
//  information about the rule associated with this context (except
//  when parsing). We keep only the state number of the invoking state from
//  the ATN submachine that invoked this. Contrast this with the s
//  pointer inside ParserRuleContext that tracks the current state
//  being "executed" for the current rule.
//
//  The parent contexts are useful for computing lookahead sets and
//  getting error information.
//
//  These objects are used during parsing and prediction.
//  For the special case of parsers, we use the subclass
//  ParserRuleContext.
//
//  @see ParserRuleContext
///

var RuleNode = __webpack_require__(5).RuleNode;
var INVALID_INTERVAL = __webpack_require__(5).INVALID_INTERVAL;
var INVALID_ALT_NUMBER = __webpack_require__(10).INVALID_ALT_NUMBER;

function RuleContext(parent, invokingState) {
	RuleNode.call(this);
	// What context invoked this rule?
	this.parentCtx = parent || null;
	// What state invoked the rule associated with this context?
	// The "return address" is the followState of invokingState
	// If parent is null, this should be -1.
	this.invokingState = invokingState || -1;
	return this;
}

RuleContext.prototype = Object.create(RuleNode.prototype);
RuleContext.prototype.constructor = RuleContext;

RuleContext.prototype.depth = function() {
	var n = 0;
	var p = this;
	while (p !== null) {
		p = p.parentCtx;
		n += 1;
	}
	return n;
};

// A context is empty if there is no invoking state; meaning nobody call
// current context.
RuleContext.prototype.isEmpty = function() {
	return this.invokingState === -1;
};

// satisfy the ParseTree / SyntaxTree interface

RuleContext.prototype.getSourceInterval = function() {
	return INVALID_INTERVAL;
};

RuleContext.prototype.getRuleContext = function() {
	return this;
};

RuleContext.prototype.getPayload = function() {
	return this;
};

// Return the combined text of all child nodes. This method only considers
// tokens which have been added to the parse tree.
// <p>
// Since tokens on hidden channels (e.g. whitespace or comments) are not
// added to the parse trees, they will not appear in the output of this
// method.
// /
RuleContext.prototype.getText = function() {
	if (this.getChildCount() === 0) {
		return "";
	} else {
		return this.children.map(function(child) {
			return child.getText();
		}).join("");
	}
};

// For rule associated with this parse tree internal node, return
// the outer alternative number used to match the input. Default
// implementation does not compute nor store this alt num. Create
// a subclass of ParserRuleContext with backing field and set
// option contextSuperClass.
// to set it.
RuleContext.prototype.getAltNumber = function() { return INVALID_ALT_NUMBER; }

// Set the outer alternative number for this context node. Default
// implementation does nothing to avoid backing field overhead for
// trees that don't need it.  Create
// a subclass of ParserRuleContext with backing field and set
// option contextSuperClass.
RuleContext.prototype.setAltNumber = function(altNumber) { }

RuleContext.prototype.getChild = function(i) {
	return null;
};

RuleContext.prototype.getChildCount = function() {
	return 0;
};

RuleContext.prototype.accept = function(visitor) {
	return visitor.visitChildren(this);
};

//need to manage circular dependencies, so export now
exports.RuleContext = RuleContext;
var Trees = __webpack_require__(70).Trees;


// Print out a whole tree, not just a node, in LISP format
// (root child1 .. childN). Print just a node if this is a leaf.
//

RuleContext.prototype.toStringTree = function(ruleNames, recog) {
	return Trees.toStringTree(this, ruleNames, recog);
};

RuleContext.prototype.toString = function(ruleNames, stop) {
	ruleNames = ruleNames || null;
	stop = stop || null;
	var p = this;
	var s = "[";
	while (p !== null && p !== stop) {
		if (ruleNames === null) {
			if (!p.isEmpty()) {
				s += p.invokingState;
			}
		} else {
			var ri = p.ruleIndex;
			var ruleName = (ri >= 0 && ri < ruleNames.length) ? ruleNames[ri]
					: "" + ri;
			s += ruleName;
		}
		if (p.parentCtx !== null && (ruleNames !== null || !p.parentCtx.isEmpty())) {
			s += " ";
		}
		p = p.parentCtx;
	}
	s += "]";
	return s;
};



/***/ }),
/* 21 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var __extends = undefined && undefined.__extends || function () {
    var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
        d.__proto__ = b;
    } || function (d, b) {
        for (var p in b) {
            if (b.hasOwnProperty(p)) d[p] = b[p];
        }
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
var __read = undefined && undefined.__read || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o),
        r,
        ar = [],
        e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) {
            ar.push(r.value);
        }
    } catch (error) {
        e = { error: error };
    } finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        } finally {
            if (e) throw e.error;
        }
    }
    return ar;
};
var __spread = undefined && undefined.__spread || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) {
        ar = ar.concat(__read(arguments[i]));
    }return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
var UniDecralation_1 = __webpack_require__(22);
var UniVariableDef_1 = __webpack_require__(41);
var UniVariableDec = /** @class */function (_super) {
    __extends(UniVariableDec, _super);
    function UniVariableDec(modifiers, type, variables) {
        var _this = _super.call(this) || this;
        if (modifiers === undefined && type === undefined && variables === undefined) {
            _this.modifiers = [];
            _this.type = null;
            _this.variables = [];
        } else if (modifiers === undefined || type === undefined || variables === undefined) {
            throw new Error('invalid arguments');
        } else {
            _this.modifiers = modifiers;
            _this.type = type;
            _this.variables = variables;
        }
        _this.fields.set('modifiers', String);
        _this.fields.set('type', String);
        _this.fields.set('variables', UniVariableDef_1.default);
        return _this;
    }
    UniVariableDec.prototype.toString = function () {
        return 'VariableDec(' + this.type + ')';
    };
    UniVariableDec.prototype.equals = function (obj) {
        if (obj == null || !(obj instanceof UniVariableDec)) return false;
        var that = obj;
        return _super.prototype.equals.call(this, that) && (this.modifiers == null ? that.modifiers == null : this.modifiers.equals(that.modifiers)) && (this.type == null ? that.type == null : this.type === that.type) && (this.variables == null ? that.variables == null : this.variables.equals(that.variables));
    };
    UniVariableDec.prototype.merge = function (that) {
        _super.prototype.merge.call(this, that);
        if (that.modifiers != null) {
            if (this.modifiers == null) {
                this.modifiers = that.modifiers;
            } else {
                (_a = this.modifiers).push.apply(_a, __spread(that.modifiers));
            }
        }
        if (that.type != null) {
            this.type = that.type;
        }
        if (that.variables != null) {
            if (this.variables == null) {
                this.variables = that.variables;
            } else {
                (_b = this.variables).push.apply(_b, __spread(that.variables));
            }
        }
        var _a, _b;
    };
    return UniVariableDec;
}(UniDecralation_1.default);
exports.default = UniVariableDec;

/***/ }),
/* 22 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var __extends = undefined && undefined.__extends || function () {
    var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
        d.__proto__ = b;
    } || function (d, b) {
        for (var p in b) {
            if (b.hasOwnProperty(p)) d[p] = b[p];
        }
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
Object.defineProperty(exports, "__esModule", { value: true });
var UniExpr_1 = __webpack_require__(0);
var UniDecralation = /** @class */function (_super) {
    __extends(UniDecralation, _super);
    function UniDecralation() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return UniDecralation;
}(UniExpr_1.default);
exports.default = UniDecralation;

/***/ }),
/* 23 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var __extends = undefined && undefined.__extends || function () {
    var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
        d.__proto__ = b;
    } || function (d, b) {
        for (var p in b) {
            if (b.hasOwnProperty(p)) d[p] = b[p];
        }
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
Object.defineProperty(exports, "__esModule", { value: true });
var UniExpr_1 = __webpack_require__(0);
var UniNumberLiteral = /** @class */function (_super) {
    __extends(UniNumberLiteral, _super);
    function UniNumberLiteral(value, signed, bytes, isFloat, type, prefix, sufix) {
        var _this = _super.call(this) || this;
        if (value === undefined && signed === undefined && bytes === undefined && isFloat === undefined && type === undefined && prefix === undefined && sufix === undefined) {
            _this.value = null;
            _this.signed = null;
            _this.bytes = null;
            _this.isFloat = null;
            _this.type = null;
            _this.prefix = null;
            _this.sufix = null;
        } else if (value === undefined || signed === undefined || bytes === undefined || isFloat === undefined || type === undefined || prefix === undefined || sufix === undefined) {
            throw new Error('invalid arguments');
        } else {
            _this.value = value;
            _this.signed = signed;
            _this.bytes = bytes;
            _this.isFloat = isFloat;
            _this.type = type;
            _this.prefix = prefix;
            _this.sufix = sufix;
        }
        _this.fields.set('value', Object);
        _this.fields.set('signed', Boolean);
        _this.fields.set('bytes', Number);
        _this.fields.set('isFloat', Boolean);
        _this.fields.set('type', String);
        _this.fields.set('prefix', String);
        _this.fields.set('sufix', String);
        return _this;
    }
    UniNumberLiteral.prototype.toString = function () {
        return 'NumberLiteral(' + this.type + ', ' + this.prefix + ', ' + this.sufix + ')';
    };
    UniNumberLiteral.prototype.equals = function (obj) {
        if (obj == null || !(obj instanceof UniNumberLiteral)) return false;
        var that = obj;
        return _super.prototype.equals.call(this, that) && (this.value == null ? that.value == null : this.value === that.value) && (this.signed == null ? that.signed == null : this.signed === that.signed) && (this.bytes == null ? that.bytes == null : this.bytes === that.bytes) && (this.isFloat == null ? that.isFloat == null : this.isFloat === that.isFloat) && (this.type == null ? that.type == null : this.type === that.type) && (this.prefix == null ? that.prefix == null : this.prefix === that.prefix) && (this.sufix == null ? that.sufix == null : this.sufix === that.sufix);
    };
    UniNumberLiteral.prototype.merge = function (that) {
        _super.prototype.merge.call(this, that);
        if (that.value != null) {
            this.value = that.value;
        }
        if (that.signed != null) {
            this.signed = that.signed;
        }
        if (that.bytes != null) {
            this.bytes = that.bytes;
        }
        if (that.isFloat != null) {
            this.isFloat = that.isFloat;
        }
        if (that.type != null) {
            this.type = that.type;
        }
        if (that.prefix != null) {
            this.prefix = that.prefix;
        }
        if (that.sufix != null) {
            this.sufix = that.sufix;
        }
    };
    return UniNumberLiteral;
}(UniExpr_1.default);
exports.default = UniNumberLiteral;

/***/ }),
/* 24 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var __extends = undefined && undefined.__extends || function () {
    var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
        d.__proto__ = b;
    } || function (d, b) {
        for (var p in b) {
            if (b.hasOwnProperty(p)) d[p] = b[p];
        }
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
var __read = undefined && undefined.__read || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o),
        r,
        ar = [],
        e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) {
            ar.push(r.value);
        }
    } catch (error) {
        e = { error: error };
    } finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        } finally {
            if (e) throw e.error;
        }
    }
    return ar;
};
var __spread = undefined && undefined.__spread || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) {
        ar = ar.concat(__read(arguments[i]));
    }return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
var UniDecralation_1 = __webpack_require__(22);
var UniParam_1 = __webpack_require__(40);
var UniBlock_1 = __webpack_require__(19);
var UniFunctionDec = /** @class */function (_super) {
    __extends(UniFunctionDec, _super);
    function UniFunctionDec(name, modifiers, returnType, params, block) {
        var _this = _super.call(this) || this;
        if (name === undefined && modifiers === undefined && returnType === undefined && params === undefined && block === undefined) {
            _this.name = null;
            _this.modifiers = [];
            _this.returnType = null;
            _this.params = [];
            _this.block = null;
        } else if (name === undefined || modifiers === undefined || returnType === undefined || params === undefined || block === undefined) {
            throw new Error('invalid arguments');
        } else {
            _this.name = name;
            _this.modifiers = modifiers;
            _this.returnType = returnType;
            _this.params = params;
            _this.block = block;
        }
        _this.fields.set('name', String);
        _this.fields.set('modifiers', String);
        _this.fields.set('returnType', String);
        _this.fields.set('params', UniParam_1.default);
        _this.fields.set('block', UniBlock_1.default);
        return _this;
    }
    UniFunctionDec.prototype.toString = function () {
        return 'FunctionDec(' + this.name + ', ' + this.returnType + ')';
    };
    UniFunctionDec.prototype.equals = function (obj) {
        if (obj == null || !(obj instanceof UniFunctionDec)) return false;
        var that = obj;
        return _super.prototype.equals.call(this, that) && (this.name == null ? that.name == null : this.name === that.name) && (this.modifiers == null ? that.modifiers == null : this.modifiers.equals(that.modifiers)) && (this.returnType == null ? that.returnType == null : this.returnType === that.returnType) && (this.params == null ? that.params == null : this.params.equals(that.params)) && (this.block == null ? that.block == null : this.block.equals(that.block));
    };
    UniFunctionDec.prototype.merge = function (that) {
        _super.prototype.merge.call(this, that);
        if (that.name != null) {
            this.name = that.name;
        }
        if (that.modifiers != null) {
            if (this.modifiers == null) {
                this.modifiers = that.modifiers;
            } else {
                (_a = this.modifiers).push.apply(_a, __spread(that.modifiers));
            }
        }
        if (that.returnType != null) {
            this.returnType = that.returnType;
        }
        if (that.params != null) {
            if (this.params == null) {
                this.params = that.params;
            } else {
                (_b = this.params).push.apply(_b, __spread(that.params));
            }
        }
        if (that.block != null) {
            this.block = that.block;
        }
        var _a, _b;
    };
    return UniFunctionDec;
}(UniDecralation_1.default);
exports.default = UniFunctionDec;

/***/ }),
/* 25 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var __extends = undefined && undefined.__extends || function () {
    var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
        d.__proto__ = b;
    } || function (d, b) {
        for (var p in b) {
            if (b.hasOwnProperty(p)) d[p] = b[p];
        }
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
Object.defineProperty(exports, "__esModule", { value: true });
var UniExpr_1 = __webpack_require__(0);
var UniIdent = /** @class */function (_super) {
    __extends(UniIdent, _super);
    function UniIdent(name) {
        var _this = _super.call(this) || this;
        if (name === undefined) {
            _this.name = null;
        } else {
            _this.name = name;
        }
        _this.fields.set('name', String);
        return _this;
    }
    UniIdent.prototype.toString = function () {
        return 'Ident(' + this.name + ')';
    };
    UniIdent.prototype.equals = function (obj) {
        if (obj == null || !(obj instanceof UniIdent)) return false;
        var that = obj;
        return _super.prototype.equals.call(this, that) && (this.name == null ? that.name == null : this.name === that.name);
    };
    UniIdent.prototype.merge = function (that) {
        _super.prototype.merge.call(this, that);
        if (that.name != null) {
            this.name = that.name;
        }
    };
    return UniIdent;
}(UniExpr_1.default);
exports.default = UniIdent;

/***/ }),
/* 26 */
/***/ (function(module, exports, __webpack_require__) {

// This is (almost) directly from Node.js utils
// https://github.com/joyent/node/blob/f8c335d0caf47f16d31413f89aa28eda3878e3aa/lib/util.js

var getName = __webpack_require__(64);
var getProperties = __webpack_require__(65);
var getEnumerableProperties = __webpack_require__(91);
var config = __webpack_require__(13);

module.exports = inspect;

/**
 * ### .inspect(obj, [showHidden], [depth], [colors])
 *
 * Echoes the value of a value. Tries to print the value out
 * in the best way possible given the different types.
 *
 * @param {Object} obj The object to print out.
 * @param {Boolean} showHidden Flag that shows hidden (not enumerable)
 *    properties of objects. Default is false.
 * @param {Number} depth Depth in which to descend in object. Default is 2.
 * @param {Boolean} colors Flag to turn on ANSI escape codes to color the
 *    output. Default is false (no coloring).
 * @namespace Utils
 * @name inspect
 */
function inspect(obj, showHidden, depth, colors) {
  var ctx = {
    showHidden: showHidden,
    seen: [],
    stylize: function (str) { return str; }
  };
  return formatValue(ctx, obj, (typeof depth === 'undefined' ? 2 : depth));
}

// Returns true if object is a DOM element.
var isDOMElement = function (object) {
  if (typeof HTMLElement === 'object') {
    return object instanceof HTMLElement;
  } else {
    return object &&
      typeof object === 'object' &&
      'nodeType' in object &&
      object.nodeType === 1 &&
      typeof object.nodeName === 'string';
  }
};

function formatValue(ctx, value, recurseTimes) {
  // Provide a hook for user-specified inspect functions.
  // Check that value is an object with an inspect function on it
  if (value && typeof value.inspect === 'function' &&
      // Filter out the util module, it's inspect function is special
      value.inspect !== exports.inspect &&
      // Also filter out any prototype objects using the circular check.
      !(value.constructor && value.constructor.prototype === value)) {
    var ret = value.inspect(recurseTimes, ctx);
    if (typeof ret !== 'string') {
      ret = formatValue(ctx, ret, recurseTimes);
    }
    return ret;
  }

  // Primitive types cannot have properties
  var primitive = formatPrimitive(ctx, value);
  if (primitive) {
    return primitive;
  }

  // If this is a DOM element, try to get the outer HTML.
  if (isDOMElement(value)) {
    if ('outerHTML' in value) {
      return value.outerHTML;
      // This value does not have an outerHTML attribute,
      //   it could still be an XML element
    } else {
      // Attempt to serialize it
      try {
        if (document.xmlVersion) {
          var xmlSerializer = new XMLSerializer();
          return xmlSerializer.serializeToString(value);
        } else {
          // Firefox 11- do not support outerHTML
          //   It does, however, support innerHTML
          //   Use the following to render the element
          var ns = "http://www.w3.org/1999/xhtml";
          var container = document.createElementNS(ns, '_');

          container.appendChild(value.cloneNode(false));
          var html = container.innerHTML
            .replace('><', '>' + value.innerHTML + '<');
          container.innerHTML = '';
          return html;
        }
      } catch (err) {
        // This could be a non-native DOM implementation,
        //   continue with the normal flow:
        //   printing the element as if it is an object.
      }
    }
  }

  // Look up the keys of the object.
  var visibleKeys = getEnumerableProperties(value);
  var keys = ctx.showHidden ? getProperties(value) : visibleKeys;

  var name, nameSuffix;

  // Some type of object without properties can be shortcutted.
  // In IE, errors have a single `stack` property, or if they are vanilla `Error`,
  // a `stack` plus `description` property; ignore those for consistency.
  if (keys.length === 0 || (isError(value) && (
      (keys.length === 1 && keys[0] === 'stack') ||
      (keys.length === 2 && keys[0] === 'description' && keys[1] === 'stack')
     ))) {
    if (typeof value === 'function') {
      name = getName(value);
      nameSuffix = name ? ': ' + name : '';
      return ctx.stylize('[Function' + nameSuffix + ']', 'special');
    }
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    }
    if (isDate(value)) {
      return ctx.stylize(Date.prototype.toUTCString.call(value), 'date');
    }
    if (isError(value)) {
      return formatError(value);
    }
  }

  var base = ''
    , array = false
    , typedArray = false
    , braces = ['{', '}'];

  if (isTypedArray(value)) {
    typedArray = true;
    braces = ['[', ']'];
  }

  // Make Array say that they are Array
  if (isArray(value)) {
    array = true;
    braces = ['[', ']'];
  }

  // Make functions say that they are functions
  if (typeof value === 'function') {
    name = getName(value);
    nameSuffix = name ? ': ' + name : '';
    base = ' [Function' + nameSuffix + ']';
  }

  // Make RegExps say that they are RegExps
  if (isRegExp(value)) {
    base = ' ' + RegExp.prototype.toString.call(value);
  }

  // Make dates with properties first say the date
  if (isDate(value)) {
    base = ' ' + Date.prototype.toUTCString.call(value);
  }

  // Make error with message first say the error
  if (isError(value)) {
    return formatError(value);
  }

  if (keys.length === 0 && (!array || value.length == 0)) {
    return braces[0] + base + braces[1];
  }

  if (recurseTimes < 0) {
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    } else {
      return ctx.stylize('[Object]', 'special');
    }
  }

  ctx.seen.push(value);

  var output;
  if (array) {
    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
  } else if (typedArray) {
    return formatTypedArray(value);
  } else {
    output = keys.map(function(key) {
      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
    });
  }

  ctx.seen.pop();

  return reduceToSingleString(output, base, braces);
}


function formatPrimitive(ctx, value) {
  switch (typeof value) {
    case 'undefined':
      return ctx.stylize('undefined', 'undefined');

    case 'string':
      var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
                                               .replace(/'/g, "\\'")
                                               .replace(/\\"/g, '"') + '\'';
      return ctx.stylize(simple, 'string');

    case 'number':
      if (value === 0 && (1/value) === -Infinity) {
        return ctx.stylize('-0', 'number');
      }
      return ctx.stylize('' + value, 'number');

    case 'boolean':
      return ctx.stylize('' + value, 'boolean');

    case 'symbol':
      return ctx.stylize(value.toString(), 'symbol');
  }
  // For some reason typeof null is "object", so special case here.
  if (value === null) {
    return ctx.stylize('null', 'null');
  }
}


function formatError(value) {
  return '[' + Error.prototype.toString.call(value) + ']';
}


function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
  var output = [];
  for (var i = 0, l = value.length; i < l; ++i) {
    if (Object.prototype.hasOwnProperty.call(value, String(i))) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          String(i), true));
    } else {
      output.push('');
    }
  }

  keys.forEach(function(key) {
    if (!key.match(/^\d+$/)) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          key, true));
    }
  });
  return output;
}

function formatTypedArray(value) {
  var str = '[ ';

  for (var i = 0; i < value.length; ++i) {
    if (str.length >= config.truncateThreshold - 7) {
      str += '...';
      break;
    }
    str += value[i] + ', ';
  }
  str += ' ]';

  // Removing trailing `, ` if the array was not truncated
  if (str.indexOf(',  ]') !== -1) {
    str = str.replace(',  ]', ' ]');
  }

  return str;
}

function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
  var name;
  var propDescriptor = Object.getOwnPropertyDescriptor(value, key);
  var str;

  if (propDescriptor) {
    if (propDescriptor.get) {
      if (propDescriptor.set) {
        str = ctx.stylize('[Getter/Setter]', 'special');
      } else {
        str = ctx.stylize('[Getter]', 'special');
      }
    } else {
      if (propDescriptor.set) {
        str = ctx.stylize('[Setter]', 'special');
      }
    }
  }
  if (visibleKeys.indexOf(key) < 0) {
    name = '[' + key + ']';
  }
  if (!str) {
    if (ctx.seen.indexOf(value[key]) < 0) {
      if (recurseTimes === null) {
        str = formatValue(ctx, value[key], null);
      } else {
        str = formatValue(ctx, value[key], recurseTimes - 1);
      }
      if (str.indexOf('\n') > -1) {
        if (array) {
          str = str.split('\n').map(function(line) {
            return '  ' + line;
          }).join('\n').substr(2);
        } else {
          str = '\n' + str.split('\n').map(function(line) {
            return '   ' + line;
          }).join('\n');
        }
      }
    } else {
      str = ctx.stylize('[Circular]', 'special');
    }
  }
  if (typeof name === 'undefined') {
    if (array && key.match(/^\d+$/)) {
      return str;
    }
    name = JSON.stringify('' + key);
    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
      name = name.substr(1, name.length - 2);
      name = ctx.stylize(name, 'name');
    } else {
      name = name.replace(/'/g, "\\'")
                 .replace(/\\"/g, '"')
                 .replace(/(^"|"$)/g, "'");
      name = ctx.stylize(name, 'string');
    }
  }

  return name + ': ' + str;
}


function reduceToSingleString(output, base, braces) {
  var numLinesEst = 0;
  var length = output.reduce(function(prev, cur) {
    numLinesEst++;
    if (cur.indexOf('\n') >= 0) numLinesEst++;
    return prev + cur.length + 1;
  }, 0);

  if (length > 60) {
    return braces[0] +
           (base === '' ? '' : base + '\n ') +
           ' ' +
           output.join(',\n  ') +
           ' ' +
           braces[1];
  }

  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
}

function isTypedArray(ar) {
  // Unfortunately there's no way to check if an object is a TypedArray
  // We have to check if it's one of these types
  return (typeof ar === 'object' && /\w+Array]$/.test(objectToString(ar)));
}

function isArray(ar) {
  return Array.isArray(ar) ||
         (typeof ar === 'object' && objectToString(ar) === '[object Array]');
}

function isRegExp(re) {
  return typeof re === 'object' && objectToString(re) === '[object RegExp]';
}

function isDate(d) {
  return typeof d === 'object' && objectToString(d) === '[object Date]';
}

function isError(e) {
  return typeof e === 'object' && objectToString(e) === '[object Error]';
}

function objectToString(o) {
  return Object.prototype.toString.call(o);
}


/***/ }),
/* 27 */
/***/ (function(module, exports, __webpack_require__) {

var config = __webpack_require__(13);

/*!
 * Chai - isProxyEnabled helper
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

/**
 * ### .isProxyEnabled()
 *
 * Helper function to check if Chai's proxy protection feature is enabled. If
 * proxies are unsupported or disabled via the user's Chai config, then return
 * false. Otherwise, return true.
 *
 * @namespace Utils
 * @name isProxyEnabled
 */

module.exports = function isProxyEnabled() {
  return config.useProxy && 
    typeof Proxy !== 'undefined' &&
    typeof Reflect !== 'undefined';
};


/***/ }),
/* 28 */
/***/ (function(module, exports, __webpack_require__) {

var config = __webpack_require__(13);

var fnLengthDesc = Object.getOwnPropertyDescriptor(function () {}, 'length');

/*!
 * Chai - addLengthGuard utility
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

/**
 * ### .addLengthGuard(fn, assertionName, isChainable)
 *
 * Define `length` as a getter on the given uninvoked method assertion. The
 * getter acts as a guard against chaining `length` directly off of an uninvoked
 * method assertion, which is a problem because it references `function`'s
 * built-in `length` property instead of Chai's `length` assertion. When the
 * getter catches the user making this mistake, it throws an error with a
 * helpful message.
 *
 * There are two ways in which this mistake can be made. The first way is by
 * chaining the `length` assertion directly off of an uninvoked chainable
 * method. In this case, Chai suggests that the user use `lengthOf` instead. The
 * second way is by chaining the `length` assertion directly off of an uninvoked
 * non-chainable method. Non-chainable methods must be invoked prior to
 * chaining. In this case, Chai suggests that the user consult the docs for the
 * given assertion.
 *
 * If the `length` property of functions is unconfigurable, then return `fn`
 * without modification.
 *
 * Note that in ES6, the function's `length` property is configurable, so once
 * support for legacy environments is dropped, Chai's `length` property can
 * replace the built-in function's `length` property, and this length guard will
 * no longer be necessary. In the mean time, maintaining consistency across all
 * environments is the priority.
 *
 * @param {Function} fn
 * @param {String} assertionName
 * @param {Boolean} isChainable
 * @namespace Utils
 * @name addLengthGuard
 */

module.exports = function addLengthGuard (fn, assertionName, isChainable) {
  if (!fnLengthDesc.configurable) return fn;

  Object.defineProperty(fn, 'length', {
    get: function () {
      if (isChainable) {
        throw Error('Invalid Chai property: ' + assertionName + '.length. Due' +
          ' to a compatibility issue, "length" cannot directly follow "' +
          assertionName + '". Use "' + assertionName + '.lengthOf" instead.');
      }

      throw Error('Invalid Chai property: ' + assertionName + '.length. See' +
        ' docs for proper usage of "' + assertionName + '".');
    }
  });

  return fn;
};


/***/ }),
/* 29 */
/***/ (function(module, exports, __webpack_require__) {

var config = __webpack_require__(13);
var flag = __webpack_require__(6);
var getProperties = __webpack_require__(65);
var isProxyEnabled = __webpack_require__(27);

/*!
 * Chai - proxify utility
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

/**
 * ### .proxify(object)
 *
 * Return a proxy of given object that throws an error when a non-existent
 * property is read. By default, the root cause is assumed to be a misspelled
 * property, and thus an attempt is made to offer a reasonable suggestion from
 * the list of existing properties. However, if a nonChainableMethodName is
 * provided, then the root cause is instead a failure to invoke a non-chainable
 * method prior to reading the non-existent property.
 * 
 * If proxies are unsupported or disabled via the user's Chai config, then
 * return object without modification.
 *
 * @param {Object} obj
 * @param {String} nonChainableMethodName
 * @namespace Utils
 * @name proxify
 */

var builtins = ['__flags', '__methods', '_obj', 'assert'];

module.exports = function proxify(obj, nonChainableMethodName) {
  if (!isProxyEnabled()) return obj;

  return new Proxy(obj, {
    get: function proxyGetter(target, property) {
      // This check is here because we should not throw errors on Symbol properties
      // such as `Symbol.toStringTag`.
      // The values for which an error should be thrown can be configured using
      // the `config.proxyExcludedKeys` setting.
      if (typeof property === 'string' &&
          config.proxyExcludedKeys.indexOf(property) === -1 &&
          !Reflect.has(target, property)) {
        // Special message for invalid property access of non-chainable methods.
        if (nonChainableMethodName) {
          throw Error('Invalid Chai property: ' + nonChainableMethodName + '.' +
            property + '. See docs for proper usage of "' +
            nonChainableMethodName + '".');
        }

        var orderedProperties = getProperties(target).filter(function(property) {
          return !Object.prototype.hasOwnProperty(property) &&
            builtins.indexOf(property) === -1;
        }).sort(function(a, b) {
          return stringDistance(property, a) - stringDistance(property, b);
        });

        if (orderedProperties.length &&
            stringDistance(orderedProperties[0], property) < 4) {
          // If the property is reasonably close to an existing Chai property,
          // suggest that property to the user.
          throw Error('Invalid Chai property: ' + property +
            '. Did you mean "' + orderedProperties[0] + '"?');
        } else {
          throw Error('Invalid Chai property: ' + property);
        }
      }

      // Use this proxy getter as the starting point for removing implementation
      // frames from the stack trace of a failed assertion. For property
      // assertions, this prevents the proxy getter from showing up in the stack
      // trace since it's invoked before the property getter. For method and
      // chainable method assertions, this flag will end up getting changed to
      // the method wrapper, which is good since this frame will no longer be in
      // the stack once the method is invoked. Note that Chai builtin assertion
      // properties such as `__flags` are skipped since this is only meant to
      // capture the starting point of an assertion. This step is also skipped
      // if the `lockSsfi` flag is set, thus indicating that this assertion is
      // being called from within another assertion. In that case, the `ssfi`
      // flag is already set to the outer assertion's starting point.
      if (builtins.indexOf(property) === -1 && !flag(target, 'lockSsfi')) {
        flag(target, 'ssfi', proxyGetter);
      }

      return Reflect.get(target, property);
    }
  });
};

/**
 * # stringDistance(strA, strB)
 * Return the Levenshtein distance between two strings.
 * @param {string} strA
 * @param {string} strB
 * @return {number} the string distance between strA and strB
 * @api private
 */

function stringDistance(strA, strB, memo) {
  if (!memo) {
    // `memo` is a two-dimensional array containing a cache of distances
    // memo[i][j] is the distance between strA.slice(0, i) and
    // strB.slice(0, j).
    memo = [];
    for (var i = 0; i <= strA.length; i++) {
      memo[i] = [];
    }
  }

  if (!memo[strA.length] || !memo[strA.length][strB.length]) {
    if (strA.length === 0 || strB.length === 0) {
      memo[strA.length][strB.length] = Math.max(strA.length, strB.length);
    } else {
      memo[strA.length][strB.length] = Math.min(
        stringDistance(strA.slice(0, -1), strB, memo) + 1,
        stringDistance(strA, strB.slice(0, -1), memo) + 1,
        stringDistance(strA.slice(0, -1), strB.slice(0, -1), memo) +
          (strA.slice(-1) === strB.slice(-1) ? 0 : 1)
      );
    }
  }

  return memo[strA.length][strB.length];
}


/***/ }),
/* 30 */
/***/ (function(module, exports, __webpack_require__) {

//
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
///

// A tuple: (ATN state, predicted alt, syntactic, semantic context).
//  The syntactic context is a graph-structured stack node whose
//  path(s) to the root is the rule invocation(s)
//  chain used to arrive at the state.  The semantic context is
//  the tree of semantic predicates encountered before reaching
//  an ATN state.
///

var DecisionState = __webpack_require__(7).DecisionState;
var SemanticContext = __webpack_require__(17).SemanticContext;
var Hash = __webpack_require__(1).Hash;


function checkParams(params, isCfg) {
	if(params===null) {
		var result = { state:null, alt:null, context:null, semanticContext:null };
		if(isCfg) {
			result.reachesIntoOuterContext = 0;
		}
		return result;
	} else {
		var props = {};
		props.state = params.state || null;
		props.alt = (params.alt === undefined) ? null : params.alt;
		props.context = params.context || null;
		props.semanticContext = params.semanticContext || null;
		if(isCfg) {
			props.reachesIntoOuterContext = params.reachesIntoOuterContext || 0;
			props.precedenceFilterSuppressed = params.precedenceFilterSuppressed || false;
		}
		return props;
	}
}

function ATNConfig(params, config) {
	this.checkContext(params, config);
	params = checkParams(params);
	config = checkParams(config, true);
    // The ATN state associated with this configuration///
    this.state = params.state!==null ? params.state : config.state;
    // What alt (or lexer rule) is predicted by this configuration///
    this.alt = params.alt!==null ? params.alt : config.alt;
    // The stack of invoking states leading to the rule/states associated
    //  with this config.  We track only those contexts pushed during
    //  execution of the ATN simulator.
    this.context = params.context!==null ? params.context : config.context;
    this.semanticContext = params.semanticContext!==null ? params.semanticContext :
        (config.semanticContext!==null ? config.semanticContext : SemanticContext.NONE);
    // We cannot execute predicates dependent upon local context unless
    // we know for sure we are in the correct context. Because there is
    // no way to do this efficiently, we simply cannot evaluate
    // dependent predicates unless we are in the rule that initially
    // invokes the ATN simulator.
    //
    // closure() tracks the depth of how far we dip into the
    // outer context: depth &gt; 0.  Note that it may not be totally
    // accurate depth since I don't ever decrement. TODO: make it a boolean then
    this.reachesIntoOuterContext = config.reachesIntoOuterContext;
    this.precedenceFilterSuppressed = config.precedenceFilterSuppressed;
    return this;
}

ATNConfig.prototype.checkContext = function(params, config) {
	if((params.context===null || params.context===undefined) &&
			(config===null || config.context===null || config.context===undefined)) {
		this.context = null;
	}
};


ATNConfig.prototype.hashCode = function() {
    var hash = new Hash();
    this.updateHashCode(hash);
    return hash.finish();
};


ATNConfig.prototype.updateHashCode = function(hash) {
    hash.update(this.state.stateNumber, this.alt, this.context, this.semanticContext);
};

// An ATN configuration is equal to another if both have
//  the same state, they predict the same alternative, and
//  syntactic/semantic contexts are the same.

ATNConfig.prototype.equals = function(other) {
    if (this === other) {
        return true;
    } else if (! (other instanceof ATNConfig)) {
        return false;
    } else {
        return this.state.stateNumber===other.state.stateNumber &&
            this.alt===other.alt &&
            (this.context===null ? other.context===null : this.context.equals(other.context)) &&
            this.semanticContext.equals(other.semanticContext) &&
            this.precedenceFilterSuppressed===other.precedenceFilterSuppressed;
    }
};


ATNConfig.prototype.hashCodeForConfigSet = function() {
    var hash = new Hash();
    hash.update(this.state.stateNumber, this.alt, this.semanticContext);
    return hash.finish();
};


ATNConfig.prototype.equalsForConfigSet = function(other) {
    if (this === other) {
        return true;
    } else if (! (other instanceof ATNConfig)) {
        return false;
    } else {
        return this.state.stateNumber===other.state.stateNumber &&
            this.alt===other.alt &&
            this.semanticContext.equals(other.semanticContext);
    }
};


ATNConfig.prototype.toString = function() {
    return "(" + this.state + "," + this.alt +
        (this.context!==null ? ",[" + this.context.toString() + "]" : "") +
        (this.semanticContext !== SemanticContext.NONE ?
                ("," + this.semanticContext.toString())
                : "") +
        (this.reachesIntoOuterContext>0 ?
                (",up=" + this.reachesIntoOuterContext)
                : "") + ")";
};


function LexerATNConfig(params, config) {
	ATNConfig.call(this, params, config);

    // This is the backing field for {@link //getLexerActionExecutor}.
	var lexerActionExecutor = params.lexerActionExecutor || null;
    this.lexerActionExecutor = lexerActionExecutor || (config!==null ? config.lexerActionExecutor : null);
    this.passedThroughNonGreedyDecision = config!==null ? this.checkNonGreedyDecision(config, this.state) : false;
    return this;
}

LexerATNConfig.prototype = Object.create(ATNConfig.prototype);
LexerATNConfig.prototype.constructor = LexerATNConfig;

LexerATNConfig.prototype.updateHashCode = function(hash) {
    hash.update(this.state.stateNumber, this.alt, this.context, this.semanticContext, this.passedThroughNonGreedyDecision, this.lexerActionExecutor);
};

LexerATNConfig.prototype.equals = function(other) {
    return this === other ||
            (other instanceof LexerATNConfig &&
            this.passedThroughNonGreedyDecision == other.passedThroughNonGreedyDecision &&
            (this.lexerActionExecutor ? this.lexerActionExecutor.equals(other.lexerActionExecutor) : !other.lexerActionExecutor) &&
            ATNConfig.prototype.equals.call(this, other));
};

LexerATNConfig.prototype.hashCodeForConfigSet = LexerATNConfig.prototype.hashCode;

LexerATNConfig.prototype.equalsForConfigSet = LexerATNConfig.prototype.equals;


LexerATNConfig.prototype.checkNonGreedyDecision = function(source, target) {
    return source.passedThroughNonGreedyDecision ||
        (target instanceof DecisionState) && target.nonGreedy;
};

exports.ATNConfig = ATNConfig;
exports.LexerATNConfig = LexerATNConfig;

/***/ }),
/* 31 */
/***/ (function(module, exports, __webpack_require__) {

/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
///

// A lexer is recognizer that draws input symbols from a character stream.
//  lexer grammars result in a subclass of this object. A Lexer object
//  uses simplified match() and error recovery mechanisms in the interest of speed.

var Token = __webpack_require__(2).Token;
var Recognizer = __webpack_require__(74).Recognizer;
var CommonTokenFactory = __webpack_require__(117).CommonTokenFactory;
var RecognitionException  = __webpack_require__(8).RecognitionException;
var LexerNoViableAltException = __webpack_require__(8).LexerNoViableAltException;

function TokenSource() {
	return this;
}

function Lexer(input) {
	Recognizer.call(this);
	this._input = input;
	this._factory = CommonTokenFactory.DEFAULT;
	this._tokenFactorySourcePair = [ this, input ];

	this._interp = null; // child classes must populate this

	// The goal of all lexer rules/methods is to create a token object.
	// this is an instance variable as multiple rules may collaborate to
	// create a single token. nextToken will return this object after
	// matching lexer rule(s). If you subclass to allow multiple token
	// emissions, then set this to the last token to be matched or
	// something nonnull so that the auto token emit mechanism will not
	// emit another token.
	this._token = null;

	// What character index in the stream did the current token start at?
	// Needed, for example, to get the text for current token. Set at
	// the start of nextToken.
	this._tokenStartCharIndex = -1;

	// The line on which the first character of the token resides///
	this._tokenStartLine = -1;

	// The character position of first character within the line///
	this._tokenStartColumn = -1;

	// Once we see EOF on char stream, next token will be EOF.
	// If you have DONE : EOF ; then you see DONE EOF.
	this._hitEOF = false;

	// The channel number for the current token///
	this._channel = Token.DEFAULT_CHANNEL;

	// The token type for the current token///
	this._type = Token.INVALID_TYPE;

	this._modeStack = [];
	this._mode = Lexer.DEFAULT_MODE;

	// You can set the text for the current token to override what is in
	// the input char buffer. Use setText() or can set this instance var.
	// /
	this._text = null;

	return this;
}

Lexer.prototype = Object.create(Recognizer.prototype);
Lexer.prototype.constructor = Lexer;

Lexer.DEFAULT_MODE = 0;
Lexer.MORE = -2;
Lexer.SKIP = -3;

Lexer.DEFAULT_TOKEN_CHANNEL = Token.DEFAULT_CHANNEL;
Lexer.HIDDEN = Token.HIDDEN_CHANNEL;
Lexer.MIN_CHAR_VALUE = 0x0000;
Lexer.MAX_CHAR_VALUE = 0x10FFFF;

Lexer.prototype.reset = function() {
	// wack Lexer state variables
	if (this._input !== null) {
		this._input.seek(0); // rewind the input
	}
	this._token = null;
	this._type = Token.INVALID_TYPE;
	this._channel = Token.DEFAULT_CHANNEL;
	this._tokenStartCharIndex = -1;
	this._tokenStartColumn = -1;
	this._tokenStartLine = -1;
	this._text = null;

	this._hitEOF = false;
	this._mode = Lexer.DEFAULT_MODE;
	this._modeStack = [];

	this._interp.reset();
};

// Return a token from this source; i.e., match a token on the char stream.
Lexer.prototype.nextToken = function() {
	if (this._input === null) {
		throw "nextToken requires a non-null input stream.";
	}

	// Mark start location in char stream so unbuffered streams are
	// guaranteed at least have text of current token
	var tokenStartMarker = this._input.mark();
	try {
		while (true) {
			if (this._hitEOF) {
				this.emitEOF();
				return this._token;
			}
			this._token = null;
			this._channel = Token.DEFAULT_CHANNEL;
			this._tokenStartCharIndex = this._input.index;
			this._tokenStartColumn = this._interp.column;
			this._tokenStartLine = this._interp.line;
			this._text = null;
			var continueOuter = false;
			while (true) {
				this._type = Token.INVALID_TYPE;
				var ttype = Lexer.SKIP;
				try {
					ttype = this._interp.match(this._input, this._mode);
				} catch (e) {
				    if(e instanceof RecognitionException) {
                        this.notifyListeners(e); // report error
                        this.recover(e);
                    } else {
                        console.log(e.stack);
                        throw e;
                    }
				}
				if (this._input.LA(1) === Token.EOF) {
					this._hitEOF = true;
				}
				if (this._type === Token.INVALID_TYPE) {
					this._type = ttype;
				}
				if (this._type === Lexer.SKIP) {
					continueOuter = true;
					break;
				}
				if (this._type !== Lexer.MORE) {
					break;
				}
			}
			if (continueOuter) {
				continue;
			}
			if (this._token === null) {
				this.emit();
			}
			return this._token;
		}
	} finally {
		// make sure we release marker after match or
		// unbuffered char stream will keep buffering
		this._input.release(tokenStartMarker);
	}
};

// Instruct the lexer to skip creating a token for current lexer rule
// and look for another token. nextToken() knows to keep looking when
// a lexer rule finishes with token set to SKIP_TOKEN. Recall that
// if token==null at end of any token rule, it creates one for you
// and emits it.
// /
Lexer.prototype.skip = function() {
	this._type = Lexer.SKIP;
};

Lexer.prototype.more = function() {
	this._type = Lexer.MORE;
};

Lexer.prototype.mode = function(m) {
	this._mode = m;
};

Lexer.prototype.pushMode = function(m) {
	if (this._interp.debug) {
		console.log("pushMode " + m);
	}
	this._modeStack.push(this._mode);
	this.mode(m);
};

Lexer.prototype.popMode = function() {
	if (this._modeStack.length === 0) {
		throw "Empty Stack";
	}
	if (this._interp.debug) {
		console.log("popMode back to " + this._modeStack.slice(0, -1));
	}
	this.mode(this._modeStack.pop());
	return this._mode;
};

// Set the char stream and reset the lexer
Object.defineProperty(Lexer.prototype, "inputStream", {
	get : function() {
		return this._input;
	},
	set : function(input) {
		this._input = null;
		this._tokenFactorySourcePair = [ this, this._input ];
		this.reset();
		this._input = input;
		this._tokenFactorySourcePair = [ this, this._input ];
	}
});

Object.defineProperty(Lexer.prototype, "sourceName", {
	get : function sourceName() {
		return this._input.sourceName;
	}
});

// By default does not support multiple emits per nextToken invocation
// for efficiency reasons. Subclass and override this method, nextToken,
// and getToken (to push tokens into a list and pull from that list
// rather than a single variable as this implementation does).
// /
Lexer.prototype.emitToken = function(token) {
	this._token = token;
};

// The standard method called to automatically emit a token at the
// outermost lexical rule. The token object should point into the
// char buffer start..stop. If there is a text override in 'text',
// use that to set the token's text. Override this method to emit
// custom Token objects or provide a new factory.
// /
Lexer.prototype.emit = function() {
	var t = this._factory.create(this._tokenFactorySourcePair, this._type,
			this._text, this._channel, this._tokenStartCharIndex, this
					.getCharIndex() - 1, this._tokenStartLine,
			this._tokenStartColumn);
	this.emitToken(t);
	return t;
};

Lexer.prototype.emitEOF = function() {
	var cpos = this.column;
	var lpos = this.line;
	var eof = this._factory.create(this._tokenFactorySourcePair, Token.EOF,
			null, Token.DEFAULT_CHANNEL, this._input.index,
			this._input.index - 1, lpos, cpos);
	this.emitToken(eof);
	return eof;
};

Object.defineProperty(Lexer.prototype, "type", {
	get : function() {
		return this.type;
	},
	set : function(type) {
		this._type = type;
	}
});

Object.defineProperty(Lexer.prototype, "line", {
	get : function() {
		return this._interp.line;
	},
	set : function(line) {
		this._interp.line = line;
	}
});

Object.defineProperty(Lexer.prototype, "column", {
	get : function() {
		return this._interp.column;
	},
	set : function(column) {
		this._interp.column = column;
	}
});


// What is the index of the current character of lookahead?///
Lexer.prototype.getCharIndex = function() {
	return this._input.index;
};

// Return the text matched so far for the current token or any text override.
//Set the complete text of this token; it wipes any previous changes to the text.
Object.defineProperty(Lexer.prototype, "text", {
	get : function() {
		if (this._text !== null) {
			return this._text;
		} else {
			return this._interp.getText(this._input);
		}
	},
	set : function(text) {
		this._text = text;
	}
});
// Return a list of all Token objects in input char stream.
// Forces load of all tokens. Does not include EOF token.
// /
Lexer.prototype.getAllTokens = function() {
	var tokens = [];
	var t = this.nextToken();
	while (t.type !== Token.EOF) {
		tokens.push(t);
		t = this.nextToken();
	}
	return tokens;
};

Lexer.prototype.notifyListeners = function(e) {
	var start = this._tokenStartCharIndex;
	var stop = this._input.index;
	var text = this._input.getText(start, stop);
	var msg = "token recognition error at: '" + this.getErrorDisplay(text) + "'";
	var listener = this.getErrorListenerDispatch();
	listener.syntaxError(this, null, this._tokenStartLine,
			this._tokenStartColumn, msg, e);
};

Lexer.prototype.getErrorDisplay = function(s) {
	var d = [];
	for (var i = 0; i < s.length; i++) {
		d.push(s[i]);
	}
	return d.join('');
};

Lexer.prototype.getErrorDisplayForChar = function(c) {
	if (c.charCodeAt(0) === Token.EOF) {
		return "<EOF>";
	} else if (c === '\n') {
		return "\\n";
	} else if (c === '\t') {
		return "\\t";
	} else if (c === '\r') {
		return "\\r";
	} else {
		return c;
	}
};

Lexer.prototype.getCharErrorDisplay = function(c) {
	return "'" + this.getErrorDisplayForChar(c) + "'";
};

// Lexers can normally match any char in it's vocabulary after matching
// a token, so do the easy thing and just kill a character and hope
// it all works out. You can instead use the rule invocation stack
// to do sophisticated error recovery if you are in a fragment rule.
// /
Lexer.prototype.recover = function(re) {
	if (this._input.LA(1) !== Token.EOF) {
		if (re instanceof LexerNoViableAltException) {
			// skip a char and try again
			this._interp.consume(this._input);
		} else {
			// TODO: Do we lose character or line position information?
			this._input.consume();
		}
	}
};

exports.Lexer = Lexer;


/***/ }),
/* 32 */
/***/ (function(module, exports) {

//
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

// Provides an empty default implementation of {@link ANTLRErrorListener}. The
// default implementation of each method does nothing, but can be overridden as
// necessary.

function ErrorListener() {
	return this;
}

ErrorListener.prototype.syntaxError = function(recognizer, offendingSymbol, line, column, msg, e) {
};

ErrorListener.prototype.reportAmbiguity = function(recognizer, dfa, startIndex, stopIndex, exact, ambigAlts, configs) {
};

ErrorListener.prototype.reportAttemptingFullContext = function(recognizer, dfa, startIndex, stopIndex, conflictingAlts, configs) {
};

ErrorListener.prototype.reportContextSensitivity = function(recognizer, dfa, startIndex, stopIndex, prediction, configs) {
};

function ConsoleErrorListener() {
	ErrorListener.call(this);
	return this;
}

ConsoleErrorListener.prototype = Object.create(ErrorListener.prototype);
ConsoleErrorListener.prototype.constructor = ConsoleErrorListener;

//
// Provides a default instance of {@link ConsoleErrorListener}.
//
ConsoleErrorListener.INSTANCE = new ConsoleErrorListener();

//
// {@inheritDoc}
//
// <p>
// This implementation prints messages to {@link System//err} containing the
// values of {@code line}, {@code charPositionInLine}, and {@code msg} using
// the following format.</p>
//
// <pre>
// line <em>line</em>:<em>charPositionInLine</em> <em>msg</em>
// </pre>
//
ConsoleErrorListener.prototype.syntaxError = function(recognizer, offendingSymbol, line, column, msg, e) {
    console.error("line " + line + ":" + column + " " + msg);
};

function ProxyErrorListener(delegates) {
	ErrorListener.call(this);
    if (delegates===null) {
        throw "delegates";
    }
    this.delegates = delegates;
	return this;
}

ProxyErrorListener.prototype = Object.create(ErrorListener.prototype);
ProxyErrorListener.prototype.constructor = ProxyErrorListener;

ProxyErrorListener.prototype.syntaxError = function(recognizer, offendingSymbol, line, column, msg, e) {
    this.delegates.map(function(d) { d.syntaxError(recognizer, offendingSymbol, line, column, msg, e); });
};

ProxyErrorListener.prototype.reportAmbiguity = function(recognizer, dfa, startIndex, stopIndex, exact, ambigAlts, configs) {
    this.delegates.map(function(d) { d.reportAmbiguity(recognizer, dfa, startIndex, stopIndex, exact, ambigAlts, configs); });
};

ProxyErrorListener.prototype.reportAttemptingFullContext = function(recognizer, dfa, startIndex, stopIndex, conflictingAlts, configs) {
	this.delegates.map(function(d) { d.reportAttemptingFullContext(recognizer, dfa, startIndex, stopIndex, conflictingAlts, configs); });
};

ProxyErrorListener.prototype.reportContextSensitivity = function(recognizer, dfa, startIndex, stopIndex, prediction, configs) {
	this.delegates.map(function(d) { d.reportContextSensitivity(recognizer, dfa, startIndex, stopIndex, prediction, configs); });
};

exports.ErrorListener = ErrorListener;
exports.ConsoleErrorListener = ConsoleErrorListener;
exports.ProxyErrorListener = ProxyErrorListener;



/***/ }),
/* 33 */
/***/ (function(module, exports) {

/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

// A DFA walker that knows how to dump them to serialized strings.#/


function DFASerializer(dfa, literalNames, symbolicNames) {
	this.dfa = dfa;
	this.literalNames = literalNames || [];
	this.symbolicNames = symbolicNames || [];
	return this;
}

DFASerializer.prototype.toString = function() {
   if(this.dfa.s0 === null) {
       return null;
   }
   var buf = "";
   var states = this.dfa.sortedStates();
   for(var i=0;i<states.length;i++) {
       var s = states[i];
       if(s.edges!==null) {
            var n = s.edges.length;
            for(var j=0;j<n;j++) {
                var t = s.edges[j] || null;
                if(t!==null && t.stateNumber !== 0x7FFFFFFF) {
                    buf = buf.concat(this.getStateString(s));
                    buf = buf.concat("-");
                    buf = buf.concat(this.getEdgeLabel(j));
                    buf = buf.concat("->");
                    buf = buf.concat(this.getStateString(t));
                    buf = buf.concat('\n');
                }
            }
       }
   }
   return buf.length===0 ? null : buf;
};

DFASerializer.prototype.getEdgeLabel = function(i) {
    if (i===0) {
        return "EOF";
    } else if(this.literalNames !==null || this.symbolicNames!==null) {
        return this.literalNames[i-1] || this.symbolicNames[i-1];
    } else {
        return String.fromCharCode(i-1);
    }
};

DFASerializer.prototype.getStateString = function(s) {
    var baseStateStr = ( s.isAcceptState ? ":" : "") + "s" + s.stateNumber + ( s.requiresFullContext ? "^" : "");
    if(s.isAcceptState) {
        if (s.predicates !== null) {
            return baseStateStr + "=>" + s.predicates.toString();
        } else {
            return baseStateStr + "=>" + s.prediction.toString();
        }
    } else {
        return baseStateStr;
    }
};

function LexerDFASerializer(dfa) {
	DFASerializer.call(this, dfa, null);
	return this;
}

LexerDFASerializer.prototype = Object.create(DFASerializer.prototype);
LexerDFASerializer.prototype.constructor = LexerDFASerializer;

LexerDFASerializer.prototype.getEdgeLabel = function(i) {
	return "'" + String.fromCharCode(i) + "'";
};

exports.DFASerializer = DFASerializer;
exports.LexerDFASerializer = LexerDFASerializer;



/***/ }),
/* 34 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var __read = undefined && undefined.__read || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o),
        r,
        ar = [],
        e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) {
            ar.push(r.value);
        }
    } catch (error) {
        e = { error: error };
    } finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        } finally {
            if (e) throw e.error;
        }
    }
    return ar;
};
var __spread = undefined && undefined.__spread || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) {
        ar = ar.concat(__read(arguments[i]));
    }return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
var CodeRange_1 = __webpack_require__(61);
__webpack_require__(84);
var UniNode = /** @class */function () {
    function UniNode(comments, codeRange) {
        if (comments === undefined && codeRange === undefined) {
            this.comments = [];
            this.codeRange = null;
        } else if (comments === undefined || codeRange === undefined) {
            throw new Error('invalid arguments');
        } else {
            this.comments = comments;
            this.codeRange = codeRange;
        }
        this.fields = new Map();
        this.fields.set('comments', String);
        this.fields.set('codeRange', CodeRange_1.default);
    }
    UniNode.prototype.toString = function () {
        return 'Node(' + ')';
    };
    UniNode.prototype.equals = function (obj) {
        if (obj == null || !(obj instanceof UniNode)) return false;
        var that = obj;
        return that !== null && (this.comments == null ? that.comments == null : this.comments.equals(that.comments)) && (this.codeRange == null ? that.codeRange == null : this.codeRange.equals(that.codeRange));
    };
    UniNode.prototype.merge = function (that) {
        if (that.comments != null) {
            if (this.comments == null) {
                this.comments = that.comments;
            } else {
                (_a = this.comments).push.apply(_a, __spread(that.comments));
            }
        }
        if (that.codeRange != null) {
            this.codeRange = that.codeRange;
        }
        var _a;
    };
    return UniNode;
}();
exports.default = UniNode;

/***/ }),
/* 35 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var __extends = undefined && undefined.__extends || function () {
    var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
        d.__proto__ = b;
    } || function (d, b) {
        for (var p in b) {
            if (b.hasOwnProperty(p)) d[p] = b[p];
        }
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
Object.defineProperty(exports, "__esModule", { value: true });
var UniExpr_1 = __webpack_require__(0);
var UniBinOp = /** @class */function (_super) {
    __extends(UniBinOp, _super);
    function UniBinOp(operator, left, right) {
        var _this = _super.call(this) || this;
        if (operator === undefined && left === undefined && right === undefined) {
            _this.operator = null;
            _this.left = null;
            _this.right = null;
        } else if (operator === undefined || left === undefined || right === undefined) {
            throw new Error('invalid arguments');
        } else {
            _this.operator = operator;
            _this.left = left;
            _this.right = right;
        }
        _this.fields.set('operator', String);
        _this.fields.set('left', UniExpr_1.default);
        _this.fields.set('right', UniExpr_1.default);
        return _this;
    }
    UniBinOp.prototype.toString = function () {
        return 'BinOp(' + this.operator + ')';
    };
    UniBinOp.prototype.equals = function (obj) {
        if (obj == null || !(obj instanceof UniBinOp)) return false;
        var that = obj;
        return _super.prototype.equals.call(this, that) && (this.operator == null ? that.operator == null : this.operator === that.operator) && (this.left == null ? that.left == null : this.left.equals(that.left)) && (this.right == null ? that.right == null : this.right.equals(that.right));
    };
    UniBinOp.prototype.merge = function (that) {
        _super.prototype.merge.call(this, that);
        if (that.operator != null) {
            this.operator = that.operator;
        }
        if (that.left != null) {
            this.left = that.left;
        }
        if (that.right != null) {
            this.right = that.right;
        }
    };
    return UniBinOp;
}(UniExpr_1.default);
exports.default = UniBinOp;

/***/ }),
/* 36 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var __extends = undefined && undefined.__extends || function () {
    var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
        d.__proto__ = b;
    } || function (d, b) {
        for (var p in b) {
            if (b.hasOwnProperty(p)) d[p] = b[p];
        }
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
Object.defineProperty(exports, "__esModule", { value: true });
var UniStatement_1 = __webpack_require__(3);
var UniExpr_1 = __webpack_require__(0);
var UniWhile = /** @class */function (_super) {
    __extends(UniWhile, _super);
    function UniWhile(cond, statement) {
        var _this = _super.call(this) || this;
        if (cond === undefined && statement === undefined) {
            _this.cond = null;
            _this.statement = null;
        } else if (cond === undefined || statement === undefined) {
            throw new Error('invalid arguments');
        } else {
            _this.cond = cond;
            _this.statement = statement;
        }
        _this.fields.set('cond', UniExpr_1.default);
        _this.fields.set('statement', UniStatement_1.default);
        return _this;
    }
    UniWhile.prototype.toString = function () {
        return 'While(' + ')';
    };
    UniWhile.prototype.equals = function (obj) {
        if (obj == null || !(obj instanceof UniWhile)) return false;
        var that = obj;
        return _super.prototype.equals.call(this, that) && (this.cond == null ? that.cond == null : this.cond.equals(that.cond)) && (this.statement == null ? that.statement == null : this.statement.equals(that.statement));
    };
    UniWhile.prototype.merge = function (that) {
        _super.prototype.merge.call(this, that);
        if (that.cond != null) {
            this.cond = that.cond;
        }
        if (that.statement != null) {
            this.statement = that.statement;
        }
    };
    return UniWhile;
}(UniStatement_1.default);
exports.default = UniWhile;

/***/ }),
/* 37 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var __extends = undefined && undefined.__extends || function () {
    var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
        d.__proto__ = b;
    } || function (d, b) {
        for (var p in b) {
            if (b.hasOwnProperty(p)) d[p] = b[p];
        }
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
Object.defineProperty(exports, "__esModule", { value: true });
var UniExpr_1 = __webpack_require__(0);
var UniUnaryOp = /** @class */function (_super) {
    __extends(UniUnaryOp, _super);
    function UniUnaryOp(operator, expr) {
        var _this = _super.call(this) || this;
        if (operator === undefined && expr === undefined) {
            _this.operator = null;
            _this.expr = null;
        } else if (operator === undefined || expr === undefined) {
            throw new Error('invalid arguments');
        } else {
            _this.operator = operator;
            _this.expr = expr;
        }
        _this.fields.set('operator', String);
        _this.fields.set('expr', UniExpr_1.default);
        return _this;
    }
    UniUnaryOp.prototype.toString = function () {
        return 'UnaryOp(' + this.operator + ')';
    };
    UniUnaryOp.prototype.equals = function (obj) {
        if (obj == null || !(obj instanceof UniUnaryOp)) return false;
        var that = obj;
        return _super.prototype.equals.call(this, that) && (this.operator == null ? that.operator == null : this.operator === that.operator) && (this.expr == null ? that.expr == null : this.expr.equals(that.expr));
    };
    UniUnaryOp.prototype.merge = function (that) {
        _super.prototype.merge.call(this, that);
        if (that.operator != null) {
            this.operator = that.operator;
        }
        if (that.expr != null) {
            this.expr = that.expr;
        }
    };
    return UniUnaryOp;
}(UniExpr_1.default);
exports.default = UniUnaryOp;

/***/ }),
/* 38 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var __extends = undefined && undefined.__extends || function () {
    var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
        d.__proto__ = b;
    } || function (d, b) {
        for (var p in b) {
            if (b.hasOwnProperty(p)) d[p] = b[p];
        }
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
Object.defineProperty(exports, "__esModule", { value: true });
var UniStatement_1 = __webpack_require__(3);
var UniExpr_1 = __webpack_require__(0);
var UniReturn = /** @class */function (_super) {
    __extends(UniReturn, _super);
    function UniReturn(value) {
        var _this = _super.call(this) || this;
        if (value === undefined) {
            _this.value = null;
        } else {
            _this.value = value;
        }
        _this.fields.set('value', UniExpr_1.default);
        return _this;
    }
    UniReturn.prototype.toString = function () {
        return 'Return(' + ')';
    };
    UniReturn.prototype.equals = function (obj) {
        if (obj == null || !(obj instanceof UniReturn)) return false;
        var that = obj;
        return _super.prototype.equals.call(this, that) && (this.value == null ? that.value == null : this.value.equals(that.value));
    };
    UniReturn.prototype.merge = function (that) {
        _super.prototype.merge.call(this, that);
        if (that.value != null) {
            this.value = that.value;
        }
    };
    return UniReturn;
}(UniStatement_1.default);
exports.default = UniReturn;

/***/ }),
/* 39 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var __extends = undefined && undefined.__extends || function () {
    var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
        d.__proto__ = b;
    } || function (d, b) {
        for (var p in b) {
            if (b.hasOwnProperty(p)) d[p] = b[p];
        }
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
Object.defineProperty(exports, "__esModule", { value: true });
var UniNode_1 = __webpack_require__(34);
var UniBlock_1 = __webpack_require__(19);
var UniProgram = /** @class */function (_super) {
    __extends(UniProgram, _super);
    function UniProgram(block) {
        var _this = _super.call(this) || this;
        if (block === undefined) {
            _this.block = null;
        } else {
            _this.block = block;
        }
        _this.fields.set('block', UniBlock_1.default);
        return _this;
    }
    UniProgram.prototype.toString = function () {
        return 'Program(' + ')';
    };
    UniProgram.prototype.equals = function (obj) {
        if (obj == null || !(obj instanceof UniProgram)) return false;
        var that = obj;
        return _super.prototype.equals.call(this, that) && (this.block == null ? that.block == null : this.block.equals(that.block));
    };
    UniProgram.prototype.merge = function (that) {
        _super.prototype.merge.call(this, that);
        if (that.block != null) {
            this.block = that.block;
        }
    };
    return UniProgram;
}(UniNode_1.default);
exports.default = UniProgram;

/***/ }),
/* 40 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var __extends = undefined && undefined.__extends || function () {
    var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
        d.__proto__ = b;
    } || function (d, b) {
        for (var p in b) {
            if (b.hasOwnProperty(p)) d[p] = b[p];
        }
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
Object.defineProperty(exports, "__esModule", { value: true });
var UniVariableDec_1 = __webpack_require__(21);
var UniParam = /** @class */function (_super) {
    __extends(UniParam, _super);
    function UniParam() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    UniParam.prototype.toString = function () {
        return 'Param(' + ')';
    };
    UniParam.prototype.equals = function (obj) {
        if (obj == null || !(obj instanceof UniParam)) return false;
        var that = obj;
        return _super.prototype.equals.call(this, that);
    };
    return UniParam;
}(UniVariableDec_1.default);
exports.default = UniParam;

/***/ }),
/* 41 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var __extends = undefined && undefined.__extends || function () {
    var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
        d.__proto__ = b;
    } || function (d, b) {
        for (var p in b) {
            if (b.hasOwnProperty(p)) d[p] = b[p];
        }
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
Object.defineProperty(exports, "__esModule", { value: true });
var UniDecralation_1 = __webpack_require__(22);
var UniExpr_1 = __webpack_require__(0);
var UniVariableDef = /** @class */function (_super) {
    __extends(UniVariableDef, _super);
    function UniVariableDef(name, value, typeSuffix) {
        var _this = _super.call(this) || this;
        if (name === undefined && value === undefined && typeSuffix === undefined) {
            _this.name = null;
            _this.value = null;
            _this.typeSuffix = null;
        } else if (name === undefined || value === undefined || typeSuffix === undefined) {
            throw new Error('invalid arguments');
        } else {
            _this.name = name;
            _this.value = value;
            _this.typeSuffix = typeSuffix;
        }
        _this.fields.set('name', String);
        _this.fields.set('value', UniExpr_1.default);
        _this.fields.set('typeSuffix', String);
        return _this;
    }
    UniVariableDef.prototype.toString = function () {
        return 'VariableDef(' + this.name + ', ' + this.typeSuffix + ')';
    };
    UniVariableDef.prototype.equals = function (obj) {
        if (obj == null || !(obj instanceof UniVariableDef)) return false;
        var that = obj;
        return _super.prototype.equals.call(this, that) && (this.name == null ? that.name == null : this.name === that.name) && (this.value == null ? that.value == null : this.value.equals(that.value)) && (this.typeSuffix == null ? that.typeSuffix == null : this.typeSuffix === that.typeSuffix);
    };
    UniVariableDef.prototype.merge = function (that) {
        _super.prototype.merge.call(this, that);
        if (that.name != null) {
            this.name = that.name;
        }
        if (that.value != null) {
            this.value = that.value;
        }
        if (that.typeSuffix != null) {
            this.typeSuffix = that.typeSuffix;
        }
    };
    return UniVariableDef;
}(UniDecralation_1.default);
exports.default = UniVariableDef;

/***/ }),
/* 42 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var __extends = undefined && undefined.__extends || function () {
    var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
        d.__proto__ = b;
    } || function (d, b) {
        for (var p in b) {
            if (b.hasOwnProperty(p)) d[p] = b[p];
        }
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
var __read = undefined && undefined.__read || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o),
        r,
        ar = [],
        e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) {
            ar.push(r.value);
        }
    } catch (error) {
        e = { error: error };
    } finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        } finally {
            if (e) throw e.error;
        }
    }
    return ar;
};
var __spread = undefined && undefined.__spread || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) {
        ar = ar.concat(__read(arguments[i]));
    }return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
var UniExpr_1 = __webpack_require__(0);
var UniArray = /** @class */function (_super) {
    __extends(UniArray, _super);
    function UniArray(items) {
        var _this = _super.call(this) || this;
        if (items === undefined) {
            _this.items = [];
        } else {
            _this.items = items;
        }
        _this.fields.set('items', UniExpr_1.default);
        return _this;
    }
    UniArray.prototype.toString = function () {
        return 'Array(' + ')';
    };
    UniArray.prototype.equals = function (obj) {
        if (obj == null || !(obj instanceof UniArray)) return false;
        var that = obj;
        return _super.prototype.equals.call(this, that) && (this.items == null ? that.items == null : this.items.equals(that.items));
    };
    UniArray.prototype.merge = function (that) {
        _super.prototype.merge.call(this, that);
        if (that.items != null) {
            if (this.items == null) {
                this.items = that.items;
            } else {
                (_a = this.items).push.apply(_a, __spread(that.items));
            }
        }
        var _a;
    };
    return UniArray;
}(UniExpr_1.default);
exports.default = UniArray;

/***/ }),
/* 43 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var __extends = undefined && undefined.__extends || function () {
    var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
        d.__proto__ = b;
    } || function (d, b) {
        for (var p in b) {
            if (b.hasOwnProperty(p)) d[p] = b[p];
        }
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
Object.defineProperty(exports, "__esModule", { value: true });
var UniStatement_1 = __webpack_require__(3);
var UniExpr_1 = __webpack_require__(0);
var UniFor = /** @class */function (_super) {
    __extends(UniFor, _super);
    function UniFor(init, cond, step, statement) {
        var _this = _super.call(this) || this;
        if (init === undefined && cond === undefined && step === undefined && statement === undefined) {
            _this.init = null;
            _this.cond = null;
            _this.step = null;
            _this.statement = null;
        } else if (init === undefined || cond === undefined || step === undefined || statement === undefined) {
            throw new Error('invalid arguments');
        } else {
            _this.init = init;
            _this.cond = cond;
            _this.step = step;
            _this.statement = statement;
        }
        _this.fields.set('init', UniExpr_1.default);
        _this.fields.set('cond', UniExpr_1.default);
        _this.fields.set('step', UniExpr_1.default);
        _this.fields.set('statement', UniStatement_1.default);
        return _this;
    }
    UniFor.prototype.toString = function () {
        return 'For(' + ')';
    };
    UniFor.prototype.equals = function (obj) {
        if (obj == null || !(obj instanceof UniFor)) return false;
        var that = obj;
        return _super.prototype.equals.call(this, that) && (this.init == null ? that.init == null : this.init.equals(that.init)) && (this.cond == null ? that.cond == null : this.cond.equals(that.cond)) && (this.step == null ? that.step == null : this.step.equals(that.step)) && (this.statement == null ? that.statement == null : this.statement.equals(that.statement));
    };
    UniFor.prototype.merge = function (that) {
        _super.prototype.merge.call(this, that);
        if (that.init != null) {
            this.init = that.init;
        }
        if (that.cond != null) {
            this.cond = that.cond;
        }
        if (that.step != null) {
            this.step = that.step;
        }
        if (that.statement != null) {
            this.statement = that.statement;
        }
    };
    return UniFor;
}(UniStatement_1.default);
exports.default = UniFor;

/***/ }),
/* 44 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var __extends = undefined && undefined.__extends || function () {
    var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
        d.__proto__ = b;
    } || function (d, b) {
        for (var p in b) {
            if (b.hasOwnProperty(p)) d[p] = b[p];
        }
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
Object.defineProperty(exports, "__esModule", { value: true });
var UniStatement_1 = __webpack_require__(3);
var UniExpr_1 = __webpack_require__(0);
var UniIf = /** @class */function (_super) {
    __extends(UniIf, _super);
    function UniIf(cond, trueStatement, falseStatement) {
        var _this = _super.call(this) || this;
        if (cond === undefined && trueStatement === undefined && falseStatement === undefined) {
            _this.cond = null;
            _this.trueStatement = null;
            _this.falseStatement = null;
        } else if (cond === undefined || trueStatement === undefined || falseStatement === undefined) {
            throw new Error('invalid arguments');
        } else {
            _this.cond = cond;
            _this.trueStatement = trueStatement;
            _this.falseStatement = falseStatement;
        }
        _this.fields.set('cond', UniExpr_1.default);
        _this.fields.set('trueStatement', UniStatement_1.default);
        _this.fields.set('falseStatement', UniStatement_1.default);
        return _this;
    }
    UniIf.prototype.toString = function () {
        return 'If(' + ')';
    };
    UniIf.prototype.equals = function (obj) {
        if (obj == null || !(obj instanceof UniIf)) return false;
        var that = obj;
        return _super.prototype.equals.call(this, that) && (this.cond == null ? that.cond == null : this.cond.equals(that.cond)) && (this.trueStatement == null ? that.trueStatement == null : this.trueStatement.equals(that.trueStatement)) && (this.falseStatement == null ? that.falseStatement == null : this.falseStatement.equals(that.falseStatement));
    };
    UniIf.prototype.merge = function (that) {
        _super.prototype.merge.call(this, that);
        if (that.cond != null) {
            this.cond = that.cond;
        }
        if (that.trueStatement != null) {
            this.trueStatement = that.trueStatement;
        }
        if (that.falseStatement != null) {
            this.falseStatement = that.falseStatement;
        }
    };
    return UniIf;
}(UniStatement_1.default);
exports.default = UniIf;

/***/ }),
/* 45 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var __extends = undefined && undefined.__extends || function () {
    var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
        d.__proto__ = b;
    } || function (d, b) {
        for (var p in b) {
            if (b.hasOwnProperty(p)) d[p] = b[p];
        }
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
var __read = undefined && undefined.__read || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o),
        r,
        ar = [],
        e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) {
            ar.push(r.value);
        }
    } catch (error) {
        e = { error: error };
    } finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        } finally {
            if (e) throw e.error;
        }
    }
    return ar;
};
var __spread = undefined && undefined.__spread || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) {
        ar = ar.concat(__read(arguments[i]));
    }return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
var UniExpr_1 = __webpack_require__(0);
var UniIdent_1 = __webpack_require__(25);
var UniMethodCall = /** @class */function (_super) {
    __extends(UniMethodCall, _super);
    function UniMethodCall(receiver, methodName, args) {
        var _this = _super.call(this) || this;
        if (receiver === undefined && methodName === undefined && args === undefined) {
            _this.receiver = null;
            _this.methodName = null;
            _this.args = [];
        } else if (receiver === undefined || methodName === undefined || args === undefined) {
            throw new Error('invalid arguments');
        } else {
            _this.receiver = receiver;
            _this.methodName = methodName;
            _this.args = args;
        }
        _this.fields.set('receiver', UniExpr_1.default);
        _this.fields.set('methodName', UniIdent_1.default);
        _this.fields.set('args', UniExpr_1.default);
        return _this;
    }
    UniMethodCall.prototype.toString = function () {
        return 'MethodCall(' + ')';
    };
    UniMethodCall.prototype.equals = function (obj) {
        if (obj == null || !(obj instanceof UniMethodCall)) return false;
        var that = obj;
        return _super.prototype.equals.call(this, that) && (this.receiver == null ? that.receiver == null : this.receiver.equals(that.receiver)) && (this.methodName == null ? that.methodName == null : this.methodName.equals(that.methodName)) && (this.args == null ? that.args == null : this.args.equals(that.args));
    };
    UniMethodCall.prototype.merge = function (that) {
        _super.prototype.merge.call(this, that);
        if (that.receiver != null) {
            this.receiver = that.receiver;
        }
        if (that.methodName != null) {
            this.methodName = that.methodName;
        }
        if (that.args != null) {
            if (this.args == null) {
                this.args = that.args;
            } else {
                (_a = this.args).push.apply(_a, __spread(that.args));
            }
        }
        var _a;
    };
    return UniMethodCall;
}(UniExpr_1.default);
exports.default = UniMethodCall;

/***/ }),
/* 46 */
/***/ (function(module, exports, __webpack_require__) {

(function (global, factory) {
	 true ? module.exports = factory() :
	typeof define === 'function' && define.amd ? define(factory) :
	(global.typeDetect = factory());
}(this, (function () { 'use strict';

/* !
 * type-detect
 * Copyright(c) 2013 jake luer <jake@alogicalparadox.com>
 * MIT Licensed
 */
var promiseExists = typeof Promise === 'function';

/* eslint-disable no-undef */
var globalObject = typeof self === 'object' ? self : global; // eslint-disable-line id-blacklist

var symbolExists = typeof Symbol !== 'undefined';
var mapExists = typeof Map !== 'undefined';
var setExists = typeof Set !== 'undefined';
var weakMapExists = typeof WeakMap !== 'undefined';
var weakSetExists = typeof WeakSet !== 'undefined';
var dataViewExists = typeof DataView !== 'undefined';
var symbolIteratorExists = symbolExists && typeof Symbol.iterator !== 'undefined';
var symbolToStringTagExists = symbolExists && typeof Symbol.toStringTag !== 'undefined';
var setEntriesExists = setExists && typeof Set.prototype.entries === 'function';
var mapEntriesExists = mapExists && typeof Map.prototype.entries === 'function';
var setIteratorPrototype = setEntriesExists && Object.getPrototypeOf(new Set().entries());
var mapIteratorPrototype = mapEntriesExists && Object.getPrototypeOf(new Map().entries());
var arrayIteratorExists = symbolIteratorExists && typeof Array.prototype[Symbol.iterator] === 'function';
var arrayIteratorPrototype = arrayIteratorExists && Object.getPrototypeOf([][Symbol.iterator]());
var stringIteratorExists = symbolIteratorExists && typeof String.prototype[Symbol.iterator] === 'function';
var stringIteratorPrototype = stringIteratorExists && Object.getPrototypeOf(''[Symbol.iterator]());
var toStringLeftSliceLength = 8;
var toStringRightSliceLength = -1;
/**
 * ### typeOf (obj)
 *
 * Uses `Object.prototype.toString` to determine the type of an object,
 * normalising behaviour across engine versions & well optimised.
 *
 * @param {Mixed} object
 * @return {String} object type
 * @api public
 */
function typeDetect(obj) {
  /* ! Speed optimisation
   * Pre:
   *   string literal     x 3,039,035 ops/sec ±1.62% (78 runs sampled)
   *   boolean literal    x 1,424,138 ops/sec ±4.54% (75 runs sampled)
   *   number literal     x 1,653,153 ops/sec ±1.91% (82 runs sampled)
   *   undefined          x 9,978,660 ops/sec ±1.92% (75 runs sampled)
   *   function           x 2,556,769 ops/sec ±1.73% (77 runs sampled)
   * Post:
   *   string literal     x 38,564,796 ops/sec ±1.15% (79 runs sampled)
   *   boolean literal    x 31,148,940 ops/sec ±1.10% (79 runs sampled)
   *   number literal     x 32,679,330 ops/sec ±1.90% (78 runs sampled)
   *   undefined          x 32,363,368 ops/sec ±1.07% (82 runs sampled)
   *   function           x 31,296,870 ops/sec ±0.96% (83 runs sampled)
   */
  var typeofObj = typeof obj;
  if (typeofObj !== 'object') {
    return typeofObj;
  }

  /* ! Speed optimisation
   * Pre:
   *   null               x 28,645,765 ops/sec ±1.17% (82 runs sampled)
   * Post:
   *   null               x 36,428,962 ops/sec ±1.37% (84 runs sampled)
   */
  if (obj === null) {
    return 'null';
  }

  /* ! Spec Conformance
   * Test: `Object.prototype.toString.call(window)``
   *  - Node === "[object global]"
   *  - Chrome === "[object global]"
   *  - Firefox === "[object Window]"
   *  - PhantomJS === "[object Window]"
   *  - Safari === "[object Window]"
   *  - IE 11 === "[object Window]"
   *  - IE Edge === "[object Window]"
   * Test: `Object.prototype.toString.call(this)``
   *  - Chrome Worker === "[object global]"
   *  - Firefox Worker === "[object DedicatedWorkerGlobalScope]"
   *  - Safari Worker === "[object DedicatedWorkerGlobalScope]"
   *  - IE 11 Worker === "[object WorkerGlobalScope]"
   *  - IE Edge Worker === "[object WorkerGlobalScope]"
   */
  if (obj === globalObject) {
    return 'global';
  }

  /* ! Speed optimisation
   * Pre:
   *   array literal      x 2,888,352 ops/sec ±0.67% (82 runs sampled)
   * Post:
   *   array literal      x 22,479,650 ops/sec ±0.96% (81 runs sampled)
   */
  if (
    Array.isArray(obj) &&
    (symbolToStringTagExists === false || !(Symbol.toStringTag in obj))
  ) {
    return 'Array';
  }

  // Not caching existence of `window` and related properties due to potential
  // for `window` to be unset before tests in quasi-browser environments.
  if (typeof window === 'object') {
    /* ! Spec Conformance
     * (https://html.spec.whatwg.org/multipage/browsers.html#location)
     * WhatWG HTML$7.7.3 - The `Location` interface
     * Test: `Object.prototype.toString.call(window.location)``
     *  - IE <=11 === "[object Object]"
     *  - IE Edge <=13 === "[object Object]"
     */
    if (typeof window.location === 'object' && obj === window.location) {
      return 'Location';
    }

    /* ! Spec Conformance
     * (https://html.spec.whatwg.org/#document)
     * WhatWG HTML$3.1.1 - The `Document` object
     * Note: Most browsers currently adher to the W3C DOM Level 2 spec
     *       (https://www.w3.org/TR/DOM-Level-2-HTML/html.html#ID-26809268)
     *       which suggests that browsers should use HTMLTableCellElement for
     *       both TD and TH elements. WhatWG separates these.
     *       WhatWG HTML states:
     *         > For historical reasons, Window objects must also have a
     *         > writable, configurable, non-enumerable property named
     *         > HTMLDocument whose value is the Document interface object.
     * Test: `Object.prototype.toString.call(document)``
     *  - Chrome === "[object HTMLDocument]"
     *  - Firefox === "[object HTMLDocument]"
     *  - Safari === "[object HTMLDocument]"
     *  - IE <=10 === "[object Document]"
     *  - IE 11 === "[object HTMLDocument]"
     *  - IE Edge <=13 === "[object HTMLDocument]"
     */
    if (typeof window.document === 'object' && obj === window.document) {
      return 'Document';
    }

    if (typeof window.navigator === 'object') {
      /* ! Spec Conformance
       * (https://html.spec.whatwg.org/multipage/webappapis.html#mimetypearray)
       * WhatWG HTML$8.6.1.5 - Plugins - Interface MimeTypeArray
       * Test: `Object.prototype.toString.call(navigator.mimeTypes)``
       *  - IE <=10 === "[object MSMimeTypesCollection]"
       */
      if (typeof window.navigator.mimeTypes === 'object' &&
          obj === window.navigator.mimeTypes) {
        return 'MimeTypeArray';
      }

      /* ! Spec Conformance
       * (https://html.spec.whatwg.org/multipage/webappapis.html#pluginarray)
       * WhatWG HTML$8.6.1.5 - Plugins - Interface PluginArray
       * Test: `Object.prototype.toString.call(navigator.plugins)``
       *  - IE <=10 === "[object MSPluginsCollection]"
       */
      if (typeof window.navigator.plugins === 'object' &&
          obj === window.navigator.plugins) {
        return 'PluginArray';
      }
    }

    if ((typeof window.HTMLElement === 'function' ||
        typeof window.HTMLElement === 'object') &&
        obj instanceof window.HTMLElement) {
      /* ! Spec Conformance
      * (https://html.spec.whatwg.org/multipage/webappapis.html#pluginarray)
      * WhatWG HTML$4.4.4 - The `blockquote` element - Interface `HTMLQuoteElement`
      * Test: `Object.prototype.toString.call(document.createElement('blockquote'))``
      *  - IE <=10 === "[object HTMLBlockElement]"
      */
      if (obj.tagName === 'BLOCKQUOTE') {
        return 'HTMLQuoteElement';
      }

      /* ! Spec Conformance
       * (https://html.spec.whatwg.org/#htmltabledatacellelement)
       * WhatWG HTML$4.9.9 - The `td` element - Interface `HTMLTableDataCellElement`
       * Note: Most browsers currently adher to the W3C DOM Level 2 spec
       *       (https://www.w3.org/TR/DOM-Level-2-HTML/html.html#ID-82915075)
       *       which suggests that browsers should use HTMLTableCellElement for
       *       both TD and TH elements. WhatWG separates these.
       * Test: Object.prototype.toString.call(document.createElement('td'))
       *  - Chrome === "[object HTMLTableCellElement]"
       *  - Firefox === "[object HTMLTableCellElement]"
       *  - Safari === "[object HTMLTableCellElement]"
       */
      if (obj.tagName === 'TD') {
        return 'HTMLTableDataCellElement';
      }

      /* ! Spec Conformance
       * (https://html.spec.whatwg.org/#htmltableheadercellelement)
       * WhatWG HTML$4.9.9 - The `td` element - Interface `HTMLTableHeaderCellElement`
       * Note: Most browsers currently adher to the W3C DOM Level 2 spec
       *       (https://www.w3.org/TR/DOM-Level-2-HTML/html.html#ID-82915075)
       *       which suggests that browsers should use HTMLTableCellElement for
       *       both TD and TH elements. WhatWG separates these.
       * Test: Object.prototype.toString.call(document.createElement('th'))
       *  - Chrome === "[object HTMLTableCellElement]"
       *  - Firefox === "[object HTMLTableCellElement]"
       *  - Safari === "[object HTMLTableCellElement]"
       */
      if (obj.tagName === 'TH') {
        return 'HTMLTableHeaderCellElement';
      }
    }
  }

  /* ! Speed optimisation
  * Pre:
  *   Float64Array       x 625,644 ops/sec ±1.58% (80 runs sampled)
  *   Float32Array       x 1,279,852 ops/sec ±2.91% (77 runs sampled)
  *   Uint32Array        x 1,178,185 ops/sec ±1.95% (83 runs sampled)
  *   Uint16Array        x 1,008,380 ops/sec ±2.25% (80 runs sampled)
  *   Uint8Array         x 1,128,040 ops/sec ±2.11% (81 runs sampled)
  *   Int32Array         x 1,170,119 ops/sec ±2.88% (80 runs sampled)
  *   Int16Array         x 1,176,348 ops/sec ±5.79% (86 runs sampled)
  *   Int8Array          x 1,058,707 ops/sec ±4.94% (77 runs sampled)
  *   Uint8ClampedArray  x 1,110,633 ops/sec ±4.20% (80 runs sampled)
  * Post:
  *   Float64Array       x 7,105,671 ops/sec ±13.47% (64 runs sampled)
  *   Float32Array       x 5,887,912 ops/sec ±1.46% (82 runs sampled)
  *   Uint32Array        x 6,491,661 ops/sec ±1.76% (79 runs sampled)
  *   Uint16Array        x 6,559,795 ops/sec ±1.67% (82 runs sampled)
  *   Uint8Array         x 6,463,966 ops/sec ±1.43% (85 runs sampled)
  *   Int32Array         x 5,641,841 ops/sec ±3.49% (81 runs sampled)
  *   Int16Array         x 6,583,511 ops/sec ±1.98% (80 runs sampled)
  *   Int8Array          x 6,606,078 ops/sec ±1.74% (81 runs sampled)
  *   Uint8ClampedArray  x 6,602,224 ops/sec ±1.77% (83 runs sampled)
  */
  var stringTag = (symbolToStringTagExists && obj[Symbol.toStringTag]);
  if (typeof stringTag === 'string') {
    return stringTag;
  }

  var objPrototype = Object.getPrototypeOf(obj);
  /* ! Speed optimisation
  * Pre:
  *   regex literal      x 1,772,385 ops/sec ±1.85% (77 runs sampled)
  *   regex constructor  x 2,143,634 ops/sec ±2.46% (78 runs sampled)
  * Post:
  *   regex literal      x 3,928,009 ops/sec ±0.65% (78 runs sampled)
  *   regex constructor  x 3,931,108 ops/sec ±0.58% (84 runs sampled)
  */
  if (objPrototype === RegExp.prototype) {
    return 'RegExp';
  }

  /* ! Speed optimisation
  * Pre:
  *   date               x 2,130,074 ops/sec ±4.42% (68 runs sampled)
  * Post:
  *   date               x 3,953,779 ops/sec ±1.35% (77 runs sampled)
  */
  if (objPrototype === Date.prototype) {
    return 'Date';
  }

  /* ! Spec Conformance
   * (http://www.ecma-international.org/ecma-262/6.0/index.html#sec-promise.prototype-@@tostringtag)
   * ES6$25.4.5.4 - Promise.prototype[@@toStringTag] should be "Promise":
   * Test: `Object.prototype.toString.call(Promise.resolve())``
   *  - Chrome <=47 === "[object Object]"
   *  - Edge <=20 === "[object Object]"
   *  - Firefox 29-Latest === "[object Promise]"
   *  - Safari 7.1-Latest === "[object Promise]"
   */
  if (promiseExists && objPrototype === Promise.prototype) {
    return 'Promise';
  }

  /* ! Speed optimisation
  * Pre:
  *   set                x 2,222,186 ops/sec ±1.31% (82 runs sampled)
  * Post:
  *   set                x 4,545,879 ops/sec ±1.13% (83 runs sampled)
  */
  if (setExists && objPrototype === Set.prototype) {
    return 'Set';
  }

  /* ! Speed optimisation
  * Pre:
  *   map                x 2,396,842 ops/sec ±1.59% (81 runs sampled)
  * Post:
  *   map                x 4,183,945 ops/sec ±6.59% (82 runs sampled)
  */
  if (mapExists && objPrototype === Map.prototype) {
    return 'Map';
  }

  /* ! Speed optimisation
  * Pre:
  *   weakset            x 1,323,220 ops/sec ±2.17% (76 runs sampled)
  * Post:
  *   weakset            x 4,237,510 ops/sec ±2.01% (77 runs sampled)
  */
  if (weakSetExists && objPrototype === WeakSet.prototype) {
    return 'WeakSet';
  }

  /* ! Speed optimisation
  * Pre:
  *   weakmap            x 1,500,260 ops/sec ±2.02% (78 runs sampled)
  * Post:
  *   weakmap            x 3,881,384 ops/sec ±1.45% (82 runs sampled)
  */
  if (weakMapExists && objPrototype === WeakMap.prototype) {
    return 'WeakMap';
  }

  /* ! Spec Conformance
   * (http://www.ecma-international.org/ecma-262/6.0/index.html#sec-dataview.prototype-@@tostringtag)
   * ES6$24.2.4.21 - DataView.prototype[@@toStringTag] should be "DataView":
   * Test: `Object.prototype.toString.call(new DataView(new ArrayBuffer(1)))``
   *  - Edge <=13 === "[object Object]"
   */
  if (dataViewExists && objPrototype === DataView.prototype) {
    return 'DataView';
  }

  /* ! Spec Conformance
   * (http://www.ecma-international.org/ecma-262/6.0/index.html#sec-%mapiteratorprototype%-@@tostringtag)
   * ES6$23.1.5.2.2 - %MapIteratorPrototype%[@@toStringTag] should be "Map Iterator":
   * Test: `Object.prototype.toString.call(new Map().entries())``
   *  - Edge <=13 === "[object Object]"
   */
  if (mapExists && objPrototype === mapIteratorPrototype) {
    return 'Map Iterator';
  }

  /* ! Spec Conformance
   * (http://www.ecma-international.org/ecma-262/6.0/index.html#sec-%setiteratorprototype%-@@tostringtag)
   * ES6$23.2.5.2.2 - %SetIteratorPrototype%[@@toStringTag] should be "Set Iterator":
   * Test: `Object.prototype.toString.call(new Set().entries())``
   *  - Edge <=13 === "[object Object]"
   */
  if (setExists && objPrototype === setIteratorPrototype) {
    return 'Set Iterator';
  }

  /* ! Spec Conformance
   * (http://www.ecma-international.org/ecma-262/6.0/index.html#sec-%arrayiteratorprototype%-@@tostringtag)
   * ES6$22.1.5.2.2 - %ArrayIteratorPrototype%[@@toStringTag] should be "Array Iterator":
   * Test: `Object.prototype.toString.call([][Symbol.iterator]())``
   *  - Edge <=13 === "[object Object]"
   */
  if (arrayIteratorExists && objPrototype === arrayIteratorPrototype) {
    return 'Array Iterator';
  }

  /* ! Spec Conformance
   * (http://www.ecma-international.org/ecma-262/6.0/index.html#sec-%stringiteratorprototype%-@@tostringtag)
   * ES6$21.1.5.2.2 - %StringIteratorPrototype%[@@toStringTag] should be "String Iterator":
   * Test: `Object.prototype.toString.call(''[Symbol.iterator]())``
   *  - Edge <=13 === "[object Object]"
   */
  if (stringIteratorExists && objPrototype === stringIteratorPrototype) {
    return 'String Iterator';
  }

  /* ! Speed optimisation
  * Pre:
  *   object from null   x 2,424,320 ops/sec ±1.67% (76 runs sampled)
  * Post:
  *   object from null   x 5,838,000 ops/sec ±0.99% (84 runs sampled)
  */
  if (objPrototype === null) {
    return 'Object';
  }

  return Object
    .prototype
    .toString
    .call(obj)
    .slice(toStringLeftSliceLength, toStringRightSliceLength);
}

return typeDetect;

})));


/***/ }),
/* 47 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var __extends = undefined && undefined.__extends || function () {
    var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
        d.__proto__ = b;
    } || function (d, b) {
        for (var p in b) {
            if (b.hasOwnProperty(p)) d[p] = b[p];
        }
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
Object.defineProperty(exports, "__esModule", { value: true });
var RuntimeException = /** @class */function () {
    function RuntimeException(message) {
        this.name = 'RuntimeException';
        this.message = '';
        if (message !== undefined) {
            this.message = message;
        }
    }
    RuntimeException.prototype.toString = function () {
        return this.name + ': ' + this.message;
    };
    return RuntimeException;
}();
exports.default = RuntimeException;
var UniRuntimeError = /** @class */function (_super) {
    __extends(UniRuntimeError, _super);
    function UniRuntimeError() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.name = 'UniRuntimeError';
        return _this;
    }
    return UniRuntimeError;
}(RuntimeException);
exports.UniRuntimeError = UniRuntimeError;

/***/ }),
/* 48 */
/***/ (function(module, exports, __webpack_require__) {

/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

//* A rule invocation record for parsing.
//
//  Contains all of the information about the current rule not stored in the
//  RuleContext. It handles parse tree children list, Any ATN state
//  tracing, and the default values available for rule indications:
//  start, stop, rule index, current alt number, current
//  ATN state.
//
//  Subclasses made for each rule and grammar track the parameters,
//  return values, locals, and labels specific to that rule. These
//  are the objects that are returned from rules.
//
//  Note text is not an actual field of a rule return value; it is computed
//  from start and stop using the input stream's toString() method.  I
//  could add a ctor to this so that we can pass in and store the input
//  stream, but I'm not sure we want to do that.  It would seem to be undefined
//  to get the .text property anyway if the rule matches tokens from multiple
//  input streams.
//
//  I do not use getters for fields of objects that are used simply to
//  group values such as this aggregate.  The getters/setters are there to
//  satisfy the superclass interface.

var RuleContext = __webpack_require__(20).RuleContext;
var Tree = __webpack_require__(5);
var INVALID_INTERVAL = Tree.INVALID_INTERVAL;
var TerminalNode = Tree.TerminalNode;
var TerminalNodeImpl = Tree.TerminalNodeImpl;
var ErrorNodeImpl = Tree.ErrorNodeImpl;
var Interval = __webpack_require__(4).Interval;

function ParserRuleContext(parent, invokingStateNumber) {
	parent = parent || null;
	invokingStateNumber = invokingStateNumber || null;
	RuleContext.call(this, parent, invokingStateNumber);
	this.ruleIndex = -1;
    // * If we are debugging or building a parse tree for a visitor,
    // we need to track all of the tokens and rule invocations associated
    // with this rule's context. This is empty for parsing w/o tree constr.
    // operation because we don't the need to track the details about
    // how we parse this rule.
    // /
    this.children = null;
    this.start = null;
    this.stop = null;
    // The exception that forced this rule to return. If the rule successfully
    // completed, this is {@code null}.
    this.exception = null;
}

ParserRuleContext.prototype = Object.create(RuleContext.prototype);
ParserRuleContext.prototype.constructor = ParserRuleContext;

// * COPY a ctx (I'm deliberately not using copy constructor)///
ParserRuleContext.prototype.copyFrom = function(ctx) {
    // from RuleContext
    this.parentCtx = ctx.parentCtx;
    this.invokingState = ctx.invokingState;
    this.children = null;
    this.start = ctx.start;
    this.stop = ctx.stop;
    // copy any error nodes to alt label node
    if(ctx.children) {
        this.children = [];
        // reset parent pointer for any error nodes
    	ctx.children.map(function(child) {
    		if (child instanceof ErrorNodeImpl) {
                this.children.push(child);
                child.parentCtx = this;
            }
		}, this);
	}
};

// Double dispatch methods for listeners
ParserRuleContext.prototype.enterRule = function(listener) {
};

ParserRuleContext.prototype.exitRule = function(listener) {
};

// * Does not set parent link; other add methods do that///
ParserRuleContext.prototype.addChild = function(child) {
    if (this.children === null) {
        this.children = [];
    }
    this.children.push(child);
    return child;
};

// * Used by enterOuterAlt to toss out a RuleContext previously added as
// we entered a rule. If we have // label, we will need to remove
// generic ruleContext object.
// /
ParserRuleContext.prototype.removeLastChild = function() {
    if (this.children !== null) {
        this.children.pop();
    }
};

ParserRuleContext.prototype.addTokenNode = function(token) {
    var node = new TerminalNodeImpl(token);
    this.addChild(node);
    node.parentCtx = this;
    return node;
};

ParserRuleContext.prototype.addErrorNode = function(badToken) {
    var node = new ErrorNodeImpl(badToken);
    this.addChild(node);
    node.parentCtx = this;
    return node;
};

ParserRuleContext.prototype.getChild = function(i, type) {
	type = type || null;
	if (this.children === null || i < 0 || i >= this.children.length) {
		return null;
	}
	if (type === null) {
		return this.children[i];
	} else {
		for(var j=0; j<this.children.length; j++) {
			var child = this.children[j];
			if(child instanceof type) {
				if(i===0) {
					return child;
				} else {
					i -= 1;
				}
			}
		}
		return null;
    }
};


ParserRuleContext.prototype.getToken = function(ttype, i) {
	if (this.children === null || i < 0 || i >= this.children.length) {
		return null;
	}
	for(var j=0; j<this.children.length; j++) {
		var child = this.children[j];
		if (child instanceof TerminalNode) {
			if (child.symbol.type === ttype) {
				if(i===0) {
					return child;
				} else {
					i -= 1;
				}
			}
        }
	}
    return null;
};

ParserRuleContext.prototype.getTokens = function(ttype ) {
    if (this.children=== null) {
        return [];
    } else {
		var tokens = [];
		for(var j=0; j<this.children.length; j++) {
			var child = this.children[j];
			if (child instanceof TerminalNode) {
				if (child.symbol.type === ttype) {
					tokens.push(child);
				}
			}
		}
		return tokens;
    }
};

ParserRuleContext.prototype.getTypedRuleContext = function(ctxType, i) {
    return this.getChild(i, ctxType);
};

ParserRuleContext.prototype.getTypedRuleContexts = function(ctxType) {
    if (this.children=== null) {
        return [];
    } else {
		var contexts = [];
		for(var j=0; j<this.children.length; j++) {
			var child = this.children[j];
			if (child instanceof ctxType) {
				contexts.push(child);
			}
		}
		return contexts;
	}
};

ParserRuleContext.prototype.getChildCount = function() {
	if (this.children=== null) {
		return 0;
	} else {
		return this.children.length;
	}
};

ParserRuleContext.prototype.getSourceInterval = function() {
    if( this.start === null || this.stop === null) {
        return INVALID_INTERVAL;
    } else {
        return new Interval(this.start.tokenIndex, this.stop.tokenIndex);
    }
};

RuleContext.EMPTY = new ParserRuleContext();

function InterpreterRuleContext(parent, invokingStateNumber, ruleIndex) {
	ParserRuleContext.call(parent, invokingStateNumber);
    this.ruleIndex = ruleIndex;
    return this;
}

InterpreterRuleContext.prototype = Object.create(ParserRuleContext.prototype);
InterpreterRuleContext.prototype.constructor = InterpreterRuleContext;

exports.ParserRuleContext = ParserRuleContext;

/***/ }),
/* 49 */
/***/ (function(module, exports, __webpack_require__) {

//
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
//

var Token = __webpack_require__(2).Token;
__webpack_require__(77);
__webpack_require__(78);

// Vacuum all input from a string and then treat it like a buffer.

function _loadString(stream, decodeToUnicodeCodePoints) {
	stream._index = 0;
	stream.data = [];
	if (stream.decodeToUnicodeCodePoints) {
		for (var i = 0; i < stream.strdata.length; ) {
			var codePoint = stream.strdata.codePointAt(i);
			stream.data.push(codePoint);
			i += codePoint <= 0xFFFF ? 1 : 2;
		}
	} else {
		for (var i = 0; i < stream.strdata.length; i++) {
			var codeUnit = stream.strdata.charCodeAt(i);
			stream.data.push(codeUnit);
		}
	}
	stream._size = stream.data.length;
}

// If decodeToUnicodeCodePoints is true, the input is treated
// as a series of Unicode code points.
//
// Otherwise, the input is treated as a series of 16-bit UTF-16 code
// units.
function InputStream(data, decodeToUnicodeCodePoints) {
	this.name = "<empty>";
	this.strdata = data;
	this.decodeToUnicodeCodePoints = decodeToUnicodeCodePoints || false;
	_loadString(this);
	return this;
}

Object.defineProperty(InputStream.prototype, "index", {
	get : function() {
		return this._index;
	}
});

Object.defineProperty(InputStream.prototype, "size", {
	get : function() {
		return this._size;
	}
});

// Reset the stream so that it's in the same state it was
// when the object was created *except* the data array is not
// touched.
//
InputStream.prototype.reset = function() {
	this._index = 0;
};

InputStream.prototype.consume = function() {
	if (this._index >= this._size) {
		// assert this.LA(1) == Token.EOF
		throw ("cannot consume EOF");
	}
	this._index += 1;
};

InputStream.prototype.LA = function(offset) {
	if (offset === 0) {
		return 0; // undefined
	}
	if (offset < 0) {
		offset += 1; // e.g., translate LA(-1) to use offset=0
	}
	var pos = this._index + offset - 1;
	if (pos < 0 || pos >= this._size) { // invalid
		return Token.EOF;
	}
	return this.data[pos];
};

InputStream.prototype.LT = function(offset) {
	return this.LA(offset);
};

// mark/release do nothing; we have entire buffer
InputStream.prototype.mark = function() {
	return -1;
};

InputStream.prototype.release = function(marker) {
};

// consume() ahead until p==_index; can't just set p=_index as we must
// update line and column. If we seek backwards, just set p
//
InputStream.prototype.seek = function(_index) {
	if (_index <= this._index) {
		this._index = _index; // just jump; don't update stream state (line,
								// ...)
		return;
	}
	// seek forward
	this._index = Math.min(_index, this._size);
};

InputStream.prototype.getText = function(start, stop) {
	if (stop >= this._size) {
		stop = this._size - 1;
	}
	if (start >= this._size) {
		return "";
	} else {
		if (this.decodeToUnicodeCodePoints) {
			var result = "";
			for (var i = start; i <= stop; i++) {
				result += String.fromCodePoint(this.data[i]);
			}
			return result;
		} else {
			return this.strdata.slice(start, stop + 1);
		}
	}
};

InputStream.prototype.toString = function() {
	return this.strdata;
};

exports.InputStream = InputStream;


/***/ }),
/* 50 */
/***/ (function(module, exports) {

module.exports = require("fs");

/***/ }),
/* 51 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var __extends = undefined && undefined.__extends || function () {
    var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
        d.__proto__ = b;
    } || function (d, b) {
        for (var p in b) {
            if (b.hasOwnProperty(p)) d[p] = b[p];
        }
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
Object.defineProperty(exports, "__esModule", { value: true });
var UniExpr_1 = __webpack_require__(0);
var UniBoolLiteral = /** @class */function (_super) {
    __extends(UniBoolLiteral, _super);
    function UniBoolLiteral(value) {
        var _this = _super.call(this) || this;
        if (value === undefined) {
            _this.value = null;
        } else {
            _this.value = value;
        }
        _this.fields.set('value', Boolean);
        return _this;
    }
    UniBoolLiteral.prototype.toString = function () {
        return 'BoolLiteral(' + ')';
    };
    UniBoolLiteral.prototype.equals = function (obj) {
        if (obj == null || !(obj instanceof UniBoolLiteral)) return false;
        var that = obj;
        return _super.prototype.equals.call(this, that) && (this.value == null ? that.value == null : this.value === that.value);
    };
    UniBoolLiteral.prototype.merge = function (that) {
        _super.prototype.merge.call(this, that);
        if (that.value != null) {
            this.value = that.value;
        }
    };
    return UniBoolLiteral;
}(UniExpr_1.default);
exports.default = UniBoolLiteral;

/***/ }),
/* 52 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var __extends = undefined && undefined.__extends || function () {
    var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
        d.__proto__ = b;
    } || function (d, b) {
        for (var p in b) {
            if (b.hasOwnProperty(p)) d[p] = b[p];
        }
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
Object.defineProperty(exports, "__esModule", { value: true });
var UniStatement_1 = __webpack_require__(3);
var UniBreak = /** @class */function (_super) {
    __extends(UniBreak, _super);
    function UniBreak() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    UniBreak.prototype.toString = function () {
        return 'Break(' + ')';
    };
    UniBreak.prototype.equals = function (obj) {
        if (obj == null || !(obj instanceof UniBreak)) return false;
        var that = obj;
        return _super.prototype.equals.call(this, that);
    };
    return UniBreak;
}(UniStatement_1.default);
exports.default = UniBreak;

/***/ }),
/* 53 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var __extends = undefined && undefined.__extends || function () {
    var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
        d.__proto__ = b;
    } || function (d, b) {
        for (var p in b) {
            if (b.hasOwnProperty(p)) d[p] = b[p];
        }
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
Object.defineProperty(exports, "__esModule", { value: true });
var UniExpr_1 = __webpack_require__(0);
var UniCast = /** @class */function (_super) {
    __extends(UniCast, _super);
    function UniCast(type, value) {
        var _this = _super.call(this) || this;
        if (type === undefined && value === undefined) {
            _this.type = null;
            _this.value = null;
        } else if (type === undefined || value === undefined) {
            throw new Error('invalid arguments');
        } else {
            _this.type = type;
            _this.value = value;
        }
        _this.fields.set('type', String);
        _this.fields.set('value', UniExpr_1.default);
        return _this;
    }
    UniCast.prototype.toString = function () {
        return 'Cast(' + this.type + ')';
    };
    UniCast.prototype.equals = function (obj) {
        if (obj == null || !(obj instanceof UniCast)) return false;
        var that = obj;
        return _super.prototype.equals.call(this, that) && (this.type == null ? that.type == null : this.type === that.type) && (this.value == null ? that.value == null : this.value.equals(that.value));
    };
    UniCast.prototype.merge = function (that) {
        _super.prototype.merge.call(this, that);
        if (that.type != null) {
            this.type = that.type;
        }
        if (that.value != null) {
            this.value = that.value;
        }
    };
    return UniCast;
}(UniExpr_1.default);
exports.default = UniCast;

/***/ }),
/* 54 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var __extends = undefined && undefined.__extends || function () {
    var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
        d.__proto__ = b;
    } || function (d, b) {
        for (var p in b) {
            if (b.hasOwnProperty(p)) d[p] = b[p];
        }
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
Object.defineProperty(exports, "__esModule", { value: true });
var UniStatement_1 = __webpack_require__(3);
var UniContinue = /** @class */function (_super) {
    __extends(UniContinue, _super);
    function UniContinue() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    UniContinue.prototype.toString = function () {
        return 'Continue(' + ')';
    };
    UniContinue.prototype.equals = function (obj) {
        if (obj == null || !(obj instanceof UniContinue)) return false;
        var that = obj;
        return _super.prototype.equals.call(this, that);
    };
    return UniContinue;
}(UniStatement_1.default);
exports.default = UniContinue;

/***/ }),
/* 55 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var __extends = undefined && undefined.__extends || function () {
    var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
        d.__proto__ = b;
    } || function (d, b) {
        for (var p in b) {
            if (b.hasOwnProperty(p)) d[p] = b[p];
        }
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
Object.defineProperty(exports, "__esModule", { value: true });
var UniWhile_1 = __webpack_require__(36);
var UniDoWhile = /** @class */function (_super) {
    __extends(UniDoWhile, _super);
    function UniDoWhile() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    UniDoWhile.prototype.toString = function () {
        return 'DoWhile(' + ')';
    };
    UniDoWhile.prototype.equals = function (obj) {
        if (obj == null || !(obj instanceof UniDoWhile)) return false;
        var that = obj;
        return _super.prototype.equals.call(this, that);
    };
    return UniDoWhile;
}(UniWhile_1.default);
exports.default = UniDoWhile;

/***/ }),
/* 56 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var __extends = undefined && undefined.__extends || function () {
    var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
        d.__proto__ = b;
    } || function (d, b) {
        for (var p in b) {
            if (b.hasOwnProperty(p)) d[p] = b[p];
        }
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
Object.defineProperty(exports, "__esModule", { value: true });
var UniExpr_1 = __webpack_require__(0);
var UniTernaryOp = /** @class */function (_super) {
    __extends(UniTernaryOp, _super);
    function UniTernaryOp(cond, trueExpr, falseExpr) {
        var _this = _super.call(this) || this;
        if (cond === undefined && trueExpr === undefined && falseExpr === undefined) {
            _this.cond = null;
            _this.trueExpr = null;
            _this.falseExpr = null;
        } else if (cond === undefined || trueExpr === undefined || falseExpr === undefined) {
            throw new Error('invalid arguments');
        } else {
            _this.cond = cond;
            _this.trueExpr = trueExpr;
            _this.falseExpr = falseExpr;
        }
        _this.fields.set('cond', UniExpr_1.default);
        _this.fields.set('trueExpr', UniExpr_1.default);
        _this.fields.set('falseExpr', UniExpr_1.default);
        return _this;
    }
    UniTernaryOp.prototype.toString = function () {
        return 'TernaryOp(' + ')';
    };
    UniTernaryOp.prototype.equals = function (obj) {
        if (obj == null || !(obj instanceof UniTernaryOp)) return false;
        var that = obj;
        return _super.prototype.equals.call(this, that) && (this.cond == null ? that.cond == null : this.cond.equals(that.cond)) && (this.trueExpr == null ? that.trueExpr == null : this.trueExpr.equals(that.trueExpr)) && (this.falseExpr == null ? that.falseExpr == null : this.falseExpr.equals(that.falseExpr));
    };
    UniTernaryOp.prototype.merge = function (that) {
        _super.prototype.merge.call(this, that);
        if (that.cond != null) {
            this.cond = that.cond;
        }
        if (that.trueExpr != null) {
            this.trueExpr = that.trueExpr;
        }
        if (that.falseExpr != null) {
            this.falseExpr = that.falseExpr;
        }
    };
    return UniTernaryOp;
}(UniExpr_1.default);
exports.default = UniTernaryOp;

/***/ }),
/* 57 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var __extends = undefined && undefined.__extends || function () {
    var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
        d.__proto__ = b;
    } || function (d, b) {
        for (var p in b) {
            if (b.hasOwnProperty(p)) d[p] = b[p];
        }
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
Object.defineProperty(exports, "__esModule", { value: true });
var UniExpr_1 = __webpack_require__(0);
var UniStringLiteral = /** @class */function (_super) {
    __extends(UniStringLiteral, _super);
    function UniStringLiteral(value) {
        var _this = _super.call(this) || this;
        if (value === undefined) {
            _this.value = null;
        } else {
            _this.value = value;
        }
        _this.fields.set('value', String);
        return _this;
    }
    UniStringLiteral.prototype.toString = function () {
        return 'StringLiteral(' + this.value + ')';
    };
    UniStringLiteral.prototype.equals = function (obj) {
        if (obj == null || !(obj instanceof UniStringLiteral)) return false;
        var that = obj;
        return _super.prototype.equals.call(this, that) && (this.value == null ? that.value == null : this.value === that.value);
    };
    UniStringLiteral.prototype.merge = function (that) {
        _super.prototype.merge.call(this, that);
        if (that.value != null) {
            this.value = that.value;
        }
    };
    return UniStringLiteral;
}(UniExpr_1.default);
exports.default = UniStringLiteral;

/***/ }),
/* 58 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var __extends = undefined && undefined.__extends || function () {
    var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
        d.__proto__ = b;
    } || function (d, b) {
        for (var p in b) {
            if (b.hasOwnProperty(p)) d[p] = b[p];
        }
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
Object.defineProperty(exports, "__esModule", { value: true });
var UniNumberLiteral_1 = __webpack_require__(23);
var UniIntLiteral = /** @class */function (_super) {
    __extends(UniIntLiteral, _super);
    function UniIntLiteral(value) {
        var _this = _super.call(this) || this;
        if (value === undefined) {
            _this.value = null;
        } else {
            _this.value = value;
        }
        _this.fields.set('value', Number);
        return _this;
    }
    UniIntLiteral.prototype.toString = function () {
        return 'IntLiteral(' + ')';
    };
    UniIntLiteral.prototype.equals = function (obj) {
        if (obj == null || !(obj instanceof UniIntLiteral)) return false;
        var that = obj;
        return _super.prototype.equals.call(this, that) && (this.value == null ? that.value == null : this.value === that.value);
    };
    UniIntLiteral.prototype.merge = function (that) {
        _super.prototype.merge.call(this, that);
        if (that.value != null) {
            this.value = that.value;
        }
    };
    return UniIntLiteral;
}(UniNumberLiteral_1.default);
exports.default = UniIntLiteral;

/***/ }),
/* 59 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(12);


/***/ }),
/* 60 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
/* Generated from Java with JSweet 2.0.0 - http://www.jsweet.org */
var CodeLocation = /** @class */function () {
    function CodeLocation(x, y) {
        this.x = x;
        this.y = y;
    }
    CodeLocation.prototype.equals = function (obj) {
        if (obj == null || !(obj instanceof CodeLocation)) return false;
        var that = obj;
        return this.x === that.x && this.y === that.y;
    };
    return CodeLocation;
}();
exports.default = CodeLocation;

/***/ }),
/* 61 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var CodeLocation_1 = __webpack_require__(60);
var CodeRange = /** @class */function () {
    function CodeRange(begin, end) {
        this.begin = new CodeLocation_1.default(begin.x, begin.y);
        this.end = new CodeLocation_1.default(end.x, end.y);
    }
    CodeRange.prototype.equals = function (obj) {
        if (obj == null || !(obj instanceof CodeRange)) return false;
        var that = obj;
        return this.begin.equals(that.begin) && this.end.equals(that.end);
    };
    return CodeRange;
}();
exports.default = CodeRange;

/***/ }),
/* 62 */
/***/ (function(module, exports) {

/*!
 * assertion-error
 * Copyright(c) 2013 Jake Luer <jake@qualiancy.com>
 * MIT Licensed
 */

/*!
 * Return a function that will copy properties from
 * one object to another excluding any originally
 * listed. Returned function will create a new `{}`.
 *
 * @param {String} excluded properties ...
 * @return {Function}
 */

function exclude () {
  var excludes = [].slice.call(arguments);

  function excludeProps (res, obj) {
    Object.keys(obj).forEach(function (key) {
      if (!~excludes.indexOf(key)) res[key] = obj[key];
    });
  }

  return function extendExclude () {
    var args = [].slice.call(arguments)
      , i = 0
      , res = {};

    for (; i < args.length; i++) {
      excludeProps(res, args[i]);
    }

    return res;
  };
};

/*!
 * Primary Exports
 */

module.exports = AssertionError;

/**
 * ### AssertionError
 *
 * An extension of the JavaScript `Error` constructor for
 * assertion and validation scenarios.
 *
 * @param {String} message
 * @param {Object} properties to include (optional)
 * @param {callee} start stack function (optional)
 */

function AssertionError (message, _props, ssf) {
  var extend = exclude('name', 'message', 'stack', 'constructor', 'toJSON')
    , props = extend(_props || {});

  // default values
  this.message = message || 'Unspecified AssertionError';
  this.showDiff = false;

  // copy from properties
  for (var key in props) {
    this[key] = props[key];
  }

  // capture stack trace
  ssf = ssf || AssertionError;
  if (Error.captureStackTrace) {
    Error.captureStackTrace(this, ssf);
  } else {
    try {
      throw new Error();
    } catch(e) {
      this.stack = e.stack;
    }
  }
}

/*!
 * Inherit from Error.prototype
 */

AssertionError.prototype = Object.create(Error.prototype);

/*!
 * Statically set name
 */

AssertionError.prototype.name = 'AssertionError';

/*!
 * Ensure correct constructor
 */

AssertionError.prototype.constructor = AssertionError;

/**
 * Allow errors to be converted to JSON for static transfer.
 *
 * @param {Boolean} include stack (default: `true`)
 * @return {Object} object that can be `JSON.stringify`
 */

AssertionError.prototype.toJSON = function (stack) {
  var extend = exclude('constructor', 'toJSON', 'stack')
    , props = extend({ name: this.name }, this);

  // include stack if exists and not turned off
  if (false !== stack && this.stack) {
    props.stack = this.stack;
  }

  return props;
};


/***/ }),
/* 63 */
/***/ (function(module, exports) {

/*!
 * Chai - getActual utility
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

/**
 * ### .getActual(object, [actual])
 *
 * Returns the `actual` value for an Assertion.
 *
 * @param {Object} object (constructed Assertion)
 * @param {Arguments} chai.Assertion.prototype.assert arguments
 * @namespace Utils
 * @name getActual
 */

module.exports = function getActual(obj, args) {
  return args.length > 4 ? args[4] : obj._obj;
};


/***/ }),
/* 64 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/* !
 * Chai - getFuncName utility
 * Copyright(c) 2012-2016 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

/**
 * ### .getFuncName(constructorFn)
 *
 * Returns the name of a function.
 * When a non-function instance is passed, returns `null`.
 * This also includes a polyfill function if `aFunc.name` is not defined.
 *
 * @name getFuncName
 * @param {Function} funct
 * @namespace Utils
 * @api public
 */

var toString = Function.prototype.toString;
var functionNameMatch = /\s*function(?:\s|\s*\/\*[^(?:*\/)]+\*\/\s*)*([^\s\(\/]+)/;
function getFuncName(aFunc) {
  if (typeof aFunc !== 'function') {
    return null;
  }

  var name = '';
  if (typeof Function.prototype.name === 'undefined' && typeof aFunc.name === 'undefined') {
    // Here we run a polyfill if Function does not support the `name` property and if aFunc.name is not defined
    var match = toString.call(aFunc).match(functionNameMatch);
    if (match) {
      name = match[1];
    }
  } else {
    // If we've got a `name` property we just use it
    name = aFunc.name;
  }

  return name;
}

module.exports = getFuncName;


/***/ }),
/* 65 */
/***/ (function(module, exports) {

/*!
 * Chai - getProperties utility
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

/**
 * ### .getProperties(object)
 *
 * This allows the retrieval of property names of an object, enumerable or not,
 * inherited or not.
 *
 * @param {Object} object
 * @returns {Array}
 * @namespace Utils
 * @name getProperties
 * @api public
 */

module.exports = function getProperties(object) {
  var result = Object.getOwnPropertyNames(object);

  function addProperty(property) {
    if (result.indexOf(property) === -1) {
      result.push(property);
    }
  }

  var proto = Object.getPrototypeOf(object);
  while (proto !== null) {
    Object.getOwnPropertyNames(proto).forEach(addProperty);
    proto = Object.getPrototypeOf(proto);
  }

  return result;
};


/***/ }),
/* 66 */
/***/ (function(module, exports, __webpack_require__) {

/*!
 * Chai - flag utility
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

/*!
 * Module dependancies
 */

var inspect = __webpack_require__(26);
var config = __webpack_require__(13);

/**
 * ### .objDisplay(object)
 *
 * Determines if an object or an array matches
 * criteria to be inspected in-line for error
 * messages or should be truncated.
 *
 * @param {Mixed} javascript object to inspect
 * @name objDisplay
 * @namespace Utils
 * @api public
 */

module.exports = function objDisplay(obj) {
  var str = inspect(obj)
    , type = Object.prototype.toString.call(obj);

  if (config.truncateThreshold && str.length >= config.truncateThreshold) {
    if (type === '[object Function]') {
      return !obj.name || obj.name === ''
        ? '[Function]'
        : '[Function: ' + obj.name + ']';
    } else if (type === '[object Array]') {
      return '[ Array(' + obj.length + ') ]';
    } else if (type === '[object Object]') {
      var keys = Object.keys(obj)
        , kstr = keys.length > 2
          ? keys.splice(0, 2).join(', ') + ', ...'
          : keys.join(', ');
      return '{ Object (' + kstr + ') }';
    } else {
      return str;
    }
  } else {
    return str;
  }
};


/***/ }),
/* 67 */
/***/ (function(module, exports) {

/*!
 * Chai - getOwnEnumerablePropertySymbols utility
 * Copyright(c) 2011-2016 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

/**
 * ### .getOwnEnumerablePropertySymbols(object)
 *
 * This allows the retrieval of directly-owned enumerable property symbols of an
 * object. This function is necessary because Object.getOwnPropertySymbols
 * returns both enumerable and non-enumerable property symbols.
 *
 * @param {Object} object
 * @returns {Array}
 * @namespace Utils
 * @name getOwnEnumerablePropertySymbols
 * @api public
 */

module.exports = function getOwnEnumerablePropertySymbols(obj) {
  if (typeof Object.getOwnPropertySymbols !== 'function') return [];

  return Object.getOwnPropertySymbols(obj).filter(function (sym) {
    return Object.getOwnPropertyDescriptor(obj, sym).enumerable;
  });
};


/***/ }),
/* 68 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var __extends = undefined && undefined.__extends || function () {
    var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
        d.__proto__ = b;
    } || function (d, b) {
        for (var p in b) {
            if (b.hasOwnProperty(p)) d[p] = b[p];
        }
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
var __read = undefined && undefined.__read || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o),
        r,
        ar = [],
        e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) {
            ar.push(r.value);
        }
    } catch (error) {
        e = { error: error };
    } finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        } finally {
            if (e) throw e.error;
        }
    }
    return ar;
};
var __spread = undefined && undefined.__spread || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) {
        ar = ar.concat(__read(arguments[i]));
    }return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
var UniDecralation_1 = __webpack_require__(22);
var UniClassDec = /** @class */function (_super) {
    __extends(UniClassDec, _super);
    function UniClassDec(className, modifiers, members, superClass, interfaces) {
        var _this = _super.call(this) || this;
        if (className === undefined && modifiers === undefined && members === undefined && superClass === undefined && interfaces === undefined) {
            _this.className = null;
            _this.modifiers = [];
            _this.members = [];
            _this.superClass = [];
            _this.interfaces = [];
        } else if (className === undefined || modifiers === undefined || members === undefined || superClass === undefined || interfaces === undefined) {
            throw new Error('invalid arguments');
        } else {
            _this.className = className;
            _this.modifiers = modifiers;
            _this.members = members;
            _this.superClass = superClass;
            _this.interfaces = interfaces;
        }
        _this.fields.set('className', String);
        _this.fields.set('modifiers', String);
        _this.fields.set('members', UniDecralation_1.default);
        _this.fields.set('superClass', String);
        _this.fields.set('interfaces', String);
        return _this;
    }
    UniClassDec.prototype.toString = function () {
        return 'ClassDec(' + this.className + ')';
    };
    UniClassDec.prototype.equals = function (obj) {
        if (obj == null || !(obj instanceof UniClassDec)) return false;
        var that = obj;
        return _super.prototype.equals.call(this, that) && (this.className == null ? that.className == null : this.className === that.className) && (this.modifiers == null ? that.modifiers == null : this.modifiers.equals(that.modifiers)) && (this.members == null ? that.members == null : this.members.equals(that.members)) && (this.superClass == null ? that.superClass == null : this.superClass.equals(that.superClass)) && (this.interfaces == null ? that.interfaces == null : this.interfaces.equals(that.interfaces));
    };
    UniClassDec.prototype.merge = function (that) {
        _super.prototype.merge.call(this, that);
        if (that.className != null) {
            this.className = that.className;
        }
        if (that.modifiers != null) {
            if (this.modifiers == null) {
                this.modifiers = that.modifiers;
            } else {
                (_a = this.modifiers).push.apply(_a, __spread(that.modifiers));
            }
        }
        if (that.members != null) {
            if (this.members == null) {
                this.members = that.members;
            } else {
                (_b = this.members).push.apply(_b, __spread(that.members));
            }
        }
        if (that.superClass != null) {
            if (this.superClass == null) {
                this.superClass = that.superClass;
            } else {
                (_c = this.superClass).push.apply(_c, __spread(that.superClass));
            }
        }
        if (that.interfaces != null) {
            if (this.interfaces == null) {
                this.interfaces = that.interfaces;
            } else {
                (_d = this.interfaces).push.apply(_d, __spread(that.interfaces));
            }
        }
        var _a, _b, _c, _d;
    };
    return UniClassDec;
}(UniDecralation_1.default);
exports.default = UniClassDec;

/***/ }),
/* 69 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var __values = undefined && undefined.__values || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator],
        i = 0;
    if (m) return m.call(o);
    return {
        next: function next() {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
Object.defineProperty(exports, "__esModule", { value: true });
var Variable = /** @class */function () {
    function Variable(type, name, value, address, depth) {
        this.type = type;
        this.name = name;
        this.value = value;
        this.address = address;
        this.depth = depth;
        this.setValue(value);
    }
    // 構造体や配列の場合はvalueそのままでなくArrayList<Variable> valuesなど
    Variable.prototype.getValue = function () {
        return this.value;
    };
    Variable.prototype.hasValue = function (name) {
        if (this.name === name) {
            return true;
        }
        if (this.value instanceof Array) {
            var varArray = this.value;
            try {
                for (var varArray_1 = __values(varArray), varArray_1_1 = varArray_1.next(); !varArray_1_1.done; varArray_1_1 = varArray_1.next()) {
                    var _var = varArray_1_1.value;
                    if (_var.hasValue(this.name)) {
                        return true;
                    }
                }
            } catch (e_1_1) {
                e_1 = { error: e_1_1 };
            } finally {
                try {
                    if (varArray_1_1 && !varArray_1_1.done && (_a = varArray_1.return)) _a.call(varArray_1);
                } finally {
                    if (e_1) throw e_1.error;
                }
            }
            return false;
        }
        var e_1, _a;
    };
    Variable.prototype.setValue = function (value, name) {
        if (name !== undefined) {
            if (this.name === name) {
                this.value = value;
            } else {
                if (this.value instanceof Array) {
                    var varArray = this.value;
                    for (var i = 0; i < varArray.length; ++i) {
                        if (varArray[i].name === name) {
                            varArray[i].setValue(this.value, name);
                            break;
                        }
                    }
                }
            }
        }
        if (value instanceof Array) {
            var varArray = value;
            var vars = [];
            for (var i = 0; i < varArray.length; ++i) {
                var lastAddress = this.address;
                if (vars.length !== 0) {
                    var lastVar = vars[vars.length - 1];
                    lastAddress = lastVar.address;
                    lastAddress += lastVar.getByteSize();
                }
                var element = varArray[i];
                if (element instanceof Variable) {
                    var tempvar = element;
                    var _var = new Variable(tempvar.type, this.name + '.' + tempvar.name, tempvar.value, lastAddress, this.depth);
                    vars.push(_var);
                } else {
                    var baseType = this.type.substring(0, this.type.lastIndexOf('['));
                    var _var = new Variable(baseType, this.name + '[' + i + ']', element, lastAddress, this.depth);
                    vars.push(_var);
                }
            }
            this.value = vars;
        } else {
            this.value = value;
        }
    };
    Variable.prototype.getByteSize = function () {
        if (this.value instanceof Array) {
            var vars = this.value;
            var size = vars.length;
            return vars[size - 1].getByteSize() * size;
        }
        // 処理系依存かもしれないが、リテラルのサイズ、構造体はメンバ変数のsize合計、配列の場合は型*size()などを考慮する必要がある。
        return 1; // CppEngine.sizeof(this.type);
    };
    Variable.prototype.toString = function () {
        return 'Variable [type=' + this.type + ', name=' + this.name + ', value=' + this.value + ', ' + 'address=' + this.address + ', depth=' + this.depth + ']';
    };
    return Variable;
}();
exports.default = Variable;

/***/ }),
/* 70 */
/***/ (function(module, exports, __webpack_require__) {

/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

var Utils = __webpack_require__(1);
var Token = __webpack_require__(2).Token;
var RuleNode = __webpack_require__(5).RuleNode;
var ErrorNode = __webpack_require__(5).ErrorNode;
var TerminalNode = __webpack_require__(5).TerminalNode;
var ParserRuleContext = __webpack_require__(48).ParserRuleContext;
var RuleContext = __webpack_require__(20).RuleContext;
var INVALID_ALT_NUMBER = __webpack_require__(10).INVALID_ALT_NUMBER;


/** A set of utility routines useful for all kinds of ANTLR trees. */
function Trees() {
}

// Print out a whole tree in LISP form. {@link //getNodeText} is used on the
//  node payloads to get the text for the nodes.  Detect
//  parse trees and extract data appropriately.
Trees.toStringTree = function(tree, ruleNames, recog) {
	ruleNames = ruleNames || null;
	recog = recog || null;
    if(recog!==null) {
       ruleNames = recog.ruleNames;
    }
    var s = Trees.getNodeText(tree, ruleNames);
    s = Utils.escapeWhitespace(s, false);
    var c = tree.getChildCount();
    if(c===0) {
        return s;
    }
    var res = "(" + s + ' ';
    if(c>0) {
        s = Trees.toStringTree(tree.getChild(0), ruleNames);
        res = res.concat(s);
    }
    for(var i=1;i<c;i++) {
        s = Trees.toStringTree(tree.getChild(i), ruleNames);
        res = res.concat(' ' + s);
    }
    res = res.concat(")");
    return res;
};

Trees.getNodeText = function(t, ruleNames, recog) {
	ruleNames = ruleNames || null;
	recog = recog || null;
    if(recog!==null) {
        ruleNames = recog.ruleNames;
    }
    if(ruleNames!==null) {
       if (t instanceof RuleContext) {
           var altNumber = t.getAltNumber();
           if ( altNumber!=INVALID_ALT_NUMBER ) {
               return ruleNames[t.ruleIndex]+":"+altNumber;
           }
           return ruleNames[t.ruleIndex];
       } else if ( t instanceof ErrorNode) {
           return t.toString();
       } else if(t instanceof TerminalNode) {
           if(t.symbol!==null) {
               return t.symbol.text;
           }
       }
    }
    // no recog for rule names
    var payload = t.getPayload();
    if (payload instanceof Token ) {
       return payload.text;
    }
    return t.getPayload().toString();
};


// Return ordered list of all children of this node
Trees.getChildren = function(t) {
	var list = [];
	for(var i=0;i<t.getChildCount();i++) {
		list.push(t.getChild(i));
	}
	return list;
};

// Return a list of all ancestors of this node.  The first node of
//  list is the root and the last is the parent of this node.
//
Trees.getAncestors = function(t) {
    var ancestors = [];
    t = t.getParent();
    while(t!==null) {
        ancestors = [t].concat(ancestors);
        t = t.getParent();
    }
    return ancestors;
};

Trees.findAllTokenNodes = function(t, ttype) {
    return Trees.findAllNodes(t, ttype, true);
};

Trees.findAllRuleNodes = function(t, ruleIndex) {
	return Trees.findAllNodes(t, ruleIndex, false);
};

Trees.findAllNodes = function(t, index, findTokens) {
	var nodes = [];
	Trees._findAllNodes(t, index, findTokens, nodes);
	return nodes;
};

Trees._findAllNodes = function(t, index, findTokens, nodes) {
	// check this node (the root) first
	if(findTokens && (t instanceof TerminalNode)) {
		if(t.symbol.type===index) {
			nodes.push(t);
		}
	} else if(!findTokens && (t instanceof ParserRuleContext)) {
		if(t.ruleIndex===index) {
			nodes.push(t);
		}
	}
	// check children
	for(var i=0;i<t.getChildCount();i++) {
		Trees._findAllNodes(t.getChild(i), index, findTokens, nodes);
	}
};

Trees.descendants = function(t) {
	var nodes = [t];
    for(var i=0;i<t.getChildCount();i++) {
        nodes = nodes.concat(Trees.descendants(t.getChild(i)));
    }
    return nodes;
};


exports.Trees = Trees;

/***/ }),
/* 71 */
/***/ (function(module, exports, __webpack_require__) {

/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

var Token = __webpack_require__(2).Token;
var ATN = __webpack_require__(10).ATN;
var ATNType = __webpack_require__(115).ATNType;
var ATNStates = __webpack_require__(7);
var ATNState = ATNStates.ATNState;
var BasicState = ATNStates.BasicState;
var DecisionState = ATNStates.DecisionState;
var BlockStartState = ATNStates.BlockStartState;
var BlockEndState = ATNStates.BlockEndState;
var LoopEndState = ATNStates.LoopEndState;
var RuleStartState = ATNStates.RuleStartState;
var RuleStopState = ATNStates.RuleStopState;
var TokensStartState = ATNStates.TokensStartState;
var PlusLoopbackState = ATNStates.PlusLoopbackState;
var StarLoopbackState = ATNStates.StarLoopbackState;
var StarLoopEntryState = ATNStates.StarLoopEntryState;
var PlusBlockStartState = ATNStates.PlusBlockStartState;
var StarBlockStartState = ATNStates.StarBlockStartState;
var BasicBlockStartState = ATNStates.BasicBlockStartState;
var Transitions = __webpack_require__(11);
var Transition = Transitions.Transition;
var AtomTransition = Transitions.AtomTransition;
var SetTransition = Transitions.SetTransition;
var NotSetTransition = Transitions.NotSetTransition;
var RuleTransition = Transitions.RuleTransition;
var RangeTransition = Transitions.RangeTransition;
var ActionTransition = Transitions.ActionTransition;
var EpsilonTransition = Transitions.EpsilonTransition;
var WildcardTransition = Transitions.WildcardTransition;
var PredicateTransition = Transitions.PredicateTransition;
var PrecedencePredicateTransition = Transitions.PrecedencePredicateTransition;
var IntervalSet = __webpack_require__(4).IntervalSet;
var Interval = __webpack_require__(4).Interval;
var ATNDeserializationOptions = __webpack_require__(72).ATNDeserializationOptions;
var LexerActions = __webpack_require__(73);
var LexerActionType = LexerActions.LexerActionType;
var LexerSkipAction = LexerActions.LexerSkipAction;
var LexerChannelAction = LexerActions.LexerChannelAction;
var LexerCustomAction = LexerActions.LexerCustomAction;
var LexerMoreAction = LexerActions.LexerMoreAction;
var LexerTypeAction = LexerActions.LexerTypeAction;
var LexerPushModeAction = LexerActions.LexerPushModeAction;
var LexerPopModeAction = LexerActions.LexerPopModeAction;
var LexerModeAction = LexerActions.LexerModeAction;
// This is the earliest supported serialized UUID.
// stick to serialized version for now, we don't need a UUID instance
var BASE_SERIALIZED_UUID = "AADB8D7E-AEEF-4415-AD2B-8204D6CF042E";

//
// This UUID indicates the serialized ATN contains two sets of
// IntervalSets, where the second set's values are encoded as
// 32-bit integers to support the full Unicode SMP range up to U+10FFFF.
//
var ADDED_UNICODE_SMP = "59627784-3BE5-417A-B9EB-8131A7286089";

// This list contains all of the currently supported UUIDs, ordered by when
// the feature first appeared in this branch.
var SUPPORTED_UUIDS = [ BASE_SERIALIZED_UUID, ADDED_UNICODE_SMP ];

var SERIALIZED_VERSION = 3;

// This is the current serialized UUID.
var SERIALIZED_UUID = ADDED_UNICODE_SMP;

function initArray( length, value) {
	var tmp = [];
	tmp[length-1] = value;
	return tmp.map(function(i) {return value;});
}

function ATNDeserializer (options) {

    if ( options=== undefined || options === null ) {
        options = ATNDeserializationOptions.defaultOptions;
    }
    this.deserializationOptions = options;
    this.stateFactories = null;
    this.actionFactories = null;

    return this;
}

// Determines if a particular serialized representation of an ATN supports
// a particular feature, identified by the {@link UUID} used for serializing
// the ATN at the time the feature was first introduced.
//
// @param feature The {@link UUID} marking the first time the feature was
// supported in the serialized ATN.
// @param actualUuid The {@link UUID} of the actual serialized ATN which is
// currently being deserialized.
// @return {@code true} if the {@code actualUuid} value represents a
// serialized ATN at or after the feature identified by {@code feature} was
// introduced; otherwise, {@code false}.

ATNDeserializer.prototype.isFeatureSupported = function(feature, actualUuid) {
    var idx1 = SUPPORTED_UUIDS.indexOf(feature);
    if (idx1<0) {
        return false;
    }
    var idx2 = SUPPORTED_UUIDS.indexOf(actualUuid);
    return idx2 >= idx1;
};

ATNDeserializer.prototype.deserialize = function(data) {
    this.reset(data);
    this.checkVersion();
    this.checkUUID();
    var atn = this.readATN();
    this.readStates(atn);
    this.readRules(atn);
    this.readModes(atn);
    var sets = [];
    // First, deserialize sets with 16-bit arguments <= U+FFFF.
    this.readSets(atn, sets, this.readInt.bind(this));
    // Next, if the ATN was serialized with the Unicode SMP feature,
    // deserialize sets with 32-bit arguments <= U+10FFFF.
    if (this.isFeatureSupported(ADDED_UNICODE_SMP, this.uuid)) {
        this.readSets(atn, sets, this.readInt32.bind(this));
    }
    this.readEdges(atn, sets);
    this.readDecisions(atn);
    this.readLexerActions(atn);
    this.markPrecedenceDecisions(atn);
    this.verifyATN(atn);
    if (this.deserializationOptions.generateRuleBypassTransitions && atn.grammarType === ATNType.PARSER ) {
        this.generateRuleBypassTransitions(atn);
        // re-verify after modification
        this.verifyATN(atn);
    }
    return atn;
};

ATNDeserializer.prototype.reset = function(data) {
	var adjust = function(c) {
        var v = c.charCodeAt(0);
        return v>1  ? v-2 : v + 65533;
	};
    var temp = data.split("").map(adjust);
    // don't adjust the first value since that's the version number
    temp[0] = data.charCodeAt(0);
    this.data = temp;
    this.pos = 0;
};

ATNDeserializer.prototype.checkVersion = function() {
    var version = this.readInt();
    if ( version !== SERIALIZED_VERSION ) {
        throw ("Could not deserialize ATN with version " + version + " (expected " + SERIALIZED_VERSION + ").");
    }
};

ATNDeserializer.prototype.checkUUID = function() {
    var uuid = this.readUUID();
    if (SUPPORTED_UUIDS.indexOf(uuid)<0) {
        throw ("Could not deserialize ATN with UUID: " + uuid +
                        " (expected " + SERIALIZED_UUID + " or a legacy UUID).", uuid, SERIALIZED_UUID);
    }
    this.uuid = uuid;
};

ATNDeserializer.prototype.readATN = function() {
    var grammarType = this.readInt();
    var maxTokenType = this.readInt();
    return new ATN(grammarType, maxTokenType);
};

ATNDeserializer.prototype.readStates = function(atn) {
	var j, pair, stateNumber;
    var loopBackStateNumbers = [];
    var endStateNumbers = [];
    var nstates = this.readInt();
    for(var i=0; i<nstates; i++) {
        var stype = this.readInt();
        // ignore bad type of states
        if (stype===ATNState.INVALID_TYPE) {
            atn.addState(null);
            continue;
        }
        var ruleIndex = this.readInt();
        if (ruleIndex === 0xFFFF) {
            ruleIndex = -1;
        }
        var s = this.stateFactory(stype, ruleIndex);
        if (stype === ATNState.LOOP_END) { // special case
            var loopBackStateNumber = this.readInt();
            loopBackStateNumbers.push([s, loopBackStateNumber]);
        } else if(s instanceof BlockStartState) {
            var endStateNumber = this.readInt();
            endStateNumbers.push([s, endStateNumber]);
        }
        atn.addState(s);
    }
    // delay the assignment of loop back and end states until we know all the
	// state instances have been initialized
    for (j=0; j<loopBackStateNumbers.length; j++) {
        pair = loopBackStateNumbers[j];
        pair[0].loopBackState = atn.states[pair[1]];
    }

    for (j=0; j<endStateNumbers.length; j++) {
        pair = endStateNumbers[j];
        pair[0].endState = atn.states[pair[1]];
    }

    var numNonGreedyStates = this.readInt();
    for (j=0; j<numNonGreedyStates; j++) {
        stateNumber = this.readInt();
        atn.states[stateNumber].nonGreedy = true;
    }

    var numPrecedenceStates = this.readInt();
    for (j=0; j<numPrecedenceStates; j++) {
        stateNumber = this.readInt();
        atn.states[stateNumber].isPrecedenceRule = true;
    }
};

ATNDeserializer.prototype.readRules = function(atn) {
    var i;
    var nrules = this.readInt();
    if (atn.grammarType === ATNType.LEXER ) {
        atn.ruleToTokenType = initArray(nrules, 0);
    }
    atn.ruleToStartState = initArray(nrules, 0);
    for (i=0; i<nrules; i++) {
        var s = this.readInt();
        var startState = atn.states[s];
        atn.ruleToStartState[i] = startState;
        if ( atn.grammarType === ATNType.LEXER ) {
            var tokenType = this.readInt();
            if (tokenType === 0xFFFF) {
                tokenType = Token.EOF;
            }
            atn.ruleToTokenType[i] = tokenType;
        }
    }
    atn.ruleToStopState = initArray(nrules, 0);
    for (i=0; i<atn.states.length; i++) {
        var state = atn.states[i];
        if (!(state instanceof RuleStopState)) {
            continue;
        }
        atn.ruleToStopState[state.ruleIndex] = state;
        atn.ruleToStartState[state.ruleIndex].stopState = state;
    }
};

ATNDeserializer.prototype.readModes = function(atn) {
    var nmodes = this.readInt();
    for (var i=0; i<nmodes; i++) {
        var s = this.readInt();
        atn.modeToStartState.push(atn.states[s]);
    }
};

ATNDeserializer.prototype.readSets = function(atn, sets, readUnicode) {
    var m = this.readInt();
    for (var i=0; i<m; i++) {
        var iset = new IntervalSet();
        sets.push(iset);
        var n = this.readInt();
        var containsEof = this.readInt();
        if (containsEof!==0) {
            iset.addOne(-1);
        }
        for (var j=0; j<n; j++) {
            var i1 = readUnicode();
            var i2 = readUnicode();
            iset.addRange(i1, i2);
        }
    }
};

ATNDeserializer.prototype.readEdges = function(atn, sets) {
	var i, j, state, trans, target;
    var nedges = this.readInt();
    for (i=0; i<nedges; i++) {
        var src = this.readInt();
        var trg = this.readInt();
        var ttype = this.readInt();
        var arg1 = this.readInt();
        var arg2 = this.readInt();
        var arg3 = this.readInt();
        trans = this.edgeFactory(atn, ttype, src, trg, arg1, arg2, arg3, sets);
        var srcState = atn.states[src];
        srcState.addTransition(trans);
    }
    // edges for rule stop states can be derived, so they aren't serialized
    for (i=0; i<atn.states.length; i++) {
        state = atn.states[i];
        for (j=0; j<state.transitions.length; j++) {
            var t = state.transitions[j];
            if (!(t instanceof RuleTransition)) {
                continue;
            }
			var outermostPrecedenceReturn = -1;
			if (atn.ruleToStartState[t.target.ruleIndex].isPrecedenceRule) {
				if (t.precedence === 0) {
					outermostPrecedenceReturn = t.target.ruleIndex;
				}
			}

			trans = new EpsilonTransition(t.followState, outermostPrecedenceReturn);
            atn.ruleToStopState[t.target.ruleIndex].addTransition(trans);
        }
    }

    for (i=0; i<atn.states.length; i++) {
        state = atn.states[i];
        if (state instanceof BlockStartState) {
            // we need to know the end state to set its start state
            if (state.endState === null) {
                throw ("IllegalState");
            }
            // block end states can only be associated to a single block start
			// state
            if ( state.endState.startState !== null) {
                throw ("IllegalState");
            }
            state.endState.startState = state;
        }
        if (state instanceof PlusLoopbackState) {
            for (j=0; j<state.transitions.length; j++) {
                target = state.transitions[j].target;
                if (target instanceof PlusBlockStartState) {
                    target.loopBackState = state;
                }
            }
        } else if (state instanceof StarLoopbackState) {
            for (j=0; j<state.transitions.length; j++) {
                target = state.transitions[j].target;
                if (target instanceof StarLoopEntryState) {
                    target.loopBackState = state;
                }
            }
        }
    }
};

ATNDeserializer.prototype.readDecisions = function(atn) {
    var ndecisions = this.readInt();
    for (var i=0; i<ndecisions; i++) {
        var s = this.readInt();
        var decState = atn.states[s];
        atn.decisionToState.push(decState);
        decState.decision = i;
    }
};

ATNDeserializer.prototype.readLexerActions = function(atn) {
    if (atn.grammarType === ATNType.LEXER) {
        var count = this.readInt();
        atn.lexerActions = initArray(count, null);
        for (var i=0; i<count; i++) {
            var actionType = this.readInt();
            var data1 = this.readInt();
            if (data1 === 0xFFFF) {
                data1 = -1;
            }
            var data2 = this.readInt();
            if (data2 === 0xFFFF) {
                data2 = -1;
            }
            var lexerAction = this.lexerActionFactory(actionType, data1, data2);
            atn.lexerActions[i] = lexerAction;
        }
    }
};

ATNDeserializer.prototype.generateRuleBypassTransitions = function(atn) {
	var i;
    var count = atn.ruleToStartState.length;
    for(i=0; i<count; i++) {
        atn.ruleToTokenType[i] = atn.maxTokenType + i + 1;
    }
    for(i=0; i<count; i++) {
        this.generateRuleBypassTransition(atn, i);
    }
};

ATNDeserializer.prototype.generateRuleBypassTransition = function(atn, idx) {
	var i, state;
    var bypassStart = new BasicBlockStartState();
    bypassStart.ruleIndex = idx;
    atn.addState(bypassStart);

    var bypassStop = new BlockEndState();
    bypassStop.ruleIndex = idx;
    atn.addState(bypassStop);

    bypassStart.endState = bypassStop;
    atn.defineDecisionState(bypassStart);

    bypassStop.startState = bypassStart;

    var excludeTransition = null;
    var endState = null;

    if (atn.ruleToStartState[idx].isPrecedenceRule) {
        // wrap from the beginning of the rule to the StarLoopEntryState
        endState = null;
        for(i=0; i<atn.states.length; i++) {
            state = atn.states[i];
            if (this.stateIsEndStateFor(state, idx)) {
                endState = state;
                excludeTransition = state.loopBackState.transitions[0];
                break;
            }
        }
        if (excludeTransition === null) {
            throw ("Couldn't identify final state of the precedence rule prefix section.");
        }
    } else {
        endState = atn.ruleToStopState[idx];
    }

    // all non-excluded transitions that currently target end state need to
	// target blockEnd instead
    for(i=0; i<atn.states.length; i++) {
        state = atn.states[i];
        for(var j=0; j<state.transitions.length; j++) {
            var transition = state.transitions[j];
            if (transition === excludeTransition) {
                continue;
            }
            if (transition.target === endState) {
                transition.target = bypassStop;
            }
        }
    }

    // all transitions leaving the rule start state need to leave blockStart
	// instead
    var ruleToStartState = atn.ruleToStartState[idx];
    var count = ruleToStartState.transitions.length;
    while ( count > 0) {
        bypassStart.addTransition(ruleToStartState.transitions[count-1]);
        ruleToStartState.transitions = ruleToStartState.transitions.slice(-1);
    }
    // link the new states
    atn.ruleToStartState[idx].addTransition(new EpsilonTransition(bypassStart));
    bypassStop.addTransition(new EpsilonTransition(endState));

    var matchState = new BasicState();
    atn.addState(matchState);
    matchState.addTransition(new AtomTransition(bypassStop, atn.ruleToTokenType[idx]));
    bypassStart.addTransition(new EpsilonTransition(matchState));
};

ATNDeserializer.prototype.stateIsEndStateFor = function(state, idx) {
    if ( state.ruleIndex !== idx) {
        return null;
    }
    if (!( state instanceof StarLoopEntryState)) {
        return null;
    }
    var maybeLoopEndState = state.transitions[state.transitions.length - 1].target;
    if (!( maybeLoopEndState instanceof LoopEndState)) {
        return null;
    }
    if (maybeLoopEndState.epsilonOnlyTransitions &&
        (maybeLoopEndState.transitions[0].target instanceof RuleStopState)) {
        return state;
    } else {
        return null;
    }
};

//
// Analyze the {@link StarLoopEntryState} states in the specified ATN to set
// the {@link StarLoopEntryState//isPrecedenceDecision} field to the
// correct value.
//
// @param atn The ATN.
//
ATNDeserializer.prototype.markPrecedenceDecisions = function(atn) {
	for(var i=0; i<atn.states.length; i++) {
		var state = atn.states[i];
		if (!( state instanceof StarLoopEntryState)) {
            continue;
        }
        // We analyze the ATN to determine if this ATN decision state is the
        // decision for the closure block that determines whether a
        // precedence rule should continue or complete.
        //
        if ( atn.ruleToStartState[state.ruleIndex].isPrecedenceRule) {
            var maybeLoopEndState = state.transitions[state.transitions.length - 1].target;
            if (maybeLoopEndState instanceof LoopEndState) {
                if ( maybeLoopEndState.epsilonOnlyTransitions &&
                        (maybeLoopEndState.transitions[0].target instanceof RuleStopState)) {
                    state.isPrecedenceDecision = true;
                }
            }
        }
	}
};

ATNDeserializer.prototype.verifyATN = function(atn) {
    if (!this.deserializationOptions.verifyATN) {
        return;
    }
    // verify assumptions
	for(var i=0; i<atn.states.length; i++) {
        var state = atn.states[i];
        if (state === null) {
            continue;
        }
        this.checkCondition(state.epsilonOnlyTransitions || state.transitions.length <= 1);
        if (state instanceof PlusBlockStartState) {
            this.checkCondition(state.loopBackState !== null);
        } else  if (state instanceof StarLoopEntryState) {
            this.checkCondition(state.loopBackState !== null);
            this.checkCondition(state.transitions.length === 2);
            if (state.transitions[0].target instanceof StarBlockStartState) {
                this.checkCondition(state.transitions[1].target instanceof LoopEndState);
                this.checkCondition(!state.nonGreedy);
            } else if (state.transitions[0].target instanceof LoopEndState) {
                this.checkCondition(state.transitions[1].target instanceof StarBlockStartState);
                this.checkCondition(state.nonGreedy);
            } else {
                throw("IllegalState");
            }
        } else if (state instanceof StarLoopbackState) {
            this.checkCondition(state.transitions.length === 1);
            this.checkCondition(state.transitions[0].target instanceof StarLoopEntryState);
        } else if (state instanceof LoopEndState) {
            this.checkCondition(state.loopBackState !== null);
        } else if (state instanceof RuleStartState) {
            this.checkCondition(state.stopState !== null);
        } else if (state instanceof BlockStartState) {
            this.checkCondition(state.endState !== null);
        } else if (state instanceof BlockEndState) {
            this.checkCondition(state.startState !== null);
        } else if (state instanceof DecisionState) {
            this.checkCondition(state.transitions.length <= 1 || state.decision >= 0);
        } else {
            this.checkCondition(state.transitions.length <= 1 || (state instanceof RuleStopState));
        }
	}
};

ATNDeserializer.prototype.checkCondition = function(condition, message) {
    if (!condition) {
        if (message === undefined || message===null) {
            message = "IllegalState";
        }
        throw (message);
    }
};

ATNDeserializer.prototype.readInt = function() {
    return this.data[this.pos++];
};

ATNDeserializer.prototype.readInt32 = function() {
    var low = this.readInt();
    var high = this.readInt();
    return low | (high << 16);
};

ATNDeserializer.prototype.readLong = function() {
    var low = this.readInt32();
    var high = this.readInt32();
    return (low & 0x00000000FFFFFFFF) | (high << 32);
};

function createByteToHex() {
	var bth = [];
	for (var i = 0; i < 256; i++) {
		bth[i] = (i + 0x100).toString(16).substr(1).toUpperCase();
	}
	return bth;
}

var byteToHex = createByteToHex();

ATNDeserializer.prototype.readUUID = function() {
	var bb = [];
	for(var i=7;i>=0;i--) {
		var int = this.readInt();
		/* jshint bitwise: false */
		bb[(2*i)+1] = int & 0xFF;
		bb[2*i] = (int >> 8) & 0xFF;
	}
    return byteToHex[bb[0]] + byteToHex[bb[1]] +
    byteToHex[bb[2]] + byteToHex[bb[3]] + '-' +
    byteToHex[bb[4]] + byteToHex[bb[5]] + '-' +
    byteToHex[bb[6]] + byteToHex[bb[7]] + '-' +
    byteToHex[bb[8]] + byteToHex[bb[9]] + '-' +
    byteToHex[bb[10]] + byteToHex[bb[11]] +
    byteToHex[bb[12]] + byteToHex[bb[13]] +
    byteToHex[bb[14]] + byteToHex[bb[15]];
};

ATNDeserializer.prototype.edgeFactory = function(atn, type, src, trg, arg1, arg2, arg3, sets) {
    var target = atn.states[trg];
    switch(type) {
    case Transition.EPSILON:
        return new EpsilonTransition(target);
    case Transition.RANGE:
        return arg3 !== 0 ? new RangeTransition(target, Token.EOF, arg2) : new RangeTransition(target, arg1, arg2);
    case Transition.RULE:
        return new RuleTransition(atn.states[arg1], arg2, arg3, target);
    case Transition.PREDICATE:
        return new PredicateTransition(target, arg1, arg2, arg3 !== 0);
    case Transition.PRECEDENCE:
        return new PrecedencePredicateTransition(target, arg1);
    case Transition.ATOM:
        return arg3 !== 0 ? new AtomTransition(target, Token.EOF) : new AtomTransition(target, arg1);
    case Transition.ACTION:
        return new ActionTransition(target, arg1, arg2, arg3 !== 0);
    case Transition.SET:
        return new SetTransition(target, sets[arg1]);
    case Transition.NOT_SET:
        return new NotSetTransition(target, sets[arg1]);
    case Transition.WILDCARD:
        return new WildcardTransition(target);
    default:
        throw "The specified transition type: " + type + " is not valid.";
    }
};

ATNDeserializer.prototype.stateFactory = function(type, ruleIndex) {
    if (this.stateFactories === null) {
        var sf = [];
        sf[ATNState.INVALID_TYPE] = null;
        sf[ATNState.BASIC] = function() { return new BasicState(); };
        sf[ATNState.RULE_START] = function() { return new RuleStartState(); };
        sf[ATNState.BLOCK_START] = function() { return new BasicBlockStartState(); };
        sf[ATNState.PLUS_BLOCK_START] = function() { return new PlusBlockStartState(); };
        sf[ATNState.STAR_BLOCK_START] = function() { return new StarBlockStartState(); };
        sf[ATNState.TOKEN_START] = function() { return new TokensStartState(); };
        sf[ATNState.RULE_STOP] = function() { return new RuleStopState(); };
        sf[ATNState.BLOCK_END] = function() { return new BlockEndState(); };
        sf[ATNState.STAR_LOOP_BACK] = function() { return new StarLoopbackState(); };
        sf[ATNState.STAR_LOOP_ENTRY] = function() { return new StarLoopEntryState(); };
        sf[ATNState.PLUS_LOOP_BACK] = function() { return new PlusLoopbackState(); };
        sf[ATNState.LOOP_END] = function() { return new LoopEndState(); };
        this.stateFactories = sf;
    }
    if (type>this.stateFactories.length || this.stateFactories[type] === null) {
        throw("The specified state type " + type + " is not valid.");
    } else {
        var s = this.stateFactories[type]();
        if (s!==null) {
            s.ruleIndex = ruleIndex;
            return s;
        }
    }
};

ATNDeserializer.prototype.lexerActionFactory = function(type, data1, data2) {
    if (this.actionFactories === null) {
        var af = [];
        af[LexerActionType.CHANNEL] = function(data1, data2) { return new LexerChannelAction(data1); };
        af[LexerActionType.CUSTOM] = function(data1, data2) { return new LexerCustomAction(data1, data2); };
        af[LexerActionType.MODE] = function(data1, data2) { return new LexerModeAction(data1); };
        af[LexerActionType.MORE] = function(data1, data2) { return LexerMoreAction.INSTANCE; };
        af[LexerActionType.POP_MODE] = function(data1, data2) { return LexerPopModeAction.INSTANCE; };
        af[LexerActionType.PUSH_MODE] = function(data1, data2) { return new LexerPushModeAction(data1); };
        af[LexerActionType.SKIP] = function(data1, data2) { return LexerSkipAction.INSTANCE; };
        af[LexerActionType.TYPE] = function(data1, data2) { return new LexerTypeAction(data1); };
        this.actionFactories = af;
    }
    if (type>this.actionFactories.length || this.actionFactories[type] === null) {
        throw("The specified lexer action type " + type + " is not valid.");
    } else {
        return this.actionFactories[type](data1, data2);
    }
};


exports.ATNDeserializer = ATNDeserializer;

/***/ }),
/* 72 */
/***/ (function(module, exports) {

/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

function ATNDeserializationOptions(copyFrom) {
	if(copyFrom===undefined) {
		copyFrom = null;
	}
	this.readOnly = false;
    this.verifyATN = copyFrom===null ? true : copyFrom.verifyATN;
    this.generateRuleBypassTransitions = copyFrom===null ? false : copyFrom.generateRuleBypassTransitions;

    return this;
}

ATNDeserializationOptions.defaultOptions = new ATNDeserializationOptions();
ATNDeserializationOptions.defaultOptions.readOnly = true;

//    def __setattr__(self, key, value):
//        if key!="readOnly" and self.readOnly:
//            raise Exception("The object is read only.")
//        super(type(self), self).__setattr__(key,value)

exports.ATNDeserializationOptions = ATNDeserializationOptions;


/***/ }),
/* 73 */
/***/ (function(module, exports) {

//
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
 //

function LexerActionType() {
}

LexerActionType.CHANNEL = 0;     //The type of a {@link LexerChannelAction} action.
LexerActionType.CUSTOM = 1;      //The type of a {@link LexerCustomAction} action.
LexerActionType.MODE = 2;        //The type of a {@link LexerModeAction} action.
LexerActionType.MORE = 3;        //The type of a {@link LexerMoreAction} action.
LexerActionType.POP_MODE = 4;    //The type of a {@link LexerPopModeAction} action.
LexerActionType.PUSH_MODE = 5;   //The type of a {@link LexerPushModeAction} action.
LexerActionType.SKIP = 6;        //The type of a {@link LexerSkipAction} action.
LexerActionType.TYPE = 7;        //The type of a {@link LexerTypeAction} action.

function LexerAction(action) {
    this.actionType = action;
    this.isPositionDependent = false;
    return this;
}

LexerAction.prototype.hashCode = function() {
    var hash = new Hash();
    this.updateHashCode(hash);
    return hash.finish()
};

LexerAction.prototype.updateHashCode = function(hash) {
    hash.update(this.actionType);
};

LexerAction.prototype.equals = function(other) {
    return this === other;
};



//
// Implements the {@code skip} lexer action by calling {@link Lexer//skip}.
//
// <p>The {@code skip} command does not have any parameters, so this action is
// implemented as a singleton instance exposed by {@link //INSTANCE}.</p>
function LexerSkipAction() {
	LexerAction.call(this, LexerActionType.SKIP);
	return this;
}

LexerSkipAction.prototype = Object.create(LexerAction.prototype);
LexerSkipAction.prototype.constructor = LexerSkipAction;

// Provides a singleton instance of this parameterless lexer action.
LexerSkipAction.INSTANCE = new LexerSkipAction();

LexerSkipAction.prototype.execute = function(lexer) {
    lexer.skip();
};

LexerSkipAction.prototype.toString = function() {
	return "skip";
};

//  Implements the {@code type} lexer action by calling {@link Lexer//setType}
// with the assigned type.
function LexerTypeAction(type) {
	LexerAction.call(this, LexerActionType.TYPE);
	this.type = type;
	return this;
}

LexerTypeAction.prototype = Object.create(LexerAction.prototype);
LexerTypeAction.prototype.constructor = LexerTypeAction;

LexerTypeAction.prototype.execute = function(lexer) {
    lexer.type = this.type;
};

LexerTypeAction.prototype.updateHashCode = function(hash) {
    hash.update(this.actionType, this.type);
};


LexerTypeAction.prototype.equals = function(other) {
    if(this === other) {
        return true;
    } else if (! (other instanceof LexerTypeAction)) {
        return false;
    } else {
        return this.type === other.type;
    }
};

LexerTypeAction.prototype.toString = function() {
    return "type(" + this.type + ")";
};

// Implements the {@code pushMode} lexer action by calling
// {@link Lexer//pushMode} with the assigned mode.
function LexerPushModeAction(mode) {
	LexerAction.call(this, LexerActionType.PUSH_MODE);
    this.mode = mode;
    return this;
}

LexerPushModeAction.prototype = Object.create(LexerAction.prototype);
LexerPushModeAction.prototype.constructor = LexerPushModeAction;

// <p>This action is implemented by calling {@link Lexer//pushMode} with the
// value provided by {@link //getMode}.</p>
LexerPushModeAction.prototype.execute = function(lexer) {
    lexer.pushMode(this.mode);
};

LexerPushModeAction.prototype.updateHashCode = function(hash) {
    hash.update(this.actionType, this.mode);
};

LexerPushModeAction.prototype.equals = function(other) {
    if (this === other) {
        return true;
    } else if (! (other instanceof LexerPushModeAction)) {
        return false;
    } else {
        return this.mode === other.mode;
    }
};

LexerPushModeAction.prototype.toString = function() {
	return "pushMode(" + this.mode + ")";
};


// Implements the {@code popMode} lexer action by calling {@link Lexer//popMode}.
//
// <p>The {@code popMode} command does not have any parameters, so this action is
// implemented as a singleton instance exposed by {@link //INSTANCE}.</p>
function LexerPopModeAction() {
	LexerAction.call(this,LexerActionType.POP_MODE);
	return this;
}

LexerPopModeAction.prototype = Object.create(LexerAction.prototype);
LexerPopModeAction.prototype.constructor = LexerPopModeAction;

LexerPopModeAction.INSTANCE = new LexerPopModeAction();

// <p>This action is implemented by calling {@link Lexer//popMode}.</p>
LexerPopModeAction.prototype.execute = function(lexer) {
    lexer.popMode();
};

LexerPopModeAction.prototype.toString = function() {
	return "popMode";
};

// Implements the {@code more} lexer action by calling {@link Lexer//more}.
//
// <p>The {@code more} command does not have any parameters, so this action is
// implemented as a singleton instance exposed by {@link //INSTANCE}.</p>
function LexerMoreAction() {
	LexerAction.call(this, LexerActionType.MORE);
	return this;
}

LexerMoreAction.prototype = Object.create(LexerAction.prototype);
LexerMoreAction.prototype.constructor = LexerMoreAction;

LexerMoreAction.INSTANCE = new LexerMoreAction();

// <p>This action is implemented by calling {@link Lexer//popMode}.</p>
LexerMoreAction.prototype.execute = function(lexer) {
    lexer.more();
};

LexerMoreAction.prototype.toString = function() {
    return "more";
};


// Implements the {@code mode} lexer action by calling {@link Lexer//mode} with
// the assigned mode.
function LexerModeAction(mode) {
	LexerAction.call(this, LexerActionType.MODE);
    this.mode = mode;
    return this;
}

LexerModeAction.prototype = Object.create(LexerAction.prototype);
LexerModeAction.prototype.constructor = LexerModeAction;

// <p>This action is implemented by calling {@link Lexer//mode} with the
// value provided by {@link //getMode}.</p>
LexerModeAction.prototype.execute = function(lexer) {
    lexer.mode(this.mode);
};

LexerModeAction.prototype.updateHashCode = function(hash) {
    hash.update(this.actionType, this.mode);
};

LexerModeAction.prototype.equals = function(other) {
    if (this === other) {
        return true;
    } else if (! (other instanceof LexerModeAction)) {
        return false;
    } else {
        return this.mode === other.mode;
    }
};

LexerModeAction.prototype.toString = function() {
    return "mode(" + this.mode + ")";
};

// Executes a custom lexer action by calling {@link Recognizer//action} with the
// rule and action indexes assigned to the custom action. The implementation of
// a custom action is added to the generated code for the lexer in an override
// of {@link Recognizer//action} when the grammar is compiled.
//
// <p>This class may represent embedded actions created with the <code>{...}</code>
// syntax in ANTLR 4, as well as actions created for lexer commands where the
// command argument could not be evaluated when the grammar was compiled.</p>


    // Constructs a custom lexer action with the specified rule and action
    // indexes.
    //
    // @param ruleIndex The rule index to use for calls to
    // {@link Recognizer//action}.
    // @param actionIndex The action index to use for calls to
    // {@link Recognizer//action}.

function LexerCustomAction(ruleIndex, actionIndex) {
	LexerAction.call(this, LexerActionType.CUSTOM);
    this.ruleIndex = ruleIndex;
    this.actionIndex = actionIndex;
    this.isPositionDependent = true;
    return this;
}

LexerCustomAction.prototype = Object.create(LexerAction.prototype);
LexerCustomAction.prototype.constructor = LexerCustomAction;

// <p>Custom actions are implemented by calling {@link Lexer//action} with the
// appropriate rule and action indexes.</p>
LexerCustomAction.prototype.execute = function(lexer) {
    lexer.action(null, this.ruleIndex, this.actionIndex);
};

LexerCustomAction.prototype.updateHashCode = function(hash) {
    hash.update(this.actionType, this.ruleIndex, this.actionIndex);
};

LexerCustomAction.prototype.equals = function(other) {
    if (this === other) {
        return true;
    } else if (! (other instanceof LexerCustomAction)) {
        return false;
    } else {
        return this.ruleIndex === other.ruleIndex && this.actionIndex === other.actionIndex;
    }
};

// Implements the {@code channel} lexer action by calling
// {@link Lexer//setChannel} with the assigned channel.
// Constructs a new {@code channel} action with the specified channel value.
// @param channel The channel value to pass to {@link Lexer//setChannel}.
function LexerChannelAction(channel) {
	LexerAction.call(this, LexerActionType.CHANNEL);
    this.channel = channel;
    return this;
}

LexerChannelAction.prototype = Object.create(LexerAction.prototype);
LexerChannelAction.prototype.constructor = LexerChannelAction;

// <p>This action is implemented by calling {@link Lexer//setChannel} with the
// value provided by {@link //getChannel}.</p>
LexerChannelAction.prototype.execute = function(lexer) {
    lexer._channel = this.channel;
};

LexerChannelAction.prototype.updateHashCode = function(hash) {
    hash.update(this.actionType, this.channel);
};

LexerChannelAction.prototype.equals = function(other) {
    if (this === other) {
        return true;
    } else if (! (other instanceof LexerChannelAction)) {
        return false;
    } else {
        return this.channel === other.channel;
    }
};

LexerChannelAction.prototype.toString = function() {
    return "channel(" + this.channel + ")";
};

// This implementation of {@link LexerAction} is used for tracking input offsets
// for position-dependent actions within a {@link LexerActionExecutor}.
//
// <p>This action is not serialized as part of the ATN, and is only required for
// position-dependent lexer actions which appear at a location other than the
// end of a rule. For more information about DFA optimizations employed for
// lexer actions, see {@link LexerActionExecutor//append} and
// {@link LexerActionExecutor//fixOffsetBeforeMatch}.</p>

// Constructs a new indexed custom action by associating a character offset
// with a {@link LexerAction}.
//
// <p>Note: This class is only required for lexer actions for which
// {@link LexerAction//isPositionDependent} returns {@code true}.</p>
//
// @param offset The offset into the input {@link CharStream}, relative to
// the token start index, at which the specified lexer action should be
// executed.
// @param action The lexer action to execute at a particular offset in the
// input {@link CharStream}.
function LexerIndexedCustomAction(offset, action) {
	LexerAction.call(this, action.actionType);
    this.offset = offset;
    this.action = action;
    this.isPositionDependent = true;
    return this;
}

LexerIndexedCustomAction.prototype = Object.create(LexerAction.prototype);
LexerIndexedCustomAction.prototype.constructor = LexerIndexedCustomAction;

// <p>This method calls {@link //execute} on the result of {@link //getAction}
// using the provided {@code lexer}.</p>
LexerIndexedCustomAction.prototype.execute = function(lexer) {
    // assume the input stream position was properly set by the calling code
    this.action.execute(lexer);
};

LexerIndexedCustomAction.prototype.updateHashCode = function(hash) {
    hash.update(this.actionType, this.offset, this.action);
};

LexerIndexedCustomAction.prototype.equals = function(other) {
    if (this === other) {
        return true;
    } else if (! (other instanceof LexerIndexedCustomAction)) {
        return false;
    } else {
        return this.offset === other.offset && this.action === other.action;
    }
};


exports.LexerActionType = LexerActionType;
exports.LexerSkipAction = LexerSkipAction;
exports.LexerChannelAction = LexerChannelAction;
exports.LexerCustomAction = LexerCustomAction;
exports.LexerIndexedCustomAction = LexerIndexedCustomAction;
exports.LexerMoreAction = LexerMoreAction;
exports.LexerTypeAction = LexerTypeAction;
exports.LexerPushModeAction = LexerPushModeAction;
exports.LexerPopModeAction = LexerPopModeAction;
exports.LexerModeAction = LexerModeAction;

/***/ }),
/* 74 */
/***/ (function(module, exports, __webpack_require__) {

//
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
//

var Token = __webpack_require__(2).Token;
var ConsoleErrorListener = __webpack_require__(32).ConsoleErrorListener;
var ProxyErrorListener = __webpack_require__(32).ProxyErrorListener;

function Recognizer() {
    this._listeners = [ ConsoleErrorListener.INSTANCE ];
    this._interp = null;
    this._stateNumber = -1;
    return this;
}

Recognizer.tokenTypeMapCache = {};
Recognizer.ruleIndexMapCache = {};


Recognizer.prototype.checkVersion = function(toolVersion) {
    var runtimeVersion = "4.7.1";
    if (runtimeVersion!==toolVersion) {
        console.log("ANTLR runtime and generated code versions disagree: "+runtimeVersion+"!="+toolVersion);
    }
};

Recognizer.prototype.addErrorListener = function(listener) {
    this._listeners.push(listener);
};

Recognizer.prototype.removeErrorListeners = function() {
    this._listeners = [];
};

Recognizer.prototype.getTokenTypeMap = function() {
    var tokenNames = this.getTokenNames();
    if (tokenNames===null) {
        throw("The current recognizer does not provide a list of token names.");
    }
    var result = this.tokenTypeMapCache[tokenNames];
    if(result===undefined) {
        result = tokenNames.reduce(function(o, k, i) { o[k] = i; });
        result.EOF = Token.EOF;
        this.tokenTypeMapCache[tokenNames] = result;
    }
    return result;
};

// Get a map from rule names to rule indexes.
//
// <p>Used for XPath and tree pattern compilation.</p>
//
Recognizer.prototype.getRuleIndexMap = function() {
    var ruleNames = this.ruleNames;
    if (ruleNames===null) {
        throw("The current recognizer does not provide a list of rule names.");
    }
    var result = this.ruleIndexMapCache[ruleNames];
    if(result===undefined) {
        result = ruleNames.reduce(function(o, k, i) { o[k] = i; });
        this.ruleIndexMapCache[ruleNames] = result;
    }
    return result;
};

Recognizer.prototype.getTokenType = function(tokenName) {
    var ttype = this.getTokenTypeMap()[tokenName];
    if (ttype !==undefined) {
        return ttype;
    } else {
        return Token.INVALID_TYPE;
    }
};


// What is the error header, normally line/character position information?//
Recognizer.prototype.getErrorHeader = function(e) {
    var line = e.getOffendingToken().line;
    var column = e.getOffendingToken().column;
    return "line " + line + ":" + column;
};


// How should a token be displayed in an error message? The default
//  is to display just the text, but during development you might
//  want to have a lot of information spit out.  Override in that case
//  to use t.toString() (which, for CommonToken, dumps everything about
//  the token). This is better than forcing you to override a method in
//  your token objects because you don't have to go modify your lexer
//  so that it creates a new Java type.
//
// @deprecated This method is not called by the ANTLR 4 Runtime. Specific
// implementations of {@link ANTLRErrorStrategy} may provide a similar
// feature when necessary. For example, see
// {@link DefaultErrorStrategy//getTokenErrorDisplay}.
//
Recognizer.prototype.getTokenErrorDisplay = function(t) {
    if (t===null) {
        return "<no token>";
    }
    var s = t.text;
    if (s===null) {
        if (t.type===Token.EOF) {
            s = "<EOF>";
        } else {
            s = "<" + t.type + ">";
        }
    }
    s = s.replace("\n","\\n").replace("\r","\\r").replace("\t","\\t");
    return "'" + s + "'";
};

Recognizer.prototype.getErrorListenerDispatch = function() {
    return new ProxyErrorListener(this._listeners);
};

// subclass needs to override these if there are sempreds or actions
// that the ATN interp needs to execute
Recognizer.prototype.sempred = function(localctx, ruleIndex, actionIndex) {
    return true;
};

Recognizer.prototype.precpred = function(localctx , precedence) {
    return true;
};

//Indicate that the recognizer has changed internal state that is
//consistent with the ATN state passed in.  This way we always know
//where we are in the ATN as the parser goes along. The rule
//context objects form a stack that lets us see the stack of
//invoking rules. Combine this and we have complete ATN
//configuration information.

Object.defineProperty(Recognizer.prototype, "state", {
	get : function() {
		return this._stateNumber;
	},
	set : function(state) {
		this._stateNumber = state;
	}
});


exports.Recognizer = Recognizer;


/***/ }),
/* 75 */
/***/ (function(module, exports, __webpack_require__) {

//
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
///

var DFAState = __webpack_require__(18).DFAState;
var ATNConfigSet = __webpack_require__(15).ATNConfigSet;
var getCachedPredictionContext = __webpack_require__(9).getCachedPredictionContext;

function ATNSimulator(atn, sharedContextCache) {

    // The context cache maps all PredictionContext objects that are ==
    //  to a single cached copy. This cache is shared across all contexts
    //  in all ATNConfigs in all DFA states.  We rebuild each ATNConfigSet
    //  to use only cached nodes/graphs in addDFAState(). We don't want to
    //  fill this during closure() since there are lots of contexts that
    //  pop up but are not used ever again. It also greatly slows down closure().
    //
    //  <p>This cache makes a huge difference in memory and a little bit in speed.
    //  For the Java grammar on java.*, it dropped the memory requirements
    //  at the end from 25M to 16M. We don't store any of the full context
    //  graphs in the DFA because they are limited to local context only,
    //  but apparently there's a lot of repetition there as well. We optimize
    //  the config contexts before storing the config set in the DFA states
    //  by literally rebuilding them with cached subgraphs only.</p>
    //
    //  <p>I tried a cache for use during closure operations, that was
    //  whacked after each adaptivePredict(). It cost a little bit
    //  more time I think and doesn't save on the overall footprint
    //  so it's not worth the complexity.</p>
    ///
    this.atn = atn;
    this.sharedContextCache = sharedContextCache;
    return this;
}

// Must distinguish between missing edge and edge we know leads nowhere///
ATNSimulator.ERROR = new DFAState(0x7FFFFFFF, new ATNConfigSet());


ATNSimulator.prototype.getCachedContext = function(context) {
    if (this.sharedContextCache ===null) {
        return context;
    }
    var visited = {};
    return getCachedPredictionContext(context, this.sharedContextCache, visited);
};

exports.ATNSimulator = ATNSimulator;


/***/ }),
/* 76 */
/***/ (function(module, exports, __webpack_require__) {

//
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
//
//
// This enumeration defines the prediction modes available in ANTLR 4 along with
// utility methods for analyzing configuration sets for conflicts and/or
// ambiguities.

var Set = __webpack_require__(1).Set;
var Map = __webpack_require__(1).Map;
var BitSet = __webpack_require__(1).BitSet;
var AltDict = __webpack_require__(1).AltDict;
var ATN = __webpack_require__(10).ATN;
var RuleStopState = __webpack_require__(7).RuleStopState;
var ATNConfigSet = __webpack_require__(15).ATNConfigSet;
var ATNConfig = __webpack_require__(30).ATNConfig;
var SemanticContext = __webpack_require__(17).SemanticContext;
var Hash = __webpack_require__(1).Hash;
var hashStuff = __webpack_require__(1).hashStuff;
var equalArrays = __webpack_require__(1).equalArrays;

function PredictionMode() {
	return this;
}

//
// The SLL(*) prediction mode. This prediction mode ignores the current
// parser context when making predictions. This is the fastest prediction
// mode, and provides correct results for many grammars. This prediction
// mode is more powerful than the prediction mode provided by ANTLR 3, but
// may result in syntax errors for grammar and input combinations which are
// not SLL.
//
// <p>
// When using this prediction mode, the parser will either return a correct
// parse tree (i.e. the same parse tree that would be returned with the
// {@link //LL} prediction mode), or it will report a syntax error. If a
// syntax error is encountered when using the {@link //SLL} prediction mode,
// it may be due to either an actual syntax error in the input or indicate
// that the particular combination of grammar and input requires the more
// powerful {@link //LL} prediction abilities to complete successfully.</p>
//
// <p>
// This prediction mode does not provide any guarantees for prediction
// behavior for syntactically-incorrect inputs.</p>
//
PredictionMode.SLL = 0;
//
// The LL(*) prediction mode. This prediction mode allows the current parser
// context to be used for resolving SLL conflicts that occur during
// prediction. This is the fastest prediction mode that guarantees correct
// parse results for all combinations of grammars with syntactically correct
// inputs.
//
// <p>
// When using this prediction mode, the parser will make correct decisions
// for all syntactically-correct grammar and input combinations. However, in
// cases where the grammar is truly ambiguous this prediction mode might not
// report a precise answer for <em>exactly which</em> alternatives are
// ambiguous.</p>
//
// <p>
// This prediction mode does not provide any guarantees for prediction
// behavior for syntactically-incorrect inputs.</p>
//
PredictionMode.LL = 1;
//
// The LL(*) prediction mode with exact ambiguity detection. In addition to
// the correctness guarantees provided by the {@link //LL} prediction mode,
// this prediction mode instructs the prediction algorithm to determine the
// complete and exact set of ambiguous alternatives for every ambiguous
// decision encountered while parsing.
//
// <p>
// This prediction mode may be used for diagnosing ambiguities during
// grammar development. Due to the performance overhead of calculating sets
// of ambiguous alternatives, this prediction mode should be avoided when
// the exact results are not necessary.</p>
//
// <p>
// This prediction mode does not provide any guarantees for prediction
// behavior for syntactically-incorrect inputs.</p>
//
PredictionMode.LL_EXACT_AMBIG_DETECTION = 2;


//
// Computes the SLL prediction termination condition.
//
// <p>
// This method computes the SLL prediction termination condition for both of
// the following cases.</p>
//
// <ul>
// <li>The usual SLL+LL fallback upon SLL conflict</li>
// <li>Pure SLL without LL fallback</li>
// </ul>
//
// <p><strong>COMBINED SLL+LL PARSING</strong></p>
//
// <p>When LL-fallback is enabled upon SLL conflict, correct predictions are
// ensured regardless of how the termination condition is computed by this
// method. Due to the substantially higher cost of LL prediction, the
// prediction should only fall back to LL when the additional lookahead
// cannot lead to a unique SLL prediction.</p>
//
// <p>Assuming combined SLL+LL parsing, an SLL configuration set with only
// conflicting subsets should fall back to full LL, even if the
// configuration sets don't resolve to the same alternative (e.g.
// {@code {1,2}} and {@code {3,4}}. If there is at least one non-conflicting
// configuration, SLL could continue with the hopes that more lookahead will
// resolve via one of those non-conflicting configurations.</p>
//
// <p>Here's the prediction termination rule them: SLL (for SLL+LL parsing)
// stops when it sees only conflicting configuration subsets. In contrast,
// full LL keeps going when there is uncertainty.</p>
//
// <p><strong>HEURISTIC</strong></p>
//
// <p>As a heuristic, we stop prediction when we see any conflicting subset
// unless we see a state that only has one alternative associated with it.
// The single-alt-state thing lets prediction continue upon rules like
// (otherwise, it would admit defeat too soon):</p>
//
// <p>{@code [12|1|[], 6|2|[], 12|2|[]]. s : (ID | ID ID?) ';' ;}</p>
//
// <p>When the ATN simulation reaches the state before {@code ';'}, it has a
// DFA state that looks like: {@code [12|1|[], 6|2|[], 12|2|[]]}. Naturally
// {@code 12|1|[]} and {@code 12|2|[]} conflict, but we cannot stop
// processing this node because alternative to has another way to continue,
// via {@code [6|2|[]]}.</p>
//
// <p>It also let's us continue for this rule:</p>
//
// <p>{@code [1|1|[], 1|2|[], 8|3|[]] a : A | A | A B ;}</p>
//
// <p>After matching input A, we reach the stop state for rule A, state 1.
// State 8 is the state right before B. Clearly alternatives 1 and 2
// conflict and no amount of further lookahead will separate the two.
// However, alternative 3 will be able to continue and so we do not stop
// working on this state. In the previous example, we're concerned with
// states associated with the conflicting alternatives. Here alt 3 is not
// associated with the conflicting configs, but since we can continue
// looking for input reasonably, don't declare the state done.</p>
//
// <p><strong>PURE SLL PARSING</strong></p>
//
// <p>To handle pure SLL parsing, all we have to do is make sure that we
// combine stack contexts for configurations that differ only by semantic
// predicate. From there, we can do the usual SLL termination heuristic.</p>
//
// <p><strong>PREDICATES IN SLL+LL PARSING</strong></p>
//
// <p>SLL decisions don't evaluate predicates until after they reach DFA stop
// states because they need to create the DFA cache that works in all
// semantic situations. In contrast, full LL evaluates predicates collected
// during start state computation so it can ignore predicates thereafter.
// This means that SLL termination detection can totally ignore semantic
// predicates.</p>
//
// <p>Implementation-wise, {@link ATNConfigSet} combines stack contexts but not
// semantic predicate contexts so we might see two configurations like the
// following.</p>
//
// <p>{@code (s, 1, x, {}), (s, 1, x', {p})}</p>
//
// <p>Before testing these configurations against others, we have to merge
// {@code x} and {@code x'} (without modifying the existing configurations).
// For example, we test {@code (x+x')==x''} when looking for conflicts in
// the following configurations.</p>
//
// <p>{@code (s, 1, x, {}), (s, 1, x', {p}), (s, 2, x'', {})}</p>
//
// <p>If the configuration set has predicates (as indicated by
// {@link ATNConfigSet//hasSemanticContext}), this algorithm makes a copy of
// the configurations to strip out all of the predicates so that a standard
// {@link ATNConfigSet} will merge everything ignoring predicates.</p>
//
PredictionMode.hasSLLConflictTerminatingPrediction = function( mode, configs) {
    // Configs in rule stop states indicate reaching the end of the decision
    // rule (local context) or end of start rule (full context). If all
    // configs meet this condition, then none of the configurations is able
    // to match additional input so we terminate prediction.
    //
    if (PredictionMode.allConfigsInRuleStopStates(configs)) {
        return true;
    }
    // pure SLL mode parsing
    if (mode === PredictionMode.SLL) {
        // Don't bother with combining configs from different semantic
        // contexts if we can fail over to full LL; costs more time
        // since we'll often fail over anyway.
        if (configs.hasSemanticContext) {
            // dup configs, tossing out semantic predicates
            var dup = new ATNConfigSet();
            for(var i=0;i<configs.items.length;i++) {
            	var c = configs.items[i];
                c = new ATNConfig({semanticContext:SemanticContext.NONE}, c);
                dup.add(c);
            }
            configs = dup;
        }
        // now we have combined contexts for configs with dissimilar preds
    }
    // pure SLL or combined SLL+LL mode parsing
    var altsets = PredictionMode.getConflictingAltSubsets(configs);
    return PredictionMode.hasConflictingAltSet(altsets) && !PredictionMode.hasStateAssociatedWithOneAlt(configs);
};

// Checks if any configuration in {@code configs} is in a
// {@link RuleStopState}. Configurations meeting this condition have reached
// the end of the decision rule (local context) or end of start rule (full
// context).
//
// @param configs the configuration set to test
// @return {@code true} if any configuration in {@code configs} is in a
// {@link RuleStopState}, otherwise {@code false}
PredictionMode.hasConfigInRuleStopState = function(configs) {
	for(var i=0;i<configs.items.length;i++) {
		var c = configs.items[i];
        if (c.state instanceof RuleStopState) {
            return true;
        }
	}
    return false;
};

// Checks if all configurations in {@code configs} are in a
// {@link RuleStopState}. Configurations meeting this condition have reached
// the end of the decision rule (local context) or end of start rule (full
// context).
//
// @param configs the configuration set to test
// @return {@code true} if all configurations in {@code configs} are in a
// {@link RuleStopState}, otherwise {@code false}
PredictionMode.allConfigsInRuleStopStates = function(configs) {
	for(var i=0;i<configs.items.length;i++) {
		var c = configs.items[i];
        if (!(c.state instanceof RuleStopState)) {
            return false;
        }
	}
    return true;
};

//
// Full LL prediction termination.
//
// <p>Can we stop looking ahead during ATN simulation or is there some
// uncertainty as to which alternative we will ultimately pick, after
// consuming more input? Even if there are partial conflicts, we might know
// that everything is going to resolve to the same minimum alternative. That
// means we can stop since no more lookahead will change that fact. On the
// other hand, there might be multiple conflicts that resolve to different
// minimums. That means we need more look ahead to decide which of those
// alternatives we should predict.</p>
//
// <p>The basic idea is to split the set of configurations {@code C}, into
// conflicting subsets {@code (s, _, ctx, _)} and singleton subsets with
// non-conflicting configurations. Two configurations conflict if they have
// identical {@link ATNConfig//state} and {@link ATNConfig//context} values
// but different {@link ATNConfig//alt} value, e.g. {@code (s, i, ctx, _)}
// and {@code (s, j, ctx, _)} for {@code i!=j}.</p>
//
// <p>Reduce these configuration subsets to the set of possible alternatives.
// You can compute the alternative subsets in one pass as follows:</p>
//
// <p>{@code A_s,ctx = {i | (s, i, ctx, _)}} for each configuration in
// {@code C} holding {@code s} and {@code ctx} fixed.</p>
//
// <p>Or in pseudo-code, for each configuration {@code c} in {@code C}:</p>
//
// <pre>
// map[c] U= c.{@link ATNConfig//alt alt} // map hash/equals uses s and x, not
// alt and not pred
// </pre>
//
// <p>The values in {@code map} are the set of {@code A_s,ctx} sets.</p>
//
// <p>If {@code |A_s,ctx|=1} then there is no conflict associated with
// {@code s} and {@code ctx}.</p>
//
// <p>Reduce the subsets to singletons by choosing a minimum of each subset. If
// the union of these alternative subsets is a singleton, then no amount of
// more lookahead will help us. We will always pick that alternative. If,
// however, there is more than one alternative, then we are uncertain which
// alternative to predict and must continue looking for resolution. We may
// or may not discover an ambiguity in the future, even if there are no
// conflicting subsets this round.</p>
//
// <p>The biggest sin is to terminate early because it means we've made a
// decision but were uncertain as to the eventual outcome. We haven't used
// enough lookahead. On the other hand, announcing a conflict too late is no
// big deal; you will still have the conflict. It's just inefficient. It
// might even look until the end of file.</p>
//
// <p>No special consideration for semantic predicates is required because
// predicates are evaluated on-the-fly for full LL prediction, ensuring that
// no configuration contains a semantic context during the termination
// check.</p>
//
// <p><strong>CONFLICTING CONFIGS</strong></p>
//
// <p>Two configurations {@code (s, i, x)} and {@code (s, j, x')}, conflict
// when {@code i!=j} but {@code x=x'}. Because we merge all
// {@code (s, i, _)} configurations together, that means that there are at
// most {@code n} configurations associated with state {@code s} for
// {@code n} possible alternatives in the decision. The merged stacks
// complicate the comparison of configuration contexts {@code x} and
// {@code x'}. Sam checks to see if one is a subset of the other by calling
// merge and checking to see if the merged result is either {@code x} or
// {@code x'}. If the {@code x} associated with lowest alternative {@code i}
// is the superset, then {@code i} is the only possible prediction since the
// others resolve to {@code min(i)} as well. However, if {@code x} is
// associated with {@code j>i} then at least one stack configuration for
// {@code j} is not in conflict with alternative {@code i}. The algorithm
// should keep going, looking for more lookahead due to the uncertainty.</p>
//
// <p>For simplicity, I'm doing a equality check between {@code x} and
// {@code x'} that lets the algorithm continue to consume lookahead longer
// than necessary. The reason I like the equality is of course the
// simplicity but also because that is the test you need to detect the
// alternatives that are actually in conflict.</p>
//
// <p><strong>CONTINUE/STOP RULE</strong></p>
//
// <p>Continue if union of resolved alternative sets from non-conflicting and
// conflicting alternative subsets has more than one alternative. We are
// uncertain about which alternative to predict.</p>
//
// <p>The complete set of alternatives, {@code [i for (_,i,_)]}, tells us which
// alternatives are still in the running for the amount of input we've
// consumed at this point. The conflicting sets let us to strip away
// configurations that won't lead to more states because we resolve
// conflicts to the configuration with a minimum alternate for the
// conflicting set.</p>
//
// <p><strong>CASES</strong></p>
//
// <ul>
//
// <li>no conflicts and more than 1 alternative in set =&gt; continue</li>
//
// <li> {@code (s, 1, x)}, {@code (s, 2, x)}, {@code (s, 3, z)},
// {@code (s', 1, y)}, {@code (s', 2, y)} yields non-conflicting set
// {@code {3}} U conflicting sets {@code min({1,2})} U {@code min({1,2})} =
// {@code {1,3}} =&gt; continue
// </li>
//
// <li>{@code (s, 1, x)}, {@code (s, 2, x)}, {@code (s', 1, y)},
// {@code (s', 2, y)}, {@code (s'', 1, z)} yields non-conflicting set
// {@code {1}} U conflicting sets {@code min({1,2})} U {@code min({1,2})} =
// {@code {1}} =&gt; stop and predict 1</li>
//
// <li>{@code (s, 1, x)}, {@code (s, 2, x)}, {@code (s', 1, y)},
// {@code (s', 2, y)} yields conflicting, reduced sets {@code {1}} U
// {@code {1}} = {@code {1}} =&gt; stop and predict 1, can announce
// ambiguity {@code {1,2}}</li>
//
// <li>{@code (s, 1, x)}, {@code (s, 2, x)}, {@code (s', 2, y)},
// {@code (s', 3, y)} yields conflicting, reduced sets {@code {1}} U
// {@code {2}} = {@code {1,2}} =&gt; continue</li>
//
// <li>{@code (s, 1, x)}, {@code (s, 2, x)}, {@code (s', 3, y)},
// {@code (s', 4, y)} yields conflicting, reduced sets {@code {1}} U
// {@code {3}} = {@code {1,3}} =&gt; continue</li>
//
// </ul>
//
// <p><strong>EXACT AMBIGUITY DETECTION</strong></p>
//
// <p>If all states report the same conflicting set of alternatives, then we
// know we have the exact ambiguity set.</p>
//
// <p><code>|A_<em>i</em>|&gt;1</code> and
// <code>A_<em>i</em> = A_<em>j</em></code> for all <em>i</em>, <em>j</em>.</p>
//
// <p>In other words, we continue examining lookahead until all {@code A_i}
// have more than one alternative and all {@code A_i} are the same. If
// {@code A={{1,2}, {1,3}}}, then regular LL prediction would terminate
// because the resolved set is {@code {1}}. To determine what the real
// ambiguity is, we have to know whether the ambiguity is between one and
// two or one and three so we keep going. We can only stop prediction when
// we need exact ambiguity detection when the sets look like
// {@code A={{1,2}}} or {@code {{1,2},{1,2}}}, etc...</p>
//
PredictionMode.resolvesToJustOneViableAlt = function(altsets) {
    return PredictionMode.getSingleViableAlt(altsets);
};

//
// Determines if every alternative subset in {@code altsets} contains more
// than one alternative.
//
// @param altsets a collection of alternative subsets
// @return {@code true} if every {@link BitSet} in {@code altsets} has
// {@link BitSet//cardinality cardinality} &gt; 1, otherwise {@code false}
//
PredictionMode.allSubsetsConflict = function(altsets) {
    return ! PredictionMode.hasNonConflictingAltSet(altsets);
};
//
// Determines if any single alternative subset in {@code altsets} contains
// exactly one alternative.
//
// @param altsets a collection of alternative subsets
// @return {@code true} if {@code altsets} contains a {@link BitSet} with
// {@link BitSet//cardinality cardinality} 1, otherwise {@code false}
//
PredictionMode.hasNonConflictingAltSet = function(altsets) {
	for(var i=0;i<altsets.length;i++) {
		var alts = altsets[i];
        if (alts.length===1) {
            return true;
        }
	}
    return false;
};

//
// Determines if any single alternative subset in {@code altsets} contains
// more than one alternative.
//
// @param altsets a collection of alternative subsets
// @return {@code true} if {@code altsets} contains a {@link BitSet} with
// {@link BitSet//cardinality cardinality} &gt; 1, otherwise {@code false}
//
PredictionMode.hasConflictingAltSet = function(altsets) {
	for(var i=0;i<altsets.length;i++) {
		var alts = altsets[i];
        if (alts.length>1) {
            return true;
        }
	}
    return false;
};

//
// Determines if every alternative subset in {@code altsets} is equivalent.
//
// @param altsets a collection of alternative subsets
// @return {@code true} if every member of {@code altsets} is equal to the
// others, otherwise {@code false}
//
PredictionMode.allSubsetsEqual = function(altsets) {
    var first = null;
	for(var i=0;i<altsets.length;i++) {
		var alts = altsets[i];
        if (first === null) {
            first = alts;
        } else if (alts!==first) {
            return false;
        }
	}
    return true;
};

//
// Returns the unique alternative predicted by all alternative subsets in
// {@code altsets}. If no such alternative exists, this method returns
// {@link ATN//INVALID_ALT_NUMBER}.
//
// @param altsets a collection of alternative subsets
//
PredictionMode.getUniqueAlt = function(altsets) {
    var all = PredictionMode.getAlts(altsets);
    if (all.length===1) {
        return all.minValue();
    } else {
        return ATN.INVALID_ALT_NUMBER;
    }
};

// Gets the complete set of represented alternatives for a collection of
// alternative subsets. This method returns the union of each {@link BitSet}
// in {@code altsets}.
//
// @param altsets a collection of alternative subsets
// @return the set of represented alternatives in {@code altsets}
//
PredictionMode.getAlts = function(altsets) {
    var all = new BitSet();
    altsets.map( function(alts) { all.or(alts); });
    return all;
};

//
// This function gets the conflicting alt subsets from a configuration set.
// For each configuration {@code c} in {@code configs}:
//
// <pre>
// map[c] U= c.{@link ATNConfig//alt alt} // map hash/equals uses s and x, not
// alt and not pred
// </pre>

PredictionMode.getConflictingAltSubsets = function(configs) {
    var configToAlts = new Map();
    configToAlts.hashFunction = function(cfg) { hashStuff(cfg.state.stateNumber, cfg.context); };
    configToAlts.equalsFunction = function(c1, c2) { return c1.state.stateNumber==c2.state.stateNumber && c1.context.equals(c2.context);}
    configs.items.map(function(cfg) {
        var alts = configToAlts.get(cfg);
        if (alts === null) {
            alts = new BitSet();
            configToAlts.put(cfg, alts);
        }
        alts.add(cfg.alt);
	});
    return configToAlts.getValues();
};

//
// Get a map from state to alt subset from a configuration set. For each
// configuration {@code c} in {@code configs}:
//
// <pre>
// map[c.{@link ATNConfig//state state}] U= c.{@link ATNConfig//alt alt}
// </pre>
//
PredictionMode.getStateToAltMap = function(configs) {
    var m = new AltDict();
    configs.items.map(function(c) {
        var alts = m.get(c.state);
        if (alts === null) {
            alts = new BitSet();
            m.put(c.state, alts);
        }
        alts.add(c.alt);
    });
    return m;
};

PredictionMode.hasStateAssociatedWithOneAlt = function(configs) {
    var values = PredictionMode.getStateToAltMap(configs).values();
    for(var i=0;i<values.length;i++) {
        if (values[i].length===1) {
            return true;
        }
    }
    return false;
};

PredictionMode.getSingleViableAlt = function(altsets) {
    var result = null;
	for(var i=0;i<altsets.length;i++) {
		var alts = altsets[i];
        var minAlt = alts.minValue();
        if(result===null) {
            result = minAlt;
        } else if(result!==minAlt) { // more than 1 viable alt
            return ATN.INVALID_ALT_NUMBER;
        }
	}
    return result;
};

exports.PredictionMode = PredictionMode;


/***/ }),
/* 77 */
/***/ (function(module, exports) {

/*! https://mths.be/codepointat v0.2.0 by @mathias */
if (!String.prototype.codePointAt) {
	(function() {
		'use strict'; // needed to support `apply`/`call` with `undefined`/`null`
		var defineProperty = (function() {
			// IE 8 only supports `Object.defineProperty` on DOM elements
			try {
				var object = {};
				var $defineProperty = Object.defineProperty;
				var result = $defineProperty(object, object, object) && $defineProperty;
			} catch(error) {}
			return result;
		}());
		var codePointAt = function(position) {
			if (this == null) {
				throw TypeError();
			}
			var string = String(this);
			var size = string.length;
			// `ToInteger`
			var index = position ? Number(position) : 0;
			if (index != index) { // better `isNaN`
				index = 0;
			}
			// Account for out-of-bounds indices:
			if (index < 0 || index >= size) {
				return undefined;
			}
			// Get the first code unit
			var first = string.charCodeAt(index);
			var second;
			if ( // check if it’s the start of a surrogate pair
				first >= 0xD800 && first <= 0xDBFF && // high surrogate
				size > index + 1 // there is a next code unit
			) {
				second = string.charCodeAt(index + 1);
				if (second >= 0xDC00 && second <= 0xDFFF) { // low surrogate
					// https://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
					return (first - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;
				}
			}
			return first;
		};
		if (defineProperty) {
			defineProperty(String.prototype, 'codePointAt', {
				'value': codePointAt,
				'configurable': true,
				'writable': true
			});
		} else {
			String.prototype.codePointAt = codePointAt;
		}
	}());
}


/***/ }),
/* 78 */
/***/ (function(module, exports) {

/*! https://mths.be/fromcodepoint v0.2.1 by @mathias */
if (!String.fromCodePoint) {
	(function() {
		var defineProperty = (function() {
			// IE 8 only supports `Object.defineProperty` on DOM elements
			try {
				var object = {};
				var $defineProperty = Object.defineProperty;
				var result = $defineProperty(object, object, object) && $defineProperty;
			} catch(error) {}
			return result;
		}());
		var stringFromCharCode = String.fromCharCode;
		var floor = Math.floor;
		var fromCodePoint = function(_) {
			var MAX_SIZE = 0x4000;
			var codeUnits = [];
			var highSurrogate;
			var lowSurrogate;
			var index = -1;
			var length = arguments.length;
			if (!length) {
				return '';
			}
			var result = '';
			while (++index < length) {
				var codePoint = Number(arguments[index]);
				if (
					!isFinite(codePoint) || // `NaN`, `+Infinity`, or `-Infinity`
					codePoint < 0 || // not a valid Unicode code point
					codePoint > 0x10FFFF || // not a valid Unicode code point
					floor(codePoint) != codePoint // not an integer
				) {
					throw RangeError('Invalid code point: ' + codePoint);
				}
				if (codePoint <= 0xFFFF) { // BMP code point
					codeUnits.push(codePoint);
				} else { // Astral code point; split in surrogate halves
					// https://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
					codePoint -= 0x10000;
					highSurrogate = (codePoint >> 10) + 0xD800;
					lowSurrogate = (codePoint % 0x400) + 0xDC00;
					codeUnits.push(highSurrogate, lowSurrogate);
				}
				if (index + 1 == length || codeUnits.length > MAX_SIZE) {
					result += stringFromCharCode.apply(null, codeUnits);
					codeUnits.length = 0;
				}
			}
			return result;
		};
		if (defineProperty) {
			defineProperty(String, 'fromCodePoint', {
				'value': fromCodePoint,
				'configurable': true,
				'writable': true
			});
		} else {
			String.fromCodePoint = fromCodePoint;
		}
	}());
}


/***/ }),
/* 79 */
/***/ (function(module, exports, __webpack_require__) {

//
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
//

var Token = __webpack_require__(2).Token;
var Errors = __webpack_require__(8);
var NoViableAltException = Errors.NoViableAltException;
var InputMismatchException = Errors.InputMismatchException;
var FailedPredicateException = Errors.FailedPredicateException;
var ParseCancellationException = Errors.ParseCancellationException;
var ATNState = __webpack_require__(7).ATNState;
var Interval = __webpack_require__(4).Interval;
var IntervalSet = __webpack_require__(4).IntervalSet;

function ErrorStrategy() {

}

ErrorStrategy.prototype.reset = function(recognizer){
};

ErrorStrategy.prototype.recoverInline = function(recognizer){
};

ErrorStrategy.prototype.recover = function(recognizer, e){
};

ErrorStrategy.prototype.sync = function(recognizer){
};

ErrorStrategy.prototype.inErrorRecoveryMode = function(recognizer){
};

ErrorStrategy.prototype.reportError = function(recognizer){
};



// This is the default implementation of {@link ANTLRErrorStrategy} used for
// error reporting and recovery in ANTLR parsers.
//
function DefaultErrorStrategy() {
	ErrorStrategy.call(this);
    // Indicates whether the error strategy is currently "recovering from an
    // error". This is used to suppress reporting multiple error messages while
    // attempting to recover from a detected syntax error.
    //
    // @see //inErrorRecoveryMode
    //
    this.errorRecoveryMode = false;

    // The index into the input stream where the last error occurred.
    // This is used to prevent infinite loops where an error is found
    // but no token is consumed during recovery...another error is found,
    // ad nauseum. This is a failsafe mechanism to guarantee that at least
    // one token/tree node is consumed for two errors.
    //
    this.lastErrorIndex = -1;
    this.lastErrorStates = null;
    return this;
}

DefaultErrorStrategy.prototype = Object.create(ErrorStrategy.prototype);
DefaultErrorStrategy.prototype.constructor = DefaultErrorStrategy;

// <p>The default implementation simply calls {@link //endErrorCondition} to
// ensure that the handler is not in error recovery mode.</p>
DefaultErrorStrategy.prototype.reset = function(recognizer) {
    this.endErrorCondition(recognizer);
};

//
// This method is called to enter error recovery mode when a recognition
// exception is reported.
//
// @param recognizer the parser instance
//
DefaultErrorStrategy.prototype.beginErrorCondition = function(recognizer) {
    this.errorRecoveryMode = true;
};

DefaultErrorStrategy.prototype.inErrorRecoveryMode = function(recognizer) {
    return this.errorRecoveryMode;
};

//
// This method is called to leave error recovery mode after recovering from
// a recognition exception.
//
// @param recognizer
//
DefaultErrorStrategy.prototype.endErrorCondition = function(recognizer) {
    this.errorRecoveryMode = false;
    this.lastErrorStates = null;
    this.lastErrorIndex = -1;
};

//
// {@inheritDoc}
//
// <p>The default implementation simply calls {@link //endErrorCondition}.</p>
//
DefaultErrorStrategy.prototype.reportMatch = function(recognizer) {
    this.endErrorCondition(recognizer);
};

//
// {@inheritDoc}
//
// <p>The default implementation returns immediately if the handler is already
// in error recovery mode. Otherwise, it calls {@link //beginErrorCondition}
// and dispatches the reporting task based on the runtime type of {@code e}
// according to the following table.</p>
//
// <ul>
// <li>{@link NoViableAltException}: Dispatches the call to
// {@link //reportNoViableAlternative}</li>
// <li>{@link InputMismatchException}: Dispatches the call to
// {@link //reportInputMismatch}</li>
// <li>{@link FailedPredicateException}: Dispatches the call to
// {@link //reportFailedPredicate}</li>
// <li>All other types: calls {@link Parser//notifyErrorListeners} to report
// the exception</li>
// </ul>
//
DefaultErrorStrategy.prototype.reportError = function(recognizer, e) {
   // if we've already reported an error and have not matched a token
   // yet successfully, don't report any errors.
    if(this.inErrorRecoveryMode(recognizer)) {
        return; // don't report spurious errors
    }
    this.beginErrorCondition(recognizer);
    if ( e instanceof NoViableAltException ) {
        this.reportNoViableAlternative(recognizer, e);
    } else if ( e instanceof InputMismatchException ) {
        this.reportInputMismatch(recognizer, e);
    } else if ( e instanceof FailedPredicateException ) {
        this.reportFailedPredicate(recognizer, e);
    } else {
        console.log("unknown recognition error type: " + e.constructor.name);
        console.log(e.stack);
        recognizer.notifyErrorListeners(e.getOffendingToken(), e.getMessage(), e);
    }
};
//
// {@inheritDoc}
//
// <p>The default implementation resynchronizes the parser by consuming tokens
// until we find one in the resynchronization set--loosely the set of tokens
// that can follow the current rule.</p>
//
DefaultErrorStrategy.prototype.recover = function(recognizer, e) {
    if (this.lastErrorIndex===recognizer.getInputStream().index &&
        this.lastErrorStates !== null && this.lastErrorStates.indexOf(recognizer.state)>=0) {
		// uh oh, another error at same token index and previously-visited
		// state in ATN; must be a case where LT(1) is in the recovery
		// token set so nothing got consumed. Consume a single token
		// at least to prevent an infinite loop; this is a failsafe.
		recognizer.consume();
    }
    this.lastErrorIndex = recognizer._input.index;
    if (this.lastErrorStates === null) {
        this.lastErrorStates = [];
    }
    this.lastErrorStates.push(recognizer.state);
    var followSet = this.getErrorRecoverySet(recognizer);
    this.consumeUntil(recognizer, followSet);
};

// The default implementation of {@link ANTLRErrorStrategy//sync} makes sure
// that the current lookahead symbol is consistent with what were expecting
// at this point in the ATN. You can call this anytime but ANTLR only
// generates code to check before subrules/loops and each iteration.
//
// <p>Implements Jim Idle's magic sync mechanism in closures and optional
// subrules. E.g.,</p>
//
// <pre>
// a : sync ( stuff sync )* ;
// sync : {consume to what can follow sync} ;
// </pre>
//
// At the start of a sub rule upon error, {@link //sync} performs single
// token deletion, if possible. If it can't do that, it bails on the current
// rule and uses the default error recovery, which consumes until the
// resynchronization set of the current rule.
//
// <p>If the sub rule is optional ({@code (...)?}, {@code (...)*}, or block
// with an empty alternative), then the expected set includes what follows
// the subrule.</p>
//
// <p>During loop iteration, it consumes until it sees a token that can start a
// sub rule or what follows loop. Yes, that is pretty aggressive. We opt to
// stay in the loop as long as possible.</p>
//
// <p><strong>ORIGINS</strong></p>
//
// <p>Previous versions of ANTLR did a poor job of their recovery within loops.
// A single mismatch token or missing token would force the parser to bail
// out of the entire rules surrounding the loop. So, for rule</p>
//
// <pre>
// classDef : 'class' ID '{' member* '}'
// </pre>
//
// input with an extra token between members would force the parser to
// consume until it found the next class definition rather than the next
// member definition of the current class.
//
// <p>This functionality cost a little bit of effort because the parser has to
// compare token set at the start of the loop and at each iteration. If for
// some reason speed is suffering for you, you can turn off this
// functionality by simply overriding this method as a blank { }.</p>
//
DefaultErrorStrategy.prototype.sync = function(recognizer) {
    // If already recovering, don't try to sync
    if (this.inErrorRecoveryMode(recognizer)) {
        return;
    }
    var s = recognizer._interp.atn.states[recognizer.state];
    var la = recognizer.getTokenStream().LA(1);
    // try cheaper subset first; might get lucky. seems to shave a wee bit off
    var nextTokens = recognizer.atn.nextTokens(s);
    if (nextTokens.contains(Token.EPSILON) || nextTokens.contains(la)) {
        return;
    }
    switch (s.stateType) {
    case ATNState.BLOCK_START:
    case ATNState.STAR_BLOCK_START:
    case ATNState.PLUS_BLOCK_START:
    case ATNState.STAR_LOOP_ENTRY:
       // report error and recover if possible
        if( this.singleTokenDeletion(recognizer) !== null) {
            return;
        } else {
            throw new InputMismatchException(recognizer);
        }
        break;
    case ATNState.PLUS_LOOP_BACK:
    case ATNState.STAR_LOOP_BACK:
        this.reportUnwantedToken(recognizer);
        var expecting = new IntervalSet();
        expecting.addSet(recognizer.getExpectedTokens());
        var whatFollowsLoopIterationOrRule = expecting.addSet(this.getErrorRecoverySet(recognizer));
        this.consumeUntil(recognizer, whatFollowsLoopIterationOrRule);
        break;
    default:
        // do nothing if we can't identify the exact kind of ATN state
    }
};

// This is called by {@link //reportError} when the exception is a
// {@link NoViableAltException}.
//
// @see //reportError
//
// @param recognizer the parser instance
// @param e the recognition exception
//
DefaultErrorStrategy.prototype.reportNoViableAlternative = function(recognizer, e) {
    var tokens = recognizer.getTokenStream();
    var input;
    if(tokens !== null) {
        if (e.startToken.type===Token.EOF) {
            input = "<EOF>";
        } else {
            input = tokens.getText(new Interval(e.startToken.tokenIndex, e.offendingToken.tokenIndex));
        }
    } else {
        input = "<unknown input>";
    }
    var msg = "no viable alternative at input " + this.escapeWSAndQuote(input);
    recognizer.notifyErrorListeners(msg, e.offendingToken, e);
};

//
// This is called by {@link //reportError} when the exception is an
// {@link InputMismatchException}.
//
// @see //reportError
//
// @param recognizer the parser instance
// @param e the recognition exception
//
DefaultErrorStrategy.prototype.reportInputMismatch = function(recognizer, e) {
    var msg = "mismatched input " + this.getTokenErrorDisplay(e.offendingToken) +
          " expecting " + e.getExpectedTokens().toString(recognizer.literalNames, recognizer.symbolicNames);
    recognizer.notifyErrorListeners(msg, e.offendingToken, e);
};

//
// This is called by {@link //reportError} when the exception is a
// {@link FailedPredicateException}.
//
// @see //reportError
//
// @param recognizer the parser instance
// @param e the recognition exception
//
DefaultErrorStrategy.prototype.reportFailedPredicate = function(recognizer, e) {
    var ruleName = recognizer.ruleNames[recognizer._ctx.ruleIndex];
    var msg = "rule " + ruleName + " " + e.message;
    recognizer.notifyErrorListeners(msg, e.offendingToken, e);
};

// This method is called to report a syntax error which requires the removal
// of a token from the input stream. At the time this method is called, the
// erroneous symbol is current {@code LT(1)} symbol and has not yet been
// removed from the input stream. When this method returns,
// {@code recognizer} is in error recovery mode.
//
// <p>This method is called when {@link //singleTokenDeletion} identifies
// single-token deletion as a viable recovery strategy for a mismatched
// input error.</p>
//
// <p>The default implementation simply returns if the handler is already in
// error recovery mode. Otherwise, it calls {@link //beginErrorCondition} to
// enter error recovery mode, followed by calling
// {@link Parser//notifyErrorListeners}.</p>
//
// @param recognizer the parser instance
//
DefaultErrorStrategy.prototype.reportUnwantedToken = function(recognizer) {
    if (this.inErrorRecoveryMode(recognizer)) {
        return;
    }
    this.beginErrorCondition(recognizer);
    var t = recognizer.getCurrentToken();
    var tokenName = this.getTokenErrorDisplay(t);
    var expecting = this.getExpectedTokens(recognizer);
    var msg = "extraneous input " + tokenName + " expecting " +
        expecting.toString(recognizer.literalNames, recognizer.symbolicNames);
    recognizer.notifyErrorListeners(msg, t, null);
};
// This method is called to report a syntax error which requires the
// insertion of a missing token into the input stream. At the time this
// method is called, the missing token has not yet been inserted. When this
// method returns, {@code recognizer} is in error recovery mode.
//
// <p>This method is called when {@link //singleTokenInsertion} identifies
// single-token insertion as a viable recovery strategy for a mismatched
// input error.</p>
//
// <p>The default implementation simply returns if the handler is already in
// error recovery mode. Otherwise, it calls {@link //beginErrorCondition} to
// enter error recovery mode, followed by calling
// {@link Parser//notifyErrorListeners}.</p>
//
// @param recognizer the parser instance
//
DefaultErrorStrategy.prototype.reportMissingToken = function(recognizer) {
    if ( this.inErrorRecoveryMode(recognizer)) {
        return;
    }
    this.beginErrorCondition(recognizer);
    var t = recognizer.getCurrentToken();
    var expecting = this.getExpectedTokens(recognizer);
    var msg = "missing " + expecting.toString(recognizer.literalNames, recognizer.symbolicNames) +
          " at " + this.getTokenErrorDisplay(t);
    recognizer.notifyErrorListeners(msg, t, null);
};

// <p>The default implementation attempts to recover from the mismatched input
// by using single token insertion and deletion as described below. If the
// recovery attempt fails, this method throws an
// {@link InputMismatchException}.</p>
//
// <p><strong>EXTRA TOKEN</strong> (single token deletion)</p>
//
// <p>{@code LA(1)} is not what we are looking for. If {@code LA(2)} has the
// right token, however, then assume {@code LA(1)} is some extra spurious
// token and delete it. Then consume and return the next token (which was
// the {@code LA(2)} token) as the successful result of the match operation.</p>
//
// <p>This recovery strategy is implemented by {@link
// //singleTokenDeletion}.</p>
//
// <p><strong>MISSING TOKEN</strong> (single token insertion)</p>
//
// <p>If current token (at {@code LA(1)}) is consistent with what could come
// after the expected {@code LA(1)} token, then assume the token is missing
// and use the parser's {@link TokenFactory} to create it on the fly. The
// "insertion" is performed by returning the created token as the successful
// result of the match operation.</p>
//
// <p>This recovery strategy is implemented by {@link
// //singleTokenInsertion}.</p>
//
// <p><strong>EXAMPLE</strong></p>
//
// <p>For example, Input {@code i=(3;} is clearly missing the {@code ')'}. When
// the parser returns from the nested call to {@code expr}, it will have
// call chain:</p>
//
// <pre>
// stat &rarr; expr &rarr; atom
// </pre>
//
// and it will be trying to match the {@code ')'} at this point in the
// derivation:
//
// <pre>
// =&gt; ID '=' '(' INT ')' ('+' atom)* ';'
// ^
// </pre>
//
// The attempt to match {@code ')'} will fail when it sees {@code ';'} and
// call {@link //recoverInline}. To recover, it sees that {@code LA(1)==';'}
// is in the set of tokens that can follow the {@code ')'} token reference
// in rule {@code atom}. It can assume that you forgot the {@code ')'}.
//
DefaultErrorStrategy.prototype.recoverInline = function(recognizer) {
    // SINGLE TOKEN DELETION
    var matchedSymbol = this.singleTokenDeletion(recognizer);
    if (matchedSymbol !== null) {
        // we have deleted the extra token.
        // now, move past ttype token as if all were ok
        recognizer.consume();
        return matchedSymbol;
    }
    // SINGLE TOKEN INSERTION
    if (this.singleTokenInsertion(recognizer)) {
        return this.getMissingSymbol(recognizer);
    }
    // even that didn't work; must throw the exception
    throw new InputMismatchException(recognizer);
};

//
// This method implements the single-token insertion inline error recovery
// strategy. It is called by {@link //recoverInline} if the single-token
// deletion strategy fails to recover from the mismatched input. If this
// method returns {@code true}, {@code recognizer} will be in error recovery
// mode.
//
// <p>This method determines whether or not single-token insertion is viable by
// checking if the {@code LA(1)} input symbol could be successfully matched
// if it were instead the {@code LA(2)} symbol. If this method returns
// {@code true}, the caller is responsible for creating and inserting a
// token with the correct type to produce this behavior.</p>
//
// @param recognizer the parser instance
// @return {@code true} if single-token insertion is a viable recovery
// strategy for the current mismatched input, otherwise {@code false}
//
DefaultErrorStrategy.prototype.singleTokenInsertion = function(recognizer) {
    var currentSymbolType = recognizer.getTokenStream().LA(1);
    // if current token is consistent with what could come after current
    // ATN state, then we know we're missing a token; error recovery
    // is free to conjure up and insert the missing token
    var atn = recognizer._interp.atn;
    var currentState = atn.states[recognizer.state];
    var next = currentState.transitions[0].target;
    var expectingAtLL2 = atn.nextTokens(next, recognizer._ctx);
    if (expectingAtLL2.contains(currentSymbolType) ){
        this.reportMissingToken(recognizer);
        return true;
    } else {
        return false;
    }
};

// This method implements the single-token deletion inline error recovery
// strategy. It is called by {@link //recoverInline} to attempt to recover
// from mismatched input. If this method returns null, the parser and error
// handler state will not have changed. If this method returns non-null,
// {@code recognizer} will <em>not</em> be in error recovery mode since the
// returned token was a successful match.
//
// <p>If the single-token deletion is successful, this method calls
// {@link //reportUnwantedToken} to report the error, followed by
// {@link Parser//consume} to actually "delete" the extraneous token. Then,
// before returning {@link //reportMatch} is called to signal a successful
// match.</p>
//
// @param recognizer the parser instance
// @return the successfully matched {@link Token} instance if single-token
// deletion successfully recovers from the mismatched input, otherwise
// {@code null}
//
DefaultErrorStrategy.prototype.singleTokenDeletion = function(recognizer) {
    var nextTokenType = recognizer.getTokenStream().LA(2);
    var expecting = this.getExpectedTokens(recognizer);
    if (expecting.contains(nextTokenType)) {
        this.reportUnwantedToken(recognizer);
        // print("recoverFromMismatchedToken deleting " \
        // + str(recognizer.getTokenStream().LT(1)) \
        // + " since " + str(recognizer.getTokenStream().LT(2)) \
        // + " is what we want", file=sys.stderr)
        recognizer.consume(); // simply delete extra token
        // we want to return the token we're actually matching
        var matchedSymbol = recognizer.getCurrentToken();
        this.reportMatch(recognizer); // we know current token is correct
        return matchedSymbol;
    } else {
        return null;
    }
};

// Conjure up a missing token during error recovery.
//
// The recognizer attempts to recover from single missing
// symbols. But, actions might refer to that missing symbol.
// For example, x=ID {f($x);}. The action clearly assumes
// that there has been an identifier matched previously and that
// $x points at that token. If that token is missing, but
// the next token in the stream is what we want we assume that
// this token is missing and we keep going. Because we
// have to return some token to replace the missing token,
// we have to conjure one up. This method gives the user control
// over the tokens returned for missing tokens. Mostly,
// you will want to create something special for identifier
// tokens. For literals such as '{' and ',', the default
// action in the parser or tree parser works. It simply creates
// a CommonToken of the appropriate type. The text will be the token.
// If you change what tokens must be created by the lexer,
// override this method to create the appropriate tokens.
//
DefaultErrorStrategy.prototype.getMissingSymbol = function(recognizer) {
    var currentSymbol = recognizer.getCurrentToken();
    var expecting = this.getExpectedTokens(recognizer);
    var expectedTokenType = expecting.first(); // get any element
    var tokenText;
    if (expectedTokenType===Token.EOF) {
        tokenText = "<missing EOF>";
    } else {
        tokenText = "<missing " + recognizer.literalNames[expectedTokenType] + ">";
    }
    var current = currentSymbol;
    var lookback = recognizer.getTokenStream().LT(-1);
    if (current.type===Token.EOF && lookback !== null) {
        current = lookback;
    }
    return recognizer.getTokenFactory().create(current.source,
        expectedTokenType, tokenText, Token.DEFAULT_CHANNEL,
        -1, -1, current.line, current.column);
};

DefaultErrorStrategy.prototype.getExpectedTokens = function(recognizer) {
    return recognizer.getExpectedTokens();
};

// How should a token be displayed in an error message? The default
// is to display just the text, but during development you might
// want to have a lot of information spit out. Override in that case
// to use t.toString() (which, for CommonToken, dumps everything about
// the token). This is better than forcing you to override a method in
// your token objects because you don't have to go modify your lexer
// so that it creates a new Java type.
//
DefaultErrorStrategy.prototype.getTokenErrorDisplay = function(t) {
    if (t === null) {
        return "<no token>";
    }
    var s = t.text;
    if (s === null) {
        if (t.type===Token.EOF) {
            s = "<EOF>";
        } else {
            s = "<" + t.type + ">";
        }
    }
    return this.escapeWSAndQuote(s);
};

DefaultErrorStrategy.prototype.escapeWSAndQuote = function(s) {
    s = s.replace(/\n/g,"\\n");
    s = s.replace(/\r/g,"\\r");
    s = s.replace(/\t/g,"\\t");
    return "'" + s + "'";
};

// Compute the error recovery set for the current rule. During
// rule invocation, the parser pushes the set of tokens that can
// follow that rule reference on the stack; this amounts to
// computing FIRST of what follows the rule reference in the
// enclosing rule. See LinearApproximator.FIRST().
// This local follow set only includes tokens
// from within the rule; i.e., the FIRST computation done by
// ANTLR stops at the end of a rule.
//
// EXAMPLE
//
// When you find a "no viable alt exception", the input is not
// consistent with any of the alternatives for rule r. The best
// thing to do is to consume tokens until you see something that
// can legally follow a call to r//or* any rule that called r.
// You don't want the exact set of viable next tokens because the
// input might just be missing a token--you might consume the
// rest of the input looking for one of the missing tokens.
//
// Consider grammar:
//
// a : '[' b ']'
// | '(' b ')'
// ;
// b : c '^' INT ;
// c : ID
// | INT
// ;
//
// At each rule invocation, the set of tokens that could follow
// that rule is pushed on a stack. Here are the various
// context-sensitive follow sets:
//
// FOLLOW(b1_in_a) = FIRST(']') = ']'
// FOLLOW(b2_in_a) = FIRST(')') = ')'
// FOLLOW(c_in_b) = FIRST('^') = '^'
//
// Upon erroneous input "[]", the call chain is
//
// a -> b -> c
//
// and, hence, the follow context stack is:
//
// depth follow set start of rule execution
// 0 <EOF> a (from main())
// 1 ']' b
// 2 '^' c
//
// Notice that ')' is not included, because b would have to have
// been called from a different context in rule a for ')' to be
// included.
//
// For error recovery, we cannot consider FOLLOW(c)
// (context-sensitive or otherwise). We need the combined set of
// all context-sensitive FOLLOW sets--the set of all tokens that
// could follow any reference in the call chain. We need to
// resync to one of those tokens. Note that FOLLOW(c)='^' and if
// we resync'd to that token, we'd consume until EOF. We need to
// sync to context-sensitive FOLLOWs for a, b, and c: {']','^'}.
// In this case, for input "[]", LA(1) is ']' and in the set, so we would
// not consume anything. After printing an error, rule c would
// return normally. Rule b would not find the required '^' though.
// At this point, it gets a mismatched token error and throws an
// exception (since LA(1) is not in the viable following token
// set). The rule exception handler tries to recover, but finds
// the same recovery set and doesn't consume anything. Rule b
// exits normally returning to rule a. Now it finds the ']' (and
// with the successful match exits errorRecovery mode).
//
// So, you can see that the parser walks up the call chain looking
// for the token that was a member of the recovery set.
//
// Errors are not generated in errorRecovery mode.
//
// ANTLR's error recovery mechanism is based upon original ideas:
//
// "Algorithms + Data Structures = Programs" by Niklaus Wirth
//
// and
//
// "A note on error recovery in recursive descent parsers":
// http://portal.acm.org/citation.cfm?id=947902.947905
//
// Later, Josef Grosch had some good ideas:
//
// "Efficient and Comfortable Error Recovery in Recursive Descent
// Parsers":
// ftp://www.cocolab.com/products/cocktail/doca4.ps/ell.ps.zip
//
// Like Grosch I implement context-sensitive FOLLOW sets that are combined
// at run-time upon error to avoid overhead during parsing.
//
DefaultErrorStrategy.prototype.getErrorRecoverySet = function(recognizer) {
    var atn = recognizer._interp.atn;
    var ctx = recognizer._ctx;
    var recoverSet = new IntervalSet();
    while (ctx !== null && ctx.invokingState>=0) {
        // compute what follows who invoked us
        var invokingState = atn.states[ctx.invokingState];
        var rt = invokingState.transitions[0];
        var follow = atn.nextTokens(rt.followState);
        recoverSet.addSet(follow);
        ctx = ctx.parentCtx;
    }
    recoverSet.removeOne(Token.EPSILON);
    return recoverSet;
};

// Consume tokens until one matches the given token set.//
DefaultErrorStrategy.prototype.consumeUntil = function(recognizer, set) {
    var ttype = recognizer.getTokenStream().LA(1);
    while( ttype !== Token.EOF && !set.contains(ttype)) {
        recognizer.consume();
        ttype = recognizer.getTokenStream().LA(1);
    }
};

//
// This implementation of {@link ANTLRErrorStrategy} responds to syntax errors
// by immediately canceling the parse operation with a
// {@link ParseCancellationException}. The implementation ensures that the
// {@link ParserRuleContext//exception} field is set for all parse tree nodes
// that were not completed prior to encountering the error.
//
// <p>
// This error strategy is useful in the following scenarios.</p>
//
// <ul>
// <li><strong>Two-stage parsing:</strong> This error strategy allows the first
// stage of two-stage parsing to immediately terminate if an error is
// encountered, and immediately fall back to the second stage. In addition to
// avoiding wasted work by attempting to recover from errors here, the empty
// implementation of {@link BailErrorStrategy//sync} improves the performance of
// the first stage.</li>
// <li><strong>Silent validation:</strong> When syntax errors are not being
// reported or logged, and the parse result is simply ignored if errors occur,
// the {@link BailErrorStrategy} avoids wasting work on recovering from errors
// when the result will be ignored either way.</li>
// </ul>
//
// <p>
// {@code myparser.setErrorHandler(new BailErrorStrategy());}</p>
//
// @see Parser//setErrorHandler(ANTLRErrorStrategy)
//
function BailErrorStrategy() {
	DefaultErrorStrategy.call(this);
	return this;
}

BailErrorStrategy.prototype = Object.create(DefaultErrorStrategy.prototype);
BailErrorStrategy.prototype.constructor = BailErrorStrategy;

// Instead of recovering from exception {@code e}, re-throw it wrapped
// in a {@link ParseCancellationException} so it is not caught by the
// rule function catches. Use {@link Exception//getCause()} to get the
// original {@link RecognitionException}.
//
BailErrorStrategy.prototype.recover = function(recognizer, e) {
    var context = recognizer._ctx;
    while (context !== null) {
        context.exception = e;
        context = context.parentCtx;
    }
    throw new ParseCancellationException(e);
};

// Make sure we don't attempt to recover inline; if the parser
// successfully recovers, it won't throw an exception.
//
BailErrorStrategy.prototype.recoverInline = function(recognizer) {
    this.recover(recognizer, new InputMismatchException(recognizer));
};

// Make sure we don't attempt to recover from problems in subrules.//
BailErrorStrategy.prototype.sync = function(recognizer) {
    // pass
};

exports.BailErrorStrategy = BailErrorStrategy;
exports.DefaultErrorStrategy = DefaultErrorStrategy;


/***/ }),
/* 80 */
/***/ (function(module, exports, __webpack_require__) {

// Generated from C:\Users\RYOSUKE\eclipse\java-oxygen\eclipse\..\..\..\eclipse-workspace\net.unicoen\UniMapperGenerator\src-gen\CPP14.g4 by ANTLR 4.7.1
// jshint ignore: start
var antlr4 = __webpack_require__(16);

// This class defines a complete generic visitor for a parse tree produced by CPP14Parser.

function CPP14Visitor() {
	antlr4.tree.ParseTreeVisitor.call(this);
	return this;
}

CPP14Visitor.prototype = Object.create(antlr4.tree.ParseTreeVisitor.prototype);
CPP14Visitor.prototype.constructor = CPP14Visitor;

// Visit a parse tree produced by CPP14Parser#translationunit.
CPP14Visitor.prototype.visitTranslationunit = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#primaryexpression.
CPP14Visitor.prototype.visitPrimaryexpression = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#idexpression.
CPP14Visitor.prototype.visitIdexpression = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#identexpression.
CPP14Visitor.prototype.visitIdentexpression = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#unqualifiedid.
CPP14Visitor.prototype.visitUnqualifiedid = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#qualifiedid.
CPP14Visitor.prototype.visitQualifiedid = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#nestednamespecifier.
CPP14Visitor.prototype.visitNestednamespecifier = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#lambdaexpression.
CPP14Visitor.prototype.visitLambdaexpression = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#lambdaintroducer.
CPP14Visitor.prototype.visitLambdaintroducer = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#lambdacapture.
CPP14Visitor.prototype.visitLambdacapture = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#capturedefault.
CPP14Visitor.prototype.visitCapturedefault = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#capturelist.
CPP14Visitor.prototype.visitCapturelist = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#capture.
CPP14Visitor.prototype.visitCapture = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#simplecapture.
CPP14Visitor.prototype.visitSimplecapture = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#initcapture.
CPP14Visitor.prototype.visitInitcapture = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#lambdadeclarator.
CPP14Visitor.prototype.visitLambdadeclarator = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#idexpressionlapper.
CPP14Visitor.prototype.visitIdexpressionlapper = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#functioncallexpression.
CPP14Visitor.prototype.visitFunctioncallexpression = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#postfixexpression.
CPP14Visitor.prototype.visitPostfixexpression = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#expressionlist.
CPP14Visitor.prototype.visitExpressionlist = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#pseudodestructorname.
CPP14Visitor.prototype.visitPseudodestructorname = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#binaryexpression.
CPP14Visitor.prototype.visitBinaryexpression = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#unaryexpression.
CPP14Visitor.prototype.visitUnaryexpression = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#typeidlapper.
CPP14Visitor.prototype.visitTypeidlapper = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#unaryoperator.
CPP14Visitor.prototype.visitUnaryoperator = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#newexpression.
CPP14Visitor.prototype.visitNewexpression = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#newplacement.
CPP14Visitor.prototype.visitNewplacement = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#newtypeid.
CPP14Visitor.prototype.visitNewtypeid = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#newdeclarator.
CPP14Visitor.prototype.visitNewdeclarator = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#noptrnewdeclarator.
CPP14Visitor.prototype.visitNoptrnewdeclarator = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#newinitializer.
CPP14Visitor.prototype.visitNewinitializer = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#deleteexpression.
CPP14Visitor.prototype.visitDeleteexpression = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#noexceptexpression.
CPP14Visitor.prototype.visitNoexceptexpression = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#castexpression.
CPP14Visitor.prototype.visitCastexpression = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#pmexpression.
CPP14Visitor.prototype.visitPmexpression = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#multiplicativeexpression.
CPP14Visitor.prototype.visitMultiplicativeexpression = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#additiveexpression.
CPP14Visitor.prototype.visitAdditiveexpression = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#shiftexpression.
CPP14Visitor.prototype.visitShiftexpression = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#relationalexpression.
CPP14Visitor.prototype.visitRelationalexpression = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#equalityexpression.
CPP14Visitor.prototype.visitEqualityexpression = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#andexpression.
CPP14Visitor.prototype.visitAndexpression = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#exclusiveorexpression.
CPP14Visitor.prototype.visitExclusiveorexpression = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#inclusiveorexpression.
CPP14Visitor.prototype.visitInclusiveorexpression = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#logicalandexpression.
CPP14Visitor.prototype.visitLogicalandexpression = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#logicalorexpression.
CPP14Visitor.prototype.visitLogicalorexpression = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#conditionalexpression.
CPP14Visitor.prototype.visitConditionalexpression = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#assignmentexpression.
CPP14Visitor.prototype.visitAssignmentexpression = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#assignmentoperator.
CPP14Visitor.prototype.visitAssignmentoperator = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#expression.
CPP14Visitor.prototype.visitExpression = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#constantexpression.
CPP14Visitor.prototype.visitConstantexpression = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#statement.
CPP14Visitor.prototype.visitStatement = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#labeledstatement.
CPP14Visitor.prototype.visitLabeledstatement = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#expressionstatement.
CPP14Visitor.prototype.visitExpressionstatement = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#compoundstatement.
CPP14Visitor.prototype.visitCompoundstatement = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#statementseq.
CPP14Visitor.prototype.visitStatementseq = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#selectionstatement.
CPP14Visitor.prototype.visitSelectionstatement = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#switchstatement.
CPP14Visitor.prototype.visitSwitchstatement = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#condition.
CPP14Visitor.prototype.visitCondition = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#whilestatement.
CPP14Visitor.prototype.visitWhilestatement = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#dowhilestatement.
CPP14Visitor.prototype.visitDowhilestatement = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#iterationstatement.
CPP14Visitor.prototype.visitIterationstatement = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#enhancedForStatement.
CPP14Visitor.prototype.visitEnhancedForStatement = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#forinitstatement.
CPP14Visitor.prototype.visitForinitstatement = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#forrangedeclaration.
CPP14Visitor.prototype.visitForrangedeclaration = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#forrangeinitializer.
CPP14Visitor.prototype.visitForrangeinitializer = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#jumpstatement.
CPP14Visitor.prototype.visitJumpstatement = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#breakStatement.
CPP14Visitor.prototype.visitBreakStatement = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#continueStatement.
CPP14Visitor.prototype.visitContinueStatement = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#returnStatement.
CPP14Visitor.prototype.visitReturnStatement = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#declarationstatement.
CPP14Visitor.prototype.visitDeclarationstatement = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#declarationseq.
CPP14Visitor.prototype.visitDeclarationseq = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#myclassbody.
CPP14Visitor.prototype.visitMyclassbody = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#myclassspecifier.
CPP14Visitor.prototype.visitMyclassspecifier = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#myclasshead.
CPP14Visitor.prototype.visitMyclasshead = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#declaration.
CPP14Visitor.prototype.visitDeclaration = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#blockdeclarationwithoutsimpledeclaration.
CPP14Visitor.prototype.visitBlockdeclarationwithoutsimpledeclaration = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#blockdeclaration.
CPP14Visitor.prototype.visitBlockdeclaration = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#aliasdeclaration.
CPP14Visitor.prototype.visitAliasdeclaration = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#variabledeclarationstatement.
CPP14Visitor.prototype.visitVariabledeclarationstatement = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#variabledeclaration.
CPP14Visitor.prototype.visitVariabledeclaration = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#variableDeclaratorList.
CPP14Visitor.prototype.visitVariableDeclaratorList = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#variableDeclarator.
CPP14Visitor.prototype.visitVariableDeclarator = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#dims.
CPP14Visitor.prototype.visitDims = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#simpledeclaration.
CPP14Visitor.prototype.visitSimpledeclaration = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#static_assertdeclaration.
CPP14Visitor.prototype.visitStatic_assertdeclaration = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#emptydeclaration.
CPP14Visitor.prototype.visitEmptydeclaration = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#attributedeclaration.
CPP14Visitor.prototype.visitAttributedeclaration = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#declspecifier.
CPP14Visitor.prototype.visitDeclspecifier = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#declspecifierseq.
CPP14Visitor.prototype.visitDeclspecifierseq = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#declspecifierwithouttype.
CPP14Visitor.prototype.visitDeclspecifierwithouttype = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#declspecifierseqwithouttype.
CPP14Visitor.prototype.visitDeclspecifierseqwithouttype = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#storageclassspecifier.
CPP14Visitor.prototype.visitStorageclassspecifier = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#functionspecifier.
CPP14Visitor.prototype.visitFunctionspecifier = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#typedefname.
CPP14Visitor.prototype.visitTypedefname = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#typespecifier.
CPP14Visitor.prototype.visitTypespecifier = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#trailingtypespecifier.
CPP14Visitor.prototype.visitTrailingtypespecifier = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#typespecifierseq.
CPP14Visitor.prototype.visitTypespecifierseq = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#trailingtypespecifierseq.
CPP14Visitor.prototype.visitTrailingtypespecifierseq = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#simpletypespecifier.
CPP14Visitor.prototype.visitSimpletypespecifier = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#typename.
CPP14Visitor.prototype.visitTypename = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#decltypespecifier.
CPP14Visitor.prototype.visitDecltypespecifier = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#elaboratedtypespecifier.
CPP14Visitor.prototype.visitElaboratedtypespecifier = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#enumname.
CPP14Visitor.prototype.visitEnumname = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#enumspecifier.
CPP14Visitor.prototype.visitEnumspecifier = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#enumhead.
CPP14Visitor.prototype.visitEnumhead = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#opaqueenumdeclaration.
CPP14Visitor.prototype.visitOpaqueenumdeclaration = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#enumkey.
CPP14Visitor.prototype.visitEnumkey = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#enumbase.
CPP14Visitor.prototype.visitEnumbase = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#enumeratorlist.
CPP14Visitor.prototype.visitEnumeratorlist = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#enumeratordefinition.
CPP14Visitor.prototype.visitEnumeratordefinition = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#enumerator.
CPP14Visitor.prototype.visitEnumerator = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#namespacename.
CPP14Visitor.prototype.visitNamespacename = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#originalnamespacename.
CPP14Visitor.prototype.visitOriginalnamespacename = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#namespacedefinition.
CPP14Visitor.prototype.visitNamespacedefinition = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#namednamespacedefinition.
CPP14Visitor.prototype.visitNamednamespacedefinition = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#originalnamespacedefinition.
CPP14Visitor.prototype.visitOriginalnamespacedefinition = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#extensionnamespacedefinition.
CPP14Visitor.prototype.visitExtensionnamespacedefinition = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#unnamednamespacedefinition.
CPP14Visitor.prototype.visitUnnamednamespacedefinition = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#namespacebody.
CPP14Visitor.prototype.visitNamespacebody = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#namespacealias.
CPP14Visitor.prototype.visitNamespacealias = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#namespacealiasdefinition.
CPP14Visitor.prototype.visitNamespacealiasdefinition = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#qualifiednamespacespecifier.
CPP14Visitor.prototype.visitQualifiednamespacespecifier = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#usingdeclaration.
CPP14Visitor.prototype.visitUsingdeclaration = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#usingdirective.
CPP14Visitor.prototype.visitUsingdirective = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#asmdefinition.
CPP14Visitor.prototype.visitAsmdefinition = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#linkagespecification.
CPP14Visitor.prototype.visitLinkagespecification = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#attributespecifierseq.
CPP14Visitor.prototype.visitAttributespecifierseq = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#attributespecifier.
CPP14Visitor.prototype.visitAttributespecifier = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#alignmentspecifier.
CPP14Visitor.prototype.visitAlignmentspecifier = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#attributelist.
CPP14Visitor.prototype.visitAttributelist = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#attribute.
CPP14Visitor.prototype.visitAttribute = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#attributetoken.
CPP14Visitor.prototype.visitAttributetoken = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#attributescopedtoken.
CPP14Visitor.prototype.visitAttributescopedtoken = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#attributenamespace.
CPP14Visitor.prototype.visitAttributenamespace = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#attributeargumentclause.
CPP14Visitor.prototype.visitAttributeargumentclause = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#balancedtokenseq.
CPP14Visitor.prototype.visitBalancedtokenseq = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#balancedtoken.
CPP14Visitor.prototype.visitBalancedtoken = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#initdeclaratorlist.
CPP14Visitor.prototype.visitInitdeclaratorlist = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#initdeclarator.
CPP14Visitor.prototype.visitInitdeclarator = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#declarator.
CPP14Visitor.prototype.visitDeclarator = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#ptrdeclarator.
CPP14Visitor.prototype.visitPtrdeclarator = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#noptrdeclarator.
CPP14Visitor.prototype.visitNoptrdeclarator = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#parametersandqualifiers.
CPP14Visitor.prototype.visitParametersandqualifiers = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#trailingreturntype.
CPP14Visitor.prototype.visitTrailingreturntype = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#ptroperator.
CPP14Visitor.prototype.visitPtroperator = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#cvqualifierseq.
CPP14Visitor.prototype.visitCvqualifierseq = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#cvqualifier.
CPP14Visitor.prototype.visitCvqualifier = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#refqualifier.
CPP14Visitor.prototype.visitRefqualifier = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#declaratorid.
CPP14Visitor.prototype.visitDeclaratorid = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#typeid.
CPP14Visitor.prototype.visitTypeid = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#abstractdeclarator.
CPP14Visitor.prototype.visitAbstractdeclarator = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#ptrabstractdeclarator.
CPP14Visitor.prototype.visitPtrabstractdeclarator = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#noptrabstractdeclarator.
CPP14Visitor.prototype.visitNoptrabstractdeclarator = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#abstractpackdeclarator.
CPP14Visitor.prototype.visitAbstractpackdeclarator = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#noptrabstractpackdeclarator.
CPP14Visitor.prototype.visitNoptrabstractpackdeclarator = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#parameterdeclarationclause.
CPP14Visitor.prototype.visitParameterdeclarationclause = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#parameterdeclarationlist.
CPP14Visitor.prototype.visitParameterdeclarationlist = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#parameterdeclaration.
CPP14Visitor.prototype.visitParameterdeclaration = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#functiondefinition.
CPP14Visitor.prototype.visitFunctiondefinition = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#functionheader.
CPP14Visitor.prototype.visitFunctionheader = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#functiondeclarator.
CPP14Visitor.prototype.visitFunctiondeclarator = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#functionbody.
CPP14Visitor.prototype.visitFunctionbody = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#initializer.
CPP14Visitor.prototype.visitInitializer = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#braceorequalinitializer.
CPP14Visitor.prototype.visitBraceorequalinitializer = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#initializerclause.
CPP14Visitor.prototype.visitInitializerclause = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#initializerlist.
CPP14Visitor.prototype.visitInitializerlist = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#bracedinitlist.
CPP14Visitor.prototype.visitBracedinitlist = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#myclassname.
CPP14Visitor.prototype.visitMyclassname = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#classspecifier.
CPP14Visitor.prototype.visitClassspecifier = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#classbody.
CPP14Visitor.prototype.visitClassbody = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#classhead.
CPP14Visitor.prototype.visitClasshead = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#classheadname.
CPP14Visitor.prototype.visitClassheadname = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#classvirtspecifier.
CPP14Visitor.prototype.visitClassvirtspecifier = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#classkey.
CPP14Visitor.prototype.visitClasskey = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#memberspecification.
CPP14Visitor.prototype.visitMemberspecification = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#memberdeclaration.
CPP14Visitor.prototype.visitMemberdeclaration = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#membervariabledeclarationstatement.
CPP14Visitor.prototype.visitMembervariabledeclarationstatement = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#membervariabledeclaration.
CPP14Visitor.prototype.visitMembervariabledeclaration = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#memberdeclaratorlist.
CPP14Visitor.prototype.visitMemberdeclaratorlist = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#memberdeclarator.
CPP14Visitor.prototype.visitMemberdeclarator = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#virtspecifierseq.
CPP14Visitor.prototype.visitVirtspecifierseq = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#virtspecifier.
CPP14Visitor.prototype.visitVirtspecifier = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#purespecifier.
CPP14Visitor.prototype.visitPurespecifier = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#baseclause.
CPP14Visitor.prototype.visitBaseclause = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#basespecifierlist.
CPP14Visitor.prototype.visitBasespecifierlist = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#basespecifier.
CPP14Visitor.prototype.visitBasespecifier = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#classordecltype.
CPP14Visitor.prototype.visitClassordecltype = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#basetypespecifier.
CPP14Visitor.prototype.visitBasetypespecifier = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#accessspecifier.
CPP14Visitor.prototype.visitAccessspecifier = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#conversionfunctionid.
CPP14Visitor.prototype.visitConversionfunctionid = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#conversiontypeid.
CPP14Visitor.prototype.visitConversiontypeid = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#conversiondeclarator.
CPP14Visitor.prototype.visitConversiondeclarator = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#ctorinitializer.
CPP14Visitor.prototype.visitCtorinitializer = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#meminitializerlist.
CPP14Visitor.prototype.visitMeminitializerlist = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#meminitializer.
CPP14Visitor.prototype.visitMeminitializer = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#meminitializerid.
CPP14Visitor.prototype.visitMeminitializerid = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#operatorfunctionid.
CPP14Visitor.prototype.visitOperatorfunctionid = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#literaloperatorid.
CPP14Visitor.prototype.visitLiteraloperatorid = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#templatedeclaration.
CPP14Visitor.prototype.visitTemplatedeclaration = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#templateparameterlist.
CPP14Visitor.prototype.visitTemplateparameterlist = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#templateparameter.
CPP14Visitor.prototype.visitTemplateparameter = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#typeparameter.
CPP14Visitor.prototype.visitTypeparameter = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#simpletemplateid.
CPP14Visitor.prototype.visitSimpletemplateid = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#templateid.
CPP14Visitor.prototype.visitTemplateid = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#templatename.
CPP14Visitor.prototype.visitTemplatename = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#templateargumentlist.
CPP14Visitor.prototype.visitTemplateargumentlist = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#templateargument.
CPP14Visitor.prototype.visitTemplateargument = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#typenamespecifier.
CPP14Visitor.prototype.visitTypenamespecifier = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#explicitinstantiation.
CPP14Visitor.prototype.visitExplicitinstantiation = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#explicitspecialization.
CPP14Visitor.prototype.visitExplicitspecialization = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#tryblock.
CPP14Visitor.prototype.visitTryblock = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#functiontryblock.
CPP14Visitor.prototype.visitFunctiontryblock = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#handlerseq.
CPP14Visitor.prototype.visitHandlerseq = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#handler.
CPP14Visitor.prototype.visitHandler = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#exceptiondeclaration.
CPP14Visitor.prototype.visitExceptiondeclaration = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#throwexpression.
CPP14Visitor.prototype.visitThrowexpression = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#exceptionspecification.
CPP14Visitor.prototype.visitExceptionspecification = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#dynamicexceptionspecification.
CPP14Visitor.prototype.visitDynamicexceptionspecification = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#typeidlist.
CPP14Visitor.prototype.visitTypeidlist = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#noexceptspecification.
CPP14Visitor.prototype.visitNoexceptspecification = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#rightShift.
CPP14Visitor.prototype.visitRightShift = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#rightShiftAssign.
CPP14Visitor.prototype.visitRightShiftAssign = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#operator.
CPP14Visitor.prototype.visitOperator = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#literal.
CPP14Visitor.prototype.visitLiteral = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#integerliteral.
CPP14Visitor.prototype.visitIntegerliteral = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#characterliteral.
CPP14Visitor.prototype.visitCharacterliteral = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#floatingliteral.
CPP14Visitor.prototype.visitFloatingliteral = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#stringliteral.
CPP14Visitor.prototype.visitStringliteral = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#booleanliteral.
CPP14Visitor.prototype.visitBooleanliteral = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#pointerliteral.
CPP14Visitor.prototype.visitPointerliteral = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CPP14Parser#userdefinedliteral.
CPP14Visitor.prototype.visitUserdefinedliteral = function(ctx) {
  return this.visitChildren(ctx);
};



exports.CPP14Visitor = CPP14Visitor;

/***/ }),
/* 81 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var __extends = undefined && undefined.__extends || function () {
    var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
        d.__proto__ = b;
    } || function (d, b) {
        for (var p in b) {
            if (b.hasOwnProperty(p)) d[p] = b[p];
        }
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
Object.defineProperty(exports, "__esModule", { value: true });
var UniStatement_1 = __webpack_require__(3);
var UniEmptyStatement = /** @class */function (_super) {
    __extends(UniEmptyStatement, _super);
    function UniEmptyStatement() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    UniEmptyStatement.prototype.toString = function () {
        return 'EmptyStatement(' + ')';
    };
    UniEmptyStatement.prototype.equals = function (obj) {
        if (obj == null || !(obj instanceof UniEmptyStatement)) return false;
        var that = obj;
        return _super.prototype.equals.call(this, that);
    };
    return UniEmptyStatement;
}(UniStatement_1.default);
exports.default = UniEmptyStatement;

/***/ }),
/* 82 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var __extends = undefined && undefined.__extends || function () {
    var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
        d.__proto__ = b;
    } || function (d, b) {
        for (var p in b) {
            if (b.hasOwnProperty(p)) d[p] = b[p];
        }
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
var __read = undefined && undefined.__read || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o),
        r,
        ar = [],
        e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) {
            ar.push(r.value);
        }
    } catch (error) {
        e = { error: error };
    } finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        } finally {
            if (e) throw e.error;
        }
    }
    return ar;
};
var __spread = undefined && undefined.__spread || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) {
        ar = ar.concat(__read(arguments[i]));
    }return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
var UniStatement_1 = __webpack_require__(3);
var UniExpr_1 = __webpack_require__(0);
var UniSwitchUnit = /** @class */function (_super) {
    __extends(UniSwitchUnit, _super);
    function UniSwitchUnit(label, cond, statement) {
        var _this = _super.call(this) || this;
        if (label === undefined && cond === undefined && statement === undefined) {
            _this.label = null;
            _this.cond = null;
            _this.statement = [];
        } else if (label === undefined || cond === undefined || statement === undefined) {
            throw new Error('invalid arguments');
        } else {
            _this.label = label;
            _this.cond = cond;
            _this.statement = statement;
        }
        _this.fields.set('label', String);
        _this.fields.set('cond', UniExpr_1.default);
        _this.fields.set('statement', UniStatement_1.default);
        return _this;
    }
    UniSwitchUnit.prototype.toString = function () {
        return 'SwitchUnit(' + this.label + ')';
    };
    UniSwitchUnit.prototype.equals = function (obj) {
        if (obj == null || !(obj instanceof UniSwitchUnit)) return false;
        var that = obj;
        return _super.prototype.equals.call(this, that) && (this.label == null ? that.label == null : this.label === that.label) && (this.cond == null ? that.cond == null : this.cond.equals(that.cond)) && (this.statement == null ? that.statement == null : this.statement.equals(that.statement));
    };
    UniSwitchUnit.prototype.merge = function (that) {
        _super.prototype.merge.call(this, that);
        if (that.label != null) {
            this.label = that.label;
        }
        if (that.cond != null) {
            this.cond = that.cond;
        }
        if (that.statement != null) {
            if (this.statement == null) {
                this.statement = that.statement;
            } else {
                (_a = this.statement).push.apply(_a, __spread(that.statement));
            }
        }
        var _a;
    };
    return UniSwitchUnit;
}(UniStatement_1.default);
exports.default = UniSwitchUnit;

/***/ }),
/* 83 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var __extends = undefined && undefined.__extends || function () {
    var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
        d.__proto__ = b;
    } || function (d, b) {
        for (var p in b) {
            if (b.hasOwnProperty(p)) d[p] = b[p];
        }
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
var __read = undefined && undefined.__read || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o),
        r,
        ar = [],
        e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) {
            ar.push(r.value);
        }
    } catch (error) {
        e = { error: error };
    } finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        } finally {
            if (e) throw e.error;
        }
    }
    return ar;
};
var __spread = undefined && undefined.__spread || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) {
        ar = ar.concat(__read(arguments[i]));
    }return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
var UniStatement_1 = __webpack_require__(3);
var UniExpr_1 = __webpack_require__(0);
var UniSwitchUnit_1 = __webpack_require__(82);
var UniSwitch = /** @class */function (_super) {
    __extends(UniSwitch, _super);
    function UniSwitch(cond, cases) {
        var _this = _super.call(this) || this;
        if (cond === undefined && cases === undefined) {
            _this.cond = null;
            _this.cases = [];
        } else if (cond === undefined || cases === undefined) {
            throw new Error('invalid arguments');
        } else {
            _this.cond = cond;
            _this.cases = cases;
        }
        _this.fields.set('cond', UniExpr_1.default);
        _this.fields.set('cases', UniSwitchUnit_1.default);
        return _this;
    }
    UniSwitch.prototype.toString = function () {
        return 'Switch(' + ')';
    };
    UniSwitch.prototype.equals = function (obj) {
        if (obj == null || !(obj instanceof UniSwitch)) return false;
        var that = obj;
        return _super.prototype.equals.call(this, that) && (this.cond == null ? that.cond == null : this.cond.equals(that.cond)) && (this.cases == null ? that.cases == null : this.cases.equals(that.cases));
    };
    UniSwitch.prototype.merge = function (that) {
        _super.prototype.merge.call(this, that);
        if (that.cond != null) {
            this.cond = that.cond;
        }
        if (that.cases != null) {
            if (this.cases == null) {
                this.cases = that.cases;
            } else {
                (_a = this.cases).push.apply(_a, __spread(that.cases));
            }
        }
        var _a;
    };
    return UniSwitch;
}(UniStatement_1.default);
exports.default = UniSwitch;

/***/ }),
/* 84 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// Warn if overriding existing method
if (Array.prototype.equals) console.warn('Overriding existing Array.prototype.equals. Possible causes: New API defines the method, there\'s a framework conflict or you\'ve got double inclusions in your code.');
// attach the .equals method to Array's prototype to call it on any array
Array.prototype.equals = function (array) {
    // if the other array is a falsy value, return
    if (!array) return false;
    // compare lengths - can save a lot of time 
    if (this.length !== array.length) return false;
    for (var i = 0, l = this.length; i < l; ++i) {
        // Check if we have nested arrays
        if (this[i] instanceof Array && array[i] instanceof Array) {
            // recurse into the nested arrays
            if (!this[i].equals(array[i])) return false;
        } else if ('equals' in this[i] && 'equals' in array[i]) {
            return this[i].equals(array[i]);
        } else if (this[i] !== array[i]) {
            // Warning - two different object instances will never be equal: {x:20} != {x:20}
            return false;
        }
    }
    return true;
};
// Hide method from for-in loops
Object.defineProperty(Array.prototype, 'equals', { enumerable: false });

/***/ }),
/* 85 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var __extends = undefined && undefined.__extends || function () {
    var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
        d.__proto__ = b;
    } || function (d, b) {
        for (var p in b) {
            if (b.hasOwnProperty(p)) d[p] = b[p];
        }
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
var __generator = undefined && undefined.__generator || function (thisArg, body) {
    var _ = { label: 0, sent: function sent() {
            if (t[0] & 1) throw t[1];return t[1];
        }, trys: [], ops: [] },
        f,
        y,
        t,
        g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
        return this;
    }), g;
    function verb(n) {
        return function (v) {
            return step([n, v]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) {
            try {
                if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [0, t.value];
                switch (op[0]) {
                    case 0:case 1:
                        t = op;break;
                    case 4:
                        _.label++;return { value: op[1], done: false };
                    case 5:
                        _.label++;y = op[1];op = [0];continue;
                    case 7:
                        op = _.ops.pop();_.trys.pop();continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                            _ = 0;continue;
                        }
                        if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                            _.label = op[1];break;
                        }
                        if (op[0] === 6 && _.label < t[1]) {
                            _.label = t[1];t = op;break;
                        }
                        if (t && _.label < t[2]) {
                            _.label = t[2];_.ops.push(op);break;
                        }
                        if (t[2]) _.ops.pop();
                        _.trys.pop();continue;
                }
                op = body.call(thisArg, _);
            } catch (e) {
                op = [6, e];y = 0;
            } finally {
                f = t = 0;
            }
        }if (op[0] & 5) throw op[1];return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __values = undefined && undefined.__values || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator],
        i = 0;
    if (m) return m.call(o);
    return {
        next: function next() {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = __webpack_require__(59);
var Scope_1 = __webpack_require__(108);
var UniExpr_1 = __webpack_require__(0);
var UniMethodCall_1 = __webpack_require__(45);
var UniIdent_1 = __webpack_require__(25);
var UniBoolLiteral_1 = __webpack_require__(51);
var UniStringLiteral_1 = __webpack_require__(57);
var UniUnaryOp_1 = __webpack_require__(37);
var UniBinOp_1 = __webpack_require__(35);
var UniTernaryOp_1 = __webpack_require__(56);
var UniBreak_1 = __webpack_require__(52);
var UniContinue_1 = __webpack_require__(54);
var UniReturn_1 = __webpack_require__(38);
var UniVariableDec_1 = __webpack_require__(21);
var UniBlock_1 = __webpack_require__(19);
var UniIf_1 = __webpack_require__(44);
var UniFor_1 = __webpack_require__(43);
var UniWhile_1 = __webpack_require__(36);
var UniDoWhile_1 = __webpack_require__(55);
var UniArray_1 = __webpack_require__(42);
var UniCast_1 = __webpack_require__(53);
var UniStatement_1 = __webpack_require__(3);
var UniEmptyStatement_1 = __webpack_require__(81);
var UniJump_1 = __webpack_require__(109);
var UniLabel_1 = __webpack_require__(110);
var UniDecralation_1 = __webpack_require__(22);
var UniProgram_1 = __webpack_require__(39);
var UniFunctionDec_1 = __webpack_require__(24);
var UniClassDec_1 = __webpack_require__(68);
var UniSwitch_1 = __webpack_require__(83);
var ExecState_1 = __webpack_require__(111);
var UniNumberLiteral_1 = __webpack_require__(23);
var RuntimeException_1 = __webpack_require__(47);
var ControlException = /** @class */function (_super) {
    __extends(ControlException, _super);
    function ControlException() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return ControlException;
}(RuntimeException_1.default);
exports.ControlException = ControlException;
var Break = /** @class */function (_super) {
    __extends(Break, _super);
    function Break() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return Break;
}(ControlException);
var Continue = /** @class */function (_super) {
    __extends(Continue, _super);
    function Continue() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return Continue;
}(ControlException);
var Return = /** @class */function (_super) {
    __extends(Return, _super);
    function Return(value) {
        var _this = _super.call(this) || this;
        _this.value = value;
        return _this;
    }
    return Return;
}(ControlException);
var Engine = /** @class */function () {
    function Engine() {
        this.isDebugMode = false;
        this.currentState = null;
        this.states = [];
        this.currentScope = null;
        this.execStepItr = null;
    }
    Engine.prototype.setDebugMode = function (enable) {
        this.isDebugMode = enable;
    };
    Engine.prototype.getCurrentExpr = function () {
        return this.currentState.getCurrentExpr();
    };
    Engine.prototype.getCurrentState = function () {
        return this.currentState;
    };
    Engine.prototype.getIsWaitingForStdin = function () {
        // ToDo: implement
        return false;
    };
    Engine.prototype.isStepExecutionRunning = function () {
        return this.execStepItr != null;
    };
    Engine.prototype.startStepExecution = function (dec) {
        this.execStepItr = this.executeStepByStep(dec);
        return this.stepExecute();
    };
    Engine.prototype.stepExecute = function () {
        if (this.execStepItr == null) {
            return this.getCurrentState();
        }
        var node = this.execStepItr.next();
        var ret = node.value;
        if (this.isDebugMode) {
            console.log(ret);
            // console.log(this.getCurrentExpr());
            // console.log(this.currentState.make());
        }
        if (node.done) {
            this.execStepItr = null;
        }
        this.states.push(this.currentState.make());
        return this.states[this.states.length - 1];
    };
    Engine.prototype.executeStepByStep = function (dec) {
        var main, global, value;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    main = this.getEntryPoint(dec);
                    if (!(main != null)) return [3 /*break*/, 2];
                    global = Scope_1.default.createGlobal();
                    this.setGlobalObjects(dec, global);
                    this.currentState = new ExecState_1.default(global);
                    return [5 /*yield**/, __values(this.execFunc(main, global, null))];
                case 1:
                    value = _a.sent();
                    // firePostExecAll(global, value);
                    return [2 /*return*/, value];
                case 2:
                    throw new RuntimeException_1.default('No entry point in ' + dec);
            }
        });
    };
    Engine.prototype.execute = function (dec) {
        var ret = 0;
        var node;
        var gen = this.executeStepByStep(dec);
        do {
            node = gen.next();
            ret = node.value;
            if (this.isDebugMode) {
                console.log(ret);
                // console.log(this.getCurrentExpr());
                // console.log(this.currentState.make());
            }
        } while (!node.done);
        return ret;
    };
    Engine.prototype.getEntryPoint = function (node) {
        var entry = null;
        if (node instanceof UniProgram_1.default) {
            var block = node.block;
            entry = this.getEntryPoint(block);
        } else if (node instanceof UniBlock_1.default) {
            try {
                for (var _a = __values(node.body), _b = _a.next(); !_b.done; _b = _a.next()) {
                    var stateOfBlock = _b.value;
                    entry = this.getEntryPoint(stateOfBlock);
                    if (entry != null) break;
                }
            } catch (e_1_1) {
                e_1 = { error: e_1_1 };
            } finally {
                try {
                    if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
                } finally {
                    if (e_1) throw e_1.error;
                }
            }
        } else if (node instanceof UniDecralation_1.default) {
            var dec = node;
            if (dec instanceof UniFunctionDec_1.default) {
                if ('main' === dec.name) {
                    return dec;
                }
            } else if (dec instanceof UniClassDec_1.default) {
                try {
                    for (var _d = __values(dec.members), _e = _d.next(); !_e.done; _e = _d.next()) {
                        var member = _e.value;
                        if (member instanceof UniFunctionDec_1.default) {
                            entry = this.getEntryPoint(member);
                            if (entry != null) break;
                        }
                    }
                } catch (e_2_1) {
                    e_2 = { error: e_2_1 };
                } finally {
                    try {
                        if (_e && !_e.done && (_f = _d.return)) _f.call(_d);
                    } finally {
                        if (e_2) throw e_2.error;
                    }
                }
            }
        }
        return entry;
        var e_1, _c, e_2, _f;
    };
    Engine.prototype.setGlobalObjects = function (node, global) {
        if (node instanceof UniProgram_1.default) {
            var block = node.block;
            this.setGlobalObjects(block, global);
        } else if (node instanceof UniBlock_1.default) {
            try {
                for (var _a = __values(node.body), _b = _a.next(); !_b.done; _b = _a.next()) {
                    var stateOfBlock = _b.value;
                    this.setGlobalObjects(stateOfBlock, global);
                }
            } catch (e_3_1) {
                e_3 = { error: e_3_1 };
            } finally {
                try {
                    if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
                } finally {
                    if (e_3) throw e_3.error;
                }
            }
        } else if (node instanceof UniDecralation_1.default) {
            var dec = node;
            if (dec instanceof UniFunctionDec_1.default) {
                // 関数のセット
                if ('main' !== dec.name) {
                    global.setTop(dec.name, dec, dec.returnType);
                }
            } else if (dec instanceof UniVariableDec_1.default) {
                // グローバル変数のセット
                this.execExpr(node, global);
            } else if (dec instanceof UniClassDec_1.default) {
                try {
                    // structのセット
                    for (var _d = __values(dec.members), _e = _d.next(); !_e.done; _e = _d.next()) {
                        var member = _e.value;
                        if (member instanceof UniFunctionDec_1.default) {
                            this.setGlobalObjects(member, global);
                        }
                    }
                } catch (e_4_1) {
                    e_4 = { error: e_4_1 };
                } finally {
                    try {
                        if (_e && !_e.done && (_f = _d.return)) _f.call(_d);
                    } finally {
                        if (e_4) throw e_4.error;
                    }
                }
            }
        }
        var e_3, _c, e_4, _f;
    };
    Engine.executeSimpleExpr = function (expr, scope) {
        if (scope === undefined) {
            return new Engine().execExpr(expr, scope);
        }
        return this.executeSimpleExpr(expr, Scope_1.default.createGlobal());
    };
    Engine.executeSimpleProgram = function (program) {
        return this.executeSimpleExpr(program.block, Scope_1.default.createGlobal());
    };
    Engine.prototype.execDecralation = function (dec, scope) {
        var uvd;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (!(dec instanceof UniVariableDec_1.default)) return [3 /*break*/, 2];
                    uvd = dec;
                    return [5 /*yield**/, __values(this.execVariableDec(uvd, scope))];
                case 1:
                    return [2 /*return*/, _a.sent()];
                case 2:
                    if (dec instanceof UniFunctionDec_1.default) {}
                    if (dec instanceof UniClassDec_1.default) {}
                    return [2 /*return*/];
            }
        });
    };
    Engine.prototype.execStatement = function (state, scope) {
        var _a;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    if (!(state instanceof UniIf_1.default)) return [3 /*break*/, 2];
                    return [5 /*yield**/, __values(this.execIf(state, scope))];
                case 1:
                    return [2 /*return*/, _b.sent()];
                case 2:
                    if (!(state instanceof UniFor_1.default)) return [3 /*break*/, 4];
                    return [5 /*yield**/, __values(this.execFor(state, scope))];
                case 3:
                    return [2 /*return*/, _b.sent()];
                case 4:
                    if (!(state instanceof UniWhile_1.default)) return [3 /*break*/, 6];
                    return [5 /*yield**/, __values(this.execWhile(state, scope))];
                case 5:
                    return [2 /*return*/, _b.sent()];
                case 6:
                    if (!(state instanceof UniDoWhile_1.default)) return [3 /*break*/, 8];
                    return [5 /*yield**/, __values(this.execDoWhile(state, scope))];
                case 7:
                    return [2 /*return*/, _b.sent()];
                case 8:
                    if (!(state instanceof UniBreak_1.default)) return [3 /*break*/, 9];
                    throw new Break();
                case 9:
                    if (!(state instanceof UniContinue_1.default)) return [3 /*break*/, 10];
                    throw new Continue();
                case 10:
                    if (!(state instanceof UniReturn_1.default)) return [3 /*break*/, 12];
                    _a = Return.bind;
                    return [5 /*yield**/, __values(this.execExpr(state.value, scope))];
                case 11:
                    throw new (_a.apply(Return, [void 0, _b.sent()]))();
                case 12:
                    if (!(state instanceof UniBlock_1.default)) return [3 /*break*/, 14];
                    return [5 /*yield**/, __values(this.execBlock(state, scope))];
                case 13:
                    return [2 /*return*/, _b.sent()];
                case 14:
                    if (!(state instanceof UniSwitch_1.default)) return [3 /*break*/, 16];
                    return [5 /*yield**/, __values(this.execSwitch(state, scope))];
                case 15:
                    _b.sent();
                    return [3 /*break*/, 21];
                case 16:
                    if (!(state instanceof UniEmptyStatement_1.default)) return [3 /*break*/, 17];
                    return [2 /*return*/, null];
                case 17:
                    if (!(state instanceof UniLabel_1.default)) return [3 /*break*/, 18];
                    return [3 /*break*/, 21];
                case 18:
                    if (!(state instanceof UniJump_1.default)) return [3 /*break*/, 19];
                    return [3 /*break*/, 21];
                case 19:
                    if (!(state instanceof UniExpr_1.default)) return [3 /*break*/, 21];
                    return [5 /*yield**/, __values(this.execExpr(state, scope))];
                case 20:
                    return [2 /*return*/, _b.sent()];
                case 21:
                    throw new RuntimeException_1.default('Not support expr type: ' + state);
            }
        });
    };
    Engine.prototype.execBlock = function (block, scope) {
        var blockScope, ret, _a, _b, stateOfBlock, e_5_1, e_5, _c;
        return __generator(this, function (_d) {
            switch (_d.label) {
                case 0:
                    blockScope = Scope_1.default.createLocal(scope);
                    blockScope.name = scope.name;
                    _d.label = 1;
                case 1:
                    _d.trys.push([1, 6, 7, 8]);
                    _a = __values(block.body), _b = _a.next();
                    _d.label = 2;
                case 2:
                    if (!!_b.done) return [3 /*break*/, 5];
                    stateOfBlock = _b.value;
                    return [5 /*yield**/, __values(this.execExpr(stateOfBlock, blockScope))];
                case 3:
                    ret = _d.sent();
                    _d.label = 4;
                case 4:
                    _b = _a.next();
                    return [3 /*break*/, 2];
                case 5:
                    return [3 /*break*/, 8];
                case 6:
                    e_5_1 = _d.sent();
                    e_5 = { error: e_5_1 };
                    return [3 /*break*/, 8];
                case 7:
                    try {
                        if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
                    } finally {
                        if (e_5) throw e_5.error;
                    }
                    return [7 /*endfinally*/];
                case 8:
                    return [2 /*return*/, ret];
            }
        });
    };
    Engine.prototype.execIf = function (ui, scope) {
        var cond, _a;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    _a = this.toBool;
                    return [5 /*yield**/, __values(this.execExpr(ui.cond, scope))];
                case 1:
                    cond = _a.apply(this, [_b.sent()]);
                    if (!cond) return [3 /*break*/, 3];
                    return [5 /*yield**/, __values(this.execExpr(ui.trueStatement, scope))];
                case 2:
                    return [2 /*return*/, _b.sent()];
                case 3:
                    if (!(ui.falseStatement != null)) return [3 /*break*/, 5];
                    return [5 /*yield**/, __values(this.execExpr(ui.falseStatement, scope))];
                case 4:
                    return [2 /*return*/, _b.sent()];
                case 5:
                    return [2 /*return*/];
            }
        });
    };
    Engine.prototype.execFor = function (uf, scope) {
        var forScope, ret, _a, e_6;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    forScope = Scope_1.default.createLocal(scope);
                    forScope.name = scope.name;
                    return [5 /*yield**/, __values(this.execExpr(uf.init, forScope))];
                case 1:
                    _b.sent();
                    _b.label = 2;
                case 2:
                    _a = this.toBool;
                    return [5 /*yield**/, __values(this.execExpr(uf.cond, forScope))];
                case 3:
                    if (!_a.apply(this, [_b.sent()])) return [3 /*break*/, 9];
                    _b.label = 4;
                case 4:
                    _b.trys.push([4, 6,, 7]);
                    return [5 /*yield**/, __values(this.execExpr(uf.statement, forScope))];
                case 5:
                    ret = _b.sent(); // blockなのでgeneratorが返される。
                    return [3 /*break*/, 7];
                case 6:
                    e_6 = _b.sent();
                    if (e_6 instanceof Continue) {
                        return [3 /*break*/, 7];
                    } else if (e_6 instanceof Break) {
                        return [3 /*break*/, 9];
                    } else {
                        throw e_6;
                    }
                    return [3 /*break*/, 7];
                case 7:
                    return [5 /*yield**/, __values(this.execExpr(uf.step, forScope))];
                case 8:
                    _b.sent();
                    return [3 /*break*/, 2];
                case 9:
                    return [2 /*return*/, ret];
            }
        });
    };
    Engine.prototype.execWhile = function (uw, scope) {
        var whileScope, ret, _a, e_7;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    whileScope = Scope_1.default.createLocal(scope);
                    whileScope.name = scope.name;
                    _b.label = 1;
                case 1:
                    _a = this.toBool;
                    return [5 /*yield**/, __values(this.execExpr(uw.cond, whileScope))];
                case 2:
                    if (!_a.apply(this, [_b.sent()])) return [3 /*break*/, 7];
                    _b.label = 3;
                case 3:
                    _b.trys.push([3, 5,, 6]);
                    return [5 /*yield**/, __values(this.execExpr(uw.statement, whileScope))];
                case 4:
                    ret = _b.sent();
                    return [3 /*break*/, 6];
                case 5:
                    e_7 = _b.sent();
                    if (e_7 instanceof Continue) {
                        return [3 /*break*/, 1];
                    } else if (e_7 instanceof Break) {
                        return [3 /*break*/, 7];
                    } else {
                        throw e_7;
                    }
                    return [3 /*break*/, 6];
                case 6:
                    return [3 /*break*/, 1];
                case 7:
                    return [2 /*return*/, ret];
            }
        });
    };
    Engine.prototype.execDoWhile = function (udw, scope) {
        var doWhileScope, ret, e_8, _a;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    doWhileScope = Scope_1.default.createLocal(scope);
                    doWhileScope.name = scope.name;
                    _b.label = 1;
                case 1:
                    _b.trys.push([1, 3,, 4]);
                    return [5 /*yield**/, __values(this.execExpr(udw.statement, scope))];
                case 2:
                    ret = _b.sent();
                    return [3 /*break*/, 4];
                case 3:
                    e_8 = _b.sent();
                    if (e_8 instanceof Continue) {
                        return [3 /*break*/, 4];
                    } else if (e_8 instanceof Break) {
                        return [3 /*break*/, 6];
                    } else {
                        throw e_8;
                    }
                    return [3 /*break*/, 4];
                case 4:
                    _a = this.toBool;
                    return [5 /*yield**/, __values(this.execExpr(udw.cond, scope))];
                case 5:
                    if (_a.apply(this, [_b.sent()])) return [3 /*break*/, 1];
                    _b.label = 6;
                case 6:
                    return [2 /*return*/, ret];
            }
        });
    };
    Engine.prototype.execSwitch = function (us, scope) {
        var switchScope, ret, cond, _a, _b, unit, condOfCase, _c, _d, statement, e_9_1, e_10, e_11_1, e_11, _e, e_9, _f;
        return __generator(this, function (_g) {
            switch (_g.label) {
                case 0:
                    switchScope = Scope_1.default.createLocal(scope);
                    switchScope.name = scope.name;
                    return [5 /*yield**/, __values(this.execExpr(us.cond, scope))];
                case 1:
                    cond = _g.sent();
                    _g.label = 2;
                case 2:
                    _g.trys.push([2, 17, 18, 19]);
                    _a = __values(us.cases), _b = _a.next();
                    _g.label = 3;
                case 3:
                    if (!!_b.done) return [3 /*break*/, 16];
                    unit = _b.value;
                    return [5 /*yield**/, __values(this.execExpr(unit.cond, switchScope))];
                case 4:
                    condOfCase = _g.sent();
                    if (!(cond === condOfCase)) return [3 /*break*/, 15];
                    _g.label = 5;
                case 5:
                    _g.trys.push([5, 14,, 15]);
                    _g.label = 6;
                case 6:
                    _g.trys.push([6, 11, 12, 13]);
                    _c = __values(unit.statement), _d = _c.next();
                    _g.label = 7;
                case 7:
                    if (!!_d.done) return [3 /*break*/, 10];
                    statement = _d.value;
                    return [5 /*yield**/, __values(this.execExpr(statement, scope))];
                case 8:
                    ret = _g.sent();
                    _g.label = 9;
                case 9:
                    _d = _c.next();
                    return [3 /*break*/, 7];
                case 10:
                    return [3 /*break*/, 13];
                case 11:
                    e_9_1 = _g.sent();
                    e_9 = { error: e_9_1 };
                    return [3 /*break*/, 13];
                case 12:
                    try {
                        if (_d && !_d.done && (_f = _c.return)) _f.call(_c);
                    } finally {
                        if (e_9) throw e_9.error;
                    }
                    return [7 /*endfinally*/];
                case 13:
                    return [3 /*break*/, 15];
                case 14:
                    e_10 = _g.sent();
                    if (e_10 instanceof Continue) {
                        return [3 /*break*/, 15];
                    } else if (e_10 instanceof Break) {
                        return [3 /*break*/, 16];
                    } else {
                        throw e_10;
                    }
                    return [3 /*break*/, 15];
                case 15:
                    _b = _a.next();
                    return [3 /*break*/, 3];
                case 16:
                    return [3 /*break*/, 19];
                case 17:
                    e_11_1 = _g.sent();
                    e_11 = { error: e_11_1 };
                    return [3 /*break*/, 19];
                case 18:
                    try {
                        if (_b && !_b.done && (_e = _a.return)) _e.call(_a);
                    } finally {
                        if (e_11) throw e_11.error;
                    }
                    return [7 /*endfinally*/];
                case 19:
                    return [2 /*return*/, ret];
            }
        });
    };
    Engine.prototype.execExpr = function (expr, scope) {
        var value;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    // firePreExec(expr, scope);
                    this.currentState.setCurrentExpr(expr);
                    return [5 /*yield**/, __values(this._execExpr(expr, scope))];
                case 1:
                    value = _a.sent();
                    // firePostExec(expr, scope, value);
                    return [2 /*return*/, value];
            }
        });
    };
    // tslint:disable-next-line:function-name
    Engine.prototype._execExpr = function (expr, scope) {
        var mc, args, i, _a, _b, ret, receiver, func, ret, ret, condOp, _c, _d;
        return __generator(this, function (_e) {
            switch (_e.label) {
                case 0:
                    chai_1.assert.ok(expr != null);
                    if (!(expr instanceof UniStatement_1.default)) return [3 /*break*/, 2];
                    return [5 /*yield**/, __values(this.execStatement(expr, scope))];
                case 1:
                    return [2 /*return*/, _e.sent()];
                case 2:
                    if (!(expr instanceof UniDecralation_1.default)) return [3 /*break*/, 4];
                    return [5 /*yield**/, __values(this.execDecralation(expr, scope))];
                case 3:
                    return [2 /*return*/, _e.sent()];
                case 4:
                    if (!(expr instanceof UniMethodCall_1.default)) return [3 /*break*/, 16];
                    mc = expr;
                    args = [];
                    i = 0;
                    _e.label = 5;
                case 5:
                    if (!(mc.args !== null && i < mc.args.length)) return [3 /*break*/, 8];
                    _b = (_a = args).push;
                    return [5 /*yield**/, __values(this.execExpr(mc.args[i], scope))];
                case 6:
                    _b.apply(_a, [_e.sent()]);
                    _e.label = 7;
                case 7:
                    i++;
                    return [3 /*break*/, 5];
                case 8:
                    this.currentScope = scope;
                    ret = null;
                    if (!(mc.receiver != null)) return [3 /*break*/, 11];
                    return [5 /*yield**/, __values(this.execExpr(mc.receiver, scope))];
                case 9:
                    receiver = _e.sent();
                    return [5 /*yield**/, __values(this.execMethodCall(receiver, mc.methodName.name, args))];
                case 10:
                    ret = _e.sent();
                    return [3 /*break*/, 15];
                case 11:
                    func = scope.get(mc.methodName.name);
                    if (!(func instanceof UniFunctionDec_1.default)) return [3 /*break*/, 13];
                    return [5 /*yield**/, __values(this.execFunc(func, scope, mc.args))];
                case 12:
                    ret = _e.sent();
                    return [3 /*break*/, 15];
                case 13:
                    return [5 /*yield**/, __values(this.execFuncCall(func, args))];
                case 14:
                    ret = _e.sent();
                    _e.label = 15;
                case 15:
                    this.currentScope = null;
                    return [2 /*return*/, ret];
                case 16:
                    if (!(expr instanceof UniIdent_1.default)) return [3 /*break*/, 18];
                    ret = scope.get(expr.name);
                    return [4 /*yield*/, ret];
                case 17:
                    _e.sent();
                    return [2 /*return*/, ret];
                case 18:
                    if (!(expr instanceof UniBoolLiteral_1.default)) return [3 /*break*/, 19];
                    return [2 /*return*/, expr.value];
                case 19:
                    if (!(expr instanceof UniNumberLiteral_1.default)) return [3 /*break*/, 21];
                    ret = expr.value;
                    return [4 /*yield*/, ret];
                case 20:
                    _e.sent();
                    return [2 /*return*/, ret];
                case 21:
                    if (!(expr instanceof UniStringLiteral_1.default)) return [3 /*break*/, 23];
                    return [4 /*yield*/];
                case 22:
                    _e.sent();
                    return [2 /*return*/, this.execStringLiteral(expr, scope)];
                case 23:
                    if (!(expr instanceof UniUnaryOp_1.default)) return [3 /*break*/, 25];
                    return [5 /*yield**/, __values(this.execUnaryOp(expr, scope))];
                case 24:
                    return [2 /*return*/, _e.sent()];
                case 25:
                    if (!(expr instanceof UniBinOp_1.default)) return [3 /*break*/, 27];
                    return [5 /*yield**/, __values(this.execBinOp(expr, scope))];
                case 26:
                    return [2 /*return*/, _e.sent()];
                case 27:
                    if (!(expr instanceof UniTernaryOp_1.default)) return [3 /*break*/, 33];
                    condOp = expr;
                    _d = this.toBool;
                    return [5 /*yield**/, __values(this.execExpr(condOp.cond, scope))];
                case 28:
                    if (!_d.apply(this, [_e.sent()])) return [3 /*break*/, 30];
                    return [5 /*yield**/, __values(this.execExpr(condOp.trueExpr, scope))];
                case 29:
                    _c = _e.sent();
                    return [3 /*break*/, 32];
                case 30:
                    return [5 /*yield**/, __values(this.execExpr(condOp.falseExpr, scope))];
                case 31:
                    _c = _e.sent();
                    _e.label = 32;
                case 32:
                    return [2 /*return*/, _c];
                case 33:
                    if (!(expr instanceof UniArray_1.default)) return [3 /*break*/, 35];
                    return [5 /*yield**/, __values(this.execArray(expr, scope))];
                case 34:
                    return [2 /*return*/, _e.sent()];
                case 35:
                    if (expr instanceof UniCast_1.default) {
                        return [2 /*return*/, this.execCast(expr, scope)];
                    }
                    _e.label = 36;
                case 36:
                    // if (expr instanceof UniNewArray) {
                    //   UniNewArray uniNewArray = (UniNewArray) expr;// C言語ではtypeは取れない
                    //   List<UniExpr > elementsNum = uniNewArray.elementsNum;// 多次元未対応
                    //   int length = (int)this.execExpr(elementsNum.get(0),scope);// 多次元未対応
                    //   UniArray value = uniNewArray.value;
                    //   List < Object > array = new ArrayList<Object>();
                    //   if (value.items == null) {
                    //     for (int i = 0;i < length;++i) {
                    //       array.add((byte)0);
                    //     }
                    //   }
                    //   else {
                    //     array = execArray(value,scope);
                    //     for (int i = array.size();i < length;++i;) {
                    //       array.add((byte)0);
                    //     }
                    //   }
                    //   return array;
                    // }
                    throw new RuntimeException_1.default('Not support expr type: ' + expr);
            }
        });
    };
    Engine.prototype.execFunc = function (fdec, scope, args) {
        var funcScope, params, i, param, arg, name, type, value, ret, e_12;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    funcScope = Scope_1.default.createLocal(scope);
                    funcScope.name = funcScope.getNextName(fdec.name);
                    params = fdec.params;
                    if (!(params != null && args != null)) return [3 /*break*/, 4];
                    chai_1.assert.ok(params.length === args.length);
                    i = 0;
                    _a.label = 1;
                case 1:
                    if (!(i < args.length)) return [3 /*break*/, 4];
                    param = params[i];
                    arg = args[i];
                    name = param.variables[0].name;
                    type = param.type;
                    return [5 /*yield**/, __values(this.execExpr(arg, scope))];
                case 2:
                    value = _a.sent();
                    funcScope.setTop(name, value, type);
                    _a.label = 3;
                case 3:
                    ++i;
                    return [3 /*break*/, 1];
                case 4:
                    ret = null;
                    _a.label = 5;
                case 5:
                    _a.trys.push([5, 7,, 8]);
                    return [5 /*yield**/, __values(this.execBlock(fdec.block, funcScope))];
                case 6:
                    _a.sent();
                    return [3 /*break*/, 8];
                case 7:
                    e_12 = _a.sent();
                    if (e_12 instanceof Return) {
                        ret = e_12.value;
                    }
                    return [3 /*break*/, 8];
                case 8:
                    if (funcScope.name !== 'main') {
                        scope.removeChild(funcScope);
                    }
                    return [2 /*return*/, ret];
            }
        });
    };
    Engine.prototype.execBinOp = function (arg, scope, left, right) {
        var binOp, op, ret, _a, _b, _c, l, r, nextOp, value;
        return __generator(this, function (_d) {
            switch (_d.label) {
                case 0:
                    if (!(arg instanceof UniBinOp_1.default && left === undefined && right === undefined)) return [3 /*break*/, 2];
                    binOp = arg;
                    return [5 /*yield**/, __values(this.execBinOp(binOp.operator, scope, binOp.left, binOp.right))];
                case 1:
                    return [2 /*return*/, _d.sent()];
                case 2:
                    if (!(typeof arg === 'string' && left instanceof UniExpr_1.default && right instanceof UniExpr_1.default)) return [3 /*break*/, 16];
                    op = arg;
                    ret = null;
                    _a = op;
                    switch (_a) {
                        case '=':
                            return [3 /*break*/, 3];
                        case '[]':
                            return [3 /*break*/, 6];
                        case '.':
                            return [3 /*break*/, 6];
                    }
                    return [3 /*break*/, 8];
                case 3:
                    _b = this.execAssign;
                    _c = [this.getAddress(left, scope)];
                    return [5 /*yield**/, __values(this.execExpr(right, scope))];
                case 4:
                    ret = _b.apply(this, _c.concat([_d.sent(), scope]));
                    return [4 /*yield*/, ret];
                case 5:
                    _d.sent();
                    return [2 /*return*/, ret];
                case 6:
                    ret = scope.getValue(this.getAddress(new UniBinOp_1.default(op, left, right), scope));
                    return [4 /*yield*/, ret];
                case 7:
                    _d.sent();
                    return [2 /*return*/, ret];
                case 8:
                    return [3 /*break*/, 9];
                case 9:
                    return [5 /*yield**/, __values(this.execExpr(left, scope))];
                case 10:
                    l = _d.sent();
                    return [5 /*yield**/, __values(this.execExpr(right, scope))];
                case 11:
                    r = _d.sent();
                    switch (op) {
                        case '==':
                            ret = l === r;
                            break;
                        case '!=':
                            ret = l !== r;
                            break;
                        case '<':
                            ret = l < r;
                            break;
                        case '>':
                            ret = l > r;
                            break;
                        case '>=':
                            ret = l >= r;
                            break;
                        case '<=':
                            ret = l <= r;
                            break;
                        case '+':
                            ret = l + r;
                            break;
                        case '-':
                            ret = l - r;
                            break;
                        case '*':
                            ret = l * r;
                            break;
                        case '/':
                            ret = l / r;
                            break;
                        case '%':
                            ret = l % r;
                            break;
                        case '&&':
                            ret = l && r;
                            break;
                        case '&&':
                            ret = l || r;
                            break;
                    }
                    if (!(ret !== null)) return [3 /*break*/, 13];
                    return [4 /*yield*/, ret];
                case 12:
                    _d.sent();
                    return [2 /*return*/, ret];
                case 13:
                    if (!(op.length > 1 && op.charAt(op.length - 1) === '=')) return [3 /*break*/, 15];
                    if (!(left instanceof UniIdent_1.default)) return [3 /*break*/, 15];
                    nextOp = op.substring(0, op.length - 1);
                    return [5 /*yield**/, __values(this.execBinOp(nextOp, scope, left, right))];
                case 14:
                    value = _d.sent();
                    return [2 /*return*/, this.execAssign(this.getAddress(left, scope), value, scope)];
                case 15:
                    throw new RuntimeException_1.default('Unkown binary operator: ' + op);
                case 16:
                    return [2 /*return*/];
            }
        });
    };
    Engine.prototype.execAssign = function (address, value, scope) {
        var type = scope.getType(address);
        // value = this._execCast(type,value);
        scope.set(address, value);
        return value;
    };
    Engine.prototype.execUnaryOp = function (uniOp, scope) {
        var _a, _b, value, ident, num, address, _c, v;
        return __generator(this, function (_d) {
            switch (_d.label) {
                case 0:
                    // 一時的な措置
                    // ToDo: prefixかpostfixか区別するfieldをUnaryOpに追加する
                    if (uniOp.operator === '++' || uniOp.operator === '--') {
                        uniOp.operator += '_';
                    }
                    _a = uniOp.operator;
                    switch (_a) {
                        case '!':
                            return [3 /*break*/, 1];
                        case '-':
                            return [3 /*break*/, 3];
                        case '_++':
                            return [3 /*break*/, 5];
                        case '++_':
                            return [3 /*break*/, 5];
                        case '_--':
                            return [3 /*break*/, 5];
                        case '--_':
                            return [3 /*break*/, 5];
                        case '()':
                            return [3 /*break*/, 15];
                    }
                    return [3 /*break*/, 17];
                case 1:
                    _b = this.toBool;
                    return [5 /*yield**/, __values(this.execExpr(uniOp.expr, scope))];
                case 2:
                    return [2 /*return*/, !_b.apply(this, [_d.sent()])];
                case 3:
                    return [5 /*yield**/, __values(this.execExpr(uniOp.expr, scope))];
                case 4:
                    value = _d.sent();
                    if (typeof value === 'number') {
                        return [2 /*return*/, -value];
                    }
                    _d.label = 5;
                case 5:
                    if (!(uniOp.expr instanceof UniIdent_1.default)) return [3 /*break*/, 15];
                    ident = uniOp.expr;
                    return [5 /*yield**/, __values(this.execExpr(uniOp.expr, scope))];
                case 6:
                    num = _d.sent();
                    address = this.getAddress(ident, scope);
                    _c = uniOp.operator;
                    switch (_c) {
                        case '_++':
                            return [3 /*break*/, 7];
                        case '++_':
                            return [3 /*break*/, 9];
                        case '_--':
                            return [3 /*break*/, 11];
                        case '--_':
                            return [3 /*break*/, 13];
                    }
                    return [3 /*break*/, 15];
                case 7:
                    this.execAssign(address, num + 1, scope);
                    return [4 /*yield*/, num];
                case 8:
                    _d.sent();
                    return [2 /*return*/, num];
                case 9:
                    return [4 /*yield*/, num + 1];
                case 10:
                    _d.sent();
                    return [2 /*return*/, this.execAssign(address, num + 1, scope)];
                case 11:
                    this.execAssign(address, num - 1, scope);
                    return [4 /*yield*/, num];
                case 12:
                    _d.sent();
                    return [2 /*return*/, num];
                case 13:
                    return [4 /*yield*/, num + 1];
                case 14:
                    _d.sent();
                    return [2 /*return*/, this.execAssign(address, num - 1, scope)];
                case 15:
                    return [5 /*yield**/, __values(this.execExpr(uniOp.expr, scope))];
                case 16:
                    v = _d.sent();
                    return [2 /*return*/, v];
                case 17:
                    throw new RuntimeException_1.default('Unkown binary operator: ' + uniOp.operator);
            }
        });
    };
    Engine.prototype.getType = function (arg0, arg1) {
        throw new Error('Method not implemented.');
    };
    Engine.prototype.getAddress = function (expr, scope) {
        if (expr instanceof UniIdent_1.default) {
            var ui = expr;
            return scope.getAddress(ui.name);
        } else if (expr instanceof UniUnaryOp_1.default) {
            var uuo = expr;
            if (uuo.operator === '*') {
                var refAddress = null;
                try {
                    for (var _a = __values(this.execExpr(uuo.expr, scope)), _b = _a.next(); !_b.done; _b = _a.next()) {
                        var execExpr = _b.value;
                        refAddress = execExpr;
                    }
                } catch (e_13_1) {
                    e_13 = { error: e_13_1 };
                } finally {
                    try {
                        if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
                    } finally {
                        if (e_13) throw e_13.error;
                    }
                }
                return refAddress;
            }
        } else if (expr instanceof UniBinOp_1.default) {
            var ubo = expr;
            if (ubo.operator === '[]') {
                return this.getAddress(new UniUnaryOp_1.default('*', new UniBinOp_1.default('+', ubo.left, ubo.right)), scope);
            } else if (ubo.operator === '.') {
                var startAddress = this.execExpr(ubo.left, scope);
                var type = this.getType(ubo.left, scope);
                var offsets = scope.get(type);
                var offset = offsets.get(ubo.right.name);
                return startAddress + offset;
            }
        }
        throw new RuntimeException_1.default('Assignment failure: ' + expr);
        var e_13, _c;
    };
    Engine.prototype.execMethod = function (arg0, arg1, arg2) {
        throw new Error('execMethod not implemented.');
    };
    Engine.prototype.execCast = function (arg0, arg1) {
        throw new Error('execCast not implemented.');
    };
    Engine.prototype.execArray = function (uniArray, scope) {
        var elements, array, elements_1, elements_1_1, element, e, e_14_1, e_14, _a;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    elements = uniArray.items;
                    array = [];
                    _b.label = 1;
                case 1:
                    _b.trys.push([1, 6, 7, 8]);
                    elements_1 = __values(elements), elements_1_1 = elements_1.next();
                    _b.label = 2;
                case 2:
                    if (!!elements_1_1.done) return [3 /*break*/, 5];
                    element = elements_1_1.value;
                    return [5 /*yield**/, __values(this.execExpr(element, scope))];
                case 3:
                    e = _b.sent();
                    array.push(e);
                    _b.label = 4;
                case 4:
                    elements_1_1 = elements_1.next();
                    return [3 /*break*/, 2];
                case 5:
                    return [3 /*break*/, 8];
                case 6:
                    e_14_1 = _b.sent();
                    e_14 = { error: e_14_1 };
                    return [3 /*break*/, 8];
                case 7:
                    try {
                        if (elements_1_1 && !elements_1_1.done && (_a = elements_1.return)) _a.call(elements_1);
                    } finally {
                        if (e_14) throw e_14.error;
                    }
                    return [7 /*endfinally*/];
                case 8:
                    return [2 /*return*/, array];
            }
        });
    };
    Engine.prototype.execImple = function (arg0, arg1) {
        throw new Error('execImple not implemented.');
    };
    Engine.prototype.execVariableDec = function (decVar, scope) {
        var type, value, _a, _b, def, regexp, matches_array, i, e_15_1, e_15, _c;
        return __generator(this, function (_d) {
            switch (_d.label) {
                case 0:
                    type = decVar.type;
                    _d.label = 1;
                case 1:
                    _d.trys.push([1, 6, 7, 8]);
                    _a = __values(decVar.variables), _b = _a.next();
                    _d.label = 2;
                case 2:
                    if (!!_b.done) return [3 /*break*/, 5];
                    def = _b.value;
                    return [5 /*yield**/, __values(this.execExpr(def.value, scope))];
                case 3:
                    // なぜかこのconstがundefinedになってしまう。
                    value = _d.sent();
                    if (def.typeSuffix != null && def.typeSuffix !== '') {
                        regexp = /[(\d+)]/gi;
                        matches_array = def.typeSuffix.match(regexp);
                        if (matches_array !== null) {
                            for (i = value.length; i < matches_array[0]; ++i) {
                                value.push(0);
                            }
                        }
                    }
                    scope.setTop(def.name, value, type);
                    _d.label = 4;
                case 4:
                    _b = _a.next();
                    return [3 /*break*/, 2];
                case 5:
                    return [3 /*break*/, 8];
                case 6:
                    e_15_1 = _d.sent();
                    e_15 = { error: e_15_1 };
                    return [3 /*break*/, 8];
                case 7:
                    try {
                        if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
                    } finally {
                        if (e_15) throw e_15.error;
                    }
                    return [7 /*endfinally*/];
                case 8:
                    return [2 /*return*/, value];
            }
        });
    };
    Engine.prototype.toDouble = function (obj) {
        if (typeof obj === 'number') {
            return obj;
        }
        throw new Error('Cannot covert to integer: ' + obj);
    };
    Engine.prototype.toBool = function (obj) {
        if (typeof obj === 'boolean') {
            return obj;
        }
        throw new Error('Cannot covert to boolean: ' + obj);
    };
    Engine.prototype.execStringLiteral = function (expr, scope) {
        return expr.value;
    };
    Engine.prototype.execFuncCall = function (arg0, arg1) {
        throw new Error('execFuncCall not implemented.');
    };
    Engine.prototype.execMethodCall = function (arg0, arg1, arg2) {
        throw new Error('execMethodCall not implemented.');
    };
    return Engine;
}();
exports.default = Engine;

/***/ }),
/* 86 */
/***/ (function(module, exports, __webpack_require__) {

/*!
 * chai
 * Copyright(c) 2011 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

/*!
 * Dependencies that are used for multiple exports are required here only once
 */

var pathval = __webpack_require__(87);

/*!
 * test utility
 */

exports.test = __webpack_require__(88);

/*!
 * type utility
 */

exports.type = __webpack_require__(46);

/*!
 * expectTypes utility
 */
exports.expectTypes = __webpack_require__(89);

/*!
 * message utility
 */

exports.getMessage = __webpack_require__(90);

/*!
 * actual utility
 */

exports.getActual = __webpack_require__(63);

/*!
 * Inspect util
 */

exports.inspect = __webpack_require__(26);

/*!
 * Object Display util
 */

exports.objDisplay = __webpack_require__(66);

/*!
 * Flag utility
 */

exports.flag = __webpack_require__(6);

/*!
 * Flag transferring utility
 */

exports.transferFlags = __webpack_require__(14);

/*!
 * Deep equal utility
 */

exports.eql = __webpack_require__(92);

/*!
 * Deep path info
 */

exports.getPathInfo = pathval.getPathInfo;

/*!
 * Check if a property exists
 */

exports.hasProperty = pathval.hasProperty;

/*!
 * Function name
 */

exports.getName = __webpack_require__(64);

/*!
 * add Property
 */

exports.addProperty = __webpack_require__(93);

/*!
 * add Method
 */

exports.addMethod = __webpack_require__(94);

/*!
 * overwrite Property
 */

exports.overwriteProperty = __webpack_require__(95);

/*!
 * overwrite Method
 */

exports.overwriteMethod = __webpack_require__(96);

/*!
 * Add a chainable method
 */

exports.addChainableMethod = __webpack_require__(97);

/*!
 * Overwrite chainable method
 */

exports.overwriteChainableMethod = __webpack_require__(98);

/*!
 * Compare by inspect method
 */

exports.compareByInspect = __webpack_require__(99);

/*!
 * Get own enumerable property symbols method
 */

exports.getOwnEnumerablePropertySymbols = __webpack_require__(67);

/*!
 * Get own enumerable properties method
 */

exports.getOwnEnumerableProperties = __webpack_require__(100);

/*!
 * Checks error against a given set of criteria
 */

exports.checkError = __webpack_require__(101);

/*!
 * Proxify util
 */

exports.proxify = __webpack_require__(29);

/*!
 * addLengthGuard util
 */

exports.addLengthGuard = __webpack_require__(28);

/*!
 * isProxyEnabled helper
 */

exports.isProxyEnabled = __webpack_require__(27);

/*!
 * isNaN method
 */

exports.isNaN = __webpack_require__(102);


/***/ }),
/* 87 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/* !
 * Chai - pathval utility
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * @see https://github.com/logicalparadox/filtr
 * MIT Licensed
 */

/**
 * ### .hasProperty(object, name)
 *
 * This allows checking whether an object has own
 * or inherited from prototype chain named property.
 *
 * Basically does the same thing as the `in`
 * operator but works properly with null/undefined values
 * and other primitives.
 *
 *     var obj = {
 *         arr: ['a', 'b', 'c']
 *       , str: 'Hello'
 *     }
 *
 * The following would be the results.
 *
 *     hasProperty(obj, 'str');  // true
 *     hasProperty(obj, 'constructor');  // true
 *     hasProperty(obj, 'bar');  // false
 *
 *     hasProperty(obj.str, 'length'); // true
 *     hasProperty(obj.str, 1);  // true
 *     hasProperty(obj.str, 5);  // false
 *
 *     hasProperty(obj.arr, 'length');  // true
 *     hasProperty(obj.arr, 2);  // true
 *     hasProperty(obj.arr, 3);  // false
 *
 * @param {Object} object
 * @param {String|Symbol} name
 * @returns {Boolean} whether it exists
 * @namespace Utils
 * @name hasProperty
 * @api public
 */

function hasProperty(obj, name) {
  if (typeof obj === 'undefined' || obj === null) {
    return false;
  }

  // The `in` operator does not work with primitives.
  return name in Object(obj);
}

/* !
 * ## parsePath(path)
 *
 * Helper function used to parse string object
 * paths. Use in conjunction with `internalGetPathValue`.
 *
 *      var parsed = parsePath('myobject.property.subprop');
 *
 * ### Paths:
 *
 * * Can be infinitely deep and nested.
 * * Arrays are also valid using the formal `myobject.document[3].property`.
 * * Literal dots and brackets (not delimiter) must be backslash-escaped.
 *
 * @param {String} path
 * @returns {Object} parsed
 * @api private
 */

function parsePath(path) {
  var str = path.replace(/([^\\])\[/g, '$1.[');
  var parts = str.match(/(\\\.|[^.]+?)+/g);
  return parts.map(function mapMatches(value) {
    var regexp = /^\[(\d+)\]$/;
    var mArr = regexp.exec(value);
    var parsed = null;
    if (mArr) {
      parsed = { i: parseFloat(mArr[1]) };
    } else {
      parsed = { p: value.replace(/\\([.\[\]])/g, '$1') };
    }

    return parsed;
  });
}

/* !
 * ## internalGetPathValue(obj, parsed[, pathDepth])
 *
 * Helper companion function for `.parsePath` that returns
 * the value located at the parsed address.
 *
 *      var value = getPathValue(obj, parsed);
 *
 * @param {Object} object to search against
 * @param {Object} parsed definition from `parsePath`.
 * @param {Number} depth (nesting level) of the property we want to retrieve
 * @returns {Object|Undefined} value
 * @api private
 */

function internalGetPathValue(obj, parsed, pathDepth) {
  var temporaryValue = obj;
  var res = null;
  pathDepth = (typeof pathDepth === 'undefined' ? parsed.length : pathDepth);

  for (var i = 0; i < pathDepth; i++) {
    var part = parsed[i];
    if (temporaryValue) {
      if (typeof part.p === 'undefined') {
        temporaryValue = temporaryValue[part.i];
      } else {
        temporaryValue = temporaryValue[part.p];
      }

      if (i === (pathDepth - 1)) {
        res = temporaryValue;
      }
    }
  }

  return res;
}

/* !
 * ## internalSetPathValue(obj, value, parsed)
 *
 * Companion function for `parsePath` that sets
 * the value located at a parsed address.
 *
 *  internalSetPathValue(obj, 'value', parsed);
 *
 * @param {Object} object to search and define on
 * @param {*} value to use upon set
 * @param {Object} parsed definition from `parsePath`
 * @api private
 */

function internalSetPathValue(obj, val, parsed) {
  var tempObj = obj;
  var pathDepth = parsed.length;
  var part = null;
  // Here we iterate through every part of the path
  for (var i = 0; i < pathDepth; i++) {
    var propName = null;
    var propVal = null;
    part = parsed[i];

    // If it's the last part of the path, we set the 'propName' value with the property name
    if (i === (pathDepth - 1)) {
      propName = typeof part.p === 'undefined' ? part.i : part.p;
      // Now we set the property with the name held by 'propName' on object with the desired val
      tempObj[propName] = val;
    } else if (typeof part.p !== 'undefined' && tempObj[part.p]) {
      tempObj = tempObj[part.p];
    } else if (typeof part.i !== 'undefined' && tempObj[part.i]) {
      tempObj = tempObj[part.i];
    } else {
      // If the obj doesn't have the property we create one with that name to define it
      var next = parsed[i + 1];
      // Here we set the name of the property which will be defined
      propName = typeof part.p === 'undefined' ? part.i : part.p;
      // Here we decide if this property will be an array or a new object
      propVal = typeof next.p === 'undefined' ? [] : {};
      tempObj[propName] = propVal;
      tempObj = tempObj[propName];
    }
  }
}

/**
 * ### .getPathInfo(object, path)
 *
 * This allows the retrieval of property info in an
 * object given a string path.
 *
 * The path info consists of an object with the
 * following properties:
 *
 * * parent - The parent object of the property referenced by `path`
 * * name - The name of the final property, a number if it was an array indexer
 * * value - The value of the property, if it exists, otherwise `undefined`
 * * exists - Whether the property exists or not
 *
 * @param {Object} object
 * @param {String} path
 * @returns {Object} info
 * @namespace Utils
 * @name getPathInfo
 * @api public
 */

function getPathInfo(obj, path) {
  var parsed = parsePath(path);
  var last = parsed[parsed.length - 1];
  var info = {
    parent: parsed.length > 1 ? internalGetPathValue(obj, parsed, parsed.length - 1) : obj,
    name: last.p || last.i,
    value: internalGetPathValue(obj, parsed),
  };
  info.exists = hasProperty(info.parent, info.name);

  return info;
}

/**
 * ### .getPathValue(object, path)
 *
 * This allows the retrieval of values in an
 * object given a string path.
 *
 *     var obj = {
 *         prop1: {
 *             arr: ['a', 'b', 'c']
 *           , str: 'Hello'
 *         }
 *       , prop2: {
 *             arr: [ { nested: 'Universe' } ]
 *           , str: 'Hello again!'
 *         }
 *     }
 *
 * The following would be the results.
 *
 *     getPathValue(obj, 'prop1.str'); // Hello
 *     getPathValue(obj, 'prop1.att[2]'); // b
 *     getPathValue(obj, 'prop2.arr[0].nested'); // Universe
 *
 * @param {Object} object
 * @param {String} path
 * @returns {Object} value or `undefined`
 * @namespace Utils
 * @name getPathValue
 * @api public
 */

function getPathValue(obj, path) {
  var info = getPathInfo(obj, path);
  return info.value;
}

/**
 * ### .setPathValue(object, path, value)
 *
 * Define the value in an object at a given string path.
 *
 * ```js
 * var obj = {
 *     prop1: {
 *         arr: ['a', 'b', 'c']
 *       , str: 'Hello'
 *     }
 *   , prop2: {
 *         arr: [ { nested: 'Universe' } ]
 *       , str: 'Hello again!'
 *     }
 * };
 * ```
 *
 * The following would be acceptable.
 *
 * ```js
 * var properties = require('tea-properties');
 * properties.set(obj, 'prop1.str', 'Hello Universe!');
 * properties.set(obj, 'prop1.arr[2]', 'B');
 * properties.set(obj, 'prop2.arr[0].nested.value', { hello: 'universe' });
 * ```
 *
 * @param {Object} object
 * @param {String} path
 * @param {Mixed} value
 * @api private
 */

function setPathValue(obj, path, val) {
  var parsed = parsePath(path);
  internalSetPathValue(obj, val, parsed);
  return obj;
}

module.exports = {
  hasProperty: hasProperty,
  getPathInfo: getPathInfo,
  getPathValue: getPathValue,
  setPathValue: setPathValue,
};


/***/ }),
/* 88 */
/***/ (function(module, exports, __webpack_require__) {

/*!
 * Chai - test utility
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

/*!
 * Module dependancies
 */

var flag = __webpack_require__(6);

/**
 * ### .test(object, expression)
 *
 * Test and object for expression.
 *
 * @param {Object} object (constructed Assertion)
 * @param {Arguments} chai.Assertion.prototype.assert arguments
 * @namespace Utils
 * @name test
 */

module.exports = function test(obj, args) {
  var negate = flag(obj, 'negate')
    , expr = args[0];
  return negate ? !expr : expr;
};


/***/ }),
/* 89 */
/***/ (function(module, exports, __webpack_require__) {

/*!
 * Chai - expectTypes utility
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

/**
 * ### .expectTypes(obj, types)
 *
 * Ensures that the object being tested against is of a valid type.
 *
 *     utils.expectTypes(this, ['array', 'object', 'string']);
 *
 * @param {Mixed} obj constructed Assertion
 * @param {Array} type A list of allowed types for this assertion
 * @namespace Utils
 * @name expectTypes
 * @api public
 */

var AssertionError = __webpack_require__(62);
var flag = __webpack_require__(6);
var type = __webpack_require__(46);

module.exports = function expectTypes(obj, types) {
  var flagMsg = flag(obj, 'message');
  var ssfi = flag(obj, 'ssfi');

  flagMsg = flagMsg ? flagMsg + ': ' : '';

  obj = flag(obj, 'object');
  types = types.map(function (t) { return t.toLowerCase(); });
  types.sort();

  // Transforms ['lorem', 'ipsum'] into 'a lorem, or an ipsum'
  var str = types.map(function (t, index) {
    var art = ~[ 'a', 'e', 'i', 'o', 'u' ].indexOf(t.charAt(0)) ? 'an' : 'a';
    var or = types.length > 1 && index === types.length - 1 ? 'or ' : '';
    return or + art + ' ' + t;
  }).join(', ');

  var objType = type(obj).toLowerCase();

  if (!types.some(function (expected) { return objType === expected; })) {
    throw new AssertionError(
      flagMsg + 'object tested must be ' + str + ', but ' + objType + ' given',
      undefined,
      ssfi
    );
  }
};


/***/ }),
/* 90 */
/***/ (function(module, exports, __webpack_require__) {

/*!
 * Chai - message composition utility
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

/*!
 * Module dependancies
 */

var flag = __webpack_require__(6)
  , getActual = __webpack_require__(63)
  , inspect = __webpack_require__(26)
  , objDisplay = __webpack_require__(66);

/**
 * ### .getMessage(object, message, negateMessage)
 *
 * Construct the error message based on flags
 * and template tags. Template tags will return
 * a stringified inspection of the object referenced.
 *
 * Message template tags:
 * - `#{this}` current asserted object
 * - `#{act}` actual value
 * - `#{exp}` expected value
 *
 * @param {Object} object (constructed Assertion)
 * @param {Arguments} chai.Assertion.prototype.assert arguments
 * @namespace Utils
 * @name getMessage
 * @api public
 */

module.exports = function getMessage(obj, args) {
  var negate = flag(obj, 'negate')
    , val = flag(obj, 'object')
    , expected = args[3]
    , actual = getActual(obj, args)
    , msg = negate ? args[2] : args[1]
    , flagMsg = flag(obj, 'message');

  if(typeof msg === "function") msg = msg();
  msg = msg || '';
  msg = msg
    .replace(/#\{this\}/g, function () { return objDisplay(val); })
    .replace(/#\{act\}/g, function () { return objDisplay(actual); })
    .replace(/#\{exp\}/g, function () { return objDisplay(expected); });

  return flagMsg ? flagMsg + ': ' + msg : msg;
};


/***/ }),
/* 91 */
/***/ (function(module, exports) {

/*!
 * Chai - getEnumerableProperties utility
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

/**
 * ### .getEnumerableProperties(object)
 *
 * This allows the retrieval of enumerable property names of an object,
 * inherited or not.
 *
 * @param {Object} object
 * @returns {Array}
 * @namespace Utils
 * @name getEnumerableProperties
 * @api public
 */

module.exports = function getEnumerableProperties(object) {
  var result = [];
  for (var name in object) {
    result.push(name);
  }
  return result;
};


/***/ }),
/* 92 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/* globals Symbol: false, Uint8Array: false, WeakMap: false */
/*!
 * deep-eql
 * Copyright(c) 2013 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

var type = __webpack_require__(46);
function FakeMap() {
  this._key = 'chai/deep-eql__' + Math.random() + Date.now();
}

FakeMap.prototype = {
  get: function getMap(key) {
    return key[this._key];
  },
  set: function setMap(key, value) {
    if (Object.isExtensible(key)) {
      Object.defineProperty(key, this._key, {
        value: value,
        configurable: true,
      });
    }
  },
};

var MemoizeMap = typeof WeakMap === 'function' ? WeakMap : FakeMap;
/*!
 * Check to see if the MemoizeMap has recorded a result of the two operands
 *
 * @param {Mixed} leftHandOperand
 * @param {Mixed} rightHandOperand
 * @param {MemoizeMap} memoizeMap
 * @returns {Boolean|null} result
*/
function memoizeCompare(leftHandOperand, rightHandOperand, memoizeMap) {
  // Technically, WeakMap keys can *only* be objects, not primitives.
  if (!memoizeMap || isPrimitive(leftHandOperand) || isPrimitive(rightHandOperand)) {
    return null;
  }
  var leftHandMap = memoizeMap.get(leftHandOperand);
  if (leftHandMap) {
    var result = leftHandMap.get(rightHandOperand);
    if (typeof result === 'boolean') {
      return result;
    }
  }
  return null;
}

/*!
 * Set the result of the equality into the MemoizeMap
 *
 * @param {Mixed} leftHandOperand
 * @param {Mixed} rightHandOperand
 * @param {MemoizeMap} memoizeMap
 * @param {Boolean} result
*/
function memoizeSet(leftHandOperand, rightHandOperand, memoizeMap, result) {
  // Technically, WeakMap keys can *only* be objects, not primitives.
  if (!memoizeMap || isPrimitive(leftHandOperand) || isPrimitive(rightHandOperand)) {
    return;
  }
  var leftHandMap = memoizeMap.get(leftHandOperand);
  if (leftHandMap) {
    leftHandMap.set(rightHandOperand, result);
  } else {
    leftHandMap = new MemoizeMap();
    leftHandMap.set(rightHandOperand, result);
    memoizeMap.set(leftHandOperand, leftHandMap);
  }
}

/*!
 * Primary Export
 */

module.exports = deepEqual;
module.exports.MemoizeMap = MemoizeMap;

/**
 * Assert deeply nested sameValue equality between two objects of any type.
 *
 * @param {Mixed} leftHandOperand
 * @param {Mixed} rightHandOperand
 * @param {Object} [options] (optional) Additional options
 * @param {Array} [options.comparator] (optional) Override default algorithm, determining custom equality.
 * @param {Array} [options.memoize] (optional) Provide a custom memoization object which will cache the results of
    complex objects for a speed boost. By passing `false` you can disable memoization, but this will cause circular
    references to blow the stack.
 * @return {Boolean} equal match
 */
function deepEqual(leftHandOperand, rightHandOperand, options) {
  // If we have a comparator, we can't assume anything; so bail to its check first.
  if (options && options.comparator) {
    return extensiveDeepEqual(leftHandOperand, rightHandOperand, options);
  }

  var simpleResult = simpleEqual(leftHandOperand, rightHandOperand);
  if (simpleResult !== null) {
    return simpleResult;
  }

  // Deeper comparisons are pushed through to a larger function
  return extensiveDeepEqual(leftHandOperand, rightHandOperand, options);
}

/**
 * Many comparisons can be canceled out early via simple equality or primitive checks.
 * @param {Mixed} leftHandOperand
 * @param {Mixed} rightHandOperand
 * @return {Boolean|null} equal match
 */
function simpleEqual(leftHandOperand, rightHandOperand) {
  // Equal references (except for Numbers) can be returned early
  if (leftHandOperand === rightHandOperand) {
    // Handle +-0 cases
    return leftHandOperand !== 0 || 1 / leftHandOperand === 1 / rightHandOperand;
  }

  // handle NaN cases
  if (
    leftHandOperand !== leftHandOperand && // eslint-disable-line no-self-compare
    rightHandOperand !== rightHandOperand // eslint-disable-line no-self-compare
  ) {
    return true;
  }

  // Anything that is not an 'object', i.e. symbols, functions, booleans, numbers,
  // strings, and undefined, can be compared by reference.
  if (isPrimitive(leftHandOperand) || isPrimitive(rightHandOperand)) {
    // Easy out b/c it would have passed the first equality check
    return false;
  }
  return null;
}

/*!
 * The main logic of the `deepEqual` function.
 *
 * @param {Mixed} leftHandOperand
 * @param {Mixed} rightHandOperand
 * @param {Object} [options] (optional) Additional options
 * @param {Array} [options.comparator] (optional) Override default algorithm, determining custom equality.
 * @param {Array} [options.memoize] (optional) Provide a custom memoization object which will cache the results of
    complex objects for a speed boost. By passing `false` you can disable memoization, but this will cause circular
    references to blow the stack.
 * @return {Boolean} equal match
*/
function extensiveDeepEqual(leftHandOperand, rightHandOperand, options) {
  options = options || {};
  options.memoize = options.memoize === false ? false : options.memoize || new MemoizeMap();
  var comparator = options && options.comparator;

  // Check if a memoized result exists.
  var memoizeResultLeft = memoizeCompare(leftHandOperand, rightHandOperand, options.memoize);
  if (memoizeResultLeft !== null) {
    return memoizeResultLeft;
  }
  var memoizeResultRight = memoizeCompare(rightHandOperand, leftHandOperand, options.memoize);
  if (memoizeResultRight !== null) {
    return memoizeResultRight;
  }

  // If a comparator is present, use it.
  if (comparator) {
    var comparatorResult = comparator(leftHandOperand, rightHandOperand);
    // Comparators may return null, in which case we want to go back to default behavior.
    if (comparatorResult === false || comparatorResult === true) {
      memoizeSet(leftHandOperand, rightHandOperand, options.memoize, comparatorResult);
      return comparatorResult;
    }
    // To allow comparators to override *any* behavior, we ran them first. Since it didn't decide
    // what to do, we need to make sure to return the basic tests first before we move on.
    var simpleResult = simpleEqual(leftHandOperand, rightHandOperand);
    if (simpleResult !== null) {
      // Don't memoize this, it takes longer to set/retrieve than to just compare.
      return simpleResult;
    }
  }

  var leftHandType = type(leftHandOperand);
  if (leftHandType !== type(rightHandOperand)) {
    memoizeSet(leftHandOperand, rightHandOperand, options.memoize, false);
    return false;
  }

  // Temporarily set the operands in the memoize object to prevent blowing the stack
  memoizeSet(leftHandOperand, rightHandOperand, options.memoize, true);

  var result = extensiveDeepEqualByType(leftHandOperand, rightHandOperand, leftHandType, options);
  memoizeSet(leftHandOperand, rightHandOperand, options.memoize, result);
  return result;
}

function extensiveDeepEqualByType(leftHandOperand, rightHandOperand, leftHandType, options) {
  switch (leftHandType) {
    case 'String':
    case 'Number':
    case 'Boolean':
    case 'Date':
      // If these types are their instance types (e.g. `new Number`) then re-deepEqual against their values
      return deepEqual(leftHandOperand.valueOf(), rightHandOperand.valueOf());
    case 'Promise':
    case 'Symbol':
    case 'function':
    case 'WeakMap':
    case 'WeakSet':
    case 'Error':
      return leftHandOperand === rightHandOperand;
    case 'Arguments':
    case 'Int8Array':
    case 'Uint8Array':
    case 'Uint8ClampedArray':
    case 'Int16Array':
    case 'Uint16Array':
    case 'Int32Array':
    case 'Uint32Array':
    case 'Float32Array':
    case 'Float64Array':
    case 'Array':
      return iterableEqual(leftHandOperand, rightHandOperand, options);
    case 'RegExp':
      return regexpEqual(leftHandOperand, rightHandOperand);
    case 'Generator':
      return generatorEqual(leftHandOperand, rightHandOperand, options);
    case 'DataView':
      return iterableEqual(new Uint8Array(leftHandOperand.buffer), new Uint8Array(rightHandOperand.buffer), options);
    case 'ArrayBuffer':
      return iterableEqual(new Uint8Array(leftHandOperand), new Uint8Array(rightHandOperand), options);
    case 'Set':
      return entriesEqual(leftHandOperand, rightHandOperand, options);
    case 'Map':
      return entriesEqual(leftHandOperand, rightHandOperand, options);
    default:
      return objectEqual(leftHandOperand, rightHandOperand, options);
  }
}

/*!
 * Compare two Regular Expressions for equality.
 *
 * @param {RegExp} leftHandOperand
 * @param {RegExp} rightHandOperand
 * @return {Boolean} result
 */

function regexpEqual(leftHandOperand, rightHandOperand) {
  return leftHandOperand.toString() === rightHandOperand.toString();
}

/*!
 * Compare two Sets/Maps for equality. Faster than other equality functions.
 *
 * @param {Set} leftHandOperand
 * @param {Set} rightHandOperand
 * @param {Object} [options] (Optional)
 * @return {Boolean} result
 */

function entriesEqual(leftHandOperand, rightHandOperand, options) {
  // IE11 doesn't support Set#entries or Set#@@iterator, so we need manually populate using Set#forEach
  if (leftHandOperand.size !== rightHandOperand.size) {
    return false;
  }
  if (leftHandOperand.size === 0) {
    return true;
  }
  var leftHandItems = [];
  var rightHandItems = [];
  leftHandOperand.forEach(function gatherEntries(key, value) {
    leftHandItems.push([ key, value ]);
  });
  rightHandOperand.forEach(function gatherEntries(key, value) {
    rightHandItems.push([ key, value ]);
  });
  return iterableEqual(leftHandItems.sort(), rightHandItems.sort(), options);
}

/*!
 * Simple equality for flat iterable objects such as Arrays, TypedArrays or Node.js buffers.
 *
 * @param {Iterable} leftHandOperand
 * @param {Iterable} rightHandOperand
 * @param {Object} [options] (Optional)
 * @return {Boolean} result
 */

function iterableEqual(leftHandOperand, rightHandOperand, options) {
  var length = leftHandOperand.length;
  if (length !== rightHandOperand.length) {
    return false;
  }
  if (length === 0) {
    return true;
  }
  var index = -1;
  while (++index < length) {
    if (deepEqual(leftHandOperand[index], rightHandOperand[index], options) === false) {
      return false;
    }
  }
  return true;
}

/*!
 * Simple equality for generator objects such as those returned by generator functions.
 *
 * @param {Iterable} leftHandOperand
 * @param {Iterable} rightHandOperand
 * @param {Object} [options] (Optional)
 * @return {Boolean} result
 */

function generatorEqual(leftHandOperand, rightHandOperand, options) {
  return iterableEqual(getGeneratorEntries(leftHandOperand), getGeneratorEntries(rightHandOperand), options);
}

/*!
 * Determine if the given object has an @@iterator function.
 *
 * @param {Object} target
 * @return {Boolean} `true` if the object has an @@iterator function.
 */
function hasIteratorFunction(target) {
  return typeof Symbol !== 'undefined' &&
    typeof target === 'object' &&
    typeof Symbol.iterator !== 'undefined' &&
    typeof target[Symbol.iterator] === 'function';
}

/*!
 * Gets all iterator entries from the given Object. If the Object has no @@iterator function, returns an empty array.
 * This will consume the iterator - which could have side effects depending on the @@iterator implementation.
 *
 * @param {Object} target
 * @returns {Array} an array of entries from the @@iterator function
 */
function getIteratorEntries(target) {
  if (hasIteratorFunction(target)) {
    try {
      return getGeneratorEntries(target[Symbol.iterator]());
    } catch (iteratorError) {
      return [];
    }
  }
  return [];
}

/*!
 * Gets all entries from a Generator. This will consume the generator - which could have side effects.
 *
 * @param {Generator} target
 * @returns {Array} an array of entries from the Generator.
 */
function getGeneratorEntries(generator) {
  var generatorResult = generator.next();
  var accumulator = [ generatorResult.value ];
  while (generatorResult.done === false) {
    generatorResult = generator.next();
    accumulator.push(generatorResult.value);
  }
  return accumulator;
}

/*!
 * Gets all own and inherited enumerable keys from a target.
 *
 * @param {Object} target
 * @returns {Array} an array of own and inherited enumerable keys from the target.
 */
function getEnumerableKeys(target) {
  var keys = [];
  for (var key in target) {
    keys.push(key);
  }
  return keys;
}

/*!
 * Determines if two objects have matching values, given a set of keys. Defers to deepEqual for the equality check of
 * each key. If any value of the given key is not equal, the function will return false (early).
 *
 * @param {Mixed} leftHandOperand
 * @param {Mixed} rightHandOperand
 * @param {Array} keys An array of keys to compare the values of leftHandOperand and rightHandOperand against
 * @param {Object} [options] (Optional)
 * @return {Boolean} result
 */
function keysEqual(leftHandOperand, rightHandOperand, keys, options) {
  var length = keys.length;
  if (length === 0) {
    return true;
  }
  for (var i = 0; i < length; i += 1) {
    if (deepEqual(leftHandOperand[keys[i]], rightHandOperand[keys[i]], options) === false) {
      return false;
    }
  }
  return true;
}

/*!
 * Recursively check the equality of two Objects. Once basic sameness has been established it will defer to `deepEqual`
 * for each enumerable key in the object.
 *
 * @param {Mixed} leftHandOperand
 * @param {Mixed} rightHandOperand
 * @param {Object} [options] (Optional)
 * @return {Boolean} result
 */

function objectEqual(leftHandOperand, rightHandOperand, options) {
  var leftHandKeys = getEnumerableKeys(leftHandOperand);
  var rightHandKeys = getEnumerableKeys(rightHandOperand);
  if (leftHandKeys.length && leftHandKeys.length === rightHandKeys.length) {
    leftHandKeys.sort();
    rightHandKeys.sort();
    if (iterableEqual(leftHandKeys, rightHandKeys) === false) {
      return false;
    }
    return keysEqual(leftHandOperand, rightHandOperand, leftHandKeys, options);
  }

  var leftHandEntries = getIteratorEntries(leftHandOperand);
  var rightHandEntries = getIteratorEntries(rightHandOperand);
  if (leftHandEntries.length && leftHandEntries.length === rightHandEntries.length) {
    leftHandEntries.sort();
    rightHandEntries.sort();
    return iterableEqual(leftHandEntries, rightHandEntries, options);
  }

  if (leftHandKeys.length === 0 &&
      leftHandEntries.length === 0 &&
      rightHandKeys.length === 0 &&
      rightHandEntries.length === 0) {
    return true;
  }

  return false;
}

/*!
 * Returns true if the argument is a primitive.
 *
 * This intentionally returns true for all objects that can be compared by reference,
 * including functions and symbols.
 *
 * @param {Mixed} value
 * @return {Boolean} result
 */
function isPrimitive(value) {
  return value === null || typeof value !== 'object';
}


/***/ }),
/* 93 */
/***/ (function(module, exports, __webpack_require__) {

/*!
 * Chai - addProperty utility
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

var chai = __webpack_require__(12);
var flag = __webpack_require__(6);
var isProxyEnabled = __webpack_require__(27);
var transferFlags = __webpack_require__(14);

/**
 * ### .addProperty(ctx, name, getter)
 *
 * Adds a property to the prototype of an object.
 *
 *     utils.addProperty(chai.Assertion.prototype, 'foo', function () {
 *       var obj = utils.flag(this, 'object');
 *       new chai.Assertion(obj).to.be.instanceof(Foo);
 *     });
 *
 * Can also be accessed directly from `chai.Assertion`.
 *
 *     chai.Assertion.addProperty('foo', fn);
 *
 * Then can be used as any other assertion.
 *
 *     expect(myFoo).to.be.foo;
 *
 * @param {Object} ctx object to which the property is added
 * @param {String} name of property to add
 * @param {Function} getter function to be used for name
 * @namespace Utils
 * @name addProperty
 * @api public
 */

module.exports = function addProperty(ctx, name, getter) {
  getter = getter === undefined ? function () {} : getter;

  Object.defineProperty(ctx, name,
    { get: function propertyGetter() {
        // Setting the `ssfi` flag to `propertyGetter` causes this function to
        // be the starting point for removing implementation frames from the
        // stack trace of a failed assertion.
        //
        // However, we only want to use this function as the starting point if
        // the `lockSsfi` flag isn't set and proxy protection is disabled.
        //
        // If the `lockSsfi` flag is set, then either this assertion has been
        // overwritten by another assertion, or this assertion is being invoked
        // from inside of another assertion. In the first case, the `ssfi` flag
        // has already been set by the overwriting assertion. In the second
        // case, the `ssfi` flag has already been set by the outer assertion.
        //
        // If proxy protection is enabled, then the `ssfi` flag has already been
        // set by the proxy getter.
        if (!isProxyEnabled() && !flag(this, 'lockSsfi')) {
          flag(this, 'ssfi', propertyGetter);
        }

        var result = getter.call(this);
        if (result !== undefined)
          return result;

        var newAssertion = new chai.Assertion();
        transferFlags(this, newAssertion);
        return newAssertion;
      }
    , configurable: true
  });
};


/***/ }),
/* 94 */
/***/ (function(module, exports, __webpack_require__) {

/*!
 * Chai - addMethod utility
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

var addLengthGuard = __webpack_require__(28);
var chai = __webpack_require__(12);
var flag = __webpack_require__(6);
var proxify = __webpack_require__(29);
var transferFlags = __webpack_require__(14);

/**
 * ### .addMethod(ctx, name, method)
 *
 * Adds a method to the prototype of an object.
 *
 *     utils.addMethod(chai.Assertion.prototype, 'foo', function (str) {
 *       var obj = utils.flag(this, 'object');
 *       new chai.Assertion(obj).to.be.equal(str);
 *     });
 *
 * Can also be accessed directly from `chai.Assertion`.
 *
 *     chai.Assertion.addMethod('foo', fn);
 *
 * Then can be used as any other assertion.
 *
 *     expect(fooStr).to.be.foo('bar');
 *
 * @param {Object} ctx object to which the method is added
 * @param {String} name of method to add
 * @param {Function} method function to be used for name
 * @namespace Utils
 * @name addMethod
 * @api public
 */

module.exports = function addMethod(ctx, name, method) {
  var methodWrapper = function () {
    // Setting the `ssfi` flag to `methodWrapper` causes this function to be the
    // starting point for removing implementation frames from the stack trace of
    // a failed assertion.
    //
    // However, we only want to use this function as the starting point if the
    // `lockSsfi` flag isn't set.
    //
    // If the `lockSsfi` flag is set, then either this assertion has been
    // overwritten by another assertion, or this assertion is being invoked from
    // inside of another assertion. In the first case, the `ssfi` flag has
    // already been set by the overwriting assertion. In the second case, the
    // `ssfi` flag has already been set by the outer assertion.
    if (!flag(this, 'lockSsfi')) {
      flag(this, 'ssfi', methodWrapper);
    }

    var result = method.apply(this, arguments);
    if (result !== undefined)
      return result;

    var newAssertion = new chai.Assertion();
    transferFlags(this, newAssertion);
    return newAssertion;
  };

  addLengthGuard(methodWrapper, name, false);
  ctx[name] = proxify(methodWrapper, name);
};


/***/ }),
/* 95 */
/***/ (function(module, exports, __webpack_require__) {

/*!
 * Chai - overwriteProperty utility
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

var chai = __webpack_require__(12);
var flag = __webpack_require__(6);
var isProxyEnabled = __webpack_require__(27);
var transferFlags = __webpack_require__(14);

/**
 * ### .overwriteProperty(ctx, name, fn)
 *
 * Overwites an already existing property getter and provides
 * access to previous value. Must return function to use as getter.
 *
 *     utils.overwriteProperty(chai.Assertion.prototype, 'ok', function (_super) {
 *       return function () {
 *         var obj = utils.flag(this, 'object');
 *         if (obj instanceof Foo) {
 *           new chai.Assertion(obj.name).to.equal('bar');
 *         } else {
 *           _super.call(this);
 *         }
 *       }
 *     });
 *
 *
 * Can also be accessed directly from `chai.Assertion`.
 *
 *     chai.Assertion.overwriteProperty('foo', fn);
 *
 * Then can be used as any other assertion.
 *
 *     expect(myFoo).to.be.ok;
 *
 * @param {Object} ctx object whose property is to be overwritten
 * @param {String} name of property to overwrite
 * @param {Function} getter function that returns a getter function to be used for name
 * @namespace Utils
 * @name overwriteProperty
 * @api public
 */

module.exports = function overwriteProperty(ctx, name, getter) {
  var _get = Object.getOwnPropertyDescriptor(ctx, name)
    , _super = function () {};

  if (_get && 'function' === typeof _get.get)
    _super = _get.get

  Object.defineProperty(ctx, name,
    { get: function overwritingPropertyGetter() {
        // Setting the `ssfi` flag to `overwritingPropertyGetter` causes this
        // function to be the starting point for removing implementation frames
        // from the stack trace of a failed assertion.
        //
        // However, we only want to use this function as the starting point if
        // the `lockSsfi` flag isn't set and proxy protection is disabled.
        //
        // If the `lockSsfi` flag is set, then either this assertion has been
        // overwritten by another assertion, or this assertion is being invoked
        // from inside of another assertion. In the first case, the `ssfi` flag
        // has already been set by the overwriting assertion. In the second
        // case, the `ssfi` flag has already been set by the outer assertion.
        //
        // If proxy protection is enabled, then the `ssfi` flag has already been
        // set by the proxy getter.
        if (!isProxyEnabled() && !flag(this, 'lockSsfi')) {
          flag(this, 'ssfi', overwritingPropertyGetter);
        }

        // Setting the `lockSsfi` flag to `true` prevents the overwritten
        // assertion from changing the `ssfi` flag. By this point, the `ssfi`
        // flag is already set to the correct starting point for this assertion.
        var origLockSsfi = flag(this, 'lockSsfi');
        flag(this, 'lockSsfi', true);
        var result = getter(_super).call(this);
        flag(this, 'lockSsfi', origLockSsfi);

        if (result !== undefined) {
          return result;
        }

        var newAssertion = new chai.Assertion();
        transferFlags(this, newAssertion);
        return newAssertion;
      }
    , configurable: true
  });
};


/***/ }),
/* 96 */
/***/ (function(module, exports, __webpack_require__) {

/*!
 * Chai - overwriteMethod utility
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

var addLengthGuard = __webpack_require__(28);
var chai = __webpack_require__(12);
var flag = __webpack_require__(6);
var proxify = __webpack_require__(29);
var transferFlags = __webpack_require__(14);

/**
 * ### .overwriteMethod(ctx, name, fn)
 *
 * Overwites an already existing method and provides
 * access to previous function. Must return function
 * to be used for name.
 *
 *     utils.overwriteMethod(chai.Assertion.prototype, 'equal', function (_super) {
 *       return function (str) {
 *         var obj = utils.flag(this, 'object');
 *         if (obj instanceof Foo) {
 *           new chai.Assertion(obj.value).to.equal(str);
 *         } else {
 *           _super.apply(this, arguments);
 *         }
 *       }
 *     });
 *
 * Can also be accessed directly from `chai.Assertion`.
 *
 *     chai.Assertion.overwriteMethod('foo', fn);
 *
 * Then can be used as any other assertion.
 *
 *     expect(myFoo).to.equal('bar');
 *
 * @param {Object} ctx object whose method is to be overwritten
 * @param {String} name of method to overwrite
 * @param {Function} method function that returns a function to be used for name
 * @namespace Utils
 * @name overwriteMethod
 * @api public
 */

module.exports = function overwriteMethod(ctx, name, method) {
  var _method = ctx[name]
    , _super = function () {
      throw new Error(name + ' is not a function');
    };

  if (_method && 'function' === typeof _method)
    _super = _method;

  var overwritingMethodWrapper = function () {
    // Setting the `ssfi` flag to `overwritingMethodWrapper` causes this
    // function to be the starting point for removing implementation frames from
    // the stack trace of a failed assertion.
    //
    // However, we only want to use this function as the starting point if the
    // `lockSsfi` flag isn't set.
    //
    // If the `lockSsfi` flag is set, then either this assertion has been
    // overwritten by another assertion, or this assertion is being invoked from
    // inside of another assertion. In the first case, the `ssfi` flag has
    // already been set by the overwriting assertion. In the second case, the
    // `ssfi` flag has already been set by the outer assertion.
    if (!flag(this, 'lockSsfi')) {
      flag(this, 'ssfi', overwritingMethodWrapper);
    }

    // Setting the `lockSsfi` flag to `true` prevents the overwritten assertion
    // from changing the `ssfi` flag. By this point, the `ssfi` flag is already
    // set to the correct starting point for this assertion.
    var origLockSsfi = flag(this, 'lockSsfi');
    flag(this, 'lockSsfi', true);
    var result = method(_super).apply(this, arguments);
    flag(this, 'lockSsfi', origLockSsfi);

    if (result !== undefined) {
      return result;
    }

    var newAssertion = new chai.Assertion();
    transferFlags(this, newAssertion);
    return newAssertion;
  }

  addLengthGuard(overwritingMethodWrapper, name, false);
  ctx[name] = proxify(overwritingMethodWrapper, name);
};


/***/ }),
/* 97 */
/***/ (function(module, exports, __webpack_require__) {

/*!
 * Chai - addChainingMethod utility
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

/*!
 * Module dependencies
 */

var addLengthGuard = __webpack_require__(28);
var chai = __webpack_require__(12);
var flag = __webpack_require__(6);
var proxify = __webpack_require__(29);
var transferFlags = __webpack_require__(14);

/*!
 * Module variables
 */

// Check whether `Object.setPrototypeOf` is supported
var canSetPrototype = typeof Object.setPrototypeOf === 'function';

// Without `Object.setPrototypeOf` support, this module will need to add properties to a function.
// However, some of functions' own props are not configurable and should be skipped.
var testFn = function() {};
var excludeNames = Object.getOwnPropertyNames(testFn).filter(function(name) {
  var propDesc = Object.getOwnPropertyDescriptor(testFn, name);

  // Note: PhantomJS 1.x includes `callee` as one of `testFn`'s own properties,
  // but then returns `undefined` as the property descriptor for `callee`. As a
  // workaround, we perform an otherwise unnecessary type-check for `propDesc`,
  // and then filter it out if it's not an object as it should be.
  if (typeof propDesc !== 'object')
    return true;

  return !propDesc.configurable;
});

// Cache `Function` properties
var call  = Function.prototype.call,
    apply = Function.prototype.apply;

/**
 * ### .addChainableMethod(ctx, name, method, chainingBehavior)
 *
 * Adds a method to an object, such that the method can also be chained.
 *
 *     utils.addChainableMethod(chai.Assertion.prototype, 'foo', function (str) {
 *       var obj = utils.flag(this, 'object');
 *       new chai.Assertion(obj).to.be.equal(str);
 *     });
 *
 * Can also be accessed directly from `chai.Assertion`.
 *
 *     chai.Assertion.addChainableMethod('foo', fn, chainingBehavior);
 *
 * The result can then be used as both a method assertion, executing both `method` and
 * `chainingBehavior`, or as a language chain, which only executes `chainingBehavior`.
 *
 *     expect(fooStr).to.be.foo('bar');
 *     expect(fooStr).to.be.foo.equal('foo');
 *
 * @param {Object} ctx object to which the method is added
 * @param {String} name of method to add
 * @param {Function} method function to be used for `name`, when called
 * @param {Function} chainingBehavior function to be called every time the property is accessed
 * @namespace Utils
 * @name addChainableMethod
 * @api public
 */

module.exports = function addChainableMethod(ctx, name, method, chainingBehavior) {
  if (typeof chainingBehavior !== 'function') {
    chainingBehavior = function () { };
  }

  var chainableBehavior = {
      method: method
    , chainingBehavior: chainingBehavior
  };

  // save the methods so we can overwrite them later, if we need to.
  if (!ctx.__methods) {
    ctx.__methods = {};
  }
  ctx.__methods[name] = chainableBehavior;

  Object.defineProperty(ctx, name,
    { get: function chainableMethodGetter() {
        chainableBehavior.chainingBehavior.call(this);

        var chainableMethodWrapper = function () {
          // Setting the `ssfi` flag to `chainableMethodWrapper` causes this
          // function to be the starting point for removing implementation
          // frames from the stack trace of a failed assertion.
          //
          // However, we only want to use this function as the starting point if
          // the `lockSsfi` flag isn't set.
          //
          // If the `lockSsfi` flag is set, then this assertion is being
          // invoked from inside of another assertion. In this case, the `ssfi`
          // flag has already been set by the outer assertion.
          //
          // Note that overwriting a chainable method merely replaces the saved
          // methods in `ctx.__methods` instead of completely replacing the
          // overwritten assertion. Therefore, an overwriting assertion won't
          // set the `ssfi` or `lockSsfi` flags.
          if (!flag(this, 'lockSsfi')) {
            flag(this, 'ssfi', chainableMethodWrapper);
          }

          var result = chainableBehavior.method.apply(this, arguments);
          if (result !== undefined) {
            return result;
          }

          var newAssertion = new chai.Assertion();
          transferFlags(this, newAssertion);
          return newAssertion;
        };

        addLengthGuard(chainableMethodWrapper, name, true);

        // Use `Object.setPrototypeOf` if available
        if (canSetPrototype) {
          // Inherit all properties from the object by replacing the `Function` prototype
          var prototype = Object.create(this);
          // Restore the `call` and `apply` methods from `Function`
          prototype.call = call;
          prototype.apply = apply;
          Object.setPrototypeOf(chainableMethodWrapper, prototype);
        }
        // Otherwise, redefine all properties (slow!)
        else {
          var asserterNames = Object.getOwnPropertyNames(ctx);
          asserterNames.forEach(function (asserterName) {
            if (excludeNames.indexOf(asserterName) !== -1) {
              return;
            }

            var pd = Object.getOwnPropertyDescriptor(ctx, asserterName);
            Object.defineProperty(chainableMethodWrapper, asserterName, pd);
          });
        }

        transferFlags(this, chainableMethodWrapper);
        return proxify(chainableMethodWrapper);
      }
    , configurable: true
  });
};


/***/ }),
/* 98 */
/***/ (function(module, exports, __webpack_require__) {

/*!
 * Chai - overwriteChainableMethod utility
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

var chai = __webpack_require__(12);
var transferFlags = __webpack_require__(14);

/**
 * ### .overwriteChainableMethod(ctx, name, method, chainingBehavior)
 *
 * Overwites an already existing chainable method
 * and provides access to the previous function or
 * property.  Must return functions to be used for
 * name.
 *
 *     utils.overwriteChainableMethod(chai.Assertion.prototype, 'lengthOf',
 *       function (_super) {
 *       }
 *     , function (_super) {
 *       }
 *     );
 *
 * Can also be accessed directly from `chai.Assertion`.
 *
 *     chai.Assertion.overwriteChainableMethod('foo', fn, fn);
 *
 * Then can be used as any other assertion.
 *
 *     expect(myFoo).to.have.lengthOf(3);
 *     expect(myFoo).to.have.lengthOf.above(3);
 *
 * @param {Object} ctx object whose method / property is to be overwritten
 * @param {String} name of method / property to overwrite
 * @param {Function} method function that returns a function to be used for name
 * @param {Function} chainingBehavior function that returns a function to be used for property
 * @namespace Utils
 * @name overwriteChainableMethod
 * @api public
 */

module.exports = function overwriteChainableMethod(ctx, name, method, chainingBehavior) {
  var chainableBehavior = ctx.__methods[name];

  var _chainingBehavior = chainableBehavior.chainingBehavior;
  chainableBehavior.chainingBehavior = function overwritingChainableMethodGetter() {
    var result = chainingBehavior(_chainingBehavior).call(this);
    if (result !== undefined) {
      return result;
    }

    var newAssertion = new chai.Assertion();
    transferFlags(this, newAssertion);
    return newAssertion;
  };

  var _method = chainableBehavior.method;
  chainableBehavior.method = function overwritingChainableMethodWrapper() {
    var result = method(_method).apply(this, arguments);
    if (result !== undefined) {
      return result;
    }

    var newAssertion = new chai.Assertion();
    transferFlags(this, newAssertion);
    return newAssertion;
  };
};


/***/ }),
/* 99 */
/***/ (function(module, exports, __webpack_require__) {

/*!
 * Chai - compareByInspect utility
 * Copyright(c) 2011-2016 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

/*!
 * Module dependancies
 */

var inspect = __webpack_require__(26);

/**
 * ### .compareByInspect(mixed, mixed)
 *
 * To be used as a compareFunction with Array.prototype.sort. Compares elements
 * using inspect instead of default behavior of using toString so that Symbols
 * and objects with irregular/missing toString can still be sorted without a
 * TypeError.
 *
 * @param {Mixed} first element to compare
 * @param {Mixed} second element to compare
 * @returns {Number} -1 if 'a' should come before 'b'; otherwise 1 
 * @name compareByInspect
 * @namespace Utils
 * @api public
 */

module.exports = function compareByInspect(a, b) {
  return inspect(a) < inspect(b) ? -1 : 1;
};


/***/ }),
/* 100 */
/***/ (function(module, exports, __webpack_require__) {

/*!
 * Chai - getOwnEnumerableProperties utility
 * Copyright(c) 2011-2016 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

/*!
 * Module dependancies
 */

var getOwnEnumerablePropertySymbols = __webpack_require__(67);

/**
 * ### .getOwnEnumerableProperties(object)
 *
 * This allows the retrieval of directly-owned enumerable property names and
 * symbols of an object. This function is necessary because Object.keys only
 * returns enumerable property names, not enumerable property symbols.
 *
 * @param {Object} object
 * @returns {Array}
 * @namespace Utils
 * @name getOwnEnumerableProperties
 * @api public
 */

module.exports = function getOwnEnumerableProperties(obj) {
  return Object.keys(obj).concat(getOwnEnumerablePropertySymbols(obj));
};


/***/ }),
/* 101 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/* !
 * Chai - checkError utility
 * Copyright(c) 2012-2016 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

/**
 * ### .checkError
 *
 * Checks that an error conforms to a given set of criteria and/or retrieves information about it.
 *
 * @api public
 */

/**
 * ### .compatibleInstance(thrown, errorLike)
 *
 * Checks if two instances are compatible (strict equal).
 * Returns false if errorLike is not an instance of Error, because instances
 * can only be compatible if they're both error instances.
 *
 * @name compatibleInstance
 * @param {Error} thrown error
 * @param {Error|ErrorConstructor} errorLike object to compare against
 * @namespace Utils
 * @api public
 */

function compatibleInstance(thrown, errorLike) {
  return errorLike instanceof Error && thrown === errorLike;
}

/**
 * ### .compatibleConstructor(thrown, errorLike)
 *
 * Checks if two constructors are compatible.
 * This function can receive either an error constructor or
 * an error instance as the `errorLike` argument.
 * Constructors are compatible if they're the same or if one is
 * an instance of another.
 *
 * @name compatibleConstructor
 * @param {Error} thrown error
 * @param {Error|ErrorConstructor} errorLike object to compare against
 * @namespace Utils
 * @api public
 */

function compatibleConstructor(thrown, errorLike) {
  if (errorLike instanceof Error) {
    // If `errorLike` is an instance of any error we compare their constructors
    return thrown.constructor === errorLike.constructor || thrown instanceof errorLike.constructor;
  } else if (errorLike.prototype instanceof Error || errorLike === Error) {
    // If `errorLike` is a constructor that inherits from Error, we compare `thrown` to `errorLike` directly
    return thrown.constructor === errorLike || thrown instanceof errorLike;
  }

  return false;
}

/**
 * ### .compatibleMessage(thrown, errMatcher)
 *
 * Checks if an error's message is compatible with a matcher (String or RegExp).
 * If the message contains the String or passes the RegExp test,
 * it is considered compatible.
 *
 * @name compatibleMessage
 * @param {Error} thrown error
 * @param {String|RegExp} errMatcher to look for into the message
 * @namespace Utils
 * @api public
 */

function compatibleMessage(thrown, errMatcher) {
  var comparisonString = typeof thrown === 'string' ? thrown : thrown.message;
  if (errMatcher instanceof RegExp) {
    return errMatcher.test(comparisonString);
  } else if (typeof errMatcher === 'string') {
    return comparisonString.indexOf(errMatcher) !== -1; // eslint-disable-line no-magic-numbers
  }

  return false;
}

/**
 * ### .getFunctionName(constructorFn)
 *
 * Returns the name of a function.
 * This also includes a polyfill function if `constructorFn.name` is not defined.
 *
 * @name getFunctionName
 * @param {Function} constructorFn
 * @namespace Utils
 * @api private
 */

var functionNameMatch = /\s*function(?:\s|\s*\/\*[^(?:*\/)]+\*\/\s*)*([^\(\/]+)/;
function getFunctionName(constructorFn) {
  var name = '';
  if (typeof constructorFn.name === 'undefined') {
    // Here we run a polyfill if constructorFn.name is not defined
    var match = String(constructorFn).match(functionNameMatch);
    if (match) {
      name = match[1];
    }
  } else {
    name = constructorFn.name;
  }

  return name;
}

/**
 * ### .getConstructorName(errorLike)
 *
 * Gets the constructor name for an Error instance or constructor itself.
 *
 * @name getConstructorName
 * @param {Error|ErrorConstructor} errorLike
 * @namespace Utils
 * @api public
 */

function getConstructorName(errorLike) {
  var constructorName = errorLike;
  if (errorLike instanceof Error) {
    constructorName = getFunctionName(errorLike.constructor);
  } else if (typeof errorLike === 'function') {
    // If `err` is not an instance of Error it is an error constructor itself or another function.
    // If we've got a common function we get its name, otherwise we may need to create a new instance
    // of the error just in case it's a poorly-constructed error. Please see chaijs/chai/issues/45 to know more.
    constructorName = getFunctionName(errorLike).trim() ||
        getFunctionName(new errorLike()); // eslint-disable-line new-cap
  }

  return constructorName;
}

/**
 * ### .getMessage(errorLike)
 *
 * Gets the error message from an error.
 * If `err` is a String itself, we return it.
 * If the error has no message, we return an empty string.
 *
 * @name getMessage
 * @param {Error|String} errorLike
 * @namespace Utils
 * @api public
 */

function getMessage(errorLike) {
  var msg = '';
  if (errorLike && errorLike.message) {
    msg = errorLike.message;
  } else if (typeof errorLike === 'string') {
    msg = errorLike;
  }

  return msg;
}

module.exports = {
  compatibleInstance: compatibleInstance,
  compatibleConstructor: compatibleConstructor,
  compatibleMessage: compatibleMessage,
  getMessage: getMessage,
  getConstructorName: getConstructorName,
};


/***/ }),
/* 102 */
/***/ (function(module, exports) {

/*!
 * Chai - isNaN utility
 * Copyright(c) 2012-2015 Sakthipriyan Vairamani <thechargingvolcano@gmail.com>
 * MIT Licensed
 */

/**
 * ### .isNaN(value)
 *
 * Checks if the given value is NaN or not.
 *
 *     utils.isNaN(NaN); // true
 *
 * @param {Value} The value which has to be checked if it is NaN
 * @name isNaN
 * @api private
 */

function isNaN(value) {
  // Refer http://www.ecma-international.org/ecma-262/6.0/#sec-isnan-number
  // section's NOTE.
  return value !== value;
}

// If ECMAScript 6's Number.isNaN is present, prefer that.
module.exports = Number.isNaN || isNaN;


/***/ }),
/* 103 */
/***/ (function(module, exports, __webpack_require__) {

/*!
 * chai
 * http://chaijs.com
 * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

var config = __webpack_require__(13);

module.exports = function (_chai, util) {
  /*!
   * Module dependencies.
   */

  var AssertionError = _chai.AssertionError
    , flag = util.flag;

  /*!
   * Module export.
   */

  _chai.Assertion = Assertion;

  /*!
   * Assertion Constructor
   *
   * Creates object for chaining.
   *
   * `Assertion` objects contain metadata in the form of flags. Three flags can
   * be assigned during instantiation by passing arguments to this constructor:
   *
   * - `object`: This flag contains the target of the assertion. For example, in
   *   the assertion `expect(numKittens).to.equal(7);`, the `object` flag will
   *   contain `numKittens` so that the `equal` assertion can reference it when
   *   needed.
   *
   * - `message`: This flag contains an optional custom error message to be
   *   prepended to the error message that's generated by the assertion when it
   *   fails.
   *
   * - `ssfi`: This flag stands for "start stack function indicator". It
   *   contains a function reference that serves as the starting point for
   *   removing frames from the stack trace of the error that's created by the
   *   assertion when it fails. The goal is to provide a cleaner stack trace to
   *   end users by removing Chai's internal functions. Note that it only works
   *   in environments that support `Error.captureStackTrace`, and only when
   *   `Chai.config.includeStack` hasn't been set to `false`.
   *
   * - `lockSsfi`: This flag controls whether or not the given `ssfi` flag
   *   should retain its current value, even as assertions are chained off of
   *   this object. This is usually set to `true` when creating a new assertion
   *   from within another assertion. It's also temporarily set to `true` before
   *   an overwritten assertion gets called by the overwriting assertion.
   *
   * @param {Mixed} obj target of the assertion
   * @param {String} msg (optional) custom error message
   * @param {Function} ssfi (optional) starting point for removing stack frames
   * @param {Boolean} lockSsfi (optional) whether or not the ssfi flag is locked
   * @api private
   */

  function Assertion (obj, msg, ssfi, lockSsfi) {
    flag(this, 'ssfi', ssfi || Assertion);
    flag(this, 'lockSsfi', lockSsfi);
    flag(this, 'object', obj);
    flag(this, 'message', msg);

    return util.proxify(this);
  }

  Object.defineProperty(Assertion, 'includeStack', {
    get: function() {
      console.warn('Assertion.includeStack is deprecated, use chai.config.includeStack instead.');
      return config.includeStack;
    },
    set: function(value) {
      console.warn('Assertion.includeStack is deprecated, use chai.config.includeStack instead.');
      config.includeStack = value;
    }
  });

  Object.defineProperty(Assertion, 'showDiff', {
    get: function() {
      console.warn('Assertion.showDiff is deprecated, use chai.config.showDiff instead.');
      return config.showDiff;
    },
    set: function(value) {
      console.warn('Assertion.showDiff is deprecated, use chai.config.showDiff instead.');
      config.showDiff = value;
    }
  });

  Assertion.addProperty = function (name, fn) {
    util.addProperty(this.prototype, name, fn);
  };

  Assertion.addMethod = function (name, fn) {
    util.addMethod(this.prototype, name, fn);
  };

  Assertion.addChainableMethod = function (name, fn, chainingBehavior) {
    util.addChainableMethod(this.prototype, name, fn, chainingBehavior);
  };

  Assertion.overwriteProperty = function (name, fn) {
    util.overwriteProperty(this.prototype, name, fn);
  };

  Assertion.overwriteMethod = function (name, fn) {
    util.overwriteMethod(this.prototype, name, fn);
  };

  Assertion.overwriteChainableMethod = function (name, fn, chainingBehavior) {
    util.overwriteChainableMethod(this.prototype, name, fn, chainingBehavior);
  };

  /**
   * ### .assert(expression, message, negateMessage, expected, actual, showDiff)
   *
   * Executes an expression and check expectations. Throws AssertionError for reporting if test doesn't pass.
   *
   * @name assert
   * @param {Philosophical} expression to be tested
   * @param {String|Function} message or function that returns message to display if expression fails
   * @param {String|Function} negatedMessage or function that returns negatedMessage to display if negated expression fails
   * @param {Mixed} expected value (remember to check for negation)
   * @param {Mixed} actual (optional) will default to `this.obj`
   * @param {Boolean} showDiff (optional) when set to `true`, assert will display a diff in addition to the message if expression fails
   * @api private
   */

  Assertion.prototype.assert = function (expr, msg, negateMsg, expected, _actual, showDiff) {
    var ok = util.test(this, arguments);
    if (false !== showDiff) showDiff = true;
    if (undefined === expected && undefined === _actual) showDiff = false;
    if (true !== config.showDiff) showDiff = false;

    if (!ok) {
      msg = util.getMessage(this, arguments);
      var actual = util.getActual(this, arguments);
      throw new AssertionError(msg, {
          actual: actual
        , expected: expected
        , showDiff: showDiff
      }, (config.includeStack) ? this.assert : flag(this, 'ssfi'));
    }
  };

  /*!
   * ### ._obj
   *
   * Quick reference to stored `actual` value for plugin developers.
   *
   * @api private
   */

  Object.defineProperty(Assertion.prototype, '_obj',
    { get: function () {
        return flag(this, 'object');
      }
    , set: function (val) {
        flag(this, 'object', val);
      }
  });
};


/***/ }),
/* 104 */
/***/ (function(module, exports) {

/*!
 * chai
 * http://chaijs.com
 * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

module.exports = function (chai, _) {
  var Assertion = chai.Assertion
    , AssertionError = chai.AssertionError
    , flag = _.flag;

  /**
   * ### Language Chains
   *
   * The following are provided as chainable getters to improve the readability
   * of your assertions.
   *
   * **Chains**
   *
   * - to
   * - be
   * - been
   * - is
   * - that
   * - which
   * - and
   * - has
   * - have
   * - with
   * - at
   * - of
   * - same
   * - but
   * - does
   *
   * @name language chains
   * @namespace BDD
   * @api public
   */

  [ 'to', 'be', 'been'
  , 'is', 'and', 'has', 'have'
  , 'with', 'that', 'which', 'at'
  , 'of', 'same', 'but', 'does' ].forEach(function (chain) {
    Assertion.addProperty(chain);
  });

  /**
   * ### .not
   *
   * Negates all assertions that follow in the chain.
   *
   *     expect(function () {}).to.not.throw();
   *     expect({a: 1}).to.not.have.property('b');
   *     expect([1, 2]).to.be.an('array').that.does.not.include(3);
   *
   * Just because you can negate any assertion with `.not` doesn't mean you
   * should. With great power comes great responsibility. It's often best to
   * assert that the one expected output was produced, rather than asserting
   * that one of countless unexpected outputs wasn't produced. See individual
   * assertions for specific guidance.
   *
   *     expect(2).to.equal(2); // Recommended
   *     expect(2).to.not.equal(1); // Not recommended
   *
   * @name not
   * @namespace BDD
   * @api public
   */

  Assertion.addProperty('not', function () {
    flag(this, 'negate', true);
  });

  /**
   * ### .deep
   *
   * Causes all `.equal`, `.include`, `.members`, `.keys`, and `.property`
   * assertions that follow in the chain to use deep equality instead of strict
   * (`===`) equality. See the `deep-eql` project page for info on the deep
   * equality algorithm: https://github.com/chaijs/deep-eql.
   *
   *     // Target object deeply (but not strictly) equals `{a: 1}`
   *     expect({a: 1}).to.deep.equal({a: 1});
   *     expect({a: 1}).to.not.equal({a: 1});
   *
   *     // Target array deeply (but not strictly) includes `{a: 1}`
   *     expect([{a: 1}]).to.deep.include({a: 1});
   *     expect([{a: 1}]).to.not.include({a: 1});
   *
   *     // Target object deeply (but not strictly) includes `x: {a: 1}`
   *     expect({x: {a: 1}}).to.deep.include({x: {a: 1}});
   *     expect({x: {a: 1}}).to.not.include({x: {a: 1}});
   *
   *     // Target array deeply (but not strictly) has member `{a: 1}`
   *     expect([{a: 1}]).to.have.deep.members([{a: 1}]);
   *     expect([{a: 1}]).to.not.have.members([{a: 1}]);
   *
   *     // Target set deeply (but not strictly) has key `{a: 1}`
   *     expect(new Set([{a: 1}])).to.have.deep.keys([{a: 1}]);
   *     expect(new Set([{a: 1}])).to.not.have.keys([{a: 1}]);
   *
   *     // Target object deeply (but not strictly) has property `x: {a: 1}`
   *     expect({x: {a: 1}}).to.have.deep.property('x', {a: 1});
   *     expect({x: {a: 1}}).to.not.have.property('x', {a: 1});
   *
   * @name deep
   * @namespace BDD
   * @api public
   */

  Assertion.addProperty('deep', function () {
    flag(this, 'deep', true);
  });

  /**
   * ### .nested
   *
   * Enables dot- and bracket-notation in all `.property` and `.include`
   * assertions that follow in the chain.
   *
   *     expect({a: {b: ['x', 'y']}}).to.have.nested.property('a.b[1]');
   *     expect({a: {b: ['x', 'y']}}).to.nested.include({'a.b[1]': 'y'});
   *
   * If `.` or `[]` are part of an actual property name, they can be escaped by
   * adding two backslashes before them.
   *
   *     expect({'.a': {'[b]': 'x'}}).to.have.nested.property('\\.a.\\[b\\]');
   *     expect({'.a': {'[b]': 'x'}}).to.nested.include({'\\.a.\\[b\\]': 'x'});
   *
   * `.nested` cannot be combined with `.own`.
   *
   * @name nested
   * @namespace BDD
   * @api public
   */

  Assertion.addProperty('nested', function () {
    flag(this, 'nested', true);
  });

  /**
   * ### .own
   *
   * Causes all `.property` and `.include` assertions that follow in the chain
   * to ignore inherited properties.
   *
   *     Object.prototype.b = 2;
   *
   *     expect({a: 1}).to.have.own.property('a');
   *     expect({a: 1}).to.have.property('b').but.not.own.property('b'); 
   *
   *     expect({a: 1}).to.own.include({a: 1});
   *     expect({a: 1}).to.include({b: 2}).but.not.own.include({b: 2});
   *
   * `.own` cannot be combined with `.nested`.
   *
   * @name own
   * @namespace BDD
   * @api public
   */

  Assertion.addProperty('own', function () {
    flag(this, 'own', true);
  });

  /**
   * ### .ordered
   *
   * Causes all `.members` assertions that follow in the chain to require that
   * members be in the same order.
   *
   *     expect([1, 2]).to.have.ordered.members([1, 2])
   *       .but.not.have.ordered.members([2, 1]);
   *
   * When `.include` and `.ordered` are combined, the ordering begins at the
   * start of both arrays.
   *
   *     expect([1, 2, 3]).to.include.ordered.members([1, 2])
   *       .but.not.include.ordered.members([2, 3]);
   *
   * @name ordered
   * @namespace BDD
   * @api public
   */

  Assertion.addProperty('ordered', function () {
    flag(this, 'ordered', true);
  });

  /**
   * ### .any
   *
   * Causes all `.keys` assertions that follow in the chain to only require that
   * the target have at least one of the given keys. This is the opposite of
   * `.all`, which requires that the target have all of the given keys.
   *
   *     expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');
   *
   * See the `.keys` doc for guidance on when to use `.any` or `.all`.
   *
   * @name any
   * @namespace BDD
   * @api public
   */

  Assertion.addProperty('any', function () {
    flag(this, 'any', true);
    flag(this, 'all', false);
  });


  /**
   * ### .all
   *
   * Causes all `.keys` assertions that follow in the chain to require that the
   * target have all of the given keys. This is the opposite of `.any`, which
   * only requires that the target have at least one of the given keys.
   *
   *     expect({a: 1, b: 2}).to.have.all.keys('a', 'b');
   *
   * Note that `.all` is used by default when neither `.all` nor `.any` are
   * added earlier in the chain. However, it's often best to add `.all` anyway
   * because it improves readability.
   *
   * See the `.keys` doc for guidance on when to use `.any` or `.all`.
   *
   * @name all
   * @namespace BDD
   * @api public
   */

  Assertion.addProperty('all', function () {
    flag(this, 'all', true);
    flag(this, 'any', false);
  });

  /**
   * ### .a(type[, msg])
   *
   * Asserts that the target's type is equal to the given string `type`. Types
   * are case insensitive. See the `type-detect` project page for info on the
   * type detection algorithm: https://github.com/chaijs/type-detect.
   *
   *     expect('foo').to.be.a('string');
   *     expect({a: 1}).to.be.an('object');
   *     expect(null).to.be.a('null');
   *     expect(undefined).to.be.an('undefined');
   *     expect(new Error).to.be.an('error');
   *     expect(Promise.resolve()).to.be.a('promise');
   *     expect(new Float32Array).to.be.a('float32array');
   *     expect(Symbol()).to.be.a('symbol');
   *
   * `.a` supports objects that have a custom type set via `Symbol.toStringTag`.
   *
   *     var myObj = {
   *       [Symbol.toStringTag]: 'myCustomType'
   *     };
   *
   *     expect(myObj).to.be.a('myCustomType').but.not.an('object');
   *
   * It's often best to use `.a` to check a target's type before making more
   * assertions on the same target. That way, you avoid unexpected behavior from
   * any assertion that does different things based on the target's type.
   *
   *     expect([1, 2, 3]).to.be.an('array').that.includes(2);
   *     expect([]).to.be.an('array').that.is.empty;
   *
   * Add `.not` earlier in the chain to negate `.a`. However, it's often best to
   * assert that the target is the expected type, rather than asserting that it
   * isn't one of many unexpected types.
   *
   *     expect('foo').to.be.a('string'); // Recommended
   *     expect('foo').to.not.be.an('array'); // Not recommended
   *
   * `.a` accepts an optional `msg` argument which is a custom error message to
   * show when the assertion fails. The message can also be given as the second
   * argument to `expect`.
   *
   *     expect(1).to.be.a('string', 'nooo why fail??');
   *     expect(1, 'nooo why fail??').to.be.a('string');
   *
   * `.a` can also be used as a language chain to improve the readability of
   * your assertions. 
   *
   *     expect({b: 2}).to.have.a.property('b');
   *
   * The alias `.an` can be used interchangeably with `.a`.
   *
   * @name a
   * @alias an
   * @param {String} type
   * @param {String} msg _optional_
   * @namespace BDD
   * @api public
   */

  function an (type, msg) {
    if (msg) flag(this, 'message', msg);
    type = type.toLowerCase();
    var obj = flag(this, 'object')
      , article = ~[ 'a', 'e', 'i', 'o', 'u' ].indexOf(type.charAt(0)) ? 'an ' : 'a ';

    this.assert(
        type === _.type(obj).toLowerCase()
      , 'expected #{this} to be ' + article + type
      , 'expected #{this} not to be ' + article + type
    );
  }

  Assertion.addChainableMethod('an', an);
  Assertion.addChainableMethod('a', an);

  /**
   * ### .include(val[, msg])
   *
   * When the target is a string, `.include` asserts that the given string `val`
   * is a substring of the target.
   *
   *     expect('foobar').to.include('foo');
   *
   * When the target is an array, `.include` asserts that the given `val` is a
   * member of the target.
   *
   *     expect([1, 2, 3]).to.include(2);
   *
   * When the target is an object, `.include` asserts that the given object
   * `val`'s properties are a subset of the target's properties.
   *
   *     expect({a: 1, b: 2, c: 3}).to.include({a: 1, b: 2});
   *
   * When the target is a Set or WeakSet, `.include` asserts that the given `val` is a
   * member of the target. SameValueZero equality algorithm is used.
   *
   *     expect(new Set([1, 2])).to.include(2);
   *
   * When the target is a Map, `.include` asserts that the given `val` is one of
   * the values of the target. SameValueZero equality algorithm is used.
   *
   *     expect(new Map([['a', 1], ['b', 2]])).to.include(2);
   *
   * Because `.include` does different things based on the target's type, it's
   * important to check the target's type before using `.include`. See the `.a`
   * doc for info on testing a target's type.
   *
   *     expect([1, 2, 3]).to.be.an('array').that.includes(2);
   *
   * By default, strict (`===`) equality is used to compare array members and
   * object properties. Add `.deep` earlier in the chain to use deep equality
   * instead (WeakSet targets are not supported). See the `deep-eql` project
   * page for info on the deep equality algorithm: https://github.com/chaijs/deep-eql.
   *
   *     // Target array deeply (but not strictly) includes `{a: 1}`
   *     expect([{a: 1}]).to.deep.include({a: 1});
   *     expect([{a: 1}]).to.not.include({a: 1});
   *
   *     // Target object deeply (but not strictly) includes `x: {a: 1}`
   *     expect({x: {a: 1}}).to.deep.include({x: {a: 1}});
   *     expect({x: {a: 1}}).to.not.include({x: {a: 1}});
   *
   * By default, all of the target's properties are searched when working with
   * objects. This includes properties that are inherited and/or non-enumerable.
   * Add `.own` earlier in the chain to exclude the target's inherited
   * properties from the search.
   *
   *     Object.prototype.b = 2;
   *
   *     expect({a: 1}).to.own.include({a: 1});
   *     expect({a: 1}).to.include({b: 2}).but.not.own.include({b: 2});
   *
   * Note that a target object is always only searched for `val`'s own
   * enumerable properties.
   *
   * `.deep` and `.own` can be combined.
   *
   *     expect({a: {b: 2}}).to.deep.own.include({a: {b: 2}});
   *
   * Add `.nested` earlier in the chain to enable dot- and bracket-notation when
   * referencing nested properties.
   *
   *     expect({a: {b: ['x', 'y']}}).to.nested.include({'a.b[1]': 'y'});
   *
   * If `.` or `[]` are part of an actual property name, they can be escaped by
   * adding two backslashes before them.
   *
   *     expect({'.a': {'[b]': 2}}).to.nested.include({'\\.a.\\[b\\]': 2});
   *
   * `.deep` and `.nested` can be combined.
   *
   *     expect({a: {b: [{c: 3}]}}).to.deep.nested.include({'a.b[0]': {c: 3}});
   *
   * `.own` and `.nested` cannot be combined.
   *
   * Add `.not` earlier in the chain to negate `.include`.
   *
   *     expect('foobar').to.not.include('taco');
   *     expect([1, 2, 3]).to.not.include(4);
   * 
   * However, it's dangerous to negate `.include` when the target is an object.
   * The problem is that it creates uncertain expectations by asserting that the
   * target object doesn't have all of `val`'s key/value pairs but may or may
   * not have some of them. It's often best to identify the exact output that's
   * expected, and then write an assertion that only accepts that exact output.
   *
   * When the target object isn't even expected to have `val`'s keys, it's
   * often best to assert exactly that.
   *
   *     expect({c: 3}).to.not.have.any.keys('a', 'b'); // Recommended
   *     expect({c: 3}).to.not.include({a: 1, b: 2}); // Not recommended
   *
   * When the target object is expected to have `val`'s keys, it's often best to
   * assert that each of the properties has its expected value, rather than
   * asserting that each property doesn't have one of many unexpected values.
   *
   *     expect({a: 3, b: 4}).to.include({a: 3, b: 4}); // Recommended
   *     expect({a: 3, b: 4}).to.not.include({a: 1, b: 2}); // Not recommended
   *
   * `.include` accepts an optional `msg` argument which is a custom error
   * message to show when the assertion fails. The message can also be given as
   * the second argument to `expect`.
   *
   *     expect([1, 2, 3]).to.include(4, 'nooo why fail??');
   *     expect([1, 2, 3], 'nooo why fail??').to.include(4);
   *
   * `.include` can also be used as a language chain, causing all `.members` and
   * `.keys` assertions that follow in the chain to require the target to be a
   * superset of the expected set, rather than an identical set. Note that
   * `.members` ignores duplicates in the subset when `.include` is added.
   *
   *     // Target object's keys are a superset of ['a', 'b'] but not identical
   *     expect({a: 1, b: 2, c: 3}).to.include.all.keys('a', 'b');
   *     expect({a: 1, b: 2, c: 3}).to.not.have.all.keys('a', 'b');
   *
   *     // Target array is a superset of [1, 2] but not identical
   *     expect([1, 2, 3]).to.include.members([1, 2]);
   *     expect([1, 2, 3]).to.not.have.members([1, 2]);
   *
   *     // Duplicates in the subset are ignored
   *     expect([1, 2, 3]).to.include.members([1, 2, 2, 2]);
   *
   * Note that adding `.any` earlier in the chain causes the `.keys` assertion
   * to ignore `.include`.
   *
   *     // Both assertions are identical
   *     expect({a: 1}).to.include.any.keys('a', 'b');
   *     expect({a: 1}).to.have.any.keys('a', 'b');
   *
   * The aliases `.includes`, `.contain`, and `.contains` can be used
   * interchangeably with `.include`.
   *
   * @name include
   * @alias contain
   * @alias includes
   * @alias contains
   * @param {Mixed} val
   * @param {String} msg _optional_
   * @namespace BDD
   * @api public
   */

  function SameValueZero(a, b) {
    return (_.isNaN(a) && _.isNaN(b)) || a === b;
  }

  function includeChainingBehavior () {
    flag(this, 'contains', true);
  }

  function include (val, msg) {
    if (msg) flag(this, 'message', msg);
    
    var obj = flag(this, 'object')
      , objType = _.type(obj).toLowerCase()
      , flagMsg = flag(this, 'message')
      , negate = flag(this, 'negate')
      , ssfi = flag(this, 'ssfi')
      , isDeep = flag(this, 'deep')
      , descriptor = isDeep ? 'deep ' : '';

    flagMsg = flagMsg ? flagMsg + ': ' : '';

    var included = false;

    switch (objType) {
      case 'string':
        included = obj.indexOf(val) !== -1;
        break;

      case 'weakset':
        if (isDeep) {
          throw new AssertionError(
            flagMsg + 'unable to use .deep.include with WeakSet',
            undefined,
            ssfi
          );
        }

        included = obj.has(val);
        break;

      case 'map':
        var isEql = isDeep ? _.eql : SameValueZero;
        obj.forEach(function (item) {
          included = included || isEql(item, val);
        });
        break;

      case 'set':
        if (isDeep) {
          obj.forEach(function (item) {
            included = included || _.eql(item, val);
          });
        } else {
          included = obj.has(val);
        }
        break;

      case 'array':
        if (isDeep) {
          included = obj.some(function (item) {
            return _.eql(item, val);
          })
        } else {
          included = obj.indexOf(val) !== -1;
        }
        break;

      default:
        // This block is for asserting a subset of properties in an object.
        // `_.expectTypes` isn't used here because `.include` should work with
        // objects with a custom `@@toStringTag`.
        if (val !== Object(val)) {
          throw new AssertionError(
            flagMsg + 'object tested must be an array, a map, an object,'
              + ' a set, a string, or a weakset, but ' + objType + ' given',
            undefined,
            ssfi
          );
        }

        var props = Object.keys(val)
          , firstErr = null
          , numErrs = 0;
  
        props.forEach(function (prop) {
          var propAssertion = new Assertion(obj);
          _.transferFlags(this, propAssertion, true);
          flag(propAssertion, 'lockSsfi', true);
  
          if (!negate || props.length === 1) {
            propAssertion.property(prop, val[prop]);
            return;
          }
  
          try {
            propAssertion.property(prop, val[prop]);
          } catch (err) {
            if (!_.checkError.compatibleConstructor(err, AssertionError)) {
              throw err;
            }
            if (firstErr === null) firstErr = err;
            numErrs++;
          }
        }, this);
  
        // When validating .not.include with multiple properties, we only want
        // to throw an assertion error if all of the properties are included,
        // in which case we throw the first property assertion error that we
        // encountered.
        if (negate && props.length > 1 && numErrs === props.length) {
          throw firstErr;
        }
        return;
    }

    // Assert inclusion in collection or substring in a string.
    this.assert(
      included
      , 'expected #{this} to ' + descriptor + 'include ' + _.inspect(val)
      , 'expected #{this} to not ' + descriptor + 'include ' + _.inspect(val));
  }

  Assertion.addChainableMethod('include', include, includeChainingBehavior);
  Assertion.addChainableMethod('contain', include, includeChainingBehavior);
  Assertion.addChainableMethod('contains', include, includeChainingBehavior);
  Assertion.addChainableMethod('includes', include, includeChainingBehavior);

  /**
   * ### .ok
   *
   * Asserts that the target is loosely (`==`) equal to `true`. However, it's
   * often best to assert that the target is strictly (`===`) or deeply equal to
   * its expected value.
   *
   *     expect(1).to.equal(1); // Recommended
   *     expect(1).to.be.ok; // Not recommended
   *
   *     expect(true).to.be.true; // Recommended
   *     expect(true).to.be.ok; // Not recommended
   *
   * Add `.not` earlier in the chain to negate `.ok`.
   *
   *     expect(0).to.equal(0); // Recommended
   *     expect(0).to.not.be.ok; // Not recommended
   *
   *     expect(false).to.be.false; // Recommended
   *     expect(false).to.not.be.ok; // Not recommended
   *
   *     expect(null).to.be.null; // Recommended
   *     expect(null).to.not.be.ok; // Not recommended
   *
   *     expect(undefined).to.be.undefined; // Recommended
   *     expect(undefined).to.not.be.ok; // Not recommended
   *
   * A custom error message can be given as the second argument to `expect`.
   *
   *     expect(false, 'nooo why fail??').to.be.ok;
   *
   * @name ok
   * @namespace BDD
   * @api public
   */

  Assertion.addProperty('ok', function () {
    this.assert(
        flag(this, 'object')
      , 'expected #{this} to be truthy'
      , 'expected #{this} to be falsy');
  });

  /**
   * ### .true
   *
   * Asserts that the target is strictly (`===`) equal to `true`.
   *
   *     expect(true).to.be.true;
   *
   * Add `.not` earlier in the chain to negate `.true`. However, it's often best
   * to assert that the target is equal to its expected value, rather than not
   * equal to `true`.
   *
   *     expect(false).to.be.false; // Recommended
   *     expect(false).to.not.be.true; // Not recommended
   *
   *     expect(1).to.equal(1); // Recommended
   *     expect(1).to.not.be.true; // Not recommended
   *
   * A custom error message can be given as the second argument to `expect`.
   *
   *     expect(false, 'nooo why fail??').to.be.true;
   *
   * @name true
   * @namespace BDD
   * @api public
   */

  Assertion.addProperty('true', function () {
    this.assert(
        true === flag(this, 'object')
      , 'expected #{this} to be true'
      , 'expected #{this} to be false'
      , flag(this, 'negate') ? false : true
    );
  });

  /**
   * ### .false
   *
   * Asserts that the target is strictly (`===`) equal to `false`.
   *
   *     expect(false).to.be.false;
   *
   * Add `.not` earlier in the chain to negate `.false`. However, it's often
   * best to assert that the target is equal to its expected value, rather than
   * not equal to `false`.
   *
   *     expect(true).to.be.true; // Recommended
   *     expect(true).to.not.be.false; // Not recommended
   *
   *     expect(1).to.equal(1); // Recommended
   *     expect(1).to.not.be.false; // Not recommended
   *
   * A custom error message can be given as the second argument to `expect`.
   *
   *     expect(true, 'nooo why fail??').to.be.false;
   *
   * @name false
   * @namespace BDD
   * @api public
   */

  Assertion.addProperty('false', function () {
    this.assert(
        false === flag(this, 'object')
      , 'expected #{this} to be false'
      , 'expected #{this} to be true'
      , flag(this, 'negate') ? true : false
    );
  });

  /**
   * ### .null
   *
   * Asserts that the target is strictly (`===`) equal to `null`.
   *
   *     expect(null).to.be.null;
   *
   * Add `.not` earlier in the chain to negate `.null`. However, it's often best
   * to assert that the target is equal to its expected value, rather than not
   * equal to `null`.
   *
   *     expect(1).to.equal(1); // Recommended
   *     expect(1).to.not.be.null; // Not recommended
   *
   * A custom error message can be given as the second argument to `expect`.
   *
   *     expect(42, 'nooo why fail??').to.be.null;
   *
   * @name null
   * @namespace BDD
   * @api public
   */

  Assertion.addProperty('null', function () {
    this.assert(
        null === flag(this, 'object')
      , 'expected #{this} to be null'
      , 'expected #{this} not to be null'
    );
  });

  /**
   * ### .undefined
   *
   * Asserts that the target is strictly (`===`) equal to `undefined`.
   *
   *     expect(undefined).to.be.undefined;
   *
   * Add `.not` earlier in the chain to negate `.undefined`. However, it's often
   * best to assert that the target is equal to its expected value, rather than
   * not equal to `undefined`.
   *
   *     expect(1).to.equal(1); // Recommended
   *     expect(1).to.not.be.undefined; // Not recommended
   *
   * A custom error message can be given as the second argument to `expect`.
   *
   *     expect(42, 'nooo why fail??').to.be.undefined;
   *
   * @name undefined
   * @namespace BDD
   * @api public
   */

  Assertion.addProperty('undefined', function () {
    this.assert(
        undefined === flag(this, 'object')
      , 'expected #{this} to be undefined'
      , 'expected #{this} not to be undefined'
    );
  });

  /**
   * ### .NaN
   *
   * Asserts that the target is exactly `NaN`.
   *
   *     expect(NaN).to.be.NaN;
   *
   * Add `.not` earlier in the chain to negate `.NaN`. However, it's often best
   * to assert that the target is equal to its expected value, rather than not
   * equal to `NaN`.
   *
   *     expect('foo').to.equal('foo'); // Recommended
   *     expect('foo').to.not.be.NaN; // Not recommended
   *
   * A custom error message can be given as the second argument to `expect`.
   *
   *     expect(42, 'nooo why fail??').to.be.NaN;
   *
   * @name NaN
   * @namespace BDD
   * @api public
   */

  Assertion.addProperty('NaN', function () {
    this.assert(
        _.isNaN(flag(this, 'object'))
        , 'expected #{this} to be NaN'
        , 'expected #{this} not to be NaN'
    );
  });

  /**
   * ### .exist
   *
   * Asserts that the target is not strictly (`===`) equal to either `null` or
   * `undefined`. However, it's often best to assert that the target is equal to
   * its expected value.
   *
   *     expect(1).to.equal(1); // Recommended
   *     expect(1).to.exist; // Not recommended
   *
   *     expect(0).to.equal(0); // Recommended
   *     expect(0).to.exist; // Not recommended
   *
   * Add `.not` earlier in the chain to negate `.exist`.
   *
   *     expect(null).to.be.null; // Recommended
   *     expect(null).to.not.exist; // Not recommended
   *
   *     expect(undefined).to.be.undefined; // Recommended
   *     expect(undefined).to.not.exist; // Not recommended
   *
   * A custom error message can be given as the second argument to `expect`.
   *
   *     expect(null, 'nooo why fail??').to.exist;
   *
   * @name exist
   * @namespace BDD
   * @api public
   */

  Assertion.addProperty('exist', function () {
    var val = flag(this, 'object');
    this.assert(
        val !== null && val !== undefined
      , 'expected #{this} to exist'
      , 'expected #{this} to not exist'
    );
  });

  /**
   * ### .empty
   *
   * When the target is a string or array, `.empty` asserts that the target's
   * `length` property is strictly (`===`) equal to `0`.
   *
   *     expect([]).to.be.empty;
   *     expect('').to.be.empty;
   *
   * When the target is a map or set, `.empty` asserts that the target's `size`
   * property is strictly equal to `0`.
   *
   *     expect(new Set()).to.be.empty;
   *     expect(new Map()).to.be.empty;
   *
   * When the target is a non-function object, `.empty` asserts that the target
   * doesn't have any own enumerable properties. Properties with Symbol-based
   * keys are excluded from the count.
   *
   *     expect({}).to.be.empty;
   *
   * Because `.empty` does different things based on the target's type, it's
   * important to check the target's type before using `.empty`. See the `.a`
   * doc for info on testing a target's type.
   *
   *     expect([]).to.be.an('array').that.is.empty;
   *
   * Add `.not` earlier in the chain to negate `.empty`. However, it's often
   * best to assert that the target contains its expected number of values,
   * rather than asserting that it's not empty.
   *
   *     expect([1, 2, 3]).to.have.lengthOf(3); // Recommended
   *     expect([1, 2, 3]).to.not.be.empty; // Not recommended
   *
   *     expect(new Set([1, 2, 3])).to.have.property('size', 3); // Recommended
   *     expect(new Set([1, 2, 3])).to.not.be.empty; // Not recommended
   *
   *     expect(Object.keys({a: 1})).to.have.lengthOf(1); // Recommended
   *     expect({a: 1}).to.not.be.empty; // Not recommended
   *
   * A custom error message can be given as the second argument to `expect`.
   *
   *     expect([1, 2, 3], 'nooo why fail??').to.be.empty;
   *
   * @name empty
   * @namespace BDD
   * @api public
   */

  Assertion.addProperty('empty', function () {
    var val = flag(this, 'object')
      , ssfi = flag(this, 'ssfi')
      , flagMsg = flag(this, 'message')
      , itemsCount;

    flagMsg = flagMsg ? flagMsg + ': ' : '';

    switch (_.type(val).toLowerCase()) {
      case 'array':
      case 'string':
        itemsCount = val.length;
        break;
      case 'map':
      case 'set':
        itemsCount = val.size;
        break;
      case 'weakmap':
      case 'weakset':
        throw new AssertionError(
          flagMsg + '.empty was passed a weak collection',
          undefined,
          ssfi
        );
      case 'function':
        var msg = flagMsg + '.empty was passed a function ' + _.getName(val);
        throw new AssertionError(msg.trim(), undefined, ssfi);
      default:
        if (val !== Object(val)) {
          throw new AssertionError(
            flagMsg + '.empty was passed non-string primitive ' + _.inspect(val),
            undefined,
            ssfi
          );
        }
        itemsCount = Object.keys(val).length;
    }

    this.assert(
        0 === itemsCount
      , 'expected #{this} to be empty'
      , 'expected #{this} not to be empty'
    );
  });

  /**
   * ### .arguments
   *
   * Asserts that the target is an `arguments` object.
   *
   *     function test () {
   *       expect(arguments).to.be.arguments;
   *     }
   *
   *     test();
   *
   * Add `.not` earlier in the chain to negate `.arguments`. However, it's often
   * best to assert which type the target is expected to be, rather than
   * asserting that its not an `arguments` object.
   *
   *     expect('foo').to.be.a('string'); // Recommended
   *     expect('foo').to.not.be.arguments; // Not recommended
   *
   * A custom error message can be given as the second argument to `expect`.
   *
   *     expect({}, 'nooo why fail??').to.be.arguments;
   *
   * The alias `.Arguments` can be used interchangeably with `.arguments`.
   *
   * @name arguments
   * @alias Arguments
   * @namespace BDD
   * @api public
   */

  function checkArguments () {
    var obj = flag(this, 'object')
      , type = _.type(obj);
    this.assert(
        'Arguments' === type
      , 'expected #{this} to be arguments but got ' + type
      , 'expected #{this} to not be arguments'
    );
  }

  Assertion.addProperty('arguments', checkArguments);
  Assertion.addProperty('Arguments', checkArguments);

  /**
   * ### .equal(val[, msg])
   *
   * Asserts that the target is strictly (`===`) equal to the given `val`.
   *
   *     expect(1).to.equal(1);
   *     expect('foo').to.equal('foo');
   * 
   * Add `.deep` earlier in the chain to use deep equality instead. See the
   * `deep-eql` project page for info on the deep equality algorithm:
   * https://github.com/chaijs/deep-eql.
   *
   *     // Target object deeply (but not strictly) equals `{a: 1}`
   *     expect({a: 1}).to.deep.equal({a: 1});
   *     expect({a: 1}).to.not.equal({a: 1});
   *
   *     // Target array deeply (but not strictly) equals `[1, 2]`
   *     expect([1, 2]).to.deep.equal([1, 2]);
   *     expect([1, 2]).to.not.equal([1, 2]);
   *
   * Add `.not` earlier in the chain to negate `.equal`. However, it's often
   * best to assert that the target is equal to its expected value, rather than
   * not equal to one of countless unexpected values.
   *
   *     expect(1).to.equal(1); // Recommended
   *     expect(1).to.not.equal(2); // Not recommended
   *
   * `.equal` accepts an optional `msg` argument which is a custom error message
   * to show when the assertion fails. The message can also be given as the
   * second argument to `expect`.
   *
   *     expect(1).to.equal(2, 'nooo why fail??');
   *     expect(1, 'nooo why fail??').to.equal(2);
   *
   * The aliases `.equals` and `eq` can be used interchangeably with `.equal`.
   *
   * @name equal
   * @alias equals
   * @alias eq
   * @param {Mixed} val
   * @param {String} msg _optional_
   * @namespace BDD
   * @api public
   */

  function assertEqual (val, msg) {
    if (msg) flag(this, 'message', msg);
    var obj = flag(this, 'object');
    if (flag(this, 'deep')) {
      return this.eql(val);
    } else {
      this.assert(
          val === obj
        , 'expected #{this} to equal #{exp}'
        , 'expected #{this} to not equal #{exp}'
        , val
        , this._obj
        , true
      );
    }
  }

  Assertion.addMethod('equal', assertEqual);
  Assertion.addMethod('equals', assertEqual);
  Assertion.addMethod('eq', assertEqual);

  /**
   * ### .eql(obj[, msg])
   *
   * Asserts that the target is deeply equal to the given `obj`. See the
   * `deep-eql` project page for info on the deep equality algorithm:
   * https://github.com/chaijs/deep-eql.
   *
   *     // Target object is deeply (but not strictly) equal to {a: 1}
   *     expect({a: 1}).to.eql({a: 1}).but.not.equal({a: 1});
   *
   *     // Target array is deeply (but not strictly) equal to [1, 2]
   *     expect([1, 2]).to.eql([1, 2]).but.not.equal([1, 2]);
   *
   * Add `.not` earlier in the chain to negate `.eql`. However, it's often best
   * to assert that the target is deeply equal to its expected value, rather
   * than not deeply equal to one of countless unexpected values.
   *
   *     expect({a: 1}).to.eql({a: 1}); // Recommended
   *     expect({a: 1}).to.not.eql({b: 2}); // Not recommended
   *
   * `.eql` accepts an optional `msg` argument which is a custom error message
   * to show when the assertion fails. The message can also be given as the
   * second argument to `expect`.
   *
   *     expect({a: 1}).to.eql({b: 2}, 'nooo why fail??');
   *     expect({a: 1}, 'nooo why fail??').to.eql({b: 2});
   *
   * The alias `.eqls` can be used interchangeably with `.eql`.
   *
   * The `.deep.equal` assertion is almost identical to `.eql` but with one
   * difference: `.deep.equal` causes deep equality comparisons to also be used
   * for any other assertions that follow in the chain.
   *
   * @name eql
   * @alias eqls
   * @param {Mixed} obj
   * @param {String} msg _optional_
   * @namespace BDD
   * @api public
   */

  function assertEql(obj, msg) {
    if (msg) flag(this, 'message', msg);
    this.assert(
        _.eql(obj, flag(this, 'object'))
      , 'expected #{this} to deeply equal #{exp}'
      , 'expected #{this} to not deeply equal #{exp}'
      , obj
      , this._obj
      , true
    );
  }

  Assertion.addMethod('eql', assertEql);
  Assertion.addMethod('eqls', assertEql);

  /**
   * ### .above(n[, msg])
   *
   * Asserts that the target is a number or a date greater than the given number or date `n` respectively.
   * However, it's often best to assert that the target is equal to its expected
   * value.
   *
   *     expect(2).to.equal(2); // Recommended
   *     expect(2).to.be.above(1); // Not recommended
   *
   * Add `.lengthOf` earlier in the chain to assert that the value of the
   * target's `length` property is greater than the given number `n`.
   *
   *     expect('foo').to.have.lengthOf(3); // Recommended
   *     expect('foo').to.have.lengthOf.above(2); // Not recommended
   *
   *     expect([1, 2, 3]).to.have.lengthOf(3); // Recommended
   *     expect([1, 2, 3]).to.have.lengthOf.above(2); // Not recommended
   *
   * Add `.not` earlier in the chain to negate `.above`.
   *
   *     expect(2).to.equal(2); // Recommended
   *     expect(1).to.not.be.above(2); // Not recommended
   *
   * `.above` accepts an optional `msg` argument which is a custom error message
   * to show when the assertion fails. The message can also be given as the
   * second argument to `expect`.
   *
   *     expect(1).to.be.above(2, 'nooo why fail??');
   *     expect(1, 'nooo why fail??').to.be.above(2);
   *
   * The aliases `.gt` and `.greaterThan` can be used interchangeably with
   * `.above`.
   *
   * @name above
   * @alias gt
   * @alias greaterThan
   * @param {Number} n
   * @param {String} msg _optional_
   * @namespace BDD
   * @api public
   */

  function assertAbove (n, msg) {
    if (msg) flag(this, 'message', msg);
    var obj = flag(this, 'object')
      , doLength = flag(this, 'doLength')
      , flagMsg = flag(this, 'message')
      , msgPrefix = ((flagMsg) ? flagMsg + ': ' : '')
      , ssfi = flag(this, 'ssfi')
      , objType = _.type(obj).toLowerCase()
      , nType = _.type(n).toLowerCase()
      , shouldThrow = true;

    if (doLength) {
      new Assertion(obj, flagMsg, ssfi, true).to.have.property('length');
    }
    
    if (!doLength && (objType === 'date' && nType !== 'date')) {
      errorMessage = msgPrefix + 'the argument to above must be a date';
    } else if (nType !== 'number' && (doLength || objType === 'number')) {
      errorMessage = msgPrefix + 'the argument to above must be a number';
    } else if (!doLength && (objType !== 'date' && objType !== 'number')) {
      var printObj = (objType === 'string') ? "'" + obj + "'" : obj;
      errorMessage = msgPrefix + 'expected ' + printObj + ' to be a number or a date';
    } else {
      shouldThrow = false;
    }

    if (shouldThrow) {
      throw new AssertionError(errorMessage, undefined, ssfi);
    }

    if (doLength) {
      var len = obj.length;
      this.assert(
          len > n
        , 'expected #{this} to have a length above #{exp} but got #{act}'
        , 'expected #{this} to not have a length above #{exp}'
        , n
        , len
      );
    } else {
      this.assert(
          obj > n
        , 'expected #{this} to be above #{exp}'
        , 'expected #{this} to be at most #{exp}'
        , n
      );
    }
  }

  Assertion.addMethod('above', assertAbove);
  Assertion.addMethod('gt', assertAbove);
  Assertion.addMethod('greaterThan', assertAbove);

  /**
   * ### .least(n[, msg])
   *
   * Asserts that the target is a number or a date greater than or equal to the given
   * number or date `n` respectively. However, it's often best to assert that the target is equal to
   * its expected value.
   *
   *     expect(2).to.equal(2); // Recommended
   *     expect(2).to.be.at.least(1); // Not recommended
   *     expect(2).to.be.at.least(2); // Not recommended
   *
   * Add `.lengthOf` earlier in the chain to assert that the value of the
   * target's `length` property is greater than or equal to the given number
   * `n`.
   *
   *     expect('foo').to.have.lengthOf(3); // Recommended
   *     expect('foo').to.have.lengthOf.at.least(2); // Not recommended
   *
   *     expect([1, 2, 3]).to.have.lengthOf(3); // Recommended
   *     expect([1, 2, 3]).to.have.lengthOf.at.least(2); // Not recommended
   *
   * Add `.not` earlier in the chain to negate `.least`.
   *
   *     expect(1).to.equal(1); // Recommended
   *     expect(1).to.not.be.at.least(2); // Not recommended
   *
   * `.least` accepts an optional `msg` argument which is a custom error message
   * to show when the assertion fails. The message can also be given as the
   * second argument to `expect`.
   *
   *     expect(1).to.be.at.least(2, 'nooo why fail??');
   *     expect(1, 'nooo why fail??').to.be.at.least(2);
   *
   * The alias `.gte` can be used interchangeably with `.least`.
   *
   * @name least
   * @alias gte
   * @param {Number} n
   * @param {String} msg _optional_
   * @namespace BDD
   * @api public
   */

  function assertLeast (n, msg) {
    if (msg) flag(this, 'message', msg);
    var obj = flag(this, 'object')
      , doLength = flag(this, 'doLength')
      , flagMsg = flag(this, 'message')
      , msgPrefix = ((flagMsg) ? flagMsg + ': ' : '')
      , ssfi = flag(this, 'ssfi')
      , objType = _.type(obj).toLowerCase()
      , nType = _.type(n).toLowerCase()
      , shouldThrow = true;

    if (doLength) {
      new Assertion(obj, flagMsg, ssfi, true).to.have.property('length');
    }

    if (!doLength && (objType === 'date' && nType !== 'date')) {
      errorMessage = msgPrefix + 'the argument to least must be a date';
    } else if (nType !== 'number' && (doLength || objType === 'number')) {
      errorMessage = msgPrefix + 'the argument to least must be a number';
    } else if (!doLength && (objType !== 'date' && objType !== 'number')) {
      var printObj = (objType === 'string') ? "'" + obj + "'" : obj;
      errorMessage = msgPrefix + 'expected ' + printObj + ' to be a number or a date';
    } else {
      shouldThrow = false;
    }

    if (shouldThrow) {
      throw new AssertionError(errorMessage, undefined, ssfi);
    }

    if (doLength) {
      var len = obj.length;
      this.assert(
          len >= n
        , 'expected #{this} to have a length at least #{exp} but got #{act}'
        , 'expected #{this} to have a length below #{exp}'
        , n
        , len
      );
    } else {
      this.assert(
          obj >= n
        , 'expected #{this} to be at least #{exp}'
        , 'expected #{this} to be below #{exp}'
        , n
      );
    }
  }

  Assertion.addMethod('least', assertLeast);
  Assertion.addMethod('gte', assertLeast);

  /**
   * ### .below(n[, msg])
   *
   * Asserts that the target is a number or a date less than the given number or date `n` respectively.
   * However, it's often best to assert that the target is equal to its expected
   * value.
   *
   *     expect(1).to.equal(1); // Recommended
   *     expect(1).to.be.below(2); // Not recommended
   *
   * Add `.lengthOf` earlier in the chain to assert that the value of the
   * target's `length` property is less than the given number `n`.
   *
   *     expect('foo').to.have.lengthOf(3); // Recommended
   *     expect('foo').to.have.lengthOf.below(4); // Not recommended
   *
   *     expect([1, 2, 3]).to.have.length(3); // Recommended
   *     expect([1, 2, 3]).to.have.lengthOf.below(4); // Not recommended
   *
   * Add `.not` earlier in the chain to negate `.below`.
   *
   *     expect(2).to.equal(2); // Recommended
   *     expect(2).to.not.be.below(1); // Not recommended
   *
   * `.below` accepts an optional `msg` argument which is a custom error message
   * to show when the assertion fails. The message can also be given as the
   * second argument to `expect`.
   *
   *     expect(2).to.be.below(1, 'nooo why fail??');
   *     expect(2, 'nooo why fail??').to.be.below(1);
   *
   * The aliases `.lt` and `.lessThan` can be used interchangeably with
   * `.below`.
   *
   * @name below
   * @alias lt
   * @alias lessThan
   * @param {Number} n
   * @param {String} msg _optional_
   * @namespace BDD
   * @api public
   */

  function assertBelow (n, msg) {
    if (msg) flag(this, 'message', msg);
    var obj = flag(this, 'object')
      , doLength = flag(this, 'doLength')
      , flagMsg = flag(this, 'message')
      , msgPrefix = ((flagMsg) ? flagMsg + ': ' : '')
      , ssfi = flag(this, 'ssfi')
      , objType = _.type(obj).toLowerCase()
      , nType = _.type(n).toLowerCase()
      , shouldThrow = true;

    if (doLength) {
      new Assertion(obj, flagMsg, ssfi, true).to.have.property('length');
    }

    if (!doLength && (objType === 'date' && nType !== 'date')) {
      errorMessage = msgPrefix + 'the argument to below must be a date';
    } else if (nType !== 'number' && (doLength || objType === 'number')) {
      errorMessage = msgPrefix + 'the argument to below must be a number';
    } else if (!doLength && (objType !== 'date' && objType !== 'number')) {
      var printObj = (objType === 'string') ? "'" + obj + "'" : obj;
      errorMessage = msgPrefix + 'expected ' + printObj + ' to be a number or a date';
    } else {
      shouldThrow = false;
    }

    if (shouldThrow) {
      throw new AssertionError(errorMessage, undefined, ssfi);
    }

    if (doLength) {
      var len = obj.length;
      this.assert(
          len < n
        , 'expected #{this} to have a length below #{exp} but got #{act}'
        , 'expected #{this} to not have a length below #{exp}'
        , n
        , len
      );
    } else {
      this.assert(
          obj < n
        , 'expected #{this} to be below #{exp}'
        , 'expected #{this} to be at least #{exp}'
        , n
      );
    }
  }

  Assertion.addMethod('below', assertBelow);
  Assertion.addMethod('lt', assertBelow);
  Assertion.addMethod('lessThan', assertBelow);

  /**
   * ### .most(n[, msg])
   *
   * Asserts that the target is a number or a date less than or equal to the given number
   * or date `n` respectively. However, it's often best to assert that the target is equal to its
   * expected value.
   *
   *     expect(1).to.equal(1); // Recommended
   *     expect(1).to.be.at.most(2); // Not recommended
   *     expect(1).to.be.at.most(1); // Not recommended
   *
   * Add `.lengthOf` earlier in the chain to assert that the value of the
   * target's `length` property is less than or equal to the given number `n`.
   *
   *     expect('foo').to.have.lengthOf(3); // Recommended
   *     expect('foo').to.have.lengthOf.at.most(4); // Not recommended
   *
   *     expect([1, 2, 3]).to.have.lengthOf(3); // Recommended
   *     expect([1, 2, 3]).to.have.lengthOf.at.most(4); // Not recommended
   *
   * Add `.not` earlier in the chain to negate `.most`.
   *
   *     expect(2).to.equal(2); // Recommended
   *     expect(2).to.not.be.at.most(1); // Not recommended
   *
   * `.most` accepts an optional `msg` argument which is a custom error message
   * to show when the assertion fails. The message can also be given as the
   * second argument to `expect`.
   *
   *     expect(2).to.be.at.most(1, 'nooo why fail??');
   *     expect(2, 'nooo why fail??').to.be.at.most(1);
   *
   * The alias `.lte` can be used interchangeably with `.most`.
   *
   * @name most
   * @alias lte
   * @param {Number} n
   * @param {String} msg _optional_
   * @namespace BDD
   * @api public
   */

  function assertMost (n, msg) {
    if (msg) flag(this, 'message', msg);
    var obj = flag(this, 'object')
      , doLength = flag(this, 'doLength')
      , flagMsg = flag(this, 'message')
      , msgPrefix = ((flagMsg) ? flagMsg + ': ' : '')
      , ssfi = flag(this, 'ssfi')
      , objType = _.type(obj).toLowerCase()
      , nType = _.type(n).toLowerCase()
      , shouldThrow = true;

    if (doLength) {
      new Assertion(obj, flagMsg, ssfi, true).to.have.property('length');
    }
    
    if (!doLength && (objType === 'date' && nType !== 'date')) {
      errorMessage = msgPrefix + 'the argument to most must be a date';
    } else if (nType !== 'number' && (doLength || objType === 'number')) {
      errorMessage = msgPrefix + 'the argument to most must be a number';
    } else if (!doLength && (objType !== 'date' && objType !== 'number')) {
      var printObj = (objType === 'string') ? "'" + obj + "'" : obj;
      errorMessage = msgPrefix + 'expected ' + printObj + ' to be a number or a date';
    } else {
      shouldThrow = false;
    }

    if (shouldThrow) {
      throw new AssertionError(errorMessage, undefined, ssfi);
    }

    if (doLength) {
      var len = obj.length;
      this.assert(
          len <= n
        , 'expected #{this} to have a length at most #{exp} but got #{act}'
        , 'expected #{this} to have a length above #{exp}'
        , n
        , len
      );
    } else {
      this.assert(
          obj <= n
        , 'expected #{this} to be at most #{exp}'
        , 'expected #{this} to be above #{exp}'
        , n
      );
    }
  }

  Assertion.addMethod('most', assertMost);
  Assertion.addMethod('lte', assertMost);

  /**
   * ### .within(start, finish[, msg])
   *
   * Asserts that the target is a number or a date greater than or equal to the given
   * number or date `start`, and less than or equal to the given number or date `finish` respectively.
   * However, it's often best to assert that the target is equal to its expected
   * value.
   *
   *     expect(2).to.equal(2); // Recommended
   *     expect(2).to.be.within(1, 3); // Not recommended
   *     expect(2).to.be.within(2, 3); // Not recommended
   *     expect(2).to.be.within(1, 2); // Not recommended
   *
   * Add `.lengthOf` earlier in the chain to assert that the value of the
   * target's `length` property is greater than or equal to the given number
   * `start`, and less than or equal to the given number `finish`.
   *
   *     expect('foo').to.have.lengthOf(3); // Recommended
   *     expect('foo').to.have.lengthOf.within(2, 4); // Not recommended
   *
   *     expect([1, 2, 3]).to.have.lengthOf(3); // Recommended
   *     expect([1, 2, 3]).to.have.lengthOf.within(2, 4); // Not recommended
   *
   * Add `.not` earlier in the chain to negate `.within`.
   *
   *     expect(1).to.equal(1); // Recommended
   *     expect(1).to.not.be.within(2, 4); // Not recommended
   *
   * `.within` accepts an optional `msg` argument which is a custom error
   * message to show when the assertion fails. The message can also be given as
   * the second argument to `expect`.
   *
   *     expect(4).to.be.within(1, 3, 'nooo why fail??');
   *     expect(4, 'nooo why fail??').to.be.within(1, 3);
   *
   * @name within
   * @param {Number} start lower bound inclusive
   * @param {Number} finish upper bound inclusive
   * @param {String} msg _optional_
   * @namespace BDD
   * @api public
   */

  Assertion.addMethod('within', function (start, finish, msg) {
    if (msg) flag(this, 'message', msg);
    var obj = flag(this, 'object')
      , doLength = flag(this, 'doLength')
      , flagMsg = flag(this, 'message')
      , msgPrefix = ((flagMsg) ? flagMsg + ': ' : '')
      , ssfi = flag(this, 'ssfi')
      , objType = _.type(obj).toLowerCase()
      , startType = _.type(start).toLowerCase()
      , finishType = _.type(finish).toLowerCase()
      , shouldThrow = true
      , range = (startType === 'date' && finishType === 'date')
          ? start.toUTCString() + '..' + finish.toUTCString()
          : start + '..' + finish;

    if (doLength) {
      new Assertion(obj, flagMsg, ssfi, true).to.have.property('length');
    }

    if (!doLength && (objType === 'date' && (startType !== 'date' || finishType !== 'date'))) {
      errorMessage = msgPrefix + 'the arguments to within must be dates';
    } else if ((startType !== 'number' || finishType !== 'number') && (doLength || objType === 'number')) {
      errorMessage = msgPrefix + 'the arguments to within must be numbers';
    } else if (!doLength && (objType !== 'date' && objType !== 'number')) {
      var printObj = (objType === 'string') ? "'" + obj + "'" : obj;
      errorMessage = msgPrefix + 'expected ' + printObj + ' to be a number or a date';
    } else {
      shouldThrow = false;
    }

    if (shouldThrow) {
      throw new AssertionError(errorMessage, undefined, ssfi);
    }

    if (doLength) {
      var len = obj.length;
      this.assert(
          len >= start && len <= finish
        , 'expected #{this} to have a length within ' + range
        , 'expected #{this} to not have a length within ' + range
      );
    } else {
      this.assert(
          obj >= start && obj <= finish
        , 'expected #{this} to be within ' + range
        , 'expected #{this} to not be within ' + range
      );
    }
  });

  /**
   * ### .instanceof(constructor[, msg])
   *
   * Asserts that the target is an instance of the given `constructor`.
   *
   *     function Cat () { }
   *
   *     expect(new Cat()).to.be.an.instanceof(Cat);
   *     expect([1, 2]).to.be.an.instanceof(Array);
   *
   * Add `.not` earlier in the chain to negate `.instanceof`.
   *
   *     expect({a: 1}).to.not.be.an.instanceof(Array);
   *
   * `.instanceof` accepts an optional `msg` argument which is a custom error
   * message to show when the assertion fails. The message can also be given as
   * the second argument to `expect`.
   *
   *     expect(1).to.be.an.instanceof(Array, 'nooo why fail??');
   *     expect(1, 'nooo why fail??').to.be.an.instanceof(Array);
   *
   * Due to limitations in ES5, `.instanceof` may not always work as expected
   * when using a transpiler such as Babel or TypeScript. In particular, it may
   * produce unexpected results when subclassing built-in object such as
   * `Array`, `Error`, and `Map`. See your transpiler's docs for details:
   *
   * - ([Babel](https://babeljs.io/docs/usage/caveats/#classes))
   * - ([TypeScript](https://github.com/Microsoft/TypeScript/wiki/Breaking-Changes#extending-built-ins-like-error-array-and-map-may-no-longer-work))
   *
   * The alias `.instanceOf` can be used interchangeably with `.instanceof`.
   *
   * @name instanceof
   * @param {Constructor} constructor
   * @param {String} msg _optional_
   * @alias instanceOf
   * @namespace BDD
   * @api public
   */

  function assertInstanceOf (constructor, msg) {
    if (msg) flag(this, 'message', msg);

    var target = flag(this, 'object')
    var ssfi = flag(this, 'ssfi');
    var flagMsg = flag(this, 'message');

    try {
      var isInstanceOf = target instanceof constructor;
    } catch (err) {
      if (err instanceof TypeError) {
        flagMsg = flagMsg ? flagMsg + ': ' : '';
        throw new AssertionError(
          flagMsg + 'The instanceof assertion needs a constructor but '
            + _.type(constructor) + ' was given.',
          undefined,
          ssfi
        );
      }
      throw err;
    }

    var name = _.getName(constructor);
    if (name === null) {
      name = 'an unnamed constructor';
    }

    this.assert(
        isInstanceOf
      , 'expected #{this} to be an instance of ' + name
      , 'expected #{this} to not be an instance of ' + name
    );
  };

  Assertion.addMethod('instanceof', assertInstanceOf);
  Assertion.addMethod('instanceOf', assertInstanceOf);

  /**
   * ### .property(name[, val[, msg]])
   *
   * Asserts that the target has a property with the given key `name`.
   *
   *     expect({a: 1}).to.have.property('a');
   *
   * When `val` is provided, `.property` also asserts that the property's value
   * is equal to the given `val`.
   *
   *     expect({a: 1}).to.have.property('a', 1);
   *
   * By default, strict (`===`) equality is used. Add `.deep` earlier in the
   * chain to use deep equality instead. See the `deep-eql` project page for
   * info on the deep equality algorithm: https://github.com/chaijs/deep-eql.
   *
   *     // Target object deeply (but not strictly) has property `x: {a: 1}`
   *     expect({x: {a: 1}}).to.have.deep.property('x', {a: 1});
   *     expect({x: {a: 1}}).to.not.have.property('x', {a: 1});
   *
   * The target's enumerable and non-enumerable properties are always included
   * in the search. By default, both own and inherited properties are included.
   * Add `.own` earlier in the chain to exclude inherited properties from the
   * search.
   *
   *     Object.prototype.b = 2;
   *
   *     expect({a: 1}).to.have.own.property('a');
   *     expect({a: 1}).to.have.own.property('a', 1);
   *     expect({a: 1}).to.have.property('b').but.not.own.property('b'); 
   *
   * `.deep` and `.own` can be combined.
   *
   *     expect({x: {a: 1}}).to.have.deep.own.property('x', {a: 1});
   *
   * Add `.nested` earlier in the chain to enable dot- and bracket-notation when
   * referencing nested properties.
   *
   *     expect({a: {b: ['x', 'y']}}).to.have.nested.property('a.b[1]');
   *     expect({a: {b: ['x', 'y']}}).to.have.nested.property('a.b[1]', 'y');
   *
   * If `.` or `[]` are part of an actual property name, they can be escaped by
   * adding two backslashes before them.
   *
   *     expect({'.a': {'[b]': 'x'}}).to.have.nested.property('\\.a.\\[b\\]');
   *
   * `.deep` and `.nested` can be combined.
   *
   *     expect({a: {b: [{c: 3}]}})
   *       .to.have.deep.nested.property('a.b[0]', {c: 3});
   *
   * `.own` and `.nested` cannot be combined.
   *
   * Add `.not` earlier in the chain to negate `.property`.
   *
   *     expect({a: 1}).to.not.have.property('b');
   * 
   * However, it's dangerous to negate `.property` when providing `val`. The
   * problem is that it creates uncertain expectations by asserting that the
   * target either doesn't have a property with the given key `name`, or that it
   * does have a property with the given key `name` but its value isn't equal to
   * the given `val`. It's often best to identify the exact output that's
   * expected, and then write an assertion that only accepts that exact output.
   *
   * When the target isn't expected to have a property with the given key
   * `name`, it's often best to assert exactly that.
   *
   *     expect({b: 2}).to.not.have.property('a'); // Recommended
   *     expect({b: 2}).to.not.have.property('a', 1); // Not recommended
   *
   * When the target is expected to have a property with the given key `name`,
   * it's often best to assert that the property has its expected value, rather
   * than asserting that it doesn't have one of many unexpected values.
   *
   *     expect({a: 3}).to.have.property('a', 3); // Recommended
   *     expect({a: 3}).to.not.have.property('a', 1); // Not recommended
   *
   * `.property` changes the target of any assertions that follow in the chain
   * to be the value of the property from the original target object.
   *
   *     expect({a: 1}).to.have.property('a').that.is.a('number');
   *
   * `.property` accepts an optional `msg` argument which is a custom error
   * message to show when the assertion fails. The message can also be given as
   * the second argument to `expect`. When not providing `val`, only use the
   * second form.
   *
   *     // Recommended
   *     expect({a: 1}).to.have.property('a', 2, 'nooo why fail??');
   *     expect({a: 1}, 'nooo why fail??').to.have.property('a', 2);
   *     expect({a: 1}, 'nooo why fail??').to.have.property('b');
   *
   *     // Not recommended
   *     expect({a: 1}).to.have.property('b', undefined, 'nooo why fail??');
   * 
   * The above assertion isn't the same thing as not providing `val`. Instead,
   * it's asserting that the target object has a `b` property that's equal to
   * `undefined`.
   *
   * The assertions `.ownProperty` and `.haveOwnProperty` can be used
   * interchangeably with `.own.property`.
   *
   * @name property
   * @param {String} name
   * @param {Mixed} val (optional)
   * @param {String} msg _optional_
   * @returns value of property for chaining
   * @namespace BDD
   * @api public
   */

  function assertProperty (name, val, msg) {
    if (msg) flag(this, 'message', msg);

    var isNested = flag(this, 'nested')
      , isOwn = flag(this, 'own')
      , flagMsg = flag(this, 'message')
      , obj = flag(this, 'object')
      , ssfi = flag(this, 'ssfi');

    if (isNested && isOwn) {
      flagMsg = flagMsg ? flagMsg + ': ' : '';
      throw new AssertionError(
        flagMsg + 'The "nested" and "own" flags cannot be combined.',
        undefined,
        ssfi
      );
    }

    if (obj === null || obj === undefined) {
      flagMsg = flagMsg ? flagMsg + ': ' : '';
      throw new AssertionError(
        flagMsg + 'Target cannot be null or undefined.',
        undefined,
        ssfi
      );
    }

    var isDeep = flag(this, 'deep')
      , negate = flag(this, 'negate')
      , pathInfo = isNested ? _.getPathInfo(obj, name) : null
      , value = isNested ? pathInfo.value : obj[name];

    var descriptor = '';
    if (isDeep) descriptor += 'deep ';
    if (isOwn) descriptor += 'own ';
    if (isNested) descriptor += 'nested ';
    descriptor += 'property ';

    var hasProperty;
    if (isOwn) hasProperty = Object.prototype.hasOwnProperty.call(obj, name);
    else if (isNested) hasProperty = pathInfo.exists;
    else hasProperty = _.hasProperty(obj, name);

    // When performing a negated assertion for both name and val, merely having
    // a property with the given name isn't enough to cause the assertion to
    // fail. It must both have a property with the given name, and the value of
    // that property must equal the given val. Therefore, skip this assertion in
    // favor of the next.
    if (!negate || arguments.length === 1) {
      this.assert(
          hasProperty
        , 'expected #{this} to have ' + descriptor + _.inspect(name)
        , 'expected #{this} to not have ' + descriptor + _.inspect(name));
    }

    if (arguments.length > 1) {
      this.assert(
          hasProperty && (isDeep ? _.eql(val, value) : val === value)
        , 'expected #{this} to have ' + descriptor + _.inspect(name) + ' of #{exp}, but got #{act}'
        , 'expected #{this} to not have ' + descriptor + _.inspect(name) + ' of #{act}'
        , val
        , value
      );
    }

    flag(this, 'object', value);
  }

  Assertion.addMethod('property', assertProperty);

  function assertOwnProperty (name, value, msg) {
    flag(this, 'own', true);
    assertProperty.apply(this, arguments);
  }

  Assertion.addMethod('ownProperty', assertOwnProperty);
  Assertion.addMethod('haveOwnProperty', assertOwnProperty);

  /**
   * ### .ownPropertyDescriptor(name[, descriptor[, msg]])
   *
   * Asserts that the target has its own property descriptor with the given key
   * `name`. Enumerable and non-enumerable properties are included in the
   * search.
   *
   *     expect({a: 1}).to.have.ownPropertyDescriptor('a');
   *
   * When `descriptor` is provided, `.ownPropertyDescriptor` also asserts that
   * the property's descriptor is deeply equal to the given `descriptor`. See
   * the `deep-eql` project page for info on the deep equality algorithm:
   * https://github.com/chaijs/deep-eql.
   *
   *     expect({a: 1}).to.have.ownPropertyDescriptor('a', {
   *       configurable: true,
   *       enumerable: true,
   *       writable: true,
   *       value: 1,
   *     });
   *
   * Add `.not` earlier in the chain to negate `.ownPropertyDescriptor`.
   *
   *     expect({a: 1}).to.not.have.ownPropertyDescriptor('b');
   * 
   * However, it's dangerous to negate `.ownPropertyDescriptor` when providing
   * a `descriptor`. The problem is that it creates uncertain expectations by
   * asserting that the target either doesn't have a property descriptor with
   * the given key `name`, or that it does have a property descriptor with the
   * given key `name` but its not deeply equal to the given `descriptor`. It's
   * often best to identify the exact output that's expected, and then write an
   * assertion that only accepts that exact output.
   *
   * When the target isn't expected to have a property descriptor with the given
   * key `name`, it's often best to assert exactly that.
   *
   *     // Recommended
   *     expect({b: 2}).to.not.have.ownPropertyDescriptor('a');
   *
   *     // Not recommended
   *     expect({b: 2}).to.not.have.ownPropertyDescriptor('a', {
   *       configurable: true,
   *       enumerable: true,
   *       writable: true,
   *       value: 1,
   *     });
   *
   * When the target is expected to have a property descriptor with the given
   * key `name`, it's often best to assert that the property has its expected
   * descriptor, rather than asserting that it doesn't have one of many
   * unexpected descriptors.
   *
   *     // Recommended
   *     expect({a: 3}).to.have.ownPropertyDescriptor('a', {
   *       configurable: true,
   *       enumerable: true,
   *       writable: true,
   *       value: 3,
   *     });
   *
   *     // Not recommended
   *     expect({a: 3}).to.not.have.ownPropertyDescriptor('a', {
   *       configurable: true,
   *       enumerable: true,
   *       writable: true,
   *       value: 1,
   *     });
   *
   * `.ownPropertyDescriptor` changes the target of any assertions that follow
   * in the chain to be the value of the property descriptor from the original
   * target object.
   *
   *     expect({a: 1}).to.have.ownPropertyDescriptor('a')
   *       .that.has.property('enumerable', true);
   *
   * `.ownPropertyDescriptor` accepts an optional `msg` argument which is a
   * custom error message to show when the assertion fails. The message can also
   * be given as the second argument to `expect`. When not providing
   * `descriptor`, only use the second form.
   *
   *     // Recommended
   *     expect({a: 1}).to.have.ownPropertyDescriptor('a', {
   *       configurable: true,
   *       enumerable: true,
   *       writable: true,
   *       value: 2,
   *     }, 'nooo why fail??');
   *
   *     // Recommended
   *     expect({a: 1}, 'nooo why fail??').to.have.ownPropertyDescriptor('a', {
   *       configurable: true,
   *       enumerable: true,
   *       writable: true,
   *       value: 2,
   *     });
   * 
   *     // Recommended
   *     expect({a: 1}, 'nooo why fail??').to.have.ownPropertyDescriptor('b');
   *
   *     // Not recommended
   *     expect({a: 1})
   *       .to.have.ownPropertyDescriptor('b', undefined, 'nooo why fail??');
   *
   * The above assertion isn't the same thing as not providing `descriptor`.
   * Instead, it's asserting that the target object has a `b` property
   * descriptor that's deeply equal to `undefined`.
   *
   * The alias `.haveOwnPropertyDescriptor` can be used interchangeably with
   * `.ownPropertyDescriptor`.
   *
   * @name ownPropertyDescriptor
   * @alias haveOwnPropertyDescriptor
   * @param {String} name
   * @param {Object} descriptor _optional_
   * @param {String} msg _optional_
   * @namespace BDD
   * @api public
   */

  function assertOwnPropertyDescriptor (name, descriptor, msg) {
    if (typeof descriptor === 'string') {
      msg = descriptor;
      descriptor = null;
    }
    if (msg) flag(this, 'message', msg);
    var obj = flag(this, 'object');
    var actualDescriptor = Object.getOwnPropertyDescriptor(Object(obj), name);
    if (actualDescriptor && descriptor) {
      this.assert(
          _.eql(descriptor, actualDescriptor)
        , 'expected the own property descriptor for ' + _.inspect(name) + ' on #{this} to match ' + _.inspect(descriptor) + ', got ' + _.inspect(actualDescriptor)
        , 'expected the own property descriptor for ' + _.inspect(name) + ' on #{this} to not match ' + _.inspect(descriptor)
        , descriptor
        , actualDescriptor
        , true
      );
    } else {
      this.assert(
          actualDescriptor
        , 'expected #{this} to have an own property descriptor for ' + _.inspect(name)
        , 'expected #{this} to not have an own property descriptor for ' + _.inspect(name)
      );
    }
    flag(this, 'object', actualDescriptor);
  }

  Assertion.addMethod('ownPropertyDescriptor', assertOwnPropertyDescriptor);
  Assertion.addMethod('haveOwnPropertyDescriptor', assertOwnPropertyDescriptor);

  /**
   * ### .lengthOf(n[, msg])
   *
   * Asserts that the target's `length` property is equal to the given number
   * `n`.
   *
   *     expect([1, 2, 3]).to.have.lengthOf(3);
   *     expect('foo').to.have.lengthOf(3);
   *
   * Add `.not` earlier in the chain to negate `.lengthOf`. However, it's often
   * best to assert that the target's `length` property is equal to its expected
   * value, rather than not equal to one of many unexpected values.
   *
   *     expect('foo').to.have.lengthOf(3); // Recommended
   *     expect('foo').to.not.have.lengthOf(4); // Not recommended
   *
   * `.lengthOf` accepts an optional `msg` argument which is a custom error
   * message to show when the assertion fails. The message can also be given as
   * the second argument to `expect`.
   *
   *     expect([1, 2, 3]).to.have.lengthOf(2, 'nooo why fail??');
   *     expect([1, 2, 3], 'nooo why fail??').to.have.lengthOf(2);
   *
   * `.lengthOf` can also be used as a language chain, causing all `.above`,
   * `.below`, `.least`, `.most`, and `.within` assertions that follow in the
   * chain to use the target's `length` property as the target. However, it's
   * often best to assert that the target's `length` property is equal to its
   * expected length, rather than asserting that its `length` property falls
   * within some range of values.
   *
   *     // Recommended
   *     expect([1, 2, 3]).to.have.lengthOf(3);
   *
   *     // Not recommended
   *     expect([1, 2, 3]).to.have.lengthOf.above(2);
   *     expect([1, 2, 3]).to.have.lengthOf.below(4);
   *     expect([1, 2, 3]).to.have.lengthOf.at.least(3);
   *     expect([1, 2, 3]).to.have.lengthOf.at.most(3);
   *     expect([1, 2, 3]).to.have.lengthOf.within(2,4);
   *
   * Due to a compatibility issue, the alias `.length` can't be chained directly
   * off of an uninvoked method such as `.a`. Therefore, `.length` can't be used
   * interchangeably with `.lengthOf` in every situation. It's recommended to
   * always use `.lengthOf` instead of `.length`.
   *
   *     expect([1, 2, 3]).to.have.a.length(3); // incompatible; throws error
   *     expect([1, 2, 3]).to.have.a.lengthOf(3);  // passes as expected
   *
   * @name lengthOf
   * @alias length
   * @param {Number} n
   * @param {String} msg _optional_
   * @namespace BDD
   * @api public
   */

  function assertLengthChain () {
    flag(this, 'doLength', true);
  }

  function assertLength (n, msg) {
    if (msg) flag(this, 'message', msg);
    var obj = flag(this, 'object')
      , flagMsg = flag(this, 'message')
      , ssfi = flag(this, 'ssfi');
    new Assertion(obj, flagMsg, ssfi, true).to.have.property('length');
    var len = obj.length;

    this.assert(
        len == n
      , 'expected #{this} to have a length of #{exp} but got #{act}'
      , 'expected #{this} to not have a length of #{act}'
      , n
      , len
    );
  }

  Assertion.addChainableMethod('length', assertLength, assertLengthChain);
  Assertion.addChainableMethod('lengthOf', assertLength, assertLengthChain);

  /**
   * ### .match(re[, msg])
   *
   * Asserts that the target matches the given regular expression `re`.
   *
   *     expect('foobar').to.match(/^foo/);
   *
   * Add `.not` earlier in the chain to negate `.match`.
   *
   *     expect('foobar').to.not.match(/taco/);
   *
   * `.match` accepts an optional `msg` argument which is a custom error message
   * to show when the assertion fails. The message can also be given as the
   * second argument to `expect`.
   *
   *     expect('foobar').to.match(/taco/, 'nooo why fail??');
   *     expect('foobar', 'nooo why fail??').to.match(/taco/);
   *
   * The alias `.matches` can be used interchangeably with `.match`.
   *
   * @name match
   * @alias matches
   * @param {RegExp} re
   * @param {String} msg _optional_
   * @namespace BDD
   * @api public
   */
  function assertMatch(re, msg) {
    if (msg) flag(this, 'message', msg);
    var obj = flag(this, 'object');
    this.assert(
        re.exec(obj)
      , 'expected #{this} to match ' + re
      , 'expected #{this} not to match ' + re
    );
  }

  Assertion.addMethod('match', assertMatch);
  Assertion.addMethod('matches', assertMatch);

  /**
   * ### .string(str[, msg])
   *
   * Asserts that the target string contains the given substring `str`.
   *
   *     expect('foobar').to.have.string('bar');
   *
   * Add `.not` earlier in the chain to negate `.string`.
   *
   *     expect('foobar').to.not.have.string('taco');
   *
   * `.string` accepts an optional `msg` argument which is a custom error
   * message to show when the assertion fails. The message can also be given as
   * the second argument to `expect`.
   *
   *     expect('foobar').to.have.string(/taco/, 'nooo why fail??');
   *     expect('foobar', 'nooo why fail??').to.have.string(/taco/);
   *
   * @name string
   * @param {String} str
   * @param {String} msg _optional_
   * @namespace BDD
   * @api public
   */

  Assertion.addMethod('string', function (str, msg) {
    if (msg) flag(this, 'message', msg);
    var obj = flag(this, 'object')
      , flagMsg = flag(this, 'message')
      , ssfi = flag(this, 'ssfi');
    new Assertion(obj, flagMsg, ssfi, true).is.a('string');

    this.assert(
        ~obj.indexOf(str)
      , 'expected #{this} to contain ' + _.inspect(str)
      , 'expected #{this} to not contain ' + _.inspect(str)
    );
  });

  /**
   * ### .keys(key1[, key2[, ...]])
   *
   * Asserts that the target object, array, map, or set has the given keys. Only
   * the target's own inherited properties are included in the search. 
   *
   * When the target is an object or array, keys can be provided as one or more
   * string arguments, a single array argument, or a single object argument. In
   * the latter case, only the keys in the given object matter; the values are
   * ignored.
   *
   *     expect({a: 1, b: 2}).to.have.all.keys('a', 'b');
   *     expect(['x', 'y']).to.have.all.keys(0, 1);
   *
   *     expect({a: 1, b: 2}).to.have.all.keys(['a', 'b']);
   *     expect(['x', 'y']).to.have.all.keys([0, 1]);
   *
   *     expect({a: 1, b: 2}).to.have.all.keys({a: 4, b: 5}); // ignore 4 and 5
   *     expect(['x', 'y']).to.have.all.keys({0: 4, 1: 5}); // ignore 4 and 5
   *
   * When the target is a map or set, each key must be provided as a separate
   * argument.
   *
   *     expect(new Map([['a', 1], ['b', 2]])).to.have.all.keys('a', 'b');
   *     expect(new Set(['a', 'b'])).to.have.all.keys('a', 'b');
   *
   * Because `.keys` does different things based on the target's type, it's
   * important to check the target's type before using `.keys`. See the `.a` doc
   * for info on testing a target's type.
   *
   *     expect({a: 1, b: 2}).to.be.an('object').that.has.all.keys('a', 'b');
   *
   * By default, strict (`===`) equality is used to compare keys of maps and
   * sets. Add `.deep` earlier in the chain to use deep equality instead. See
   * the `deep-eql` project page for info on the deep equality algorithm:
   * https://github.com/chaijs/deep-eql.
   *
   *     // Target set deeply (but not strictly) has key `{a: 1}`
   *     expect(new Set([{a: 1}])).to.have.all.deep.keys([{a: 1}]);
   *     expect(new Set([{a: 1}])).to.not.have.all.keys([{a: 1}]);
   *
   * By default, the target must have all of the given keys and no more. Add
   * `.any` earlier in the chain to only require that the target have at least
   * one of the given keys. Also, add `.not` earlier in the chain to negate
   * `.keys`. It's often best to add `.any` when negating `.keys`, and to use
   * `.all` when asserting `.keys` without negation.
   *
   * When negating `.keys`, `.any` is preferred because `.not.any.keys` asserts
   * exactly what's expected of the output, whereas `.not.all.keys` creates
   * uncertain expectations.
   *
   *     // Recommended; asserts that target doesn't have any of the given keys
   *     expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');
   *
   *     // Not recommended; asserts that target doesn't have all of the given
   *     // keys but may or may not have some of them
   *     expect({a: 1, b: 2}).to.not.have.all.keys('c', 'd');
   *
   * When asserting `.keys` without negation, `.all` is preferred because
   * `.all.keys` asserts exactly what's expected of the output, whereas
   * `.any.keys` creates uncertain expectations.
   *
   *     // Recommended; asserts that target has all the given keys
   *     expect({a: 1, b: 2}).to.have.all.keys('a', 'b');
   *
   *     // Not recommended; asserts that target has at least one of the given
   *     // keys but may or may not have more of them
   *     expect({a: 1, b: 2}).to.have.any.keys('a', 'b');
   *
   * Note that `.all` is used by default when neither `.all` nor `.any` appear
   * earlier in the chain. However, it's often best to add `.all` anyway because
   * it improves readability.
   *
   *     // Both assertions are identical
   *     expect({a: 1, b: 2}).to.have.all.keys('a', 'b'); // Recommended
   *     expect({a: 1, b: 2}).to.have.keys('a', 'b'); // Not recommended
   *
   * Add `.include` earlier in the chain to require that the target's keys be a
   * superset of the expected keys, rather than identical sets.
   *
   *     // Target object's keys are a superset of ['a', 'b'] but not identical
   *     expect({a: 1, b: 2, c: 3}).to.include.all.keys('a', 'b');
   *     expect({a: 1, b: 2, c: 3}).to.not.have.all.keys('a', 'b');
   *
   * However, if `.any` and `.include` are combined, only the `.any` takes
   * effect. The `.include` is ignored in this case.
   *
   *     // Both assertions are identical
   *     expect({a: 1}).to.have.any.keys('a', 'b');
   *     expect({a: 1}).to.include.any.keys('a', 'b');
   *
   * A custom error message can be given as the second argument to `expect`.
   *
   *     expect({a: 1}, 'nooo why fail??').to.have.key('b');
   *
   * The alias `.key` can be used interchangeably with `.keys`.
   *
   * @name keys
   * @alias key
   * @param {...String|Array|Object} keys
   * @namespace BDD
   * @api public
   */

  function assertKeys (keys) {
    var obj = flag(this, 'object')
      , objType = _.type(obj)
      , keysType = _.type(keys)
      , ssfi = flag(this, 'ssfi')
      , isDeep = flag(this, 'deep')
      , str
      , deepStr = ''
      , ok = true
      , flagMsg = flag(this, 'message');

    flagMsg = flagMsg ? flagMsg + ': ' : '';
    var mixedArgsMsg = flagMsg + 'when testing keys against an object or an array you must give a single Array|Object|String argument or multiple String arguments';

    if (objType === 'Map' || objType === 'Set') {
      deepStr = isDeep ? 'deeply ' : '';
      actual = [];

      // Map and Set '.keys' aren't supported in IE 11. Therefore, use .forEach.
      obj.forEach(function (val, key) { actual.push(key) });

      if (keysType !== 'Array') {
        keys = Array.prototype.slice.call(arguments);
      }

    } else {
      actual = _.getOwnEnumerableProperties(obj);

      switch (keysType) {
        case 'Array':
          if (arguments.length > 1) {
            throw new AssertionError(mixedArgsMsg, undefined, ssfi);
          }
          break;
        case 'Object':
          if (arguments.length > 1) {
            throw new AssertionError(mixedArgsMsg, undefined, ssfi);
          }
          keys = Object.keys(keys);
          break;
        default:
          keys = Array.prototype.slice.call(arguments);
      }

      // Only stringify non-Symbols because Symbols would become "Symbol()"
      keys = keys.map(function (val) {
        return typeof val === 'symbol' ? val : String(val);
      });
    }

    if (!keys.length) {
      throw new AssertionError(flagMsg + 'keys required', undefined, ssfi);
    }

    var len = keys.length
      , any = flag(this, 'any')
      , all = flag(this, 'all')
      , expected = keys
      , actual;

    if (!any && !all) {
      all = true;
    }

    // Has any
    if (any) {
      ok = expected.some(function(expectedKey) {
        return actual.some(function(actualKey) {
          if (isDeep) {
            return _.eql(expectedKey, actualKey);
          } else {
            return expectedKey === actualKey;
          }
        });
      });
    }

    // Has all
    if (all) {
      ok = expected.every(function(expectedKey) {
        return actual.some(function(actualKey) {
          if (isDeep) {
            return _.eql(expectedKey, actualKey);
          } else {
            return expectedKey === actualKey;
          }
        });
      });

      if (!flag(this, 'contains')) {
        ok = ok && keys.length == actual.length;
      }
    }

    // Key string
    if (len > 1) {
      keys = keys.map(function(key) {
        return _.inspect(key);
      });
      var last = keys.pop();
      if (all) {
        str = keys.join(', ') + ', and ' + last;
      }
      if (any) {
        str = keys.join(', ') + ', or ' + last;
      }
    } else {
      str = _.inspect(keys[0]);
    }

    // Form
    str = (len > 1 ? 'keys ' : 'key ') + str;

    // Have / include
    str = (flag(this, 'contains') ? 'contain ' : 'have ') + str;

    // Assertion
    this.assert(
        ok
      , 'expected #{this} to ' + deepStr + str
      , 'expected #{this} to not ' + deepStr + str
      , expected.slice(0).sort(_.compareByInspect)
      , actual.sort(_.compareByInspect)
      , true
    );
  }

  Assertion.addMethod('keys', assertKeys);
  Assertion.addMethod('key', assertKeys);

  /**
   * ### .throw([errorLike], [errMsgMatcher], [msg])
   *
   * When no arguments are provided, `.throw` invokes the target function and
   * asserts that an error is thrown.
   * 
   *     var badFn = function () { throw new TypeError('Illegal salmon!'); };
   *
   *     expect(badFn).to.throw();
   *
   * When one argument is provided, and it's an error constructor, `.throw`
   * invokes the target function and asserts that an error is thrown that's an
   * instance of that error constructor.
   *
   *     var badFn = function () { throw new TypeError('Illegal salmon!'); };
   *
   *     expect(badFn).to.throw(TypeError);
   *
   * When one argument is provided, and it's an error instance, `.throw` invokes
   * the target function and asserts that an error is thrown that's strictly
   * (`===`) equal to that error instance.
   *
   *     var err = new TypeError('Illegal salmon!');
   *     var badFn = function () { throw err; };
   *
   *     expect(badFn).to.throw(err);
   *
   * When one argument is provided, and it's a string, `.throw` invokes the
   * target function and asserts that an error is thrown with a message that
   * contains that string.
   *
   *     var badFn = function () { throw new TypeError('Illegal salmon!'); };
   *
   *     expect(badFn).to.throw('salmon');
   *
   * When one argument is provided, and it's a regular expression, `.throw`
   * invokes the target function and asserts that an error is thrown with a
   * message that matches that regular expression.
   *
   *     var badFn = function () { throw new TypeError('Illegal salmon!'); };
   *
   *     expect(badFn).to.throw(/salmon/);
   *
   * When two arguments are provided, and the first is an error instance or
   * constructor, and the second is a string or regular expression, `.throw`
   * invokes the function and asserts that an error is thrown that fulfills both
   * conditions as described above.
   *
   *     var err = new TypeError('Illegal salmon!');
   *     var badFn = function () { throw err; };
   *
   *     expect(badFn).to.throw(TypeError, 'salmon');
   *     expect(badFn).to.throw(TypeError, /salmon/);
   *     expect(badFn).to.throw(err, 'salmon');
   *     expect(badFn).to.throw(err, /salmon/);
   *
   * Add `.not` earlier in the chain to negate `.throw`.
   *     
   *     var goodFn = function () {};
   *
   *     expect(goodFn).to.not.throw();
   * 
   * However, it's dangerous to negate `.throw` when providing any arguments.
   * The problem is that it creates uncertain expectations by asserting that the
   * target either doesn't throw an error, or that it throws an error but of a
   * different type than the given type, or that it throws an error of the given
   * type but with a message that doesn't include the given string. It's often
   * best to identify the exact output that's expected, and then write an
   * assertion that only accepts that exact output.
   *
   * When the target isn't expected to throw an error, it's often best to assert
   * exactly that.
   *
   *     var goodFn = function () {};
   *
   *     expect(goodFn).to.not.throw(); // Recommended
   *     expect(goodFn).to.not.throw(ReferenceError, 'x'); // Not recommended
   *
   * When the target is expected to throw an error, it's often best to assert
   * that the error is of its expected type, and has a message that includes an
   * expected string, rather than asserting that it doesn't have one of many
   * unexpected types, and doesn't have a message that includes some string.
   *
   *     var badFn = function () { throw new TypeError('Illegal salmon!'); };
   *
   *     expect(badFn).to.throw(TypeError, 'salmon'); // Recommended
   *     expect(badFn).to.not.throw(ReferenceError, 'x'); // Not recommended
   *
   * `.throw` changes the target of any assertions that follow in the chain to
   * be the error object that's thrown.
   *
   *     var err = new TypeError('Illegal salmon!');
   *     err.code = 42;
   *     var badFn = function () { throw err; };
   *
   *     expect(badFn).to.throw(TypeError).with.property('code', 42);
   *
   * `.throw` accepts an optional `msg` argument which is a custom error message
   * to show when the assertion fails. The message can also be given as the
   * second argument to `expect`. When not providing two arguments, always use
   * the second form.
   *
   *     var goodFn = function () {};
   *
   *     expect(goodFn).to.throw(TypeError, 'x', 'nooo why fail??');
   *     expect(goodFn, 'nooo why fail??').to.throw();
   *
   * Due to limitations in ES5, `.throw` may not always work as expected when
   * using a transpiler such as Babel or TypeScript. In particular, it may
   * produce unexpected results when subclassing the built-in `Error` object and
   * then passing the subclassed constructor to `.throw`. See your transpiler's
   * docs for details:
   *
   * - ([Babel](https://babeljs.io/docs/usage/caveats/#classes))
   * - ([TypeScript](https://github.com/Microsoft/TypeScript/wiki/Breaking-Changes#extending-built-ins-like-error-array-and-map-may-no-longer-work))
   *
   * Beware of some common mistakes when using the `throw` assertion. One common
   * mistake is to accidentally invoke the function yourself instead of letting
   * the `throw` assertion invoke the function for you. For example, when
   * testing if a function named `fn` throws, provide `fn` instead of `fn()` as
   * the target for the assertion.
   *
   *     expect(fn).to.throw();     // Good! Tests `fn` as desired
   *     expect(fn()).to.throw();   // Bad! Tests result of `fn()`, not `fn`
   *
   * If you need to assert that your function `fn` throws when passed certain
   * arguments, then wrap a call to `fn` inside of another function.
   *
   *     expect(function () { fn(42); }).to.throw();  // Function expression
   *     expect(() => fn(42)).to.throw();             // ES6 arrow function
   *
   * Another common mistake is to provide an object method (or any stand-alone
   * function that relies on `this`) as the target of the assertion. Doing so is
   * problematic because the `this` context will be lost when the function is
   * invoked by `.throw`; there's no way for it to know what `this` is supposed
   * to be. There are two ways around this problem. One solution is to wrap the
   * method or function call inside of another function. Another solution is to
   * use `bind`.
   *
   *     expect(function () { cat.meow(); }).to.throw();  // Function expression
   *     expect(() => cat.meow()).to.throw();             // ES6 arrow function
   *     expect(cat.meow.bind(cat)).to.throw();           // Bind
   *
   * Finally, it's worth mentioning that it's a best practice in JavaScript to
   * only throw `Error` and derivatives of `Error` such as `ReferenceError`,
   * `TypeError`, and user-defined objects that extend `Error`. No other type of
   * value will generate a stack trace when initialized. With that said, the
   * `throw` assertion does technically support any type of value being thrown,
   * not just `Error` and its derivatives.
   *
   * The aliases `.throws` and `.Throw` can be used interchangeably with
   * `.throw`.
   *
   * @name throw
   * @alias throws
   * @alias Throw
   * @param {Error|ErrorConstructor} errorLike
   * @param {String|RegExp} errMsgMatcher error message
   * @param {String} msg _optional_
   * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types
   * @returns error for chaining (null if no error)
   * @namespace BDD
   * @api public
   */

  function assertThrows (errorLike, errMsgMatcher, msg) {
    if (msg) flag(this, 'message', msg);
    var obj = flag(this, 'object')
      , ssfi = flag(this, 'ssfi')
      , flagMsg = flag(this, 'message')
      , negate = flag(this, 'negate') || false;
    new Assertion(obj, flagMsg, ssfi, true).is.a('function');

    if (errorLike instanceof RegExp || typeof errorLike === 'string') {
      errMsgMatcher = errorLike;
      errorLike = null;
    }

    var caughtErr;
    try {
      obj();
    } catch (err) {
      caughtErr = err;
    }

    // If we have the negate flag enabled and at least one valid argument it means we do expect an error
    // but we want it to match a given set of criteria
    var everyArgIsUndefined = errorLike === undefined && errMsgMatcher === undefined;

    // If we've got the negate flag enabled and both args, we should only fail if both aren't compatible
    // See Issue #551 and PR #683@GitHub
    var everyArgIsDefined = Boolean(errorLike && errMsgMatcher);
    var errorLikeFail = false;
    var errMsgMatcherFail = false;

    // Checking if error was thrown
    if (everyArgIsUndefined || !everyArgIsUndefined && !negate) {
      // We need this to display results correctly according to their types
      var errorLikeString = 'an error';
      if (errorLike instanceof Error) {
        errorLikeString = '#{exp}';
      } else if (errorLike) {
        errorLikeString = _.checkError.getConstructorName(errorLike);
      }

      this.assert(
          caughtErr
        , 'expected #{this} to throw ' + errorLikeString
        , 'expected #{this} to not throw an error but #{act} was thrown'
        , errorLike && errorLike.toString()
        , (caughtErr instanceof Error ?
            caughtErr.toString() : (typeof caughtErr === 'string' ? caughtErr : caughtErr &&
                                    _.checkError.getConstructorName(caughtErr)))
      );
    }

    if (errorLike && caughtErr) {
      // We should compare instances only if `errorLike` is an instance of `Error`
      if (errorLike instanceof Error) {
        var isCompatibleInstance = _.checkError.compatibleInstance(caughtErr, errorLike);

        if (isCompatibleInstance === negate) {
          // These checks were created to ensure we won't fail too soon when we've got both args and a negate
          // See Issue #551 and PR #683@GitHub
          if (everyArgIsDefined && negate) {
            errorLikeFail = true;
          } else {
            this.assert(
                negate
              , 'expected #{this} to throw #{exp} but #{act} was thrown'
              , 'expected #{this} to not throw #{exp}' + (caughtErr && !negate ? ' but #{act} was thrown' : '')
              , errorLike.toString()
              , caughtErr.toString()
            );
          }
        }
      }

      var isCompatibleConstructor = _.checkError.compatibleConstructor(caughtErr, errorLike);
      if (isCompatibleConstructor === negate) {
        if (everyArgIsDefined && negate) {
            errorLikeFail = true;
        } else {
          this.assert(
              negate
            , 'expected #{this} to throw #{exp} but #{act} was thrown'
            , 'expected #{this} to not throw #{exp}' + (caughtErr ? ' but #{act} was thrown' : '')
            , (errorLike instanceof Error ? errorLike.toString() : errorLike && _.checkError.getConstructorName(errorLike))
            , (caughtErr instanceof Error ? caughtErr.toString() : caughtErr && _.checkError.getConstructorName(caughtErr))
          );
        }
      }
    }

    if (caughtErr && errMsgMatcher !== undefined && errMsgMatcher !== null) {
      // Here we check compatible messages
      var placeholder = 'including';
      if (errMsgMatcher instanceof RegExp) {
        placeholder = 'matching'
      }

      var isCompatibleMessage = _.checkError.compatibleMessage(caughtErr, errMsgMatcher);
      if (isCompatibleMessage === negate) {
        if (everyArgIsDefined && negate) {
            errMsgMatcherFail = true;
        } else {
          this.assert(
            negate
            , 'expected #{this} to throw error ' + placeholder + ' #{exp} but got #{act}'
            , 'expected #{this} to throw error not ' + placeholder + ' #{exp}'
            ,  errMsgMatcher
            ,  _.checkError.getMessage(caughtErr)
          );
        }
      }
    }

    // If both assertions failed and both should've matched we throw an error
    if (errorLikeFail && errMsgMatcherFail) {
      this.assert(
        negate
        , 'expected #{this} to throw #{exp} but #{act} was thrown'
        , 'expected #{this} to not throw #{exp}' + (caughtErr ? ' but #{act} was thrown' : '')
        , (errorLike instanceof Error ? errorLike.toString() : errorLike && _.checkError.getConstructorName(errorLike))
        , (caughtErr instanceof Error ? caughtErr.toString() : caughtErr && _.checkError.getConstructorName(caughtErr))
      );
    }

    flag(this, 'object', caughtErr);
  };

  Assertion.addMethod('throw', assertThrows);
  Assertion.addMethod('throws', assertThrows);
  Assertion.addMethod('Throw', assertThrows);

  /**
   * ### .respondTo(method[, msg])
   *
   * When the target is a non-function object, `.respondTo` asserts that the
   * target has a method with the given name `method`. The method can be own or
   * inherited, and it can be enumerable or non-enumerable.
   *
   *     function Cat () {}
   *     Cat.prototype.meow = function () {};
   *
   *     expect(new Cat()).to.respondTo('meow');
   *
   * When the target is a function, `.respondTo` asserts that the target's
   * `prototype` property has a method with the given name `method`. Again, the
   * method can be own or inherited, and it can be enumerable or non-enumerable.
   *
   *     function Cat () {}
   *     Cat.prototype.meow = function () {};
   *
   *     expect(Cat).to.respondTo('meow');
   *
   * Add `.itself` earlier in the chain to force `.respondTo` to treat the
   * target as a non-function object, even if it's a function. Thus, it asserts
   * that the target has a method with the given name `method`, rather than
   * asserting that the target's `prototype` property has a method with the
   * given name `method`.
   *
   *     function Cat () {}
   *     Cat.prototype.meow = function () {};
   *     Cat.hiss = function () {};
   *
   *     expect(Cat).itself.to.respondTo('hiss').but.not.respondTo('meow');
   *
   * When not adding `.itself`, it's important to check the target's type before
   * using `.respondTo`. See the `.a` doc for info on checking a target's type.
   *
   *     function Cat () {}
   *     Cat.prototype.meow = function () {};
   *
   *     expect(new Cat()).to.be.an('object').that.respondsTo('meow');
   *
   * Add `.not` earlier in the chain to negate `.respondTo`.
   *
   *     function Dog () {}
   *     Dog.prototype.bark = function () {};
   *
   *     expect(new Dog()).to.not.respondTo('meow');
   *
   * `.respondTo` accepts an optional `msg` argument which is a custom error
   * message to show when the assertion fails. The message can also be given as
   * the second argument to `expect`.
   *
   *     expect({}).to.respondTo('meow', 'nooo why fail??');
   *     expect({}, 'nooo why fail??').to.respondTo('meow');
   *
   * The alias `.respondsTo` can be used interchangeably with `.respondTo`.
   *
   * @name respondTo
   * @alias respondsTo
   * @param {String} method
   * @param {String} msg _optional_
   * @namespace BDD
   * @api public
   */

  function respondTo (method, msg) {
    if (msg) flag(this, 'message', msg);
    var obj = flag(this, 'object')
      , itself = flag(this, 'itself')
      , context = ('function' === typeof obj && !itself)
        ? obj.prototype[method]
        : obj[method];

    this.assert(
        'function' === typeof context
      , 'expected #{this} to respond to ' + _.inspect(method)
      , 'expected #{this} to not respond to ' + _.inspect(method)
    );
  }

  Assertion.addMethod('respondTo', respondTo);
  Assertion.addMethod('respondsTo', respondTo);

  /**
   * ### .itself
   *
   * Forces all `.respondTo` assertions that follow in the chain to behave as if
   * the target is a non-function object, even if it's a function. Thus, it
   * causes `.respondTo` to assert that the target has a method with the given
   * name, rather than asserting that the target's `prototype` property has a
   * method with the given name.
   *
   *     function Cat () {}
   *     Cat.prototype.meow = function () {};
   *     Cat.hiss = function () {};
   *
   *     expect(Cat).itself.to.respondTo('hiss').but.not.respondTo('meow');
   *
   * @name itself
   * @namespace BDD
   * @api public
   */

  Assertion.addProperty('itself', function () {
    flag(this, 'itself', true);
  });

  /**
   * ### .satisfy(matcher[, msg])
   *
   * Invokes the given `matcher` function with the target being passed as the
   * first argument, and asserts that the value returned is truthy.
   *
   *     expect(1).to.satisfy(function(num) {
   *       return num > 0; 
   *     });
   *
   * Add `.not` earlier in the chain to negate `.satisfy`.
   *
   *     expect(1).to.not.satisfy(function(num) {
   *       return num > 2;
   *     });
   *
   * `.satisfy` accepts an optional `msg` argument which is a custom error
   * message to show when the assertion fails. The message can also be given as
   * the second argument to `expect`.
   *
   *     expect(1).to.satisfy(function(num) {
   *       return num > 2;
   *     }, 'nooo why fail??');
   *
   *     expect(1, 'nooo why fail??').to.satisfy(function(num) {
   *       return num > 2;
   *     });
   *
   * The alias `.satisfies` can be used interchangeably with `.satisfy`.
   *
   * @name satisfy
   * @alias satisfies
   * @param {Function} matcher
   * @param {String} msg _optional_
   * @namespace BDD
   * @api public
   */

  function satisfy (matcher, msg) {
    if (msg) flag(this, 'message', msg);
    var obj = flag(this, 'object');
    var result = matcher(obj);
    this.assert(
        result
      , 'expected #{this} to satisfy ' + _.objDisplay(matcher)
      , 'expected #{this} to not satisfy' + _.objDisplay(matcher)
      , flag(this, 'negate') ? false : true
      , result
    );
  }

  Assertion.addMethod('satisfy', satisfy);
  Assertion.addMethod('satisfies', satisfy);

  /**
   * ### .closeTo(expected, delta[, msg])
   *
   * Asserts that the target is a number that's within a given +/- `delta` range
   * of the given number `expected`. However, it's often best to assert that the
   * target is equal to its expected value.
   *
   *     // Recommended
   *     expect(1.5).to.equal(1.5);
   *
   *     // Not recommended
   *     expect(1.5).to.be.closeTo(1, 0.5);
   *     expect(1.5).to.be.closeTo(2, 0.5);
   *     expect(1.5).to.be.closeTo(1, 1);
   *
   * Add `.not` earlier in the chain to negate `.closeTo`.
   *
   *     expect(1.5).to.equal(1.5); // Recommended
   *     expect(1.5).to.not.be.closeTo(3, 1); // Not recommended
   *
   * `.closeTo` accepts an optional `msg` argument which is a custom error
   * message to show when the assertion fails. The message can also be given as
   * the second argument to `expect`.
   *
   *     expect(1.5).to.be.closeTo(3, 1, 'nooo why fail??');
   *     expect(1.5, 'nooo why fail??').to.be.closeTo(3, 1);
   *
   * The alias `.approximately` can be used interchangeably with `.closeTo`.
   *
   * @name closeTo
   * @alias approximately
   * @param {Number} expected
   * @param {Number} delta
   * @param {String} msg _optional_
   * @namespace BDD
   * @api public
   */

  function closeTo(expected, delta, msg) {
    if (msg) flag(this, 'message', msg);
    var obj = flag(this, 'object')
      , flagMsg = flag(this, 'message')
      , ssfi = flag(this, 'ssfi');

    new Assertion(obj, flagMsg, ssfi, true).is.a('number');
    if (typeof expected !== 'number' || typeof delta !== 'number') {
      flagMsg = flagMsg ? flagMsg + ': ' : '';
      throw new AssertionError(
          flagMsg + 'the arguments to closeTo or approximately must be numbers',
          undefined,
          ssfi
      );
    }

    this.assert(
        Math.abs(obj - expected) <= delta
      , 'expected #{this} to be close to ' + expected + ' +/- ' + delta
      , 'expected #{this} not to be close to ' + expected + ' +/- ' + delta
    );
  }

  Assertion.addMethod('closeTo', closeTo);
  Assertion.addMethod('approximately', closeTo);

  // Note: Duplicates are ignored if testing for inclusion instead of sameness.
  function isSubsetOf(subset, superset, cmp, contains, ordered) {
    if (!contains) {
      if (subset.length !== superset.length) return false;
      superset = superset.slice();
    }

    return subset.every(function(elem, idx) {
      if (ordered) return cmp ? cmp(elem, superset[idx]) : elem === superset[idx];

      if (!cmp) {
        var matchIdx = superset.indexOf(elem);
        if (matchIdx === -1) return false;

        // Remove match from superset so not counted twice if duplicate in subset.
        if (!contains) superset.splice(matchIdx, 1);
        return true;
      }

      return superset.some(function(elem2, matchIdx) {
        if (!cmp(elem, elem2)) return false;

        // Remove match from superset so not counted twice if duplicate in subset.
        if (!contains) superset.splice(matchIdx, 1);
        return true;
      });
    });
  }

  /**
   * ### .members(set[, msg])
   *
   * Asserts that the target array has the same members as the given array
   * `set`.
   *
   *     expect([1, 2, 3]).to.have.members([2, 1, 3]);
   *     expect([1, 2, 2]).to.have.members([2, 1, 2]);
   *
   * By default, members are compared using strict (`===`) equality. Add `.deep`
   * earlier in the chain to use deep equality instead. See the `deep-eql`
   * project page for info on the deep equality algorithm:
   * https://github.com/chaijs/deep-eql.
   *
   *     // Target array deeply (but not strictly) has member `{a: 1}`
   *     expect([{a: 1}]).to.have.deep.members([{a: 1}]);
   *     expect([{a: 1}]).to.not.have.members([{a: 1}]);
   *
   * By default, order doesn't matter. Add `.ordered` earlier in the chain to
   * require that members appear in the same order.
   *
   *     expect([1, 2, 3]).to.have.ordered.members([1, 2, 3]);
   *     expect([1, 2, 3]).to.have.members([2, 1, 3])
   *       .but.not.ordered.members([2, 1, 3]);
   *
   * By default, both arrays must be the same size. Add `.include` earlier in
   * the chain to require that the target's members be a superset of the
   * expected members. Note that duplicates are ignored in the subset when
   * `.include` is added.
   *
   *     // Target array is a superset of [1, 2] but not identical
   *     expect([1, 2, 3]).to.include.members([1, 2]);
   *     expect([1, 2, 3]).to.not.have.members([1, 2]);
   *
   *     // Duplicates in the subset are ignored
   *     expect([1, 2, 3]).to.include.members([1, 2, 2, 2]);
   *
   * `.deep`, `.ordered`, and `.include` can all be combined. However, if
   * `.include` and `.ordered` are combined, the ordering begins at the start of
   * both arrays.
   *
   *     expect([{a: 1}, {b: 2}, {c: 3}])
   *       .to.include.deep.ordered.members([{a: 1}, {b: 2}])
   *       .but.not.include.deep.ordered.members([{b: 2}, {c: 3}]);
   *
   * Add `.not` earlier in the chain to negate `.members`. However, it's
   * dangerous to do so. The problem is that it creates uncertain expectations
   * by asserting that the target array doesn't have all of the same members as
   * the given array `set` but may or may not have some of them. It's often best
   * to identify the exact output that's expected, and then write an assertion
   * that only accepts that exact output.
   *
   *     expect([1, 2]).to.not.include(3).and.not.include(4); // Recommended
   *     expect([1, 2]).to.not.have.members([3, 4]); // Not recommended
   *
   * `.members` accepts an optional `msg` argument which is a custom error
   * message to show when the assertion fails. The message can also be given as
   * the second argument to `expect`.
   *
   *     expect([1, 2]).to.have.members([1, 2, 3], 'nooo why fail??');
   *     expect([1, 2], 'nooo why fail??').to.have.members([1, 2, 3]);
   *
   * @name members
   * @param {Array} set
   * @param {String} msg _optional_
   * @namespace BDD
   * @api public
   */

  Assertion.addMethod('members', function (subset, msg) {
    if (msg) flag(this, 'message', msg);
    var obj = flag(this, 'object')
      , flagMsg = flag(this, 'message')
      , ssfi = flag(this, 'ssfi');

    new Assertion(obj, flagMsg, ssfi, true).to.be.an('array');
    new Assertion(subset, flagMsg, ssfi, true).to.be.an('array');

    var contains = flag(this, 'contains');
    var ordered = flag(this, 'ordered');

    var subject, failMsg, failNegateMsg, lengthCheck;

    if (contains) {
      subject = ordered ? 'an ordered superset' : 'a superset';
      failMsg = 'expected #{this} to be ' + subject + ' of #{exp}';
      failNegateMsg = 'expected #{this} to not be ' + subject + ' of #{exp}';
    } else {
      subject = ordered ? 'ordered members' : 'members';
      failMsg = 'expected #{this} to have the same ' + subject + ' as #{exp}';
      failNegateMsg = 'expected #{this} to not have the same ' + subject + ' as #{exp}';
    }

    var cmp = flag(this, 'deep') ? _.eql : undefined;

    this.assert(
        isSubsetOf(subset, obj, cmp, contains, ordered)
      , failMsg
      , failNegateMsg
      , subset
      , obj
      , true
    );
  });

  /**
   * ### .oneOf(list[, msg])
   *
   * Asserts that the target is a member of the given array `list`. However,
   * it's often best to assert that the target is equal to its expected value.
   *
   *     expect(1).to.equal(1); // Recommended
   *     expect(1).to.be.oneOf([1, 2, 3]); // Not recommended
   *
   * Comparisons are performed using strict (`===`) equality.
   *
   * Add `.not` earlier in the chain to negate `.oneOf`.
   *
   *     expect(1).to.equal(1); // Recommended
   *     expect(1).to.not.be.oneOf([2, 3, 4]); // Not recommended
   *
   * `.oneOf` accepts an optional `msg` argument which is a custom error message
   * to show when the assertion fails. The message can also be given as the
   * second argument to `expect`.
   *
   *     expect(1).to.be.oneOf([2, 3, 4], 'nooo why fail??');
   *     expect(1, 'nooo why fail??').to.be.oneOf([2, 3, 4]);
   *
   * @name oneOf
   * @param {Array<*>} list
   * @param {String} msg _optional_
   * @namespace BDD
   * @api public
   */

  function oneOf (list, msg) {
    if (msg) flag(this, 'message', msg);
    var expected = flag(this, 'object')
      , flagMsg = flag(this, 'message')
      , ssfi = flag(this, 'ssfi');
    new Assertion(list, flagMsg, ssfi, true).to.be.an('array');

    this.assert(
        list.indexOf(expected) > -1
      , 'expected #{this} to be one of #{exp}'
      , 'expected #{this} to not be one of #{exp}'
      , list
      , expected
    );
  }

  Assertion.addMethod('oneOf', oneOf);


  /**
   * ### .change(subject[, prop[, msg]])
   *
   * When one argument is provided, `.change` asserts that the given function
   * `subject` returns a different value when it's invoked before the target
   * function compared to when it's invoked afterward. However, it's often best
   * to assert that `subject` is equal to its expected value.
   *
   *     var dots = ''
   *       , addDot = function () { dots += '.'; }
   *       , getDots = function () { return dots; };
   *
   *     // Recommended
   *     expect(getDots()).to.equal('');
   *     addDot();
   *     expect(getDots()).to.equal('.');
   *
   *     // Not recommended
   *     expect(addDot).to.change(getDots);
   *
   * When two arguments are provided, `.change` asserts that the value of the
   * given object `subject`'s `prop` property is different before invoking the
   * target function compared to afterward.
   *
   *     var myObj = {dots: ''}
   *       , addDot = function () { myObj.dots += '.'; };
   *
   *     // Recommended
   *     expect(myObj).to.have.property('dots', '');
   *     addDot();
   *     expect(myObj).to.have.property('dots', '.');
   *
   *     // Not recommended
   *     expect(addDot).to.change(myObj, 'dots');
   *
   * Strict (`===`) equality is used to compare before and after values.
   *
   * Add `.not` earlier in the chain to negate `.change`.
   *
   *     var dots = ''
   *       , noop = function () {}
   *       , getDots = function () { return dots; };
   *
   *     expect(noop).to.not.change(getDots);
   *
   *     var myObj = {dots: ''}
   *       , noop = function () {};
   *
   *     expect(noop).to.not.change(myObj, 'dots');
   *
   * `.change` accepts an optional `msg` argument which is a custom error
   * message to show when the assertion fails. The message can also be given as
   * the second argument to `expect`. When not providing two arguments, always
   * use the second form.
   *
   *     var myObj = {dots: ''}
   *       , addDot = function () { myObj.dots += '.'; };
   *
   *     expect(addDot).to.not.change(myObj, 'dots', 'nooo why fail??');
   *
   *     var dots = ''
   *       , addDot = function () { dots += '.'; }
   *       , getDots = function () { return dots; };
   *
   *     expect(addDot, 'nooo why fail??').to.not.change(getDots);
   *
   * `.change` also causes all `.by` assertions that follow in the chain to
   * assert how much a numeric subject was increased or decreased by. However,
   * it's dangerous to use `.change.by`. The problem is that it creates
   * uncertain expectations by asserting that the subject either increases by
   * the given delta, or that it decreases by the given delta. It's often best
   * to identify the exact output that's expected, and then write an assertion
   * that only accepts that exact output.
   *
   *     var myObj = {val: 1}
   *       , addTwo = function () { myObj.val += 2; }
   *       , subtractTwo = function () { myObj.val -= 2; };
   *
   *     expect(addTwo).to.increase(myObj, 'val').by(2); // Recommended
   *     expect(addTwo).to.change(myObj, 'val').by(2); // Not recommended
   *
   *     expect(subtractTwo).to.decrease(myObj, 'val').by(2); // Recommended
   *     expect(subtractTwo).to.change(myObj, 'val').by(2); // Not recommended
   *
   * The alias `.changes` can be used interchangeably with `.change`.
   *
   * @name change
   * @alias changes
   * @param {String} subject
   * @param {String} prop name _optional_
   * @param {String} msg _optional_
   * @namespace BDD
   * @api public
   */

  function assertChanges (subject, prop, msg) {
    if (msg) flag(this, 'message', msg);
    var fn = flag(this, 'object')
      , flagMsg = flag(this, 'message')
      , ssfi = flag(this, 'ssfi');
    new Assertion(fn, flagMsg, ssfi, true).is.a('function');

    var initial;
    if (!prop) {
      new Assertion(subject, flagMsg, ssfi, true).is.a('function');
      initial = subject();
    } else {
      new Assertion(subject, flagMsg, ssfi, true).to.have.property(prop);
      initial = subject[prop];
    }

    fn();

    var final = prop === undefined || prop === null ? subject() : subject[prop];
    var msgObj = prop === undefined || prop === null ? initial : '.' + prop;

    // This gets flagged because of the .by(delta) assertion
    flag(this, 'deltaMsgObj', msgObj);
    flag(this, 'initialDeltaValue', initial);
    flag(this, 'finalDeltaValue', final);
    flag(this, 'deltaBehavior', 'change');
    flag(this, 'realDelta', final !== initial);

    this.assert(
      initial !== final
      , 'expected ' + msgObj + ' to change'
      , 'expected ' + msgObj + ' to not change'
    );
  }

  Assertion.addMethod('change', assertChanges);
  Assertion.addMethod('changes', assertChanges);

  /**
   * ### .increase(subject[, prop[, msg]])
   *
   * When one argument is provided, `.increase` asserts that the given function
   * `subject` returns a greater number when it's invoked after invoking the
   * target function compared to when it's invoked beforehand. `.increase` also
   * causes all `.by` assertions that follow in the chain to assert how much
   * greater of a number is returned. It's often best to assert that the return
   * value increased by the expected amount, rather than asserting it increased
   * by any amount.
   *
   *     var val = 1
   *       , addTwo = function () { val += 2; }
   *       , getVal = function () { return val; };
   *
   *     expect(addTwo).to.increase(getVal).by(2); // Recommended
   *     expect(addTwo).to.increase(getVal); // Not recommended
   *
   * When two arguments are provided, `.increase` asserts that the value of the
   * given object `subject`'s `prop` property is greater after invoking the
   * target function compared to beforehand.
   *
   *     var myObj = {val: 1}
   *       , addTwo = function () { myObj.val += 2; };
   *
   *     expect(addTwo).to.increase(myObj, 'val').by(2); // Recommended
   *     expect(addTwo).to.increase(myObj, 'val'); // Not recommended
   *
   * Add `.not` earlier in the chain to negate `.increase`. However, it's
   * dangerous to do so. The problem is that it creates uncertain expectations
   * by asserting that the subject either decreases, or that it stays the same.
   * It's often best to identify the exact output that's expected, and then
   * write an assertion that only accepts that exact output.
   *
   * When the subject is expected to decrease, it's often best to assert that it
   * decreased by the expected amount.
   *
   *     var myObj = {val: 1}
   *       , subtractTwo = function () { myObj.val -= 2; };
   *
   *     expect(subtractTwo).to.decrease(myObj, 'val').by(2); // Recommended
   *     expect(subtractTwo).to.not.increase(myObj, 'val'); // Not recommended
   * 
   * When the subject is expected to stay the same, it's often best to assert
   * exactly that.
   *
   *     var myObj = {val: 1}
   *       , noop = function () {};
   *
   *     expect(noop).to.not.change(myObj, 'val'); // Recommended
   *     expect(noop).to.not.increase(myObj, 'val'); // Not recommended
   *
   * `.increase` accepts an optional `msg` argument which is a custom error
   * message to show when the assertion fails. The message can also be given as
   * the second argument to `expect`. When not providing two arguments, always
   * use the second form.
   *
   *     var myObj = {val: 1}
   *       , noop = function () {};
   *
   *     expect(noop).to.increase(myObj, 'val', 'nooo why fail??');
   *
   *     var val = 1
   *       , noop = function () {}
   *       , getVal = function () { return val; };
   *
   *     expect(noop, 'nooo why fail??').to.increase(getVal);
   *
   * The alias `.increases` can be used interchangeably with `.increase`.
   *
   * @name increase
   * @alias increases
   * @param {String|Function} subject
   * @param {String} prop name _optional_
   * @param {String} msg _optional_
   * @namespace BDD
   * @api public
   */

  function assertIncreases (subject, prop, msg) {
    if (msg) flag(this, 'message', msg);
    var fn = flag(this, 'object')
      , flagMsg = flag(this, 'message')
      , ssfi = flag(this, 'ssfi');
    new Assertion(fn, flagMsg, ssfi, true).is.a('function');

    var initial;
    if (!prop) {
      new Assertion(subject, flagMsg, ssfi, true).is.a('function');
      initial = subject();
    } else {
      new Assertion(subject, flagMsg, ssfi, true).to.have.property(prop);
      initial = subject[prop];
    }

    // Make sure that the target is a number
    new Assertion(initial, flagMsg, ssfi, true).is.a('number');

    fn();

    var final = prop === undefined || prop === null ? subject() : subject[prop];
    var msgObj = prop === undefined || prop === null ? initial : '.' + prop;

    flag(this, 'deltaMsgObj', msgObj);
    flag(this, 'initialDeltaValue', initial);
    flag(this, 'finalDeltaValue', final);
    flag(this, 'deltaBehavior', 'increase');
    flag(this, 'realDelta', final - initial);

    this.assert(
      final - initial > 0
      , 'expected ' + msgObj + ' to increase'
      , 'expected ' + msgObj + ' to not increase'
    );
  }

  Assertion.addMethod('increase', assertIncreases);
  Assertion.addMethod('increases', assertIncreases);

  /**
   * ### .decrease(subject[, prop[, msg]])
   *
   * When one argument is provided, `.decrease` asserts that the given function
   * `subject` returns a lesser number when it's invoked after invoking the
   * target function compared to when it's invoked beforehand. `.decrease` also
   * causes all `.by` assertions that follow in the chain to assert how much
   * lesser of a number is returned. It's often best to assert that the return
   * value decreased by the expected amount, rather than asserting it decreased
   * by any amount.
   *
   *     var val = 1
   *       , subtractTwo = function () { val -= 2; }
   *       , getVal = function () { return val; };
   *
   *     expect(subtractTwo).to.decrease(getVal).by(2); // Recommended
   *     expect(subtractTwo).to.decrease(getVal); // Not recommended
   *
   * When two arguments are provided, `.decrease` asserts that the value of the
   * given object `subject`'s `prop` property is lesser after invoking the
   * target function compared to beforehand. 
   *
   *     var myObj = {val: 1}
   *       , subtractTwo = function () { myObj.val -= 2; };
   *
   *     expect(subtractTwo).to.decrease(myObj, 'val').by(2); // Recommended
   *     expect(subtractTwo).to.decrease(myObj, 'val'); // Not recommended
   *
   * Add `.not` earlier in the chain to negate `.decrease`. However, it's
   * dangerous to do so. The problem is that it creates uncertain expectations
   * by asserting that the subject either increases, or that it stays the same.
   * It's often best to identify the exact output that's expected, and then
   * write an assertion that only accepts that exact output.
   *
   * When the subject is expected to increase, it's often best to assert that it
   * increased by the expected amount.
   *
   *     var myObj = {val: 1}
   *       , addTwo = function () { myObj.val += 2; };
   *
   *     expect(addTwo).to.increase(myObj, 'val').by(2); // Recommended
   *     expect(addTwo).to.not.decrease(myObj, 'val'); // Not recommended
   * 
   * When the subject is expected to stay the same, it's often best to assert
   * exactly that.
   *
   *     var myObj = {val: 1}
   *       , noop = function () {};
   *
   *     expect(noop).to.not.change(myObj, 'val'); // Recommended
   *     expect(noop).to.not.decrease(myObj, 'val'); // Not recommended
   *
   * `.decrease` accepts an optional `msg` argument which is a custom error
   * message to show when the assertion fails. The message can also be given as
   * the second argument to `expect`. When not providing two arguments, always
   * use the second form.
   *
   *     var myObj = {val: 1}
   *       , noop = function () {};
   *
   *     expect(noop).to.decrease(myObj, 'val', 'nooo why fail??');
   *
   *     var val = 1
   *       , noop = function () {}
   *       , getVal = function () { return val; };
   *
   *     expect(noop, 'nooo why fail??').to.decrease(getVal);
   *
   * The alias `.decreases` can be used interchangeably with `.decrease`.
   *
   * @name decrease
   * @alias decreases
   * @param {String|Function} subject
   * @param {String} prop name _optional_
   * @param {String} msg _optional_
   * @namespace BDD
   * @api public
   */

  function assertDecreases (subject, prop, msg) {
    if (msg) flag(this, 'message', msg);
    var fn = flag(this, 'object')
      , flagMsg = flag(this, 'message')
      , ssfi = flag(this, 'ssfi');
    new Assertion(fn, flagMsg, ssfi, true).is.a('function');

    var initial;
    if (!prop) {
      new Assertion(subject, flagMsg, ssfi, true).is.a('function');
      initial = subject();
    } else {
      new Assertion(subject, flagMsg, ssfi, true).to.have.property(prop);
      initial = subject[prop];
    }

    // Make sure that the target is a number
    new Assertion(initial, flagMsg, ssfi, true).is.a('number');

    fn();

    var final = prop === undefined || prop === null ? subject() : subject[prop];
    var msgObj = prop === undefined || prop === null ? initial : '.' + prop;

    flag(this, 'deltaMsgObj', msgObj);
    flag(this, 'initialDeltaValue', initial);
    flag(this, 'finalDeltaValue', final);
    flag(this, 'deltaBehavior', 'decrease');
    flag(this, 'realDelta', initial - final);

    this.assert(
      final - initial < 0
      , 'expected ' + msgObj + ' to decrease'
      , 'expected ' + msgObj + ' to not decrease'
    );
  }

  Assertion.addMethod('decrease', assertDecreases);
  Assertion.addMethod('decreases', assertDecreases);

  /**
   * ### .by(delta[, msg])
   *
   * When following an `.increase` assertion in the chain, `.by` asserts that
   * the subject of the `.increase` assertion increased by the given `delta`.
   *
   *     var myObj = {val: 1}
   *       , addTwo = function () { myObj.val += 2; };
   *
   *     expect(addTwo).to.increase(myObj, 'val').by(2);
   *
   * When following a `.decrease` assertion in the chain, `.by` asserts that the
   * subject of the `.decrease` assertion decreased by the given `delta`.
   *
   *     var myObj = {val: 1}
   *       , subtractTwo = function () { myObj.val -= 2; };
   *
   *     expect(subtractTwo).to.decrease(myObj, 'val').by(2);
   *
   * When following a `.change` assertion in the chain, `.by` asserts that the
   * subject of the `.change` assertion either increased or decreased by the
   * given `delta`. However, it's dangerous to use `.change.by`. The problem is
   * that it creates uncertain expectations. It's often best to identify the
   * exact output that's expected, and then write an assertion that only accepts
   * that exact output.
   *
   *     var myObj = {val: 1}
   *       , addTwo = function () { myObj.val += 2; }
   *       , subtractTwo = function () { myObj.val -= 2; };
   *
   *     expect(addTwo).to.increase(myObj, 'val').by(2); // Recommended
   *     expect(addTwo).to.change(myObj, 'val').by(2); // Not recommended
   *
   *     expect(subtractTwo).to.decrease(myObj, 'val').by(2); // Recommended
   *     expect(subtractTwo).to.change(myObj, 'val').by(2); // Not recommended
   *
   * Add `.not` earlier in the chain to negate `.by`. However, it's often best
   * to assert that the subject changed by its expected delta, rather than
   * asserting that it didn't change by one of countless unexpected deltas.
   *
   *     var myObj = {val: 1}
   *       , addTwo = function () { myObj.val += 2; };
   *
   *     // Recommended
   *     expect(addTwo).to.increase(myObj, 'val').by(2);
   *
   *     // Not recommended
   *     expect(addTwo).to.increase(myObj, 'val').but.not.by(3);
   *
   * `.by` accepts an optional `msg` argument which is a custom error message to
   * show when the assertion fails. The message can also be given as the second
   * argument to `expect`.
   *
   *     var myObj = {val: 1}
   *       , addTwo = function () { myObj.val += 2; };
   *
   *     expect(addTwo).to.increase(myObj, 'val').by(3, 'nooo why fail??');
   *     expect(addTwo, 'nooo why fail??').to.increase(myObj, 'val').by(3);
   *
   * @name by
   * @param {Number} delta
   * @param {String} msg _optional_
   * @namespace BDD
   * @api public
   */

  function assertDelta(delta, msg) {
    if (msg) flag(this, 'message', msg);

    var msgObj = flag(this, 'deltaMsgObj');
    var initial = flag(this, 'initialDeltaValue');
    var final = flag(this, 'finalDeltaValue');
    var behavior = flag(this, 'deltaBehavior');
    var realDelta = flag(this, 'realDelta');

    var expression;
    if (behavior === 'change') {
      expression = Math.abs(final - initial) === Math.abs(delta);
    } else {
      expression = realDelta === Math.abs(delta);
    }

    this.assert(
      expression
      , 'expected ' + msgObj + ' to ' + behavior + ' by ' + delta
      , 'expected ' + msgObj + ' to not ' + behavior + ' by ' + delta
    );
  }

  Assertion.addMethod('by', assertDelta);

  /**
   * ### .extensible
   *
   * Asserts that the target is extensible, which means that new properties can
   * be added to it. Primitives are never extensible.
   *
   *     expect({a: 1}).to.be.extensible;
   *
   * Add `.not` earlier in the chain to negate `.extensible`.
   *
   *     var nonExtensibleObject = Object.preventExtensions({})
   *       , sealedObject = Object.seal({})
   *       , frozenObject = Object.freeze({});
   *
   *     expect(nonExtensibleObject).to.not.be.extensible;
   *     expect(sealedObject).to.not.be.extensible;
   *     expect(frozenObject).to.not.be.extensible;
   *     expect(1).to.not.be.extensible;
   *
   * A custom error message can be given as the second argument to `expect`.
   *
   *     expect(1, 'nooo why fail??').to.be.extensible;
   *
   * @name extensible
   * @namespace BDD
   * @api public
   */

  Assertion.addProperty('extensible', function() {
    var obj = flag(this, 'object');

    // In ES5, if the argument to this method is a primitive, then it will cause a TypeError.
    // In ES6, a non-object argument will be treated as if it was a non-extensible ordinary object, simply return false.
    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isExtensible
    // The following provides ES6 behavior for ES5 environments.

    var isExtensible = obj === Object(obj) && Object.isExtensible(obj);

    this.assert(
      isExtensible
      , 'expected #{this} to be extensible'
      , 'expected #{this} to not be extensible'
    );
  });

  /**
   * ### .sealed
   *
   * Asserts that the target is sealed, which means that new properties can't be
   * added to it, and its existing properties can't be reconfigured or deleted.
   * However, it's possible that its existing properties can still be reassigned
   * to different values. Primitives are always sealed.
   *
   *     var sealedObject = Object.seal({});
   *     var frozenObject = Object.freeze({});
   *
   *     expect(sealedObject).to.be.sealed;
   *     expect(frozenObject).to.be.sealed;
   *     expect(1).to.be.sealed;
   *
   * Add `.not` earlier in the chain to negate `.sealed`.
   *
   *     expect({a: 1}).to.not.be.sealed;
   *
   * A custom error message can be given as the second argument to `expect`.
   *
   *     expect({a: 1}, 'nooo why fail??').to.be.sealed;
   *
   * @name sealed
   * @namespace BDD
   * @api public
   */

  Assertion.addProperty('sealed', function() {
    var obj = flag(this, 'object');

    // In ES5, if the argument to this method is a primitive, then it will cause a TypeError.
    // In ES6, a non-object argument will be treated as if it was a sealed ordinary object, simply return true.
    // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isSealed
    // The following provides ES6 behavior for ES5 environments.

    var isSealed = obj === Object(obj) ? Object.isSealed(obj) : true;

    this.assert(
      isSealed
      , 'expected #{this} to be sealed'
      , 'expected #{this} to not be sealed'
    );
  });

  /**
   * ### .frozen
   *
   * Asserts that the target is frozen, which means that new properties can't be
   * added to it, and its existing properties can't be reassigned to different
   * values, reconfigured, or deleted. Primitives are always frozen.
   *
   *     var frozenObject = Object.freeze({});
   *
   *     expect(frozenObject).to.be.frozen;
   *     expect(1).to.be.frozen;
   *
   * Add `.not` earlier in the chain to negate `.frozen`.
   *
   *     expect({a: 1}).to.not.be.frozen;
   *
   * A custom error message can be given as the second argument to `expect`.
   *
   *     expect({a: 1}, 'nooo why fail??').to.be.frozen;
   *
   * @name frozen
   * @namespace BDD
   * @api public
   */

  Assertion.addProperty('frozen', function() {
    var obj = flag(this, 'object');

    // In ES5, if the argument to this method is a primitive, then it will cause a TypeError.
    // In ES6, a non-object argument will be treated as if it was a frozen ordinary object, simply return true.
    // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isFrozen
    // The following provides ES6 behavior for ES5 environments.

    var isFrozen = obj === Object(obj) ? Object.isFrozen(obj) : true;

    this.assert(
      isFrozen
      , 'expected #{this} to be frozen'
      , 'expected #{this} to not be frozen'
    );
  });

  /**
   * ### .finite
   *
   * Asserts that the target is a number, and isn't `NaN` or positive/negative
   * `Infinity`.
   *
   *     expect(1).to.be.finite;
   *
   * Add `.not` earlier in the chain to negate `.finite`. However, it's
   * dangerous to do so. The problem is that it creates uncertain expectations
   * by asserting that the subject either isn't a number, or that it's `NaN`, or
   * that it's positive `Infinity`, or that it's negative `Infinity`. It's often
   * best to identify the exact output that's expected, and then write an
   * assertion that only accepts that exact output.
   *
   * When the target isn't expected to be a number, it's often best to assert
   * that it's the expected type, rather than asserting that it isn't one of
   * many unexpected types.
   *
   *     expect('foo').to.be.a('string'); // Recommended
   *     expect('foo').to.not.be.finite; // Not recommended
   *
   * When the target is expected to be `NaN`, it's often best to assert exactly
   * that.
   *
   *     expect(NaN).to.be.NaN; // Recommended
   *     expect(NaN).to.not.be.finite; // Not recommended
   *
   * When the target is expected to be positive infinity, it's often best to
   * assert exactly that.
   *
   *     expect(Infinity).to.equal(Infinity); // Recommended
   *     expect(Infinity).to.not.be.finite; // Not recommended
   *
   * When the target is expected to be negative infinity, it's often best to
   * assert exactly that.
   *
   *     expect(-Infinity).to.equal(-Infinity); // Recommended
   *     expect(-Infinity).to.not.be.finite; // Not recommended
   *
   * A custom error message can be given as the second argument to `expect`.
   *
   *     expect('foo', 'nooo why fail??').to.be.finite;
   *
   * @name finite
   * @namespace BDD
   * @api public
   */

  Assertion.addProperty('finite', function(msg) {
    var obj = flag(this, 'object');

    this.assert(
        typeof obj === "number" && isFinite(obj)
      , 'expected #{this} to be a finite number'
      , 'expected #{this} to not be a finite number'
    );
  });
};


/***/ }),
/* 105 */
/***/ (function(module, exports) {

/*!
 * chai
 * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

module.exports = function (chai, util) {
  chai.expect = function (val, message) {
    return new chai.Assertion(val, message);
  };

  /**
   * ### .fail(actual, expected, [message], [operator])
   *
   * Throw a failure.
   *
   * @name fail
   * @param {Mixed} actual
   * @param {Mixed} expected
   * @param {String} message
   * @param {String} operator
   * @namespace BDD
   * @api public
   */

  chai.expect.fail = function (actual, expected, message, operator) {
    message = message || 'expect.fail()';
    throw new chai.AssertionError(message, {
        actual: actual
      , expected: expected
      , operator: operator
    }, chai.expect.fail);
  };
};


/***/ }),
/* 106 */
/***/ (function(module, exports) {

/*!
 * chai
 * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

module.exports = function (chai, util) {
  var Assertion = chai.Assertion;

  function loadShould () {
    // explicitly define this method as function as to have it's name to include as `ssfi`
    function shouldGetter() {
      if (this instanceof String
          || this instanceof Number
          || this instanceof Boolean
          || typeof Symbol === 'function' && this instanceof Symbol) {
        return new Assertion(this.valueOf(), null, shouldGetter);
      }
      return new Assertion(this, null, shouldGetter);
    }
    function shouldSetter(value) {
      // See https://github.com/chaijs/chai/issues/86: this makes
      // `whatever.should = someValue` actually set `someValue`, which is
      // especially useful for `global.should = require('chai').should()`.
      //
      // Note that we have to use [[DefineProperty]] instead of [[Put]]
      // since otherwise we would trigger this very setter!
      Object.defineProperty(this, 'should', {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    }
    // modify Object.prototype to have `should`
    Object.defineProperty(Object.prototype, 'should', {
      set: shouldSetter
      , get: shouldGetter
      , configurable: true
    });

    var should = {};

    /**
     * ### .fail(actual, expected, [message], [operator])
     *
     * Throw a failure.
     *
     * @name fail
     * @param {Mixed} actual
     * @param {Mixed} expected
     * @param {String} message
     * @param {String} operator
     * @namespace BDD
     * @api public
     */

    should.fail = function (actual, expected, message, operator) {
      message = message || 'should.fail()';
      throw new chai.AssertionError(message, {
          actual: actual
        , expected: expected
        , operator: operator
      }, should.fail);
    };

    /**
     * ### .equal(actual, expected, [message])
     *
     * Asserts non-strict equality (`==`) of `actual` and `expected`.
     *
     *     should.equal(3, '3', '== coerces values to strings');
     *
     * @name equal
     * @param {Mixed} actual
     * @param {Mixed} expected
     * @param {String} message
     * @namespace Should
     * @api public
     */

    should.equal = function (val1, val2, msg) {
      new Assertion(val1, msg).to.equal(val2);
    };

    /**
     * ### .throw(function, [constructor/string/regexp], [string/regexp], [message])
     *
     * Asserts that `function` will throw an error that is an instance of
     * `constructor`, or alternately that it will throw an error with message
     * matching `regexp`.
     *
     *     should.throw(fn, 'function throws a reference error');
     *     should.throw(fn, /function throws a reference error/);
     *     should.throw(fn, ReferenceError);
     *     should.throw(fn, ReferenceError, 'function throws a reference error');
     *     should.throw(fn, ReferenceError, /function throws a reference error/);
     *
     * @name throw
     * @alias Throw
     * @param {Function} function
     * @param {ErrorConstructor} constructor
     * @param {RegExp} regexp
     * @param {String} message
     * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types
     * @namespace Should
     * @api public
     */

    should.Throw = function (fn, errt, errs, msg) {
      new Assertion(fn, msg).to.Throw(errt, errs);
    };

    /**
     * ### .exist
     *
     * Asserts that the target is neither `null` nor `undefined`.
     *
     *     var foo = 'hi';
     *
     *     should.exist(foo, 'foo exists');
     *
     * @name exist
     * @namespace Should
     * @api public
     */

    should.exist = function (val, msg) {
      new Assertion(val, msg).to.exist;
    }

    // negation
    should.not = {}

    /**
     * ### .not.equal(actual, expected, [message])
     *
     * Asserts non-strict inequality (`!=`) of `actual` and `expected`.
     *
     *     should.not.equal(3, 4, 'these numbers are not equal');
     *
     * @name not.equal
     * @param {Mixed} actual
     * @param {Mixed} expected
     * @param {String} message
     * @namespace Should
     * @api public
     */

    should.not.equal = function (val1, val2, msg) {
      new Assertion(val1, msg).to.not.equal(val2);
    };

    /**
     * ### .throw(function, [constructor/regexp], [message])
     *
     * Asserts that `function` will _not_ throw an error that is an instance of
     * `constructor`, or alternately that it will not throw an error with message
     * matching `regexp`.
     *
     *     should.not.throw(fn, Error, 'function does not throw');
     *
     * @name not.throw
     * @alias not.Throw
     * @param {Function} function
     * @param {ErrorConstructor} constructor
     * @param {RegExp} regexp
     * @param {String} message
     * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types
     * @namespace Should
     * @api public
     */

    should.not.Throw = function (fn, errt, errs, msg) {
      new Assertion(fn, msg).to.not.Throw(errt, errs);
    };

    /**
     * ### .not.exist
     *
     * Asserts that the target is neither `null` nor `undefined`.
     *
     *     var bar = null;
     *
     *     should.not.exist(bar, 'bar does not exist');
     *
     * @name not.exist
     * @namespace Should
     * @api public
     */

    should.not.exist = function (val, msg) {
      new Assertion(val, msg).to.not.exist;
    }

    should['throw'] = should['Throw'];
    should.not['throw'] = should.not['Throw'];

    return should;
  };

  chai.should = loadShould;
  chai.Should = loadShould;
};


/***/ }),
/* 107 */
/***/ (function(module, exports) {

/*!
 * chai
 * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */


module.exports = function (chai, util) {

  /*!
   * Chai dependencies.
   */

  var Assertion = chai.Assertion
    , flag = util.flag;

  /*!
   * Module export.
   */

  /**
   * ### assert(expression, message)
   *
   * Write your own test expressions.
   *
   *     assert('foo' !== 'bar', 'foo is not bar');
   *     assert(Array.isArray([]), 'empty arrays are arrays');
   *
   * @param {Mixed} expression to test for truthiness
   * @param {String} message to display on error
   * @name assert
   * @namespace Assert
   * @api public
   */

  var assert = chai.assert = function (express, errmsg) {
    var test = new Assertion(null, null, chai.assert, true);
    test.assert(
        express
      , errmsg
      , '[ negation message unavailable ]'
    );
  };

  /**
   * ### .fail(actual, expected, [message], [operator])
   *
   * Throw a failure. Node.js `assert` module-compatible.
   *
   * @name fail
   * @param {Mixed} actual
   * @param {Mixed} expected
   * @param {String} message
   * @param {String} operator
   * @namespace Assert
   * @api public
   */

  assert.fail = function (actual, expected, message, operator) {
    message = message || 'assert.fail()';
    throw new chai.AssertionError(message, {
        actual: actual
      , expected: expected
      , operator: operator
    }, assert.fail);
  };

  /**
   * ### .isOk(object, [message])
   *
   * Asserts that `object` is truthy.
   *
   *     assert.isOk('everything', 'everything is ok');
   *     assert.isOk(false, 'this will fail');
   *
   * @name isOk
   * @alias ok
   * @param {Mixed} object to test
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.isOk = function (val, msg) {
    new Assertion(val, msg, assert.isOk, true).is.ok;
  };

  /**
   * ### .isNotOk(object, [message])
   *
   * Asserts that `object` is falsy.
   *
   *     assert.isNotOk('everything', 'this will fail');
   *     assert.isNotOk(false, 'this will pass');
   *
   * @name isNotOk
   * @alias notOk
   * @param {Mixed} object to test
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.isNotOk = function (val, msg) {
    new Assertion(val, msg, assert.isNotOk, true).is.not.ok;
  };

  /**
   * ### .equal(actual, expected, [message])
   *
   * Asserts non-strict equality (`==`) of `actual` and `expected`.
   *
   *     assert.equal(3, '3', '== coerces values to strings');
   *
   * @name equal
   * @param {Mixed} actual
   * @param {Mixed} expected
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.equal = function (act, exp, msg) {
    var test = new Assertion(act, msg, assert.equal, true);

    test.assert(
        exp == flag(test, 'object')
      , 'expected #{this} to equal #{exp}'
      , 'expected #{this} to not equal #{act}'
      , exp
      , act
      , true
    );
  };

  /**
   * ### .notEqual(actual, expected, [message])
   *
   * Asserts non-strict inequality (`!=`) of `actual` and `expected`.
   *
   *     assert.notEqual(3, 4, 'these numbers are not equal');
   *
   * @name notEqual
   * @param {Mixed} actual
   * @param {Mixed} expected
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.notEqual = function (act, exp, msg) {
    var test = new Assertion(act, msg, assert.notEqual, true);

    test.assert(
        exp != flag(test, 'object')
      , 'expected #{this} to not equal #{exp}'
      , 'expected #{this} to equal #{act}'
      , exp
      , act
      , true
    );
  };

  /**
   * ### .strictEqual(actual, expected, [message])
   *
   * Asserts strict equality (`===`) of `actual` and `expected`.
   *
   *     assert.strictEqual(true, true, 'these booleans are strictly equal');
   *
   * @name strictEqual
   * @param {Mixed} actual
   * @param {Mixed} expected
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.strictEqual = function (act, exp, msg) {
    new Assertion(act, msg, assert.strictEqual, true).to.equal(exp);
  };

  /**
   * ### .notStrictEqual(actual, expected, [message])
   *
   * Asserts strict inequality (`!==`) of `actual` and `expected`.
   *
   *     assert.notStrictEqual(3, '3', 'no coercion for strict equality');
   *
   * @name notStrictEqual
   * @param {Mixed} actual
   * @param {Mixed} expected
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.notStrictEqual = function (act, exp, msg) {
    new Assertion(act, msg, assert.notStrictEqual, true).to.not.equal(exp);
  };

  /**
   * ### .deepEqual(actual, expected, [message])
   *
   * Asserts that `actual` is deeply equal to `expected`.
   *
   *     assert.deepEqual({ tea: 'green' }, { tea: 'green' });
   *
   * @name deepEqual
   * @param {Mixed} actual
   * @param {Mixed} expected
   * @param {String} message
   * @alias deepStrictEqual
   * @namespace Assert
   * @api public
   */

  assert.deepEqual = assert.deepStrictEqual = function (act, exp, msg) {
    new Assertion(act, msg, assert.deepEqual, true).to.eql(exp);
  };

  /**
   * ### .notDeepEqual(actual, expected, [message])
   *
   * Assert that `actual` is not deeply equal to `expected`.
   *
   *     assert.notDeepEqual({ tea: 'green' }, { tea: 'jasmine' });
   *
   * @name notDeepEqual
   * @param {Mixed} actual
   * @param {Mixed} expected
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.notDeepEqual = function (act, exp, msg) {
    new Assertion(act, msg, assert.notDeepEqual, true).to.not.eql(exp);
  };

   /**
   * ### .isAbove(valueToCheck, valueToBeAbove, [message])
   *
   * Asserts `valueToCheck` is strictly greater than (>) `valueToBeAbove`.
   *
   *     assert.isAbove(5, 2, '5 is strictly greater than 2');
   *
   * @name isAbove
   * @param {Mixed} valueToCheck
   * @param {Mixed} valueToBeAbove
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.isAbove = function (val, abv, msg) {
    new Assertion(val, msg, assert.isAbove, true).to.be.above(abv);
  };

   /**
   * ### .isAtLeast(valueToCheck, valueToBeAtLeast, [message])
   *
   * Asserts `valueToCheck` is greater than or equal to (>=) `valueToBeAtLeast`.
   *
   *     assert.isAtLeast(5, 2, '5 is greater or equal to 2');
   *     assert.isAtLeast(3, 3, '3 is greater or equal to 3');
   *
   * @name isAtLeast
   * @param {Mixed} valueToCheck
   * @param {Mixed} valueToBeAtLeast
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.isAtLeast = function (val, atlst, msg) {
    new Assertion(val, msg, assert.isAtLeast, true).to.be.least(atlst);
  };

   /**
   * ### .isBelow(valueToCheck, valueToBeBelow, [message])
   *
   * Asserts `valueToCheck` is strictly less than (<) `valueToBeBelow`.
   *
   *     assert.isBelow(3, 6, '3 is strictly less than 6');
   *
   * @name isBelow
   * @param {Mixed} valueToCheck
   * @param {Mixed} valueToBeBelow
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.isBelow = function (val, blw, msg) {
    new Assertion(val, msg, assert.isBelow, true).to.be.below(blw);
  };

   /**
   * ### .isAtMost(valueToCheck, valueToBeAtMost, [message])
   *
   * Asserts `valueToCheck` is less than or equal to (<=) `valueToBeAtMost`.
   *
   *     assert.isAtMost(3, 6, '3 is less than or equal to 6');
   *     assert.isAtMost(4, 4, '4 is less than or equal to 4');
   *
   * @name isAtMost
   * @param {Mixed} valueToCheck
   * @param {Mixed} valueToBeAtMost
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.isAtMost = function (val, atmst, msg) {
    new Assertion(val, msg, assert.isAtMost, true).to.be.most(atmst);
  };

  /**
   * ### .isTrue(value, [message])
   *
   * Asserts that `value` is true.
   *
   *     var teaServed = true;
   *     assert.isTrue(teaServed, 'the tea has been served');
   *
   * @name isTrue
   * @param {Mixed} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.isTrue = function (val, msg) {
    new Assertion(val, msg, assert.isTrue, true).is['true'];
  };

  /**
   * ### .isNotTrue(value, [message])
   *
   * Asserts that `value` is not true.
   *
   *     var tea = 'tasty chai';
   *     assert.isNotTrue(tea, 'great, time for tea!');
   *
   * @name isNotTrue
   * @param {Mixed} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.isNotTrue = function (val, msg) {
    new Assertion(val, msg, assert.isNotTrue, true).to.not.equal(true);
  };

  /**
   * ### .isFalse(value, [message])
   *
   * Asserts that `value` is false.
   *
   *     var teaServed = false;
   *     assert.isFalse(teaServed, 'no tea yet? hmm...');
   *
   * @name isFalse
   * @param {Mixed} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.isFalse = function (val, msg) {
    new Assertion(val, msg, assert.isFalse, true).is['false'];
  };

  /**
   * ### .isNotFalse(value, [message])
   *
   * Asserts that `value` is not false.
   *
   *     var tea = 'tasty chai';
   *     assert.isNotFalse(tea, 'great, time for tea!');
   *
   * @name isNotFalse
   * @param {Mixed} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.isNotFalse = function (val, msg) {
    new Assertion(val, msg, assert.isNotFalse, true).to.not.equal(false);
  };

  /**
   * ### .isNull(value, [message])
   *
   * Asserts that `value` is null.
   *
   *     assert.isNull(err, 'there was no error');
   *
   * @name isNull
   * @param {Mixed} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.isNull = function (val, msg) {
    new Assertion(val, msg, assert.isNull, true).to.equal(null);
  };

  /**
   * ### .isNotNull(value, [message])
   *
   * Asserts that `value` is not null.
   *
   *     var tea = 'tasty chai';
   *     assert.isNotNull(tea, 'great, time for tea!');
   *
   * @name isNotNull
   * @param {Mixed} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.isNotNull = function (val, msg) {
    new Assertion(val, msg, assert.isNotNull, true).to.not.equal(null);
  };

  /**
   * ### .isNaN
   *
   * Asserts that value is NaN.
   *
   *     assert.isNaN(NaN, 'NaN is NaN');
   *
   * @name isNaN
   * @param {Mixed} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.isNaN = function (val, msg) {
    new Assertion(val, msg, assert.isNaN, true).to.be.NaN;
  };

  /**
   * ### .isNotNaN
   *
   * Asserts that value is not NaN.
   *
   *     assert.isNotNaN(4, '4 is not NaN');
   *
   * @name isNotNaN
   * @param {Mixed} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */
  assert.isNotNaN = function (val, msg) {
    new Assertion(val, msg, assert.isNotNaN, true).not.to.be.NaN;
  };

  /**
   * ### .exists
   *
   * Asserts that the target is neither `null` nor `undefined`.
   *
   *     var foo = 'hi';
   *
   *     assert.exists(foo, 'foo is neither `null` nor `undefined`');
   *
   * @name exists
   * @param {Mixed} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.exists = function (val, msg) {
    new Assertion(val, msg, assert.exists, true).to.exist;
  };

  /**
   * ### .notExists
   *
   * Asserts that the target is either `null` or `undefined`.
   *
   *     var bar = null
   *       , baz;
   *
   *     assert.notExists(bar);
   *     assert.notExists(baz, 'baz is either null or undefined');
   *
   * @name notExists
   * @param {Mixed} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.notExists = function (val, msg) {
    new Assertion(val, msg, assert.notExists, true).to.not.exist;
  };

  /**
   * ### .isUndefined(value, [message])
   *
   * Asserts that `value` is `undefined`.
   *
   *     var tea;
   *     assert.isUndefined(tea, 'no tea defined');
   *
   * @name isUndefined
   * @param {Mixed} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.isUndefined = function (val, msg) {
    new Assertion(val, msg, assert.isUndefined, true).to.equal(undefined);
  };

  /**
   * ### .isDefined(value, [message])
   *
   * Asserts that `value` is not `undefined`.
   *
   *     var tea = 'cup of chai';
   *     assert.isDefined(tea, 'tea has been defined');
   *
   * @name isDefined
   * @param {Mixed} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.isDefined = function (val, msg) {
    new Assertion(val, msg, assert.isDefined, true).to.not.equal(undefined);
  };

  /**
   * ### .isFunction(value, [message])
   *
   * Asserts that `value` is a function.
   *
   *     function serveTea() { return 'cup of tea'; };
   *     assert.isFunction(serveTea, 'great, we can have tea now');
   *
   * @name isFunction
   * @param {Mixed} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.isFunction = function (val, msg) {
    new Assertion(val, msg, assert.isFunction, true).to.be.a('function');
  };

  /**
   * ### .isNotFunction(value, [message])
   *
   * Asserts that `value` is _not_ a function.
   *
   *     var serveTea = [ 'heat', 'pour', 'sip' ];
   *     assert.isNotFunction(serveTea, 'great, we have listed the steps');
   *
   * @name isNotFunction
   * @param {Mixed} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.isNotFunction = function (val, msg) {
    new Assertion(val, msg, assert.isNotFunction, true).to.not.be.a('function');
  };

  /**
   * ### .isObject(value, [message])
   *
   * Asserts that `value` is an object of type 'Object' (as revealed by `Object.prototype.toString`).
   * _The assertion does not match subclassed objects._
   *
   *     var selection = { name: 'Chai', serve: 'with spices' };
   *     assert.isObject(selection, 'tea selection is an object');
   *
   * @name isObject
   * @param {Mixed} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.isObject = function (val, msg) {
    new Assertion(val, msg, assert.isObject, true).to.be.a('object');
  };

  /**
   * ### .isNotObject(value, [message])
   *
   * Asserts that `value` is _not_ an object of type 'Object' (as revealed by `Object.prototype.toString`).
   *
   *     var selection = 'chai'
   *     assert.isNotObject(selection, 'tea selection is not an object');
   *     assert.isNotObject(null, 'null is not an object');
   *
   * @name isNotObject
   * @param {Mixed} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.isNotObject = function (val, msg) {
    new Assertion(val, msg, assert.isNotObject, true).to.not.be.a('object');
  };

  /**
   * ### .isArray(value, [message])
   *
   * Asserts that `value` is an array.
   *
   *     var menu = [ 'green', 'chai', 'oolong' ];
   *     assert.isArray(menu, 'what kind of tea do we want?');
   *
   * @name isArray
   * @param {Mixed} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.isArray = function (val, msg) {
    new Assertion(val, msg, assert.isArray, true).to.be.an('array');
  };

  /**
   * ### .isNotArray(value, [message])
   *
   * Asserts that `value` is _not_ an array.
   *
   *     var menu = 'green|chai|oolong';
   *     assert.isNotArray(menu, 'what kind of tea do we want?');
   *
   * @name isNotArray
   * @param {Mixed} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.isNotArray = function (val, msg) {
    new Assertion(val, msg, assert.isNotArray, true).to.not.be.an('array');
  };

  /**
   * ### .isString(value, [message])
   *
   * Asserts that `value` is a string.
   *
   *     var teaOrder = 'chai';
   *     assert.isString(teaOrder, 'order placed');
   *
   * @name isString
   * @param {Mixed} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.isString = function (val, msg) {
    new Assertion(val, msg, assert.isString, true).to.be.a('string');
  };

  /**
   * ### .isNotString(value, [message])
   *
   * Asserts that `value` is _not_ a string.
   *
   *     var teaOrder = 4;
   *     assert.isNotString(teaOrder, 'order placed');
   *
   * @name isNotString
   * @param {Mixed} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.isNotString = function (val, msg) {
    new Assertion(val, msg, assert.isNotString, true).to.not.be.a('string');
  };

  /**
   * ### .isNumber(value, [message])
   *
   * Asserts that `value` is a number.
   *
   *     var cups = 2;
   *     assert.isNumber(cups, 'how many cups');
   *
   * @name isNumber
   * @param {Number} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.isNumber = function (val, msg) {
    new Assertion(val, msg, assert.isNumber, true).to.be.a('number');
  };

  /**
   * ### .isNotNumber(value, [message])
   *
   * Asserts that `value` is _not_ a number.
   *
   *     var cups = '2 cups please';
   *     assert.isNotNumber(cups, 'how many cups');
   *
   * @name isNotNumber
   * @param {Mixed} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.isNotNumber = function (val, msg) {
    new Assertion(val, msg, assert.isNotNumber, true).to.not.be.a('number');
  };

   /**
   * ### .isFinite(value, [message])
   *
   * Asserts that `value` is a finite number. Unlike `.isNumber`, this will fail for `NaN` and `Infinity`.
   *
   *     var cups = 2;
   *     assert.isFinite(cups, 'how many cups');
   *
   *     assert.isFinite(NaN); // throws
   *
   * @name isFinite
   * @param {Number} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.isFinite = function (val, msg) {
    new Assertion(val, msg, assert.isFinite, true).to.be.finite;
  };

  /**
   * ### .isBoolean(value, [message])
   *
   * Asserts that `value` is a boolean.
   *
   *     var teaReady = true
   *       , teaServed = false;
   *
   *     assert.isBoolean(teaReady, 'is the tea ready');
   *     assert.isBoolean(teaServed, 'has tea been served');
   *
   * @name isBoolean
   * @param {Mixed} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.isBoolean = function (val, msg) {
    new Assertion(val, msg, assert.isBoolean, true).to.be.a('boolean');
  };

  /**
   * ### .isNotBoolean(value, [message])
   *
   * Asserts that `value` is _not_ a boolean.
   *
   *     var teaReady = 'yep'
   *       , teaServed = 'nope';
   *
   *     assert.isNotBoolean(teaReady, 'is the tea ready');
   *     assert.isNotBoolean(teaServed, 'has tea been served');
   *
   * @name isNotBoolean
   * @param {Mixed} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.isNotBoolean = function (val, msg) {
    new Assertion(val, msg, assert.isNotBoolean, true).to.not.be.a('boolean');
  };

  /**
   * ### .typeOf(value, name, [message])
   *
   * Asserts that `value`'s type is `name`, as determined by
   * `Object.prototype.toString`.
   *
   *     assert.typeOf({ tea: 'chai' }, 'object', 'we have an object');
   *     assert.typeOf(['chai', 'jasmine'], 'array', 'we have an array');
   *     assert.typeOf('tea', 'string', 'we have a string');
   *     assert.typeOf(/tea/, 'regexp', 'we have a regular expression');
   *     assert.typeOf(null, 'null', 'we have a null');
   *     assert.typeOf(undefined, 'undefined', 'we have an undefined');
   *
   * @name typeOf
   * @param {Mixed} value
   * @param {String} name
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.typeOf = function (val, type, msg) {
    new Assertion(val, msg, assert.typeOf, true).to.be.a(type);
  };

  /**
   * ### .notTypeOf(value, name, [message])
   *
   * Asserts that `value`'s type is _not_ `name`, as determined by
   * `Object.prototype.toString`.
   *
   *     assert.notTypeOf('tea', 'number', 'strings are not numbers');
   *
   * @name notTypeOf
   * @param {Mixed} value
   * @param {String} typeof name
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.notTypeOf = function (val, type, msg) {
    new Assertion(val, msg, assert.notTypeOf, true).to.not.be.a(type);
  };

  /**
   * ### .instanceOf(object, constructor, [message])
   *
   * Asserts that `value` is an instance of `constructor`.
   *
   *     var Tea = function (name) { this.name = name; }
   *       , chai = new Tea('chai');
   *
   *     assert.instanceOf(chai, Tea, 'chai is an instance of tea');
   *
   * @name instanceOf
   * @param {Object} object
   * @param {Constructor} constructor
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.instanceOf = function (val, type, msg) {
    new Assertion(val, msg, assert.instanceOf, true).to.be.instanceOf(type);
  };

  /**
   * ### .notInstanceOf(object, constructor, [message])
   *
   * Asserts `value` is not an instance of `constructor`.
   *
   *     var Tea = function (name) { this.name = name; }
   *       , chai = new String('chai');
   *
   *     assert.notInstanceOf(chai, Tea, 'chai is not an instance of tea');
   *
   * @name notInstanceOf
   * @param {Object} object
   * @param {Constructor} constructor
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.notInstanceOf = function (val, type, msg) {
    new Assertion(val, msg, assert.notInstanceOf, true)
      .to.not.be.instanceOf(type);
  };

  /**
   * ### .include(haystack, needle, [message])
   *
   * Asserts that `haystack` includes `needle`. Can be used to assert the
   * inclusion of a value in an array, a substring in a string, or a subset of
   * properties in an object.
   *
   *     assert.include([1,2,3], 2, 'array contains value');
   *     assert.include('foobar', 'foo', 'string contains substring');
   *     assert.include({ foo: 'bar', hello: 'universe' }, { foo: 'bar' }, 'object contains property');
   *
   * Strict equality (===) is used. When asserting the inclusion of a value in
   * an array, the array is searched for an element that's strictly equal to the
   * given value. When asserting a subset of properties in an object, the object
   * is searched for the given property keys, checking that each one is present
   * and stricty equal to the given property value. For instance:
   *
   *     var obj1 = {a: 1}
   *       , obj2 = {b: 2};
   *     assert.include([obj1, obj2], obj1);
   *     assert.include({foo: obj1, bar: obj2}, {foo: obj1});
   *     assert.include({foo: obj1, bar: obj2}, {foo: obj1, bar: obj2});
   *
   * @name include
   * @param {Array|String} haystack
   * @param {Mixed} needle
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.include = function (exp, inc, msg) {
    new Assertion(exp, msg, assert.include, true).include(inc);
  };

  /**
   * ### .notInclude(haystack, needle, [message])
   *
   * Asserts that `haystack` does not include `needle`. Can be used to assert
   * the absence of a value in an array, a substring in a string, or a subset of
   * properties in an object.
   *
   *     assert.notInclude([1,2,3], 4, 'array doesn't contain value');
   *     assert.notInclude('foobar', 'baz', 'string doesn't contain substring');
   *     assert.notInclude({ foo: 'bar', hello: 'universe' }, { foo: 'baz' }, 'object doesn't contain property');
   *
   * Strict equality (===) is used. When asserting the absence of a value in an
   * array, the array is searched to confirm the absence of an element that's
   * strictly equal to the given value. When asserting a subset of properties in
   * an object, the object is searched to confirm that at least one of the given
   * property keys is either not present or not strictly equal to the given
   * property value. For instance:
   *
   *     var obj1 = {a: 1}
   *       , obj2 = {b: 2};
   *     assert.notInclude([obj1, obj2], {a: 1});
   *     assert.notInclude({foo: obj1, bar: obj2}, {foo: {a: 1}});
   *     assert.notInclude({foo: obj1, bar: obj2}, {foo: obj1, bar: {b: 2}});
   *
   * @name notInclude
   * @param {Array|String} haystack
   * @param {Mixed} needle
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.notInclude = function (exp, inc, msg) {
    new Assertion(exp, msg, assert.notInclude, true).not.include(inc);
  };

  /**
   * ### .deepInclude(haystack, needle, [message])
   *
   * Asserts that `haystack` includes `needle`. Can be used to assert the
   * inclusion of a value in an array or a subset of properties in an object.
   * Deep equality is used.
   *
   *     var obj1 = {a: 1}
   *       , obj2 = {b: 2};
   *     assert.deepInclude([obj1, obj2], {a: 1});
   *     assert.deepInclude({foo: obj1, bar: obj2}, {foo: {a: 1}});
   *     assert.deepInclude({foo: obj1, bar: obj2}, {foo: {a: 1}, bar: {b: 2}});
   *
   * @name deepInclude
   * @param {Array|String} haystack
   * @param {Mixed} needle
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.deepInclude = function (exp, inc, msg) {
    new Assertion(exp, msg, assert.deepInclude, true).deep.include(inc);
  };

  /**
   * ### .notDeepInclude(haystack, needle, [message])
   *
   * Asserts that `haystack` does not include `needle`. Can be used to assert
   * the absence of a value in an array or a subset of properties in an object.
   * Deep equality is used.
   *
   *     var obj1 = {a: 1}
   *       , obj2 = {b: 2};
   *     assert.notDeepInclude([obj1, obj2], {a: 9});
   *     assert.notDeepInclude({foo: obj1, bar: obj2}, {foo: {a: 9}});
   *     assert.notDeepInclude({foo: obj1, bar: obj2}, {foo: {a: 1}, bar: {b: 9}});
   *
   * @name notDeepInclude
   * @param {Array|String} haystack
   * @param {Mixed} needle
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.notDeepInclude = function (exp, inc, msg) {
    new Assertion(exp, msg, assert.notDeepInclude, true).not.deep.include(inc);
  };

  /**
   * ### .nestedInclude(haystack, needle, [message])
   * 
   * Asserts that 'haystack' includes 'needle'. 
   * Can be used to assert the inclusion of a subset of properties in an 
   * object.
   * Enables the use of dot- and bracket-notation for referencing nested 
   * properties.
   * '[]' and '.' in property names can be escaped using double backslashes.
   * 
   *     assert.nestedInclude({'.a': {'b': 'x'}}, {'\\.a.[b]': 'x'});
   *     assert.nestedInclude({'a': {'[b]': 'x'}}, {'a.\\[b\\]': 'x'});
   * 
   * @name nestedInclude
   * @param {Object} haystack
   * @param {Object} needle
   * @param {String} message
   * @namespace Assert
   * @api public 
   */ 

  assert.nestedInclude = function (exp, inc, msg) {
    new Assertion(exp, msg, assert.nestedInclude, true).nested.include(inc);
  };

  /**
   * ### .notNestedInclude(haystack, needle, [message])
   * 
   * Asserts that 'haystack' does not include 'needle'. 
   * Can be used to assert the absence of a subset of properties in an 
   * object.
   * Enables the use of dot- and bracket-notation for referencing nested 
   * properties. 
   * '[]' and '.' in property names can be escaped using double backslashes.
   * 
   *     assert.notNestedInclude({'.a': {'b': 'x'}}, {'\\.a.b': 'y'});
   *     assert.notNestedInclude({'a': {'[b]': 'x'}}, {'a.\\[b\\]': 'y'});
   * 
   * @name notNestedInclude
   * @param {Object} haystack
   * @param {Object} needle
   * @param {String} message
   * @namespace Assert
   * @api public 
   */ 

  assert.notNestedInclude = function (exp, inc, msg) {
    new Assertion(exp, msg, assert.notNestedInclude, true)
      .not.nested.include(inc);
  };

  /**
   * ### .deepNestedInclude(haystack, needle, [message])
   * 
   * Asserts that 'haystack' includes 'needle'.
   * Can be used to assert the inclusion of a subset of properties in an 
   * object while checking for deep equality.
   * Enables the use of dot- and bracket-notation for referencing nested 
   * properties.
   * '[]' and '.' in property names can be escaped using double backslashes.
   * 
   *     assert.deepNestedInclude({a: {b: [{x: 1}]}}, {'a.b[0]': {x: 1}});
   *     assert.deepNestedInclude({'.a': {'[b]': {x: 1}}}, {'\\.a.\\[b\\]': {x: 1}});
   *    
   * @name deepNestedInclude
   * @param {Object} haystack
   * @param {Object} needle
   * @param {String} message
   * @namespace Assert
   * @api public 
   */

  assert.deepNestedInclude = function(exp, inc, msg) {
    new Assertion(exp, msg, assert.deepNestedInclude, true)
      .deep.nested.include(inc);
  };

  /**
   * ### .notDeepNestedInclude(haystack, needle, [message])
   * 
   * Asserts that 'haystack' does not include 'needle'.
   * Can be used to assert the absence of a subset of properties in an 
   * object while checking for deep equality.
   * Enables the use of dot- and bracket-notation for referencing nested 
   * properties.
   * '[]' and '.' in property names can be escaped using double backslashes.
   * 
   *     assert.notDeepNestedInclude({a: {b: [{x: 1}]}}, {'a.b[0]': {y: 1}})
   *     assert.notDeepNestedInclude({'.a': {'[b]': {x: 1}}}, {'\\.a.\\[b\\]': {y: 2}});
   *    
   * @name notDeepNestedInclude
   * @param {Object} haystack
   * @param {Object} needle
   * @param {String} message
   * @namespace Assert
   * @api public 
   */

  assert.notDeepNestedInclude = function(exp, inc, msg) {
    new Assertion(exp, msg, assert.notDeepNestedInclude, true)
      .not.deep.nested.include(inc);
  };

  /**
   * ### .ownInclude(haystack, needle, [message])
   * 
   * Asserts that 'haystack' includes 'needle'.
   * Can be used to assert the inclusion of a subset of properties in an 
   * object while ignoring inherited properties.
   * 
   *     assert.ownInclude({ a: 1 }, { a: 1 });
   * 
   * @name ownInclude
   * @param {Object} haystack
   * @param {Object} needle
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.ownInclude = function(exp, inc, msg) {
    new Assertion(exp, msg, assert.ownInclude, true).own.include(inc);
  };

  /**
   * ### .notOwnInclude(haystack, needle, [message])
   * 
   * Asserts that 'haystack' includes 'needle'.
   * Can be used to assert the absence of a subset of properties in an 
   * object while ignoring inherited properties.
   * 
   *     Object.prototype.b = 2;
   * 
   *     assert.notOwnInclude({ a: 1 }, { b: 2 });
   * 
   * @name notOwnInclude
   * @param {Object} haystack
   * @param {Object} needle
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.notOwnInclude = function(exp, inc, msg) {
    new Assertion(exp, msg, assert.notOwnInclude, true).not.own.include(inc);
  };

  /**
   * ### .deepOwnInclude(haystack, needle, [message])
   * 
   * Asserts that 'haystack' includes 'needle'.
   * Can be used to assert the inclusion of a subset of properties in an 
   * object while ignoring inherited properties and checking for deep equality.
   * 
   *      assert.deepOwnInclude({a: {b: 2}}, {a: {b: 2}});
   *      
   * @name deepOwnInclude
   * @param {Object} haystack
   * @param {Object} needle
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.deepOwnInclude = function(exp, inc, msg) {
    new Assertion(exp, msg, assert.deepOwnInclude, true)
      .deep.own.include(inc);
  };

   /**
   * ### .notDeepOwnInclude(haystack, needle, [message])
   * 
   * Asserts that 'haystack' includes 'needle'.
   * Can be used to assert the absence of a subset of properties in an 
   * object while ignoring inherited properties and checking for deep equality.
   * 
   *      assert.notDeepOwnInclude({a: {b: 2}}, {a: {c: 3}});
   *      
   * @name notDeepOwnInclude
   * @param {Object} haystack
   * @param {Object} needle
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.notDeepOwnInclude = function(exp, inc, msg) {
    new Assertion(exp, msg, assert.notDeepOwnInclude, true)
      .not.deep.own.include(inc);
  };

  /**
   * ### .match(value, regexp, [message])
   *
   * Asserts that `value` matches the regular expression `regexp`.
   *
   *     assert.match('foobar', /^foo/, 'regexp matches');
   *
   * @name match
   * @param {Mixed} value
   * @param {RegExp} regexp
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.match = function (exp, re, msg) {
    new Assertion(exp, msg, assert.match, true).to.match(re);
  };

  /**
   * ### .notMatch(value, regexp, [message])
   *
   * Asserts that `value` does not match the regular expression `regexp`.
   *
   *     assert.notMatch('foobar', /^foo/, 'regexp does not match');
   *
   * @name notMatch
   * @param {Mixed} value
   * @param {RegExp} regexp
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.notMatch = function (exp, re, msg) {
    new Assertion(exp, msg, assert.notMatch, true).to.not.match(re);
  };

  /**
   * ### .property(object, property, [message])
   *
   * Asserts that `object` has a direct or inherited property named by
   * `property`.
   *
   *     assert.property({ tea: { green: 'matcha' }}, 'tea');
   *     assert.property({ tea: { green: 'matcha' }}, 'toString');
   *
   * @name property
   * @param {Object} object
   * @param {String} property
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.property = function (obj, prop, msg) {
    new Assertion(obj, msg, assert.property, true).to.have.property(prop);
  };

  /**
   * ### .notProperty(object, property, [message])
   *
   * Asserts that `object` does _not_ have a direct or inherited property named
   * by `property`.
   *
   *     assert.notProperty({ tea: { green: 'matcha' }}, 'coffee');
   *
   * @name notProperty
   * @param {Object} object
   * @param {String} property
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.notProperty = function (obj, prop, msg) {
    new Assertion(obj, msg, assert.notProperty, true)
      .to.not.have.property(prop);
  };

  /**
   * ### .propertyVal(object, property, value, [message])
   *
   * Asserts that `object` has a direct or inherited property named by
   * `property` with a value given by `value`. Uses a strict equality check
   * (===).
   *
   *     assert.propertyVal({ tea: 'is good' }, 'tea', 'is good');
   *
   * @name propertyVal
   * @param {Object} object
   * @param {String} property
   * @param {Mixed} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.propertyVal = function (obj, prop, val, msg) {
    new Assertion(obj, msg, assert.propertyVal, true)
      .to.have.property(prop, val);
  };

  /**
   * ### .notPropertyVal(object, property, value, [message])
   *
   * Asserts that `object` does _not_ have a direct or inherited property named
   * by `property` with value given by `value`. Uses a strict equality check
   * (===).
   *
   *     assert.notPropertyVal({ tea: 'is good' }, 'tea', 'is bad');
   *     assert.notPropertyVal({ tea: 'is good' }, 'coffee', 'is good');
   *
   * @name notPropertyVal
   * @param {Object} object
   * @param {String} property
   * @param {Mixed} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.notPropertyVal = function (obj, prop, val, msg) {
    new Assertion(obj, msg, assert.notPropertyVal, true)
      .to.not.have.property(prop, val);
  };

  /**
   * ### .deepPropertyVal(object, property, value, [message])
   *
   * Asserts that `object` has a direct or inherited property named by
   * `property` with a value given by `value`. Uses a deep equality check.
   *
   *     assert.deepPropertyVal({ tea: { green: 'matcha' } }, 'tea', { green: 'matcha' });
   *
   * @name deepPropertyVal
   * @param {Object} object
   * @param {String} property
   * @param {Mixed} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.deepPropertyVal = function (obj, prop, val, msg) {
    new Assertion(obj, msg, assert.deepPropertyVal, true)
      .to.have.deep.property(prop, val);
  };

  /**
   * ### .notDeepPropertyVal(object, property, value, [message])
   *
   * Asserts that `object` does _not_ have a direct or inherited property named
   * by `property` with value given by `value`. Uses a deep equality check.
   *
   *     assert.notDeepPropertyVal({ tea: { green: 'matcha' } }, 'tea', { black: 'matcha' });
   *     assert.notDeepPropertyVal({ tea: { green: 'matcha' } }, 'tea', { green: 'oolong' });
   *     assert.notDeepPropertyVal({ tea: { green: 'matcha' } }, 'coffee', { green: 'matcha' });
   *
   * @name notDeepPropertyVal
   * @param {Object} object
   * @param {String} property
   * @param {Mixed} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.notDeepPropertyVal = function (obj, prop, val, msg) {
    new Assertion(obj, msg, assert.notDeepPropertyVal, true)
      .to.not.have.deep.property(prop, val);
  };

  /**
   * ### .ownProperty(object, property, [message])
   *
   * Asserts that `object` has a direct property named by `property`. Inherited
   * properties aren't checked.
   *
   *     assert.ownProperty({ tea: { green: 'matcha' }}, 'tea');
   *
   * @name ownProperty
   * @param {Object} object
   * @param {String} property
   * @param {String} message
   * @api public
   */

  assert.ownProperty = function (obj, prop, msg) {
    new Assertion(obj, msg, assert.ownProperty, true)
      .to.have.own.property(prop);
  };

  /**
   * ### .notOwnProperty(object, property, [message])
   *
   * Asserts that `object` does _not_ have a direct property named by
   * `property`. Inherited properties aren't checked.
   *
   *     assert.notOwnProperty({ tea: { green: 'matcha' }}, 'coffee');
   *     assert.notOwnProperty({}, 'toString');
   *
   * @name notOwnProperty
   * @param {Object} object
   * @param {String} property
   * @param {String} message
   * @api public
   */

  assert.notOwnProperty = function (obj, prop, msg) {
    new Assertion(obj, msg, assert.notOwnProperty, true)
      .to.not.have.own.property(prop);
  };

  /**
   * ### .ownPropertyVal(object, property, value, [message])
   *
   * Asserts that `object` has a direct property named by `property` and a value
   * equal to the provided `value`. Uses a strict equality check (===).
   * Inherited properties aren't checked.
   *
   *     assert.ownPropertyVal({ coffee: 'is good'}, 'coffee', 'is good');
   *
   * @name ownPropertyVal
   * @param {Object} object
   * @param {String} property
   * @param {Mixed} value
   * @param {String} message
   * @api public
   */

  assert.ownPropertyVal = function (obj, prop, value, msg) {
    new Assertion(obj, msg, assert.ownPropertyVal, true)
      .to.have.own.property(prop, value);
  };

  /**
   * ### .notOwnPropertyVal(object, property, value, [message])
   *
   * Asserts that `object` does _not_ have a direct property named by `property`
   * with a value equal to the provided `value`. Uses a strict equality check
   * (===). Inherited properties aren't checked.
   *
   *     assert.notOwnPropertyVal({ tea: 'is better'}, 'tea', 'is worse');
   *     assert.notOwnPropertyVal({}, 'toString', Object.prototype.toString);
   *
   * @name notOwnPropertyVal
   * @param {Object} object
   * @param {String} property
   * @param {Mixed} value
   * @param {String} message
   * @api public
   */

  assert.notOwnPropertyVal = function (obj, prop, value, msg) {
    new Assertion(obj, msg, assert.notOwnPropertyVal, true)
      .to.not.have.own.property(prop, value);
  };

  /**
   * ### .deepOwnPropertyVal(object, property, value, [message])
   *
   * Asserts that `object` has a direct property named by `property` and a value
   * equal to the provided `value`. Uses a deep equality check. Inherited
   * properties aren't checked.
   *
   *     assert.deepOwnPropertyVal({ tea: { green: 'matcha' } }, 'tea', { green: 'matcha' });
   *
   * @name deepOwnPropertyVal
   * @param {Object} object
   * @param {String} property
   * @param {Mixed} value
   * @param {String} message
   * @api public
   */

  assert.deepOwnPropertyVal = function (obj, prop, value, msg) {
    new Assertion(obj, msg, assert.deepOwnPropertyVal, true)
      .to.have.deep.own.property(prop, value);
  };

  /**
   * ### .notDeepOwnPropertyVal(object, property, value, [message])
   *
   * Asserts that `object` does _not_ have a direct property named by `property`
   * with a value equal to the provided `value`. Uses a deep equality check.
   * Inherited properties aren't checked.
   *
   *     assert.notDeepOwnPropertyVal({ tea: { green: 'matcha' } }, 'tea', { black: 'matcha' });
   *     assert.notDeepOwnPropertyVal({ tea: { green: 'matcha' } }, 'tea', { green: 'oolong' });
   *     assert.notDeepOwnPropertyVal({ tea: { green: 'matcha' } }, 'coffee', { green: 'matcha' });
   *     assert.notDeepOwnPropertyVal({}, 'toString', Object.prototype.toString);
   *
   * @name notDeepOwnPropertyVal
   * @param {Object} object
   * @param {String} property
   * @param {Mixed} value
   * @param {String} message
   * @api public
   */

  assert.notDeepOwnPropertyVal = function (obj, prop, value, msg) {
    new Assertion(obj, msg, assert.notDeepOwnPropertyVal, true)
      .to.not.have.deep.own.property(prop, value);
  };

  /**
   * ### .nestedProperty(object, property, [message])
   *
   * Asserts that `object` has a direct or inherited property named by
   * `property`, which can be a string using dot- and bracket-notation for
   * nested reference.
   *
   *     assert.nestedProperty({ tea: { green: 'matcha' }}, 'tea.green');
   *
   * @name nestedProperty
   * @param {Object} object
   * @param {String} property
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.nestedProperty = function (obj, prop, msg) {
    new Assertion(obj, msg, assert.nestedProperty, true)
      .to.have.nested.property(prop);
  };

  /**
   * ### .notNestedProperty(object, property, [message])
   *
   * Asserts that `object` does _not_ have a property named by `property`, which
   * can be a string using dot- and bracket-notation for nested reference. The
   * property cannot exist on the object nor anywhere in its prototype chain.
   *
   *     assert.notNestedProperty({ tea: { green: 'matcha' }}, 'tea.oolong');
   *
   * @name notNestedProperty
   * @param {Object} object
   * @param {String} property
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.notNestedProperty = function (obj, prop, msg) {
    new Assertion(obj, msg, assert.notNestedProperty, true)
      .to.not.have.nested.property(prop);
  };

  /**
   * ### .nestedPropertyVal(object, property, value, [message])
   *
   * Asserts that `object` has a property named by `property` with value given
   * by `value`. `property` can use dot- and bracket-notation for nested
   * reference. Uses a strict equality check (===).
   *
   *     assert.nestedPropertyVal({ tea: { green: 'matcha' }}, 'tea.green', 'matcha');
   *
   * @name nestedPropertyVal
   * @param {Object} object
   * @param {String} property
   * @param {Mixed} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.nestedPropertyVal = function (obj, prop, val, msg) {
    new Assertion(obj, msg, assert.nestedPropertyVal, true)
      .to.have.nested.property(prop, val);
  };

  /**
   * ### .notNestedPropertyVal(object, property, value, [message])
   *
   * Asserts that `object` does _not_ have a property named by `property` with
   * value given by `value`. `property` can use dot- and bracket-notation for
   * nested reference. Uses a strict equality check (===).
   *
   *     assert.notNestedPropertyVal({ tea: { green: 'matcha' }}, 'tea.green', 'konacha');
   *     assert.notNestedPropertyVal({ tea: { green: 'matcha' }}, 'coffee.green', 'matcha');
   *
   * @name notNestedPropertyVal
   * @param {Object} object
   * @param {String} property
   * @param {Mixed} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.notNestedPropertyVal = function (obj, prop, val, msg) {
    new Assertion(obj, msg, assert.notNestedPropertyVal, true)
      .to.not.have.nested.property(prop, val);
  };

  /**
   * ### .deepNestedPropertyVal(object, property, value, [message])
   *
   * Asserts that `object` has a property named by `property` with a value given
   * by `value`. `property` can use dot- and bracket-notation for nested
   * reference. Uses a deep equality check.
   *
   *     assert.deepNestedPropertyVal({ tea: { green: { matcha: 'yum' } } }, 'tea.green', { matcha: 'yum' });
   *
   * @name deepNestedPropertyVal
   * @param {Object} object
   * @param {String} property
   * @param {Mixed} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.deepNestedPropertyVal = function (obj, prop, val, msg) {
    new Assertion(obj, msg, assert.deepNestedPropertyVal, true)
      .to.have.deep.nested.property(prop, val);
  };

  /**
   * ### .notDeepNestedPropertyVal(object, property, value, [message])
   *
   * Asserts that `object` does _not_ have a property named by `property` with
   * value given by `value`. `property` can use dot- and bracket-notation for
   * nested reference. Uses a deep equality check.
   *
   *     assert.notDeepNestedPropertyVal({ tea: { green: { matcha: 'yum' } } }, 'tea.green', { oolong: 'yum' });
   *     assert.notDeepNestedPropertyVal({ tea: { green: { matcha: 'yum' } } }, 'tea.green', { matcha: 'yuck' });
   *     assert.notDeepNestedPropertyVal({ tea: { green: { matcha: 'yum' } } }, 'tea.black', { matcha: 'yum' });
   *
   * @name notDeepNestedPropertyVal
   * @param {Object} object
   * @param {String} property
   * @param {Mixed} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.notDeepNestedPropertyVal = function (obj, prop, val, msg) {
    new Assertion(obj, msg, assert.notDeepNestedPropertyVal, true)
      .to.not.have.deep.nested.property(prop, val);
  }

  /**
   * ### .lengthOf(object, length, [message])
   *
   * Asserts that `object` has a `length` property with the expected value.
   *
   *     assert.lengthOf([1,2,3], 3, 'array has length of 3');
   *     assert.lengthOf('foobar', 6, 'string has length of 6');
   *
   * @name lengthOf
   * @param {Mixed} object
   * @param {Number} length
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.lengthOf = function (exp, len, msg) {
    new Assertion(exp, msg, assert.lengthOf, true).to.have.lengthOf(len);
  };

  /**
   * ### .hasAnyKeys(object, [keys], [message])
   *
   * Asserts that `object` has at least one of the `keys` provided.
   * You can also provide a single object instead of a `keys` array and its keys
   * will be used as the expected set of keys.
   *
   *     assert.hasAnyKeys({foo: 1, bar: 2, baz: 3}, ['foo', 'iDontExist', 'baz']);
   *     assert.hasAnyKeys({foo: 1, bar: 2, baz: 3}, {foo: 30, iDontExist: 99, baz: 1337});
   *     assert.hasAnyKeys(new Map([[{foo: 1}, 'bar'], ['key', 'value']]), [{foo: 1}, 'key']);
   *     assert.hasAnyKeys(new Set([{foo: 'bar'}, 'anotherKey']), [{foo: 'bar'}, 'anotherKey']);
   *
   * @name hasAnyKeys
   * @param {Mixed} object
   * @param {Array|Object} keys
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.hasAnyKeys = function (obj, keys, msg) {
    new Assertion(obj, msg, assert.hasAnyKeys, true).to.have.any.keys(keys);
  }

  /**
   * ### .hasAllKeys(object, [keys], [message])
   *
   * Asserts that `object` has all and only all of the `keys` provided.
   * You can also provide a single object instead of a `keys` array and its keys
   * will be used as the expected set of keys.
   *
   *     assert.hasAllKeys({foo: 1, bar: 2, baz: 3}, ['foo', 'bar', 'baz']);
   *     assert.hasAllKeys({foo: 1, bar: 2, baz: 3}, {foo: 30, bar: 99, baz: 1337]);
   *     assert.hasAllKeys(new Map([[{foo: 1}, 'bar'], ['key', 'value']]), [{foo: 1}, 'key']);
   *     assert.hasAllKeys(new Set([{foo: 'bar'}, 'anotherKey'], [{foo: 'bar'}, 'anotherKey']);
   *
   * @name hasAllKeys
   * @param {Mixed} object
   * @param {String[]} keys
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.hasAllKeys = function (obj, keys, msg) {
    new Assertion(obj, msg, assert.hasAllKeys, true).to.have.all.keys(keys);
  }

  /**
   * ### .containsAllKeys(object, [keys], [message])
   *
   * Asserts that `object` has all of the `keys` provided but may have more keys not listed.
   * You can also provide a single object instead of a `keys` array and its keys
   * will be used as the expected set of keys.
   *
   *     assert.containsAllKeys({foo: 1, bar: 2, baz: 3}, ['foo', 'baz']);
   *     assert.containsAllKeys({foo: 1, bar: 2, baz: 3}, ['foo', 'bar', 'baz']);
   *     assert.containsAllKeys({foo: 1, bar: 2, baz: 3}, {foo: 30, baz: 1337});
   *     assert.containsAllKeys({foo: 1, bar: 2, baz: 3}, {foo: 30, bar: 99, baz: 1337});
   *     assert.containsAllKeys(new Map([[{foo: 1}, 'bar'], ['key', 'value']]), [{foo: 1}]);
   *     assert.containsAllKeys(new Map([[{foo: 1}, 'bar'], ['key', 'value']]), [{foo: 1}, 'key']);
   *     assert.containsAllKeys(new Set([{foo: 'bar'}, 'anotherKey'], [{foo: 'bar'}]);
   *     assert.containsAllKeys(new Set([{foo: 'bar'}, 'anotherKey'], [{foo: 'bar'}, 'anotherKey']);
   *
   * @name containsAllKeys
   * @param {Mixed} object
   * @param {String[]} keys
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.containsAllKeys = function (obj, keys, msg) {
    new Assertion(obj, msg, assert.containsAllKeys, true)
      .to.contain.all.keys(keys);
  }

  /**
   * ### .doesNotHaveAnyKeys(object, [keys], [message])
   *
   * Asserts that `object` has none of the `keys` provided.
   * You can also provide a single object instead of a `keys` array and its keys
   * will be used as the expected set of keys.
   *
   *     assert.doesNotHaveAnyKeys({foo: 1, bar: 2, baz: 3}, ['one', 'two', 'example']);
   *     assert.doesNotHaveAnyKeys({foo: 1, bar: 2, baz: 3}, {one: 1, two: 2, example: 'foo'});
   *     assert.doesNotHaveAnyKeys(new Map([[{foo: 1}, 'bar'], ['key', 'value']]), [{one: 'two'}, 'example']);
   *     assert.doesNotHaveAnyKeys(new Set([{foo: 'bar'}, 'anotherKey'], [{one: 'two'}, 'example']);
   *
   * @name doesNotHaveAnyKeys
   * @param {Mixed} object
   * @param {String[]} keys
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.doesNotHaveAnyKeys = function (obj, keys, msg) {
    new Assertion(obj, msg, assert.doesNotHaveAnyKeys, true)
      .to.not.have.any.keys(keys);
  }

  /**
   * ### .doesNotHaveAllKeys(object, [keys], [message])
   *
   * Asserts that `object` does not have at least one of the `keys` provided.
   * You can also provide a single object instead of a `keys` array and its keys
   * will be used as the expected set of keys.
   *
   *     assert.doesNotHaveAllKeys({foo: 1, bar: 2, baz: 3}, ['one', 'two', 'example']);
   *     assert.doesNotHaveAllKeys({foo: 1, bar: 2, baz: 3}, {one: 1, two: 2, example: 'foo'});
   *     assert.doesNotHaveAllKeys(new Map([[{foo: 1}, 'bar'], ['key', 'value']]), [{one: 'two'}, 'example']);
   *     assert.doesNotHaveAllKeys(new Set([{foo: 'bar'}, 'anotherKey'], [{one: 'two'}, 'example']);
   *
   * @name doesNotHaveAllKeys
   * @param {Mixed} object
   * @param {String[]} keys
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.doesNotHaveAllKeys = function (obj, keys, msg) {
    new Assertion(obj, msg, assert.doesNotHaveAllKeys, true)
      .to.not.have.all.keys(keys);
  }

  /**
   * ### .hasAnyDeepKeys(object, [keys], [message])
   *
   * Asserts that `object` has at least one of the `keys` provided.
   * Since Sets and Maps can have objects as keys you can use this assertion to perform
   * a deep comparison.
   * You can also provide a single object instead of a `keys` array and its keys
   * will be used as the expected set of keys.
   *
   *     assert.hasAnyDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [1, 2]]), {one: 'one'});
   *     assert.hasAnyDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [1, 2]]), [{one: 'one'}, {two: 'two'}]);
   *     assert.hasAnyDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [{two: 'two'}, 'valueTwo']]), [{one: 'one'}, {two: 'two'}]);
   *     assert.hasAnyDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), {one: 'one'});
   *     assert.hasAnyDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), [{one: 'one'}, {three: 'three'}]);
   *     assert.hasAnyDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), [{one: 'one'}, {two: 'two'}]);
   *
   * @name doesNotHaveAllKeys
   * @param {Mixed} object
   * @param {Array|Object} keys
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.hasAnyDeepKeys = function (obj, keys, msg) {
    new Assertion(obj, msg, assert.hasAnyDeepKeys, true)
      .to.have.any.deep.keys(keys);
  }

 /**
   * ### .hasAllDeepKeys(object, [keys], [message])
   *
   * Asserts that `object` has all and only all of the `keys` provided.
   * Since Sets and Maps can have objects as keys you can use this assertion to perform
   * a deep comparison.
   * You can also provide a single object instead of a `keys` array and its keys
   * will be used as the expected set of keys.
   *
   *     assert.hasAllDeepKeys(new Map([[{one: 'one'}, 'valueOne']]), {one: 'one'});
   *     assert.hasAllDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [{two: 'two'}, 'valueTwo']]), [{one: 'one'}, {two: 'two'}]);
   *     assert.hasAllDeepKeys(new Set([{one: 'one'}]), {one: 'one'});
   *     assert.hasAllDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), [{one: 'one'}, {two: 'two'}]);
   *
   * @name hasAllDeepKeys
   * @param {Mixed} object
   * @param {Array|Object} keys
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.hasAllDeepKeys = function (obj, keys, msg) {
    new Assertion(obj, msg, assert.hasAllDeepKeys, true)
      .to.have.all.deep.keys(keys);
  }

 /**
   * ### .containsAllDeepKeys(object, [keys], [message])
   *
   * Asserts that `object` contains all of the `keys` provided.
   * Since Sets and Maps can have objects as keys you can use this assertion to perform
   * a deep comparison.
   * You can also provide a single object instead of a `keys` array and its keys
   * will be used as the expected set of keys.
   *
   *     assert.containsAllDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [1, 2]]), {one: 'one'});
   *     assert.containsAllDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [{two: 'two'}, 'valueTwo']]), [{one: 'one'}, {two: 'two'}]);
   *     assert.containsAllDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), {one: 'one'});
   *     assert.containsAllDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), [{one: 'one'}, {two: 'two'}]);
   *
   * @name containsAllDeepKeys
   * @param {Mixed} object
   * @param {Array|Object} keys
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.containsAllDeepKeys = function (obj, keys, msg) {
    new Assertion(obj, msg, assert.containsAllDeepKeys, true)
      .to.contain.all.deep.keys(keys);
  }

 /**
   * ### .doesNotHaveAnyDeepKeys(object, [keys], [message])
   *
   * Asserts that `object` has none of the `keys` provided.
   * Since Sets and Maps can have objects as keys you can use this assertion to perform
   * a deep comparison.
   * You can also provide a single object instead of a `keys` array and its keys
   * will be used as the expected set of keys.
   *
   *     assert.doesNotHaveAnyDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [1, 2]]), {thisDoesNot: 'exist'});
   *     assert.doesNotHaveAnyDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [{two: 'two'}, 'valueTwo']]), [{twenty: 'twenty'}, {fifty: 'fifty'}]);
   *     assert.doesNotHaveAnyDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), {twenty: 'twenty'});
   *     assert.doesNotHaveAnyDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), [{twenty: 'twenty'}, {fifty: 'fifty'}]);
   *
   * @name doesNotHaveAnyDeepKeys
   * @param {Mixed} object
   * @param {Array|Object} keys
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.doesNotHaveAnyDeepKeys = function (obj, keys, msg) {
    new Assertion(obj, msg, assert.doesNotHaveAnyDeepKeys, true)
      .to.not.have.any.deep.keys(keys);
  }

 /**
   * ### .doesNotHaveAllDeepKeys(object, [keys], [message])
   *
   * Asserts that `object` does not have at least one of the `keys` provided.
   * Since Sets and Maps can have objects as keys you can use this assertion to perform
   * a deep comparison.
   * You can also provide a single object instead of a `keys` array and its keys
   * will be used as the expected set of keys.
   *
   *     assert.doesNotHaveAllDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [1, 2]]), {thisDoesNot: 'exist'});
   *     assert.doesNotHaveAllDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [{two: 'two'}, 'valueTwo']]), [{twenty: 'twenty'}, {one: 'one'}]);
   *     assert.doesNotHaveAllDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), {twenty: 'twenty'});
   *     assert.doesNotHaveAllDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), [{one: 'one'}, {fifty: 'fifty'}]);
   *
   * @name doesNotHaveAllDeepKeys
   * @param {Mixed} object
   * @param {Array|Object} keys
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.doesNotHaveAllDeepKeys = function (obj, keys, msg) {
    new Assertion(obj, msg, assert.doesNotHaveAllDeepKeys, true)
      .to.not.have.all.deep.keys(keys);
  }

 /**
   * ### .throws(fn, [errorLike/string/regexp], [string/regexp], [message])
   *
   * If `errorLike` is an `Error` constructor, asserts that `fn` will throw an error that is an
   * instance of `errorLike`.
   * If `errorLike` is an `Error` instance, asserts that the error thrown is the same
   * instance as `errorLike`.
   * If `errMsgMatcher` is provided, it also asserts that the error thrown will have a
   * message matching `errMsgMatcher`.
   *
   *     assert.throws(fn, 'function throws a reference error');
   *     assert.throws(fn, /function throws a reference error/);
   *     assert.throws(fn, ReferenceError);
   *     assert.throws(fn, errorInstance);
   *     assert.throws(fn, ReferenceError, 'Error thrown must be a ReferenceError and have this msg');
   *     assert.throws(fn, errorInstance, 'Error thrown must be the same errorInstance and have this msg');
   *     assert.throws(fn, ReferenceError, /Error thrown must be a ReferenceError and match this/);
   *     assert.throws(fn, errorInstance, /Error thrown must be the same errorInstance and match this/);
   *
   * @name throws
   * @alias throw
   * @alias Throw
   * @param {Function} fn
   * @param {ErrorConstructor|Error} errorLike
   * @param {RegExp|String} errMsgMatcher
   * @param {String} message
   * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types
   * @namespace Assert
   * @api public
   */

  assert.throws = function (fn, errorLike, errMsgMatcher, msg) {
    if ('string' === typeof errorLike || errorLike instanceof RegExp) {
      errMsgMatcher = errorLike;
      errorLike = null;
    }

    var assertErr = new Assertion(fn, msg, assert.throws, true)
      .to.throw(errorLike, errMsgMatcher);
    return flag(assertErr, 'object');
  };

  /**
   * ### .doesNotThrow(fn, [errorLike/string/regexp], [string/regexp], [message])
   *
   * If `errorLike` is an `Error` constructor, asserts that `fn` will _not_ throw an error that is an
   * instance of `errorLike`.
   * If `errorLike` is an `Error` instance, asserts that the error thrown is _not_ the same
   * instance as `errorLike`.
   * If `errMsgMatcher` is provided, it also asserts that the error thrown will _not_ have a
   * message matching `errMsgMatcher`.
   *
   *     assert.doesNotThrow(fn, 'Any Error thrown must not have this message');
   *     assert.doesNotThrow(fn, /Any Error thrown must not match this/);
   *     assert.doesNotThrow(fn, Error);
   *     assert.doesNotThrow(fn, errorInstance);
   *     assert.doesNotThrow(fn, Error, 'Error must not have this message');
   *     assert.doesNotThrow(fn, errorInstance, 'Error must not have this message');
   *     assert.doesNotThrow(fn, Error, /Error must not match this/);
   *     assert.doesNotThrow(fn, errorInstance, /Error must not match this/);
   *
   * @name doesNotThrow
   * @param {Function} fn
   * @param {ErrorConstructor} errorLike
   * @param {RegExp|String} errMsgMatcher
   * @param {String} message
   * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types
   * @namespace Assert
   * @api public
   */

  assert.doesNotThrow = function (fn, errorLike, errMsgMatcher, msg) {
    if ('string' === typeof errorLike || errorLike instanceof RegExp) {
      errMsgMatcher = errorLike;
      errorLike = null;
    }

    new Assertion(fn, msg, assert.doesNotThrow, true)
      .to.not.throw(errorLike, errMsgMatcher);
  };

  /**
   * ### .operator(val1, operator, val2, [message])
   *
   * Compares two values using `operator`.
   *
   *     assert.operator(1, '<', 2, 'everything is ok');
   *     assert.operator(1, '>', 2, 'this will fail');
   *
   * @name operator
   * @param {Mixed} val1
   * @param {String} operator
   * @param {Mixed} val2
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.operator = function (val, operator, val2, msg) {
    var ok;
    switch(operator) {
      case '==':
        ok = val == val2;
        break;
      case '===':
        ok = val === val2;
        break;
      case '>':
        ok = val > val2;
        break;
      case '>=':
        ok = val >= val2;
        break;
      case '<':
        ok = val < val2;
        break;
      case '<=':
        ok = val <= val2;
        break;
      case '!=':
        ok = val != val2;
        break;
      case '!==':
        ok = val !== val2;
        break;
      default:
        msg = msg ? msg + ': ' : msg;
        throw new chai.AssertionError(
          msg + 'Invalid operator "' + operator + '"',
          undefined,
          assert.operator
        );
    }
    var test = new Assertion(ok, msg, assert.operator, true);
    test.assert(
        true === flag(test, 'object')
      , 'expected ' + util.inspect(val) + ' to be ' + operator + ' ' + util.inspect(val2)
      , 'expected ' + util.inspect(val) + ' to not be ' + operator + ' ' + util.inspect(val2) );
  };

  /**
   * ### .closeTo(actual, expected, delta, [message])
   *
   * Asserts that the target is equal `expected`, to within a +/- `delta` range.
   *
   *     assert.closeTo(1.5, 1, 0.5, 'numbers are close');
   *
   * @name closeTo
   * @param {Number} actual
   * @param {Number} expected
   * @param {Number} delta
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.closeTo = function (act, exp, delta, msg) {
    new Assertion(act, msg, assert.closeTo, true).to.be.closeTo(exp, delta);
  };

  /**
   * ### .approximately(actual, expected, delta, [message])
   *
   * Asserts that the target is equal `expected`, to within a +/- `delta` range.
   *
   *     assert.approximately(1.5, 1, 0.5, 'numbers are close');
   *
   * @name approximately
   * @param {Number} actual
   * @param {Number} expected
   * @param {Number} delta
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.approximately = function (act, exp, delta, msg) {
    new Assertion(act, msg, assert.approximately, true)
      .to.be.approximately(exp, delta);
  };

  /**
   * ### .sameMembers(set1, set2, [message])
   *
   * Asserts that `set1` and `set2` have the same members in any order. Uses a
   * strict equality check (===).
   *
   *     assert.sameMembers([ 1, 2, 3 ], [ 2, 1, 3 ], 'same members');
   *
   * @name sameMembers
   * @param {Array} set1
   * @param {Array} set2
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.sameMembers = function (set1, set2, msg) {
    new Assertion(set1, msg, assert.sameMembers, true)
      .to.have.same.members(set2);
  }

  /**
   * ### .notSameMembers(set1, set2, [message])
   *
   * Asserts that `set1` and `set2` don't have the same members in any order.
   * Uses a strict equality check (===).
   *
   *     assert.notSameMembers([ 1, 2, 3 ], [ 5, 1, 3 ], 'not same members');
   *
   * @name notSameMembers
   * @param {Array} set1
   * @param {Array} set2
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.notSameMembers = function (set1, set2, msg) {
    new Assertion(set1, msg, assert.notSameMembers, true)
      .to.not.have.same.members(set2);
  }

  /**
   * ### .sameDeepMembers(set1, set2, [message])
   *
   * Asserts that `set1` and `set2` have the same members in any order. Uses a
   * deep equality check.
   *
   *     assert.sameDeepMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [{ b: 2 }, { a: 1 }, { c: 3 }], 'same deep members');
   *
   * @name sameDeepMembers
   * @param {Array} set1
   * @param {Array} set2
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.sameDeepMembers = function (set1, set2, msg) {
    new Assertion(set1, msg, assert.sameDeepMembers, true)
      .to.have.same.deep.members(set2);
  }

  /**
   * ### .notSameDeepMembers(set1, set2, [message])
   *
   * Asserts that `set1` and `set2` don't have the same members in any order.
   * Uses a deep equality check.
   *
   *     assert.notSameDeepMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [{ b: 2 }, { a: 1 }, { f: 5 }], 'not same deep members');
   *
   * @name notSameDeepMembers
   * @param {Array} set1
   * @param {Array} set2
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.notSameDeepMembers = function (set1, set2, msg) {
    new Assertion(set1, msg, assert.notSameDeepMembers, true)
      .to.not.have.same.deep.members(set2);
  }

  /**
   * ### .sameOrderedMembers(set1, set2, [message])
   *
   * Asserts that `set1` and `set2` have the same members in the same order.
   * Uses a strict equality check (===).
   *
   *     assert.sameOrderedMembers([ 1, 2, 3 ], [ 1, 2, 3 ], 'same ordered members');
   *
   * @name sameOrderedMembers
   * @param {Array} set1
   * @param {Array} set2
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.sameOrderedMembers = function (set1, set2, msg) {
    new Assertion(set1, msg, assert.sameOrderedMembers, true)
      .to.have.same.ordered.members(set2);
  }

  /**
   * ### .notSameOrderedMembers(set1, set2, [message])
   *
   * Asserts that `set1` and `set2` don't have the same members in the same
   * order. Uses a strict equality check (===).
   *
   *     assert.notSameOrderedMembers([ 1, 2, 3 ], [ 2, 1, 3 ], 'not same ordered members');
   *
   * @name notSameOrderedMembers
   * @param {Array} set1
   * @param {Array} set2
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.notSameOrderedMembers = function (set1, set2, msg) {
    new Assertion(set1, msg, assert.notSameOrderedMembers, true)
      .to.not.have.same.ordered.members(set2);
  }

  /**
   * ### .sameDeepOrderedMembers(set1, set2, [message])
   *
   * Asserts that `set1` and `set2` have the same members in the same order.
   * Uses a deep equality check.
   *
   * assert.sameDeepOrderedMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { a: 1 }, { b: 2 }, { c: 3 } ], 'same deep ordered members');
   *
   * @name sameDeepOrderedMembers
   * @param {Array} set1
   * @param {Array} set2
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.sameDeepOrderedMembers = function (set1, set2, msg) {
    new Assertion(set1, msg, assert.sameDeepOrderedMembers, true)
      .to.have.same.deep.ordered.members(set2);
  }

  /**
   * ### .notSameDeepOrderedMembers(set1, set2, [message])
   *
   * Asserts that `set1` and `set2` don't have the same members in the same
   * order. Uses a deep equality check.
   *
   * assert.notSameDeepOrderedMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { a: 1 }, { b: 2 }, { z: 5 } ], 'not same deep ordered members');
   * assert.notSameDeepOrderedMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { b: 2 }, { a: 1 }, { c: 3 } ], 'not same deep ordered members');
   *
   * @name notSameDeepOrderedMembers
   * @param {Array} set1
   * @param {Array} set2
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.notSameDeepOrderedMembers = function (set1, set2, msg) {
    new Assertion(set1, msg, assert.notSameDeepOrderedMembers, true)
      .to.not.have.same.deep.ordered.members(set2);
  }

  /**
   * ### .includeMembers(superset, subset, [message])
   *
   * Asserts that `subset` is included in `superset` in any order. Uses a
   * strict equality check (===). Duplicates are ignored.
   *
   *     assert.includeMembers([ 1, 2, 3 ], [ 2, 1, 2 ], 'include members');
   *
   * @name includeMembers
   * @param {Array} superset
   * @param {Array} subset
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.includeMembers = function (superset, subset, msg) {
    new Assertion(superset, msg, assert.includeMembers, true)
      .to.include.members(subset);
  }

  /**
   * ### .notIncludeMembers(superset, subset, [message])
   *
   * Asserts that `subset` isn't included in `superset` in any order. Uses a
   * strict equality check (===). Duplicates are ignored.
   *
   *     assert.notIncludeMembers([ 1, 2, 3 ], [ 5, 1 ], 'not include members');
   *
   * @name notIncludeMembers
   * @param {Array} superset
   * @param {Array} subset
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.notIncludeMembers = function (superset, subset, msg) {
    new Assertion(superset, msg, assert.notIncludeMembers, true)
      .to.not.include.members(subset);
  }

  /**
   * ### .includeDeepMembers(superset, subset, [message])
   *
   * Asserts that `subset` is included in `superset` in any order. Uses a deep
   * equality check. Duplicates are ignored.
   *
   *     assert.includeDeepMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { b: 2 }, { a: 1 }, { b: 2 } ], 'include deep members');
   *
   * @name includeDeepMembers
   * @param {Array} superset
   * @param {Array} subset
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.includeDeepMembers = function (superset, subset, msg) {
    new Assertion(superset, msg, assert.includeDeepMembers, true)
      .to.include.deep.members(subset);
  }

  /**
   * ### .notIncludeDeepMembers(superset, subset, [message])
   *
   * Asserts that `subset` isn't included in `superset` in any order. Uses a
   * deep equality check. Duplicates are ignored.
   *
   *     assert.notIncludeDeepMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { b: 2 }, { f: 5 } ], 'not include deep members');
   *
   * @name notIncludeDeepMembers
   * @param {Array} superset
   * @param {Array} subset
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.notIncludeDeepMembers = function (superset, subset, msg) {
    new Assertion(superset, msg, assert.notIncludeDeepMembers, true)
      .to.not.include.deep.members(subset);
  }

  /**
   * ### .includeOrderedMembers(superset, subset, [message])
   *
   * Asserts that `subset` is included in `superset` in the same order
   * beginning with the first element in `superset`. Uses a strict equality
   * check (===).
   *
   *     assert.includeOrderedMembers([ 1, 2, 3 ], [ 1, 2 ], 'include ordered members');
   *
   * @name includeOrderedMembers
   * @param {Array} superset
   * @param {Array} subset
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.includeOrderedMembers = function (superset, subset, msg) {
    new Assertion(superset, msg, assert.includeOrderedMembers, true)
      .to.include.ordered.members(subset);
  }

  /**
   * ### .notIncludeOrderedMembers(superset, subset, [message])
   *
   * Asserts that `subset` isn't included in `superset` in the same order
   * beginning with the first element in `superset`. Uses a strict equality
   * check (===).
   *
   *     assert.notIncludeOrderedMembers([ 1, 2, 3 ], [ 2, 1 ], 'not include ordered members');
   *     assert.notIncludeOrderedMembers([ 1, 2, 3 ], [ 2, 3 ], 'not include ordered members');
   *
   * @name notIncludeOrderedMembers
   * @param {Array} superset
   * @param {Array} subset
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.notIncludeOrderedMembers = function (superset, subset, msg) {
    new Assertion(superset, msg, assert.notIncludeOrderedMembers, true)
      .to.not.include.ordered.members(subset);
  }

  /**
   * ### .includeDeepOrderedMembers(superset, subset, [message])
   *
   * Asserts that `subset` is included in `superset` in the same order
   * beginning with the first element in `superset`. Uses a deep equality
   * check.
   *
   *     assert.includeDeepOrderedMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { a: 1 }, { b: 2 } ], 'include deep ordered members');
   *
   * @name includeDeepOrderedMembers
   * @param {Array} superset
   * @param {Array} subset
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.includeDeepOrderedMembers = function (superset, subset, msg) {
    new Assertion(superset, msg, assert.includeDeepOrderedMembers, true)
      .to.include.deep.ordered.members(subset);
  }

  /**
   * ### .notIncludeDeepOrderedMembers(superset, subset, [message])
   *
   * Asserts that `subset` isn't included in `superset` in the same order
   * beginning with the first element in `superset`. Uses a deep equality
   * check.
   *
   *     assert.notIncludeDeepOrderedMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { a: 1 }, { f: 5 } ], 'not include deep ordered members');
   *     assert.notIncludeDeepOrderedMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { b: 2 }, { a: 1 } ], 'not include deep ordered members');
   *     assert.notIncludeDeepOrderedMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { b: 2 }, { c: 3 } ], 'not include deep ordered members');
   *
   * @name notIncludeDeepOrderedMembers
   * @param {Array} superset
   * @param {Array} subset
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.notIncludeDeepOrderedMembers = function (superset, subset, msg) {
    new Assertion(superset, msg, assert.notIncludeDeepOrderedMembers, true)
      .to.not.include.deep.ordered.members(subset);
  }

  /**
   * ### .oneOf(inList, list, [message])
   *
   * Asserts that non-object, non-array value `inList` appears in the flat array `list`.
   *
   *     assert.oneOf(1, [ 2, 1 ], 'Not found in list');
   *
   * @name oneOf
   * @param {*} inList
   * @param {Array<*>} list
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.oneOf = function (inList, list, msg) {
    new Assertion(inList, msg, assert.oneOf, true).to.be.oneOf(list);
  }

  /**
   * ### .changes(function, object, property, [message])
   *
   * Asserts that a function changes the value of a property.
   *
   *     var obj = { val: 10 };
   *     var fn = function() { obj.val = 22 };
   *     assert.changes(fn, obj, 'val');
   *
   * @name changes
   * @param {Function} modifier function
   * @param {Object} object or getter function
   * @param {String} property name _optional_
   * @param {String} message _optional_
   * @namespace Assert
   * @api public
   */

  assert.changes = function (fn, obj, prop, msg) {
    if (arguments.length === 3 && typeof obj === 'function') {
      msg = prop;
      prop = null;
    }

    new Assertion(fn, msg, assert.changes, true).to.change(obj, prop);
  }

   /**
   * ### .changesBy(function, object, property, delta, [message])
   *
   * Asserts that a function changes the value of a property by an amount (delta).
   *
   *     var obj = { val: 10 };
   *     var fn = function() { obj.val += 2 };
   *     assert.changesBy(fn, obj, 'val', 2);
   *
   * @name changesBy
   * @param {Function} modifier function
   * @param {Object} object or getter function
   * @param {String} property name _optional_
   * @param {Number} change amount (delta)
   * @param {String} message _optional_
   * @namespace Assert
   * @api public
   */

  assert.changesBy = function (fn, obj, prop, delta, msg) {
    if (arguments.length === 4 && typeof obj === 'function') {
      var tmpMsg = delta;
      delta = prop;
      msg = tmpMsg;
    } else if (arguments.length === 3) {
      delta = prop;
      prop = null;
    }

    new Assertion(fn, msg, assert.changesBy, true)
      .to.change(obj, prop).by(delta);
  }

   /**
   * ### .doesNotChange(function, object, property, [message])
   *
   * Asserts that a function does not change the value of a property.
   *
   *     var obj = { val: 10 };
   *     var fn = function() { console.log('foo'); };
   *     assert.doesNotChange(fn, obj, 'val');
   *
   * @name doesNotChange
   * @param {Function} modifier function
   * @param {Object} object or getter function
   * @param {String} property name _optional_
   * @param {String} message _optional_
   * @namespace Assert
   * @api public
   */

  assert.doesNotChange = function (fn, obj, prop, msg) {
    if (arguments.length === 3 && typeof obj === 'function') {
      msg = prop;
      prop = null;
    }

    return new Assertion(fn, msg, assert.doesNotChange, true)
      .to.not.change(obj, prop);
  }

  /**
   * ### .changesButNotBy(function, object, property, delta, [message])
   *
   * Asserts that a function does not change the value of a property or of a function's return value by an amount (delta)
   *
   *     var obj = { val: 10 };
   *     var fn = function() { obj.val += 10 };
   *     assert.changesButNotBy(fn, obj, 'val', 5);
   *
   * @name changesButNotBy
   * @param {Function} modifier function
   * @param {Object} object or getter function
   * @param {String} property name _optional_
   * @param {Number} change amount (delta)
   * @param {String} message _optional_
   * @namespace Assert
   * @api public
   */

  assert.changesButNotBy = function (fn, obj, prop, delta, msg) {
    if (arguments.length === 4 && typeof obj === 'function') {
      var tmpMsg = delta;
      delta = prop;
      msg = tmpMsg;
    } else if (arguments.length === 3) {
      delta = prop;
      prop = null;
    }

    new Assertion(fn, msg, assert.changesButNotBy, true)
      .to.change(obj, prop).but.not.by(delta);
  }

  /**
   * ### .increases(function, object, property, [message])
   *
   * Asserts that a function increases a numeric object property.
   *
   *     var obj = { val: 10 };
   *     var fn = function() { obj.val = 13 };
   *     assert.increases(fn, obj, 'val');
   *
   * @name increases
   * @param {Function} modifier function
   * @param {Object} object or getter function
   * @param {String} property name _optional_
   * @param {String} message _optional_
   * @namespace Assert
   * @api public
   */

  assert.increases = function (fn, obj, prop, msg) {
    if (arguments.length === 3 && typeof obj === 'function') {
      msg = prop;
      prop = null;
    }

    return new Assertion(fn, msg, assert.increases, true)
      .to.increase(obj, prop);
  }

  /**
   * ### .increasesBy(function, object, property, delta, [message])
   *
   * Asserts that a function increases a numeric object property or a function's return value by an amount (delta).
   *
   *     var obj = { val: 10 };
   *     var fn = function() { obj.val += 10 };
   *     assert.increasesBy(fn, obj, 'val', 10);
   *
   * @name increasesBy
   * @param {Function} modifier function
   * @param {Object} object or getter function
   * @param {String} property name _optional_
   * @param {Number} change amount (delta)
   * @param {String} message _optional_
   * @namespace Assert
   * @api public
   */

  assert.increasesBy = function (fn, obj, prop, delta, msg) {
    if (arguments.length === 4 && typeof obj === 'function') {
      var tmpMsg = delta;
      delta = prop;
      msg = tmpMsg;
    } else if (arguments.length === 3) {
      delta = prop;
      prop = null;
    }

    new Assertion(fn, msg, assert.increasesBy, true)
      .to.increase(obj, prop).by(delta);
  }

  /**
   * ### .doesNotIncrease(function, object, property, [message])
   *
   * Asserts that a function does not increase a numeric object property.
   *
   *     var obj = { val: 10 };
   *     var fn = function() { obj.val = 8 };
   *     assert.doesNotIncrease(fn, obj, 'val');
   *
   * @name doesNotIncrease
   * @param {Function} modifier function
   * @param {Object} object or getter function
   * @param {String} property name _optional_
   * @param {String} message _optional_
   * @namespace Assert
   * @api public
   */

  assert.doesNotIncrease = function (fn, obj, prop, msg) {
    if (arguments.length === 3 && typeof obj === 'function') {
      msg = prop;
      prop = null;
    }

    return new Assertion(fn, msg, assert.doesNotIncrease, true)
      .to.not.increase(obj, prop);
  }

  /**
   * ### .increasesButNotBy(function, object, property, [message])
   *
   * Asserts that a function does not increase a numeric object property or function's return value by an amount (delta).
   *
   *     var obj = { val: 10 };
   *     var fn = function() { obj.val = 15 };
   *     assert.increasesButNotBy(fn, obj, 'val', 10);
   *
   * @name increasesButNotBy
   * @param {Function} modifier function
   * @param {Object} object or getter function
   * @param {String} property name _optional_
   * @param {Number} change amount (delta)
   * @param {String} message _optional_
   * @namespace Assert
   * @api public
   */

  assert.increasesButNotBy = function (fn, obj, prop, delta, msg) {
    if (arguments.length === 4 && typeof obj === 'function') {
      var tmpMsg = delta;
      delta = prop;
      msg = tmpMsg;
    } else if (arguments.length === 3) {
      delta = prop;
      prop = null;
    }

    new Assertion(fn, msg, assert.increasesButNotBy, true)
      .to.increase(obj, prop).but.not.by(delta);
  }

  /**
   * ### .decreases(function, object, property, [message])
   *
   * Asserts that a function decreases a numeric object property.
   *
   *     var obj = { val: 10 };
   *     var fn = function() { obj.val = 5 };
   *     assert.decreases(fn, obj, 'val');
   *
   * @name decreases
   * @param {Function} modifier function
   * @param {Object} object or getter function
   * @param {String} property name _optional_
   * @param {String} message _optional_
   * @namespace Assert
   * @api public
   */

  assert.decreases = function (fn, obj, prop, msg) {
    if (arguments.length === 3 && typeof obj === 'function') {
      msg = prop;
      prop = null;
    }

    return new Assertion(fn, msg, assert.decreases, true)
      .to.decrease(obj, prop);
  }

  /**
   * ### .decreasesBy(function, object, property, delta, [message])
   *
   * Asserts that a function decreases a numeric object property or a function's return value by an amount (delta)
   *
   *     var obj = { val: 10 };
   *     var fn = function() { obj.val -= 5 };
   *     assert.decreasesBy(fn, obj, 'val', 5);
   *
   * @name decreasesBy
   * @param {Function} modifier function
   * @param {Object} object or getter function
   * @param {String} property name _optional_
   * @param {Number} change amount (delta)
   * @param {String} message _optional_
   * @namespace Assert
   * @api public
   */

  assert.decreasesBy = function (fn, obj, prop, delta, msg) {
    if (arguments.length === 4 && typeof obj === 'function') {
      var tmpMsg = delta;
      delta = prop;
      msg = tmpMsg;
    } else if (arguments.length === 3) {
      delta = prop;
      prop = null;
    }

    new Assertion(fn, msg, assert.decreasesBy, true)
      .to.decrease(obj, prop).by(delta);
  }

  /**
   * ### .doesNotDecrease(function, object, property, [message])
   *
   * Asserts that a function does not decreases a numeric object property.
   *
   *     var obj = { val: 10 };
   *     var fn = function() { obj.val = 15 };
   *     assert.doesNotDecrease(fn, obj, 'val');
   *
   * @name doesNotDecrease
   * @param {Function} modifier function
   * @param {Object} object or getter function
   * @param {String} property name _optional_
   * @param {String} message _optional_
   * @namespace Assert
   * @api public
   */

  assert.doesNotDecrease = function (fn, obj, prop, msg) {
    if (arguments.length === 3 && typeof obj === 'function') {
      msg = prop;
      prop = null;
    }

    return new Assertion(fn, msg, assert.doesNotDecrease, true)
      .to.not.decrease(obj, prop);
  }

  /**
   * ### .doesNotDecreaseBy(function, object, property, delta, [message])
   *
   * Asserts that a function does not decreases a numeric object property or a function's return value by an amount (delta)
   *
   *     var obj = { val: 10 };
   *     var fn = function() { obj.val = 5 };
   *     assert.doesNotDecreaseBy(fn, obj, 'val', 1);
   *
   * @name doesNotDecrease
   * @param {Function} modifier function
   * @param {Object} object or getter function
   * @param {String} property name _optional_
   * @param {Number} change amount (delta)
   * @param {String} message _optional_
   * @namespace Assert
   * @api public
   */

  assert.doesNotDecreaseBy = function (fn, obj, prop, delta, msg) {
    if (arguments.length === 4 && typeof obj === 'function') {
      var tmpMsg = delta;
      delta = prop;
      msg = tmpMsg;
    } else if (arguments.length === 3) {
      delta = prop;
      prop = null;
    }

    return new Assertion(fn, msg, assert.doesNotDecreaseBy, true)
      .to.not.decrease(obj, prop).by(delta);
  }

  /**
   * ### .decreasesButNotBy(function, object, property, delta, [message])
   *
   * Asserts that a function does not decreases a numeric object property or a function's return value by an amount (delta)
   *
   *     var obj = { val: 10 };
   *     var fn = function() { obj.val = 5 };
   *     assert.decreasesButNotBy(fn, obj, 'val', 1);
   *
   * @name decreasesButNotBy
   * @param {Function} modifier function
   * @param {Object} object or getter function
   * @param {String} property name _optional_
   * @param {Number} change amount (delta)
   * @param {String} message _optional_
   * @namespace Assert
   * @api public
   */

  assert.decreasesButNotBy = function (fn, obj, prop, delta, msg) {
    if (arguments.length === 4 && typeof obj === 'function') {
      var tmpMsg = delta;
      delta = prop;
      msg = tmpMsg;
    } else if (arguments.length === 3) {
      delta = prop;
      prop = null;
    }

    new Assertion(fn, msg, assert.decreasesButNotBy, true)
      .to.decrease(obj, prop).but.not.by(delta);
  }

  /*!
   * ### .ifError(object)
   *
   * Asserts if value is not a false value, and throws if it is a true value.
   * This is added to allow for chai to be a drop-in replacement for Node's
   * assert class.
   *
   *     var err = new Error('I am a custom error');
   *     assert.ifError(err); // Rethrows err!
   *
   * @name ifError
   * @param {Object} object
   * @namespace Assert
   * @api public
   */

  assert.ifError = function (val) {
    if (val) {
      throw(val);
    }
  };

  /**
   * ### .isExtensible(object)
   *
   * Asserts that `object` is extensible (can have new properties added to it).
   *
   *     assert.isExtensible({});
   *
   * @name isExtensible
   * @alias extensible
   * @param {Object} object
   * @param {String} message _optional_
   * @namespace Assert
   * @api public
   */

  assert.isExtensible = function (obj, msg) {
    new Assertion(obj, msg, assert.isExtensible, true).to.be.extensible;
  };

  /**
   * ### .isNotExtensible(object)
   *
   * Asserts that `object` is _not_ extensible.
   *
   *     var nonExtensibleObject = Object.preventExtensions({});
   *     var sealedObject = Object.seal({});
   *     var frozenObject = Object.freeze({});
   *
   *     assert.isNotExtensible(nonExtensibleObject);
   *     assert.isNotExtensible(sealedObject);
   *     assert.isNotExtensible(frozenObject);
   *
   * @name isNotExtensible
   * @alias notExtensible
   * @param {Object} object
   * @param {String} message _optional_
   * @namespace Assert
   * @api public
   */

  assert.isNotExtensible = function (obj, msg) {
    new Assertion(obj, msg, assert.isNotExtensible, true).to.not.be.extensible;
  };

  /**
   * ### .isSealed(object)
   *
   * Asserts that `object` is sealed (cannot have new properties added to it
   * and its existing properties cannot be removed).
   *
   *     var sealedObject = Object.seal({});
   *     var frozenObject = Object.seal({});
   *
   *     assert.isSealed(sealedObject);
   *     assert.isSealed(frozenObject);
   *
   * @name isSealed
   * @alias sealed
   * @param {Object} object
   * @param {String} message _optional_
   * @namespace Assert
   * @api public
   */

  assert.isSealed = function (obj, msg) {
    new Assertion(obj, msg, assert.isSealed, true).to.be.sealed;
  };

  /**
   * ### .isNotSealed(object)
   *
   * Asserts that `object` is _not_ sealed.
   *
   *     assert.isNotSealed({});
   *
   * @name isNotSealed
   * @alias notSealed
   * @param {Object} object
   * @param {String} message _optional_
   * @namespace Assert
   * @api public
   */

  assert.isNotSealed = function (obj, msg) {
    new Assertion(obj, msg, assert.isNotSealed, true).to.not.be.sealed;
  };

  /**
   * ### .isFrozen(object)
   *
   * Asserts that `object` is frozen (cannot have new properties added to it
   * and its existing properties cannot be modified).
   *
   *     var frozenObject = Object.freeze({});
   *     assert.frozen(frozenObject);
   *
   * @name isFrozen
   * @alias frozen
   * @param {Object} object
   * @param {String} message _optional_
   * @namespace Assert
   * @api public
   */

  assert.isFrozen = function (obj, msg) {
    new Assertion(obj, msg, assert.isFrozen, true).to.be.frozen;
  };

  /**
   * ### .isNotFrozen(object)
   *
   * Asserts that `object` is _not_ frozen.
   *
   *     assert.isNotFrozen({});
   *
   * @name isNotFrozen
   * @alias notFrozen
   * @param {Object} object
   * @param {String} message _optional_
   * @namespace Assert
   * @api public
   */

  assert.isNotFrozen = function (obj, msg) {
    new Assertion(obj, msg, assert.isNotFrozen, true).to.not.be.frozen;
  };

  /**
   * ### .isEmpty(target)
   *
   * Asserts that the target does not contain any values.
   * For arrays and strings, it checks the `length` property.
   * For `Map` and `Set` instances, it checks the `size` property.
   * For non-function objects, it gets the count of own
   * enumerable string keys.
   *
   *     assert.isEmpty([]);
   *     assert.isEmpty('');
   *     assert.isEmpty(new Map);
   *     assert.isEmpty({});
   *
   * @name isEmpty
   * @alias empty
   * @param {Object|Array|String|Map|Set} target
   * @param {String} message _optional_
   * @namespace Assert
   * @api public
   */

  assert.isEmpty = function(val, msg) {
    new Assertion(val, msg, assert.isEmpty, true).to.be.empty;
  };

  /**
   * ### .isNotEmpty(target)
   *
   * Asserts that the target contains values.
   * For arrays and strings, it checks the `length` property.
   * For `Map` and `Set` instances, it checks the `size` property.
   * For non-function objects, it gets the count of own
   * enumerable string keys.
   *
   *     assert.isNotEmpty([1, 2]);
   *     assert.isNotEmpty('34');
   *     assert.isNotEmpty(new Set([5, 6]));
   *     assert.isNotEmpty({ key: 7 });
   *
   * @name isNotEmpty
   * @alias notEmpty
   * @param {Object|Array|String|Map|Set} target
   * @param {String} message _optional_
   * @namespace Assert
   * @api public
   */

  assert.isNotEmpty = function(val, msg) {
    new Assertion(val, msg, assert.isNotEmpty, true).to.not.be.empty;
  };

  /*!
   * Aliases.
   */

  (function alias(name, as){
    assert[as] = assert[name];
    return alias;
  })
  ('isOk', 'ok')
  ('isNotOk', 'notOk')
  ('throws', 'throw')
  ('throws', 'Throw')
  ('isExtensible', 'extensible')
  ('isNotExtensible', 'notExtensible')
  ('isSealed', 'sealed')
  ('isNotSealed', 'notSealed')
  ('isFrozen', 'frozen')
  ('isNotFrozen', 'notFrozen')
  ('isEmpty', 'empty')
  ('isNotEmpty', 'notEmpty');
};


/***/ }),
/* 108 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var __values = undefined && undefined.__values || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator],
        i = 0;
    if (m) return m.call(o);
    return {
        next: function next() {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
Object.defineProperty(exports, "__esModule", { value: true });
var UniExpr_1 = __webpack_require__(0);
var chai_1 = __webpack_require__(59);
var RuntimeException_1 = __webpack_require__(47);
var UniFunctionDec_1 = __webpack_require__(24);
var Type;
(function (Type) {
    Type[Type["GLOBAL"] = 0] = "GLOBAL";
    Type[Type["OBJECT"] = 1] = "OBJECT";
    Type[Type["LOCAL"] = 2] = "LOCAL";
})(Type || (Type = {}));
var Address = /** @class */function () {
    function Address(codeAddress, staticAddress, heapAddress, stackAddress) {
        this.codeAddress = codeAddress;
        this.staticAddress = staticAddress;
        this.heapAddress = heapAddress;
        this.stackAddress = stackAddress;
    }
    return Address;
}();
var ValueSetter = /** @class */function () {
    function ValueSetter() {}
    ValueSetter.prototype.accept = function (value) {
        this.hasValue = true;
        this.value = value;
    };
    return ValueSetter;
}();
var Scope = /** @class */function () {
    function Scope(type, parent) {
        this.children = [];
        this.variableAddress = new Map();
        this.variableTypes = new Map();
        this.listeners = null;
        this.tempAddressForListener = -1;
        this.parent = parent;
        this.type = type;
        if (parent === null) {
            this.depth = 0;
            this.name = 'GLOBAL';
            this.global = this;
            this.address = new Address(0, 10000, 20000, 50000);
            this.mallocData = new Map();
            this.objectOnMemory = new Map();
            this.typeOnMemory = new Map();
        } else {
            parent.children.push(this);
            this.depth = parent.depth + 1;
            this.name = parent.name;
            this.global = parent.global;
            this.address = parent.address;
            this.address.stackAddress++;
            this.mallocData = parent.mallocData;
            this.objectOnMemory = parent.objectOnMemory;
            this.typeOnMemory = parent.typeOnMemory;
        }
    }
    Scope.assertNotUnicoen = function (value) {
        if (value instanceof UniExpr_1.default && !(value instanceof UniFunctionDec_1.default)) {
            throw new RuntimeException_1.default('Maybe programming miss!');
        }
    };
    Scope.prototype.setListener = function (listener) {
        if (this.listeners == null) {
            this.listeners = [];
        }
        this.listeners.push(listener);
    };
    Scope.prototype.hasValue = function (key) {
        try {
            this.getValue(this.getAddress(key));
            return true;
        } catch (err) {
            if (err instanceof RuntimeException_1.UniRuntimeError) {
                return false;
            }
            throw err;
        }
    };
    Scope.prototype.get = function (key) {
        return this.getValue(this.getAddress(key));
    };
    Scope.prototype.getValue = function (key) {
        return this.getValueImple(key, this.name);
    };
    Scope.prototype.getStr = function (name) {
        var addr = this.getAddress(name);
        var buf = [];
        var i = 0;
        for (; i < 10000; ++i) {
            var b = this.getValue(addr + i);
            if (b === 0) {
                break;
            }
            buf.push(b);
        }
        // tslint:disable-next-line:prefer-array-literal
        var array = new Array(i);
        for (var k = 0; k < i; ++k) {
            array[k] = /* get */buf[k];
        }
        var result = String.fromCharCode.apply(null, array);
        return result;
    };
    Scope.prototype.getValueImple = function (key, stackName) {
        if (this.objectOnMemory.has(key)) {
            var _var = this.objectOnMemory.get(key);
            if (stackName === this.name || this.type === Type.GLOBAL) {
                if (key === this.tempAddressForListener) this.objectOnMemory.delete(this.tempAddressForListener);
                return _var;
            }
        }
        if (this.parent != null) {
            return this.parent.getValue(key);
        } else {
            throw new RuntimeException_1.UniRuntimeError("variable " + key + " is not defined.");
        }
    };
    Scope.prototype.getType = function (key) {
        if (typeof key === 'string') {
            if (this.variableTypes.has(key)) {
                return this.variableTypes.get(key);
            } else if (this.parent != null) {
                return this.parent.getType(key);
            }
        }
        if (typeof key === 'number') {
            if (this.typeOnMemory.has(key)) {
                return this.typeOnMemory.get(key);
            } else if (this.parent != null) {
                return this.parent.getType(key);
            }
        }
        throw new RuntimeException_1.UniRuntimeError("variable " + key + " is not defined.");
    };
    Scope.prototype.getAddress = function (key) {
        if (this.variableAddress.has(key)) {
            return this.variableAddress.get(key);
        } else if (this.parent != null) {
            return this.parent.getAddress(key);
        } else if (this.listeners != null) {
            var setter = new ValueSetter();
            try {
                for (var _a = __values(this.listeners), _b = _a.next(); !_b.done; _b = _a.next()) {
                    var listener = _b.value;
                    listener.variableNotFound(key, setter);
                    if (setter.hasValue) {
                        this.objectOnMemory.set(this.tempAddressForListener, setter.value);
                        return -1;
                    }
                }
            } catch (e_1_1) {
                e_1 = { error: e_1_1 };
            } finally {
                try {
                    if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
                } finally {
                    if (e_1) throw e_1.error;
                }
            }
        }
        throw new RuntimeException_1.UniRuntimeError("variable " + key + " is not defined.");
        var e_1, _c;
    };
    Scope.prototype.setMallocSize = function (address, size) {
        this.mallocData.set(address, size);
    };
    Scope.prototype.isMallocArea = function (address) {
        return this.mallocData.has(address);
    };
    Scope.prototype.getMallocSize = function (address) {
        return this.mallocData.get(address);
    };
    Scope.prototype.removeOnMemory = function (address, size) {
        var result = true;
        for (var i = 0; i < size; ++i) {
            result = this.objectOnMemory.delete(address + i) != null;
            result = this.typeOnMemory.delete(address + i) != null;
        }
        return result;
    };
    Scope.prototype.setAreaImple = function (value, type, addr, member) {
        Scope.assertNotUnicoen(value);
        this.objectOnMemory.set(addr[member], value);
        this.typeOnMemory.set(addr[member], type);
        return addr[member]++;
    };
    Scope.prototype.setHeap = function (value, type) {
        return this.setAreaImple(value, type, this.address, 'staticAddress');
    };
    Scope.prototype.setStatic = function (value, type) {
        return this.setAreaImple(value, type, this.address, 'staticAddress');
    };
    Scope.prototype.setCode = function (value, type) {
        return this.setAreaImple(value, type, this.address, 'codeAddress');
    };
    Scope.prototype.setSystemVariable = function (type, name, value) {
        Scope.assertNotUnicoen(value);
        this.variableTypes.set(name, type);
        this.variableAddress.set(name, this.address.codeAddress);
        this.objectOnMemory.set(this.address.codeAddress, value);
        this.typeOnMemory.set(this.address.codeAddress, type);
        return this.address.codeAddress++;
    };
    /** 現在のスコープに新しい変数を定義し、代入します */
    Scope.prototype.setTop = function (key, value, type) {
        Scope.assertNotUnicoen(value);
        if (this.hasValue(type)) {
            this.setPrimitive(key, this.address.stackAddress + 1, type);
            var offsets = this.get(type);
            var arr = null;
            if (value instanceof Array) {
                arr = value;
                for (var i = arr.length; i < offsets.size; ++i) {
                    arr.push(0);
                }
            } else if (typeof value === 'number') {
                arr = [];
                try {
                    for (var _a = __values(offsets.values()), _b = _a.next(); !_b.done; _b = _a.next()) {
                        var valueofOffset = _b.value;
                        var addr = value;
                        addr += valueofOffset;
                        var v = this.getValue(addr);
                        arr.push(v);
                    }
                } catch (e_2_1) {
                    e_2 = { error: e_2_1 };
                } finally {
                    try {
                        if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
                    } finally {
                        if (e_2) throw e_2.error;
                    }
                }
            } else {
                arr = [];
                for (var i = 0; i < offsets.size; ++i) {
                    arr.push(null);
                }
            }
            this.setArray(arr, type);
        } else if (value instanceof Array) {
            var arr = value;
            if (type === 'char*') {
                arr.push(0);
                this.setPrimitive(key, this.address.codeAddress, type);
                this.setStringOnCode(arr);
            } else {
                this.setPrimitiveOnCode(key, this.address.stackAddress, type + '[' + arr.length + ']');
                this.setArray(arr, type);
            }
        } else if (type === 'FUNCTION' || value instanceof UniFunctionDec_1.default) {
            this.setPrimitiveOnCode(key, value, type);
        } else {
            this.setPrimitive(key, value, type);
        }
        var e_2, _c;
    };
    Scope.prototype.setArray = function (value, type) {
        Scope.assertNotUnicoen(value);
        try {
            for (var value_1 = __values(value), value_1_1 = value_1.next(); !value_1_1.done; value_1_1 = value_1.next()) {
                var _var = value_1_1.value;
                if (_var instanceof Array) {
                    this.setArray(_var, type);
                } else {
                    this.typeOnMemory.set(this.address.stackAddress, type);
                    this.objectOnMemory.set(this.address.stackAddress++, _var);
                }
            }
        } catch (e_3_1) {
            e_3 = { error: e_3_1 };
        } finally {
            try {
                if (value_1_1 && !value_1_1.done && (_a = value_1.return)) _a.call(value_1);
            } finally {
                if (e_3) throw e_3.error;
            }
        }
        var e_3, _a;
    };
    Scope.prototype.setStringOnCode = function (value) {
        Scope.assertNotUnicoen(value);
        try {
            for (var value_2 = __values(value), value_2_1 = value_2.next(); !value_2_1.done; value_2_1 = value_2.next()) {
                var _var = value_2_1.value;
                if (_var instanceof Array) {
                    this.setStringOnCode(_var);
                } else {
                    this.typeOnMemory.set(this.address.codeAddress, 'char');
                    this.objectOnMemory.set(this.address.codeAddress++, _var);
                }
            }
        } catch (e_4_1) {
            e_4 = { error: e_4_1 };
        } finally {
            try {
                if (value_2_1 && !value_2_1.done && (_a = value_2.return)) _a.call(value_2);
            } finally {
                if (e_4) throw e_4.error;
            }
        }
        var e_4, _a;
    };
    Scope.prototype.setImple = function (key, value, type, address, member) {
        Scope.assertNotUnicoen(value);
        this.variableTypes.set(key, type);
        this.variableAddress.set(key, address[member]);
        this.objectOnMemory.set(address[member], value);
        this.typeOnMemory.set(address[member], type);
        ++address[member];
    };
    Scope.prototype.setPrimitive = function (key, value, type) {
        this.setImple(key, value, type, this.address, 'stackAddress');
    };
    Scope.prototype.setPrimitiveOnCode = function (key, value, type) {
        this.setImple(key, value, type, this.address, 'codeAddress');
    };
    Scope.prototype.setPrimitiveOnHeap = function (key, value, type) {
        this.setImple(key, value, type, this.address, 'heapAddress');
    };
    Scope.prototype.setPrimitiveOnStatic = function (key, value, type) {
        this.setImple(key, value, type, this.address, 'staticAddress');
    };
    /** 指定したメモリアドレスに値を書き込みます */
    Scope.prototype.set = function (addr, value) {
        Scope.assertNotUnicoen(value);
        if (this.objectOnMemory.has(addr)) {
            try {
                var type = this.getType(addr);
                var offsets = this.get(type);
                try {
                    for (var _a = __values(offsets.values()), _b = _a.next(); !_b.done; _b = _a.next()) {
                        var valueOfOffset = _b.value;
                        var dst = this.getValue(addr) + valueOfOffset;
                        var src = value + valueOfOffset;
                        var v = this.getValue(src);
                        this.objectOnMemory.set(dst, v);
                    }
                } catch (e_5_1) {
                    e_5 = { error: e_5_1 };
                } finally {
                    try {
                        if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
                    } finally {
                        if (e_5) throw e_5.error;
                    }
                }
            } catch (e) {
                if (e instanceof RuntimeException_1.UniRuntimeError) {
                    this.objectOnMemory.set(addr, value);
                } else {
                    throw e;
                }
            }
            return;
        }
        if (this.parent != null) {
            this.parent.set(addr, value);
            return;
        }
        throw new RuntimeException_1.UniRuntimeError("address " + addr + " is not declared.");
        var e_5, _c;
    };
    Scope.createGlobal = function () {
        return new Scope(Type.GLOBAL, null);
    };
    Scope.createObject = function (global) {
        chai_1.assert.ok(global != null);
        chai_1.assert.ok(global.type === Type.GLOBAL); // 匿名クラスは未対応
        return new Scope(Type.OBJECT, global);
    };
    Scope.createLocal = function (parent) {
        chai_1.assert.ok(parent != null);
        return new Scope(Type.LOCAL, parent);
    };
    Scope.prototype.removeChild = function (scope) {
        /* remove */
        var length = this.children.length;
        this.children.splice(this.children.indexOf(scope), 1);
        return this.children.length !== length;
    };
    Scope.prototype.hasName = function (funcName) {
        if (this.name === funcName) {
            return true;
        } else if (this.parent != null) {
            return this.parent.hasName(funcName);
        }
        return false;
    };
    Scope.prototype.getNextName = function (funcName) {
        if (!this.hasName(funcName)) return funcName;
        for (var i = 2;; ++i) {
            var indexName = funcName + '.' + i;
            if (!this.hasName(indexName)) {
                return indexName;
            }
        }
    };
    return Scope;
}();
exports.default = Scope;

/***/ }),
/* 109 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var __extends = undefined && undefined.__extends || function () {
    var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
        d.__proto__ = b;
    } || function (d, b) {
        for (var p in b) {
            if (b.hasOwnProperty(p)) d[p] = b[p];
        }
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
Object.defineProperty(exports, "__esModule", { value: true });
var UniStatement_1 = __webpack_require__(3);
var UniJump = /** @class */function (_super) {
    __extends(UniJump, _super);
    function UniJump(dest) {
        var _this = _super.call(this) || this;
        if (dest === undefined) {
            _this.dest = null;
        } else {
            _this.dest = dest;
        }
        _this.fields.set('dest', String);
        return _this;
    }
    UniJump.prototype.toString = function () {
        return 'Jump(' + this.dest + ')';
    };
    UniJump.prototype.equals = function (obj) {
        if (obj == null || !(obj instanceof UniJump)) return false;
        var that = obj;
        return _super.prototype.equals.call(this, that) && (this.dest == null ? that.dest == null : this.dest === that.dest);
    };
    UniJump.prototype.merge = function (that) {
        _super.prototype.merge.call(this, that);
        if (that.dest != null) {
            this.dest = that.dest;
        }
    };
    return UniJump;
}(UniStatement_1.default);
exports.default = UniJump;

/***/ }),
/* 110 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var __extends = undefined && undefined.__extends || function () {
    var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
        d.__proto__ = b;
    } || function (d, b) {
        for (var p in b) {
            if (b.hasOwnProperty(p)) d[p] = b[p];
        }
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
Object.defineProperty(exports, "__esModule", { value: true });
var UniStatement_1 = __webpack_require__(3);
var UniLabel = /** @class */function (_super) {
    __extends(UniLabel, _super);
    function UniLabel(name) {
        var _this = _super.call(this) || this;
        if (name === undefined) {
            _this.name = null;
        } else {
            _this.name = name;
        }
        _this.fields.set('name', String);
        return _this;
    }
    UniLabel.prototype.toString = function () {
        return 'Label(' + this.name + ')';
    };
    UniLabel.prototype.equals = function (obj) {
        if (obj == null || !(obj instanceof UniLabel)) return false;
        var that = obj;
        return _super.prototype.equals.call(this, that) && (this.name == null ? that.name == null : this.name === that.name);
    };
    UniLabel.prototype.merge = function (that) {
        _super.prototype.merge.call(this, that);
        if (that.name != null) {
            this.name = that.name;
        }
    };
    return UniLabel;
}(UniStatement_1.default);
exports.default = UniLabel;

/***/ }),
/* 111 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var __values = undefined && undefined.__values || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator],
        i = 0;
    if (m) return m.call(o);
    return {
        next: function next() {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
Object.defineProperty(exports, "__esModule", { value: true });
var UniNode_1 = __webpack_require__(34);
var Stack_1 = __webpack_require__(112);
var Variable_1 = __webpack_require__(69);
var UniVariableDec_1 = __webpack_require__(21);
var ExecState = /** @class */function () {
    function ExecState(global) {
        this.stacks = [];
        this.stackOffset = 0x10000;
        this.global = null;
        if (global !== undefined) {
            this.global = global;
        }
    }
    ExecState.prototype.make = function () {
        this.stacks = [];
        return this.makeImple(this.global);
    };
    ExecState.prototype.makeImple = function (scope) {
        if (!this.hasStack(scope.name)) {
            this.addStack(scope.name);
            if (scope.name === 'GLOBAL') {
                for (var i = 10000; i < 20000; ++i) {
                    if (scope.typeOnMemory.has(i)) {
                        var type = scope.typeOnMemory.get(i);
                        if (type === 'FUNCTION') continue;
                        var value = scope.objectOnMemory.get(i);
                        var variable = new Variable_1.default(type, 'Static:' + i, value, i, scope.depth);
                        this.addVariable(scope.name, variable);
                    }
                }
                for (var i = 20000; i < 50000; ++i) {
                    if (scope.typeOnMemory.has(i)) {
                        var type = scope.typeOnMemory.get(i);
                        if (type === 'FUNCTION') continue;
                        var value = scope.objectOnMemory.get(i);
                        var variable = new Variable_1.default(type, 'Heap:' + i, value, i, scope.depth);
                        this.addVariable(scope.name, variable);
                    }
                }
            }
        }
        var varList = [];
        try {
            for (var _a = __values(scope.variableAddress.keys()), _b = _a.next(); !_b.done; _b = _a.next()) {
                var key = _b.value;
                varList.push(key);
            }
        } catch (e_1_1) {
            e_1 = { error: e_1_1 };
        } finally {
            try {
                if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
            } finally {
                if (e_1) throw e_1.error;
            }
        }
        try {
            for (var varList_1 = __values(varList), varList_1_1 = varList_1.next(); !varList_1_1.done; varList_1_1 = varList_1.next()) {
                var varName = varList_1_1.value;
                var type = scope.variableTypes.get(varName);
                if (type === 'FUNCTION') continue;
                var address = scope.variableAddress.get(varName);
                var value = scope.objectOnMemory.get(address);
                if (value instanceof UniNode_1.default) continue;
                if (~type.indexOf('[') && ~type.indexOf(']')) {
                    var length = Number(type.substring(type.lastIndexOf('[') + 1, type.length - 1));
                    var list = [];
                    for (var i = 0; i < length; ++i) {
                        var arrValue = scope.objectOnMemory.get(value + i);
                        list.push(arrValue);
                    }
                    address = value;
                    value = list;
                }
                var variable = new Variable_1.default(type, varName, value, address, scope.depth);
                this.addVariable(scope.name, variable);
            }
        } catch (e_2_1) {
            e_2 = { error: e_2_1 };
        } finally {
            try {
                if (varList_1_1 && !varList_1_1.done && (_d = varList_1.return)) _d.call(varList_1);
            } finally {
                if (e_2) throw e_2.error;
            }
        }
        if (scope.children.length !== 0) {
            try {
                for (var _e = __values(scope.children), _f = _e.next(); !_f.done; _f = _e.next()) {
                    var child = _f.value;
                    this.makeImple(child);
                }
            } catch (e_3_1) {
                e_3 = { error: e_3_1 };
            } finally {
                try {
                    if (_f && !_f.done && (_g = _e.return)) _g.call(_e);
                } finally {
                    if (e_3) throw e_3.error;
                }
            }
        }
        return this;
        var e_1, _c, e_2, _d, e_3, _g;
    };
    ExecState.prototype.addVariable = function (stackName, param2, value, depth) {
        if (param2 instanceof Variable_1.default) {
            var variable = param2;
            for (var i = this.stacks.length - 1; 0 <= i; --i) {
                var stack = this.stacks[i];
                if (stack.name === stackName) {
                    stack.addVariable(variable);
                    break;
                }
            }
        } else if (param2 instanceof UniVariableDec_1.default && value !== undefined && depth !== undefined) {
            var decVar = param2;
            for (var i = this.stacks.length - 1; 0 <= i; --i) {
                var stack = this.stacks[i];
                if (stack.name === stackName) {
                    try {
                        for (var _a = __values(decVar.variables), _b = _a.next(); !_b.done; _b = _a.next()) {
                            var v = _b.value;
                            stack.addVariable(decVar.type, v.name, value, depth);
                        }
                    } catch (e_4_1) {
                        e_4 = { error: e_4_1 };
                    } finally {
                        try {
                            if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
                        } finally {
                            if (e_4) throw e_4.error;
                        }
                    }
                    break;
                }
            }
        }
        var e_4, _c;
    };
    // 引数(variables)あり版も必要
    ExecState.prototype.addStack = function (_name) {
        var name = _name;
        if (this.stacks.length === 0) {
            var stack = new Stack_1.default(name, this.stackOffset);
            this.stacks.push(stack);
        } else {
            var lastStack = this.stacks[this.stacks.length - 1];
            var lastAddress = lastStack.address;
            lastAddress += lastStack.getByteSize();
            if (this.hasStack(name)) {
                for (var i = 2;; ++i) {
                    var indexName = name + '.' + i;
                    if (!this.hasStack(indexName)) {
                        name = indexName;
                        break;
                    }
                }
            }
            var stack = new Stack_1.default(name, lastAddress);
            this.stacks.push(stack);
        }
        return name;
    };
    ExecState.prototype.popStack = function () {
        this.stacks.pop();
    };
    // 更新
    ExecState.prototype.updateVariable = function (stackName, varName, value) {
        for (var i = this.stacks.length - 1; 0 <= i; --i) {
            var stack = this.stacks[i];
            if (stack.name === stackName) {
                stack.updateVariable(varName, value);
                break;
            }
        }
    };
    ExecState.prototype.removeVariables = function (stackName, depth) {
        if (stackName === 'main' && depth < 2) {
            return;
        }
        for (var i = this.stacks.length - 1; 0 <= i; --i) {
            var stack = this.stacks[i];
            if (stack.name === stackName) {
                stack.removeVariables(depth);
                break;
            }
        }
    };
    ExecState.prototype.getCurrentExpr = function () {
        return this.currentExpr;
    };
    ExecState.prototype.setCurrentExpr = function (expr) {
        this.currentExpr = expr;
    };
    ExecState.prototype.getStacks = function () {
        return this.stacks;
    };
    ExecState.prototype.getByteSize = function () {
        var sum = 0;
        try {
            for (var _a = __values(this.stacks), _b = _a.next(); !_b.done; _b = _a.next()) {
                var stack = _b.value;
                sum += stack.getByteSize();
            }
        } catch (e_5_1) {
            e_5 = { error: e_5_1 };
        } finally {
            try {
                if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
            } finally {
                if (e_5) throw e_5.error;
            }
        }
        return sum;
        var e_5, _c;
    };
    ExecState.prototype.hasStack = function (name) {
        try {
            for (var _a = __values(this.stacks), _b = _a.next(); !_b.done; _b = _a.next()) {
                var stack = _b.value;
                if (stack.name === name) {
                    return true;
                }
            }
        } catch (e_6_1) {
            e_6 = { error: e_6_1 };
        } finally {
            try {
                if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
            } finally {
                if (e_6) throw e_6.error;
            }
        }
        return false;
        var e_6, _c;
    };
    return ExecState;
}();
exports.default = ExecState;

/***/ }),
/* 112 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var __values = undefined && undefined.__values || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator],
        i = 0;
    if (m) return m.call(o);
    return {
        next: function next() {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
Object.defineProperty(exports, "__esModule", { value: true });
var Variable_1 = __webpack_require__(69);
var RuntimeException_1 = __webpack_require__(47);
var Stack = /** @class */function () {
    // 引数(variables)あり版も必要
    function Stack(name, address) {
        this.name = name;
        this.address = address;
        this.variables = [];
    }
    Stack.prototype.addVariable = function (arg0, name, value, depth) {
        if (arg0 instanceof Variable_1.default) {
            var variable = arg0;
            this.variables.push(variable);
            return;
        } else if (name === undefined || value === undefined || depth === undefined) {
            throw new RuntimeException_1.default('args erro');
        }
        var type = arg0;
        var lastAddress = this.address;
        if (this.variables.length !== 0) {
            var lastVar = this.variables[this.variables.length - 1];
            lastAddress = lastVar.address;
            lastAddress += lastVar.getByteSize();
        }
        var _var = new Variable_1.default(type, name, value, lastAddress, depth);
        this.variables.push(_var);
    };
    Stack.prototype.updateVariable = function (name, value) {
        for (var i = this.variables.length - 1; 0 <= i; --i) {
            var _var = this.variables[i]; // 内側のスコープから探すため逆順に探索
            if (_var.hasValue(name)) {
                _var.setValue(name, value);
                break;
            }
        }
    };
    Stack.prototype.removeVariables = function (depth) {
        this.variables = this.variables.filter(function (v, i) {
            return !(depth <= v.depth);
        });
    };
    Stack.prototype.getVariables = function () {
        return this.variables;
    };
    Stack.prototype.getByteSize = function () {
        var sum = 0;
        try {
            for (var _a = __values(this.variables), _b = _a.next(); !_b.done; _b = _a.next()) {
                var _var = _b.value;
                sum += _var.getByteSize();
            }
        } catch (e_1_1) {
            e_1 = { error: e_1_1 };
        } finally {
            try {
                if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
            } finally {
                if (e_1) throw e_1.error;
            }
        }
        return sum;
        var e_1, _c;
    };
    Stack.prototype.toString = function () {
        return 'Stack [name=' + this.name + ', variables=' + this.variables + ', address=' + this.address + ']';
    };
    return Stack;
}();
exports.default = Stack;

/***/ }),
/* 113 */
/***/ (function(module, exports, __webpack_require__) {

/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

exports.ATN = __webpack_require__(10).ATN;
exports.ATNDeserializer = __webpack_require__(71).ATNDeserializer;
exports.LexerATNSimulator = __webpack_require__(116).LexerATNSimulator;
exports.ParserATNSimulator = __webpack_require__(119).ParserATNSimulator;
exports.PredictionMode = __webpack_require__(76).PredictionMode;


/***/ }),
/* 114 */
/***/ (function(module, exports, __webpack_require__) {

//
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
///

var Set = __webpack_require__(1).Set;
var BitSet = __webpack_require__(1).BitSet;
var Token = __webpack_require__(2).Token;
var ATNConfig = __webpack_require__(30).ATNConfig;
var Interval = __webpack_require__(4).Interval;
var IntervalSet = __webpack_require__(4).IntervalSet;
var RuleStopState = __webpack_require__(7).RuleStopState;
var RuleTransition = __webpack_require__(11).RuleTransition;
var NotSetTransition = __webpack_require__(11).NotSetTransition;
var WildcardTransition = __webpack_require__(11).WildcardTransition;
var AbstractPredicateTransition = __webpack_require__(11).AbstractPredicateTransition;

var pc = __webpack_require__(9);
var predictionContextFromRuleContext = pc.predictionContextFromRuleContext;
var PredictionContext = pc.PredictionContext;
var SingletonPredictionContext = pc.SingletonPredictionContext;

function LL1Analyzer (atn) {
    this.atn = atn;
}

//* Special value added to the lookahead sets to indicate that we hit
//  a predicate during analysis if {@code seeThruPreds==false}.
///
LL1Analyzer.HIT_PRED = Token.INVALID_TYPE;


//*
// Calculates the SLL(1) expected lookahead set for each outgoing transition
// of an {@link ATNState}. The returned array has one element for each
// outgoing transition in {@code s}. If the closure from transition
// <em>i</em> leads to a semantic predicate before matching a symbol, the
// element at index <em>i</em> of the result will be {@code null}.
//
// @param s the ATN state
// @return the expected symbols for each outgoing transition of {@code s}.
///
LL1Analyzer.prototype.getDecisionLookahead = function(s) {
    if (s === null) {
        return null;
    }
    var count = s.transitions.length;
    var look = [];
    for(var alt=0; alt< count; alt++) {
        look[alt] = new IntervalSet();
        var lookBusy = new Set();
        var seeThruPreds = false; // fail to get lookahead upon pred
        this._LOOK(s.transition(alt).target, null, PredictionContext.EMPTY,
              look[alt], lookBusy, new BitSet(), seeThruPreds, false);
        // Wipe out lookahead for this alternative if we found nothing
        // or we had a predicate when we !seeThruPreds
        if (look[alt].length===0 || look[alt].contains(LL1Analyzer.HIT_PRED)) {
            look[alt] = null;
        }
    }
    return look;
};

//*
// Compute set of tokens that can follow {@code s} in the ATN in the
// specified {@code ctx}.
//
// <p>If {@code ctx} is {@code null} and the end of the rule containing
// {@code s} is reached, {@link Token//EPSILON} is added to the result set.
// If {@code ctx} is not {@code null} and the end of the outermost rule is
// reached, {@link Token//EOF} is added to the result set.</p>
//
// @param s the ATN state
// @param stopState the ATN state to stop at. This can be a
// {@link BlockEndState} to detect epsilon paths through a closure.
// @param ctx the complete parser context, or {@code null} if the context
// should be ignored
//
// @return The set of tokens that can follow {@code s} in the ATN in the
// specified {@code ctx}.
///
LL1Analyzer.prototype.LOOK = function(s, stopState, ctx) {
    var r = new IntervalSet();
    var seeThruPreds = true; // ignore preds; get all lookahead
	ctx = ctx || null;
    var lookContext = ctx!==null ? predictionContextFromRuleContext(s.atn, ctx) : null;
    this._LOOK(s, stopState, lookContext, r, new Set(), new BitSet(), seeThruPreds, true);
    return r;
};

//*
// Compute set of tokens that can follow {@code s} in the ATN in the
// specified {@code ctx}.
//
// <p>If {@code ctx} is {@code null} and {@code stopState} or the end of the
// rule containing {@code s} is reached, {@link Token//EPSILON} is added to
// the result set. If {@code ctx} is not {@code null} and {@code addEOF} is
// {@code true} and {@code stopState} or the end of the outermost rule is
// reached, {@link Token//EOF} is added to the result set.</p>
//
// @param s the ATN state.
// @param stopState the ATN state to stop at. This can be a
// {@link BlockEndState} to detect epsilon paths through a closure.
// @param ctx The outer context, or {@code null} if the outer context should
// not be used.
// @param look The result lookahead set.
// @param lookBusy A set used for preventing epsilon closures in the ATN
// from causing a stack overflow. Outside code should pass
// {@code new Set<ATNConfig>} for this argument.
// @param calledRuleStack A set used for preventing left recursion in the
// ATN from causing a stack overflow. Outside code should pass
// {@code new BitSet()} for this argument.
// @param seeThruPreds {@code true} to true semantic predicates as
// implicitly {@code true} and "see through them", otherwise {@code false}
// to treat semantic predicates as opaque and add {@link //HIT_PRED} to the
// result if one is encountered.
// @param addEOF Add {@link Token//EOF} to the result if the end of the
// outermost context is reached. This parameter has no effect if {@code ctx}
// is {@code null}.
///
LL1Analyzer.prototype._LOOK = function(s, stopState , ctx, look, lookBusy, calledRuleStack, seeThruPreds, addEOF) {
    var c = new ATNConfig({state:s, alt:0, context: ctx}, null);
    if (lookBusy.contains(c)) {
        return;
    }
    lookBusy.add(c);
    if (s === stopState) {
        if (ctx ===null) {
            look.addOne(Token.EPSILON);
            return;
        } else if (ctx.isEmpty() && addEOF) {
            look.addOne(Token.EOF);
            return;
        }
    }
    if (s instanceof RuleStopState ) {
        if (ctx ===null) {
            look.addOne(Token.EPSILON);
            return;
        } else if (ctx.isEmpty() && addEOF) {
            look.addOne(Token.EOF);
            return;
        }
        if (ctx !== PredictionContext.EMPTY) {
            // run thru all possible stack tops in ctx
            for(var i=0; i<ctx.length; i++) {
                var returnState = this.atn.states[ctx.getReturnState(i)];
                var removed = calledRuleStack.contains(returnState.ruleIndex);
                try {
                    calledRuleStack.remove(returnState.ruleIndex);
                    this._LOOK(returnState, stopState, ctx.getParent(i), look, lookBusy, calledRuleStack, seeThruPreds, addEOF);
                } finally {
                    if (removed) {
                        calledRuleStack.add(returnState.ruleIndex);
                    }
                }
            }
            return;
        }
    }
    for(var j=0; j<s.transitions.length; j++) {
        var t = s.transitions[j];
        if (t.constructor === RuleTransition) {
            if (calledRuleStack.contains(t.target.ruleIndex)) {
                continue;
            }
            var newContext = SingletonPredictionContext.create(ctx, t.followState.stateNumber);
            try {
                calledRuleStack.add(t.target.ruleIndex);
                this._LOOK(t.target, stopState, newContext, look, lookBusy, calledRuleStack, seeThruPreds, addEOF);
            } finally {
                calledRuleStack.remove(t.target.ruleIndex);
            }
        } else if (t instanceof AbstractPredicateTransition ) {
            if (seeThruPreds) {
                this._LOOK(t.target, stopState, ctx, look, lookBusy, calledRuleStack, seeThruPreds, addEOF);
            } else {
                look.addOne(LL1Analyzer.HIT_PRED);
            }
        } else if( t.isEpsilon) {
            this._LOOK(t.target, stopState, ctx, look, lookBusy, calledRuleStack, seeThruPreds, addEOF);
        } else if (t.constructor === WildcardTransition) {
            look.addRange( Token.MIN_USER_TOKEN_TYPE, this.atn.maxTokenType );
        } else {
            var set = t.label;
            if (set !== null) {
                if (t instanceof NotSetTransition) {
                    set = set.complement(Token.MIN_USER_TOKEN_TYPE, this.atn.maxTokenType);
                }
                look.addSet(set);
            }
        }
    }
};

exports.LL1Analyzer = LL1Analyzer;



/***/ }),
/* 115 */
/***/ (function(module, exports) {

/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
///

// Represents the type of recognizer an ATN applies to.

function ATNType() {

}

ATNType.LEXER = 0;
ATNType.PARSER = 1;

exports.ATNType = ATNType;



/***/ }),
/* 116 */
/***/ (function(module, exports, __webpack_require__) {

//
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
///

// When we hit an accept state in either the DFA or the ATN, we
//  have to notify the character stream to start buffering characters
//  via {@link IntStream//mark} and record the current state. The current sim state
//  includes the current index into the input, the current line,
//  and current character position in that line. Note that the Lexer is
//  tracking the starting line and characterization of the token. These
//  variables track the "state" of the simulator when it hits an accept state.
//
//  <p>We track these variables separately for the DFA and ATN simulation
//  because the DFA simulation often has to fail over to the ATN
//  simulation. If the ATN simulation fails, we need the DFA to fall
//  back to its previously accepted state, if any. If the ATN succeeds,
//  then the ATN does the accept and the DFA simulator that invoked it
//  can simply return the predicted token type.</p>
///

var Token = __webpack_require__(2).Token;
var Lexer = __webpack_require__(31).Lexer;
var ATN = __webpack_require__(10).ATN;
var ATNSimulator = __webpack_require__(75).ATNSimulator;
var DFAState = __webpack_require__(18).DFAState;
var ATNConfigSet = __webpack_require__(15).ATNConfigSet;
var OrderedATNConfigSet = __webpack_require__(15).OrderedATNConfigSet;
var PredictionContext = __webpack_require__(9).PredictionContext;
var SingletonPredictionContext = __webpack_require__(9).SingletonPredictionContext;
var RuleStopState = __webpack_require__(7).RuleStopState;
var LexerATNConfig = __webpack_require__(30).LexerATNConfig;
var Transition = __webpack_require__(11).Transition;
var LexerActionExecutor = __webpack_require__(118).LexerActionExecutor;
var LexerNoViableAltException = __webpack_require__(8).LexerNoViableAltException;

function resetSimState(sim) {
	sim.index = -1;
	sim.line = 0;
	sim.column = -1;
	sim.dfaState = null;
}

function SimState() {
	resetSimState(this);
	return this;
}

SimState.prototype.reset = function() {
	resetSimState(this);
};

function LexerATNSimulator(recog, atn, decisionToDFA, sharedContextCache) {
	ATNSimulator.call(this, atn, sharedContextCache);
	this.decisionToDFA = decisionToDFA;
	this.recog = recog;
	// The current token's starting index into the character stream.
	// Shared across DFA to ATN simulation in case the ATN fails and the
	// DFA did not have a previous accept state. In this case, we use the
	// ATN-generated exception object.
	this.startIndex = -1;
	// line number 1..n within the input///
	this.line = 1;
	// The index of the character relative to the beginning of the line
	// 0..n-1///
	this.column = 0;
	this.mode = Lexer.DEFAULT_MODE;
	// Used during DFA/ATN exec to record the most recent accept configuration
	// info
	this.prevAccept = new SimState();
	// done
	return this;
}

LexerATNSimulator.prototype = Object.create(ATNSimulator.prototype);
LexerATNSimulator.prototype.constructor = LexerATNSimulator;

LexerATNSimulator.debug = false;
LexerATNSimulator.dfa_debug = false;

LexerATNSimulator.MIN_DFA_EDGE = 0;
LexerATNSimulator.MAX_DFA_EDGE = 127; // forces unicode to stay in ATN

LexerATNSimulator.match_calls = 0;

LexerATNSimulator.prototype.copyState = function(simulator) {
	this.column = simulator.column;
	this.line = simulator.line;
	this.mode = simulator.mode;
	this.startIndex = simulator.startIndex;
};

LexerATNSimulator.prototype.match = function(input, mode) {
	this.match_calls += 1;
	this.mode = mode;
	var mark = input.mark();
	try {
		this.startIndex = input.index;
		this.prevAccept.reset();
		var dfa = this.decisionToDFA[mode];
		if (dfa.s0 === null) {
			return this.matchATN(input);
		} else {
			return this.execATN(input, dfa.s0);
		}
	} finally {
		input.release(mark);
	}
};

LexerATNSimulator.prototype.reset = function() {
	this.prevAccept.reset();
	this.startIndex = -1;
	this.line = 1;
	this.column = 0;
	this.mode = Lexer.DEFAULT_MODE;
};

LexerATNSimulator.prototype.matchATN = function(input) {
	var startState = this.atn.modeToStartState[this.mode];

	if (LexerATNSimulator.debug) {
		console.log("matchATN mode " + this.mode + " start: " + startState);
	}
	var old_mode = this.mode;
	var s0_closure = this.computeStartState(input, startState);
	var suppressEdge = s0_closure.hasSemanticContext;
	s0_closure.hasSemanticContext = false;

	var next = this.addDFAState(s0_closure);
	if (!suppressEdge) {
		this.decisionToDFA[this.mode].s0 = next;
	}

	var predict = this.execATN(input, next);

	if (LexerATNSimulator.debug) {
		console.log("DFA after matchATN: " + this.decisionToDFA[old_mode].toLexerString());
	}
	return predict;
};

LexerATNSimulator.prototype.execATN = function(input, ds0) {
	if (LexerATNSimulator.debug) {
		console.log("start state closure=" + ds0.configs);
	}
	if (ds0.isAcceptState) {
		// allow zero-length tokens
		this.captureSimState(this.prevAccept, input, ds0);
	}
	var t = input.LA(1);
	var s = ds0; // s is current/from DFA state

	while (true) { // while more work
		if (LexerATNSimulator.debug) {
			console.log("execATN loop starting closure: " + s.configs);
		}

		// As we move src->trg, src->trg, we keep track of the previous trg to
		// avoid looking up the DFA state again, which is expensive.
		// If the previous target was already part of the DFA, we might
		// be able to avoid doing a reach operation upon t. If s!=null,
		// it means that semantic predicates didn't prevent us from
		// creating a DFA state. Once we know s!=null, we check to see if
		// the DFA state has an edge already for t. If so, we can just reuse
		// it's configuration set; there's no point in re-computing it.
		// This is kind of like doing DFA simulation within the ATN
		// simulation because DFA simulation is really just a way to avoid
		// computing reach/closure sets. Technically, once we know that
		// we have a previously added DFA state, we could jump over to
		// the DFA simulator. But, that would mean popping back and forth
		// a lot and making things more complicated algorithmically.
		// This optimization makes a lot of sense for loops within DFA.
		// A character will take us back to an existing DFA state
		// that already has lots of edges out of it. e.g., .* in comments.
		// print("Target for:" + str(s) + " and:" + str(t))
		var target = this.getExistingTargetState(s, t);
		// print("Existing:" + str(target))
		if (target === null) {
			target = this.computeTargetState(input, s, t);
			// print("Computed:" + str(target))
		}
		if (target === ATNSimulator.ERROR) {
			break;
		}
		// If this is a consumable input element, make sure to consume before
		// capturing the accept state so the input index, line, and char
		// position accurately reflect the state of the interpreter at the
		// end of the token.
		if (t !== Token.EOF) {
			this.consume(input);
		}
		if (target.isAcceptState) {
			this.captureSimState(this.prevAccept, input, target);
			if (t === Token.EOF) {
				break;
			}
		}
		t = input.LA(1);
		s = target; // flip; current DFA target becomes new src/from state
	}
	return this.failOrAccept(this.prevAccept, input, s.configs, t);
};

// Get an existing target state for an edge in the DFA. If the target state
// for the edge has not yet been computed or is otherwise not available,
// this method returns {@code null}.
//
// @param s The current DFA state
// @param t The next input symbol
// @return The existing target DFA state for the given input symbol
// {@code t}, or {@code null} if the target state for this edge is not
// already cached
LexerATNSimulator.prototype.getExistingTargetState = function(s, t) {
	if (s.edges === null || t < LexerATNSimulator.MIN_DFA_EDGE || t > LexerATNSimulator.MAX_DFA_EDGE) {
		return null;
	}

	var target = s.edges[t - LexerATNSimulator.MIN_DFA_EDGE];
	if(target===undefined) {
		target = null;
	}
	if (LexerATNSimulator.debug && target !== null) {
		console.log("reuse state " + s.stateNumber + " edge to " + target.stateNumber);
	}
	return target;
};

// Compute a target state for an edge in the DFA, and attempt to add the
// computed state and corresponding edge to the DFA.
//
// @param input The input stream
// @param s The current DFA state
// @param t The next input symbol
//
// @return The computed target DFA state for the given input symbol
// {@code t}. If {@code t} does not lead to a valid DFA state, this method
// returns {@link //ERROR}.
LexerATNSimulator.prototype.computeTargetState = function(input, s, t) {
	var reach = new OrderedATNConfigSet();
	// if we don't find an existing DFA state
	// Fill reach starting from closure, following t transitions
	this.getReachableConfigSet(input, s.configs, reach, t);

	if (reach.items.length === 0) { // we got nowhere on t from s
		if (!reach.hasSemanticContext) {
			// we got nowhere on t, don't throw out this knowledge; it'd
			// cause a failover from DFA later.
			this.addDFAEdge(s, t, ATNSimulator.ERROR);
		}
		// stop when we can't match any more char
		return ATNSimulator.ERROR;
	}
	// Add an edge from s to target DFA found/created for reach
	return this.addDFAEdge(s, t, null, reach);
};

LexerATNSimulator.prototype.failOrAccept = function(prevAccept, input, reach, t) {
	if (this.prevAccept.dfaState !== null) {
		var lexerActionExecutor = prevAccept.dfaState.lexerActionExecutor;
		this.accept(input, lexerActionExecutor, this.startIndex,
				prevAccept.index, prevAccept.line, prevAccept.column);
		return prevAccept.dfaState.prediction;
	} else {
		// if no accept and EOF is first char, return EOF
		if (t === Token.EOF && input.index === this.startIndex) {
			return Token.EOF;
		}
		throw new LexerNoViableAltException(this.recog, input, this.startIndex, reach);
	}
};

// Given a starting configuration set, figure out all ATN configurations
// we can reach upon input {@code t}. Parameter {@code reach} is a return
// parameter.
LexerATNSimulator.prototype.getReachableConfigSet = function(input, closure,
		reach, t) {
	// this is used to skip processing for configs which have a lower priority
	// than a config that already reached an accept state for the same rule
	var skipAlt = ATN.INVALID_ALT_NUMBER;
	for (var i = 0; i < closure.items.length; i++) {
		var cfg = closure.items[i];
		var currentAltReachedAcceptState = (cfg.alt === skipAlt);
		if (currentAltReachedAcceptState && cfg.passedThroughNonGreedyDecision) {
			continue;
		}
		if (LexerATNSimulator.debug) {
			console.log("testing %s at %s\n", this.getTokenName(t), cfg
					.toString(this.recog, true));
		}
		for (var j = 0; j < cfg.state.transitions.length; j++) {
			var trans = cfg.state.transitions[j]; // for each transition
			var target = this.getReachableTarget(trans, t);
			if (target !== null) {
				var lexerActionExecutor = cfg.lexerActionExecutor;
				if (lexerActionExecutor !== null) {
					lexerActionExecutor = lexerActionExecutor.fixOffsetBeforeMatch(input.index - this.startIndex);
				}
				var treatEofAsEpsilon = (t === Token.EOF);
				var config = new LexerATNConfig({state:target, lexerActionExecutor:lexerActionExecutor}, cfg);
				if (this.closure(input, config, reach,
						currentAltReachedAcceptState, true, treatEofAsEpsilon)) {
					// any remaining configs for this alt have a lower priority
					// than the one that just reached an accept state.
					skipAlt = cfg.alt;
				}
			}
		}
	}
};

LexerATNSimulator.prototype.accept = function(input, lexerActionExecutor,
		startIndex, index, line, charPos) {
	if (LexerATNSimulator.debug) {
		console.log("ACTION %s\n", lexerActionExecutor);
	}
	// seek to after last char in token
	input.seek(index);
	this.line = line;
	this.column = charPos;
	if (lexerActionExecutor !== null && this.recog !== null) {
		lexerActionExecutor.execute(this.recog, input, startIndex);
	}
};

LexerATNSimulator.prototype.getReachableTarget = function(trans, t) {
	if (trans.matches(t, 0, Lexer.MAX_CHAR_VALUE)) {
		return trans.target;
	} else {
		return null;
	}
};

LexerATNSimulator.prototype.computeStartState = function(input, p) {
	var initialContext = PredictionContext.EMPTY;
	var configs = new OrderedATNConfigSet();
	for (var i = 0; i < p.transitions.length; i++) {
		var target = p.transitions[i].target;
        var cfg = new LexerATNConfig({state:target, alt:i+1, context:initialContext}, null);
		this.closure(input, cfg, configs, false, false, false);
	}
	return configs;
};

// Since the alternatives within any lexer decision are ordered by
// preference, this method stops pursuing the closure as soon as an accept
// state is reached. After the first accept state is reached by depth-first
// search from {@code config}, all other (potentially reachable) states for
// this rule would have a lower priority.
//
// @return {@code true} if an accept state is reached, otherwise
// {@code false}.
LexerATNSimulator.prototype.closure = function(input, config, configs,
		currentAltReachedAcceptState, speculative, treatEofAsEpsilon) {
	var cfg = null;
	if (LexerATNSimulator.debug) {
		console.log("closure(" + config.toString(this.recog, true) + ")");
	}
	if (config.state instanceof RuleStopState) {
		if (LexerATNSimulator.debug) {
			if (this.recog !== null) {
				console.log("closure at %s rule stop %s\n", this.recog.ruleNames[config.state.ruleIndex], config);
			} else {
				console.log("closure at rule stop %s\n", config);
			}
		}
		if (config.context === null || config.context.hasEmptyPath()) {
			if (config.context === null || config.context.isEmpty()) {
				configs.add(config);
				return true;
			} else {
				configs.add(new LexerATNConfig({ state:config.state, context:PredictionContext.EMPTY}, config));
				currentAltReachedAcceptState = true;
			}
		}
		if (config.context !== null && !config.context.isEmpty()) {
			for (var i = 0; i < config.context.length; i++) {
				if (config.context.getReturnState(i) !== PredictionContext.EMPTY_RETURN_STATE) {
					var newContext = config.context.getParent(i); // "pop" return state
					var returnState = this.atn.states[config.context.getReturnState(i)];
					cfg = new LexerATNConfig({ state:returnState, context:newContext }, config);
					currentAltReachedAcceptState = this.closure(input, cfg,
							configs, currentAltReachedAcceptState, speculative,
							treatEofAsEpsilon);
				}
			}
		}
		return currentAltReachedAcceptState;
	}
	// optimization
	if (!config.state.epsilonOnlyTransitions) {
		if (!currentAltReachedAcceptState || !config.passedThroughNonGreedyDecision) {
			configs.add(config);
		}
	}
	for (var j = 0; j < config.state.transitions.length; j++) {
		var trans = config.state.transitions[j];
		cfg = this.getEpsilonTarget(input, config, trans, configs, speculative, treatEofAsEpsilon);
		if (cfg !== null) {
			currentAltReachedAcceptState = this.closure(input, cfg, configs,
					currentAltReachedAcceptState, speculative, treatEofAsEpsilon);
		}
	}
	return currentAltReachedAcceptState;
};

// side-effect: can alter configs.hasSemanticContext
LexerATNSimulator.prototype.getEpsilonTarget = function(input, config, trans,
		configs, speculative, treatEofAsEpsilon) {
	var cfg = null;
	if (trans.serializationType === Transition.RULE) {
		var newContext = SingletonPredictionContext.create(config.context, trans.followState.stateNumber);
		cfg = new LexerATNConfig( { state:trans.target, context:newContext}, config);
	} else if (trans.serializationType === Transition.PRECEDENCE) {
		throw "Precedence predicates are not supported in lexers.";
	} else if (trans.serializationType === Transition.PREDICATE) {
		// Track traversing semantic predicates. If we traverse,
		// we cannot add a DFA state for this "reach" computation
		// because the DFA would not test the predicate again in the
		// future. Rather than creating collections of semantic predicates
		// like v3 and testing them on prediction, v4 will test them on the
		// fly all the time using the ATN not the DFA. This is slower but
		// semantically it's not used that often. One of the key elements to
		// this predicate mechanism is not adding DFA states that see
		// predicates immediately afterwards in the ATN. For example,

		// a : ID {p1}? | ID {p2}? ;

		// should create the start state for rule 'a' (to save start state
		// competition), but should not create target of ID state. The
		// collection of ATN states the following ID references includes
		// states reached by traversing predicates. Since this is when we
		// test them, we cannot cash the DFA state target of ID.

		if (LexerATNSimulator.debug) {
			console.log("EVAL rule " + trans.ruleIndex + ":" + trans.predIndex);
		}
		configs.hasSemanticContext = true;
		if (this.evaluatePredicate(input, trans.ruleIndex, trans.predIndex, speculative)) {
			cfg = new LexerATNConfig({ state:trans.target}, config);
		}
	} else if (trans.serializationType === Transition.ACTION) {
		if (config.context === null || config.context.hasEmptyPath()) {
			// execute actions anywhere in the start rule for a token.
			//
			// TODO: if the entry rule is invoked recursively, some
			// actions may be executed during the recursive call. The
			// problem can appear when hasEmptyPath() is true but
			// isEmpty() is false. In this case, the config needs to be
			// split into two contexts - one with just the empty path
			// and another with everything but the empty path.
			// Unfortunately, the current algorithm does not allow
			// getEpsilonTarget to return two configurations, so
			// additional modifications are needed before we can support
			// the split operation.
			var lexerActionExecutor = LexerActionExecutor.append(config.lexerActionExecutor,
					this.atn.lexerActions[trans.actionIndex]);
			cfg = new LexerATNConfig({ state:trans.target, lexerActionExecutor:lexerActionExecutor }, config);
		} else {
			// ignore actions in referenced rules
			cfg = new LexerATNConfig( { state:trans.target}, config);
		}
	} else if (trans.serializationType === Transition.EPSILON) {
		cfg = new LexerATNConfig({ state:trans.target}, config);
	} else if (trans.serializationType === Transition.ATOM ||
				trans.serializationType === Transition.RANGE ||
				trans.serializationType === Transition.SET) {
		if (treatEofAsEpsilon) {
			if (trans.matches(Token.EOF, 0, Lexer.MAX_CHAR_VALUE)) {
				cfg = new LexerATNConfig( { state:trans.target }, config);
			}
		}
	}
	return cfg;
};

// Evaluate a predicate specified in the lexer.
//
// <p>If {@code speculative} is {@code true}, this method was called before
// {@link //consume} for the matched character. This method should call
// {@link //consume} before evaluating the predicate to ensure position
// sensitive values, including {@link Lexer//getText}, {@link Lexer//getLine},
// and {@link Lexer//getcolumn}, properly reflect the current
// lexer state. This method should restore {@code input} and the simulator
// to the original state before returning (i.e. undo the actions made by the
// call to {@link //consume}.</p>
//
// @param input The input stream.
// @param ruleIndex The rule containing the predicate.
// @param predIndex The index of the predicate within the rule.
// @param speculative {@code true} if the current index in {@code input} is
// one character before the predicate's location.
//
// @return {@code true} if the specified predicate evaluates to
// {@code true}.
// /
LexerATNSimulator.prototype.evaluatePredicate = function(input, ruleIndex,
		predIndex, speculative) {
	// assume true if no recognizer was provided
	if (this.recog === null) {
		return true;
	}
	if (!speculative) {
		return this.recog.sempred(null, ruleIndex, predIndex);
	}
	var savedcolumn = this.column;
	var savedLine = this.line;
	var index = input.index;
	var marker = input.mark();
	try {
		this.consume(input);
		return this.recog.sempred(null, ruleIndex, predIndex);
	} finally {
		this.column = savedcolumn;
		this.line = savedLine;
		input.seek(index);
		input.release(marker);
	}
};

LexerATNSimulator.prototype.captureSimState = function(settings, input, dfaState) {
	settings.index = input.index;
	settings.line = this.line;
	settings.column = this.column;
	settings.dfaState = dfaState;
};

LexerATNSimulator.prototype.addDFAEdge = function(from_, tk, to, cfgs) {
	if (to === undefined) {
		to = null;
	}
	if (cfgs === undefined) {
		cfgs = null;
	}
	if (to === null && cfgs !== null) {
		// leading to this call, ATNConfigSet.hasSemanticContext is used as a
		// marker indicating dynamic predicate evaluation makes this edge
		// dependent on the specific input sequence, so the static edge in the
		// DFA should be omitted. The target DFAState is still created since
		// execATN has the ability to resynchronize with the DFA state cache
		// following the predicate evaluation step.
		//
		// TJP notes: next time through the DFA, we see a pred again and eval.
		// If that gets us to a previously created (but dangling) DFA
		// state, we can continue in pure DFA mode from there.
		// /
		var suppressEdge = cfgs.hasSemanticContext;
		cfgs.hasSemanticContext = false;

		to = this.addDFAState(cfgs);

		if (suppressEdge) {
			return to;
		}
	}
	// add the edge
	if (tk < LexerATNSimulator.MIN_DFA_EDGE || tk > LexerATNSimulator.MAX_DFA_EDGE) {
		// Only track edges within the DFA bounds
		return to;
	}
	if (LexerATNSimulator.debug) {
		console.log("EDGE " + from_ + " -> " + to + " upon " + tk);
	}
	if (from_.edges === null) {
		// make room for tokens 1..n and -1 masquerading as index 0
		from_.edges = [];
	}
	from_.edges[tk - LexerATNSimulator.MIN_DFA_EDGE] = to; // connect

	return to;
};

// Add a new DFA state if there isn't one with this set of
// configurations already. This method also detects the first
// configuration containing an ATN rule stop state. Later, when
// traversing the DFA, we will know which rule to accept.
LexerATNSimulator.prototype.addDFAState = function(configs) {
	var proposed = new DFAState(null, configs);
	var firstConfigWithRuleStopState = null;
	for (var i = 0; i < configs.items.length; i++) {
		var cfg = configs.items[i];
		if (cfg.state instanceof RuleStopState) {
			firstConfigWithRuleStopState = cfg;
			break;
		}
	}
	if (firstConfigWithRuleStopState !== null) {
		proposed.isAcceptState = true;
		proposed.lexerActionExecutor = firstConfigWithRuleStopState.lexerActionExecutor;
		proposed.prediction = this.atn.ruleToTokenType[firstConfigWithRuleStopState.state.ruleIndex];
	}
	var dfa = this.decisionToDFA[this.mode];
	var existing = dfa.states.get(proposed);
	if (existing!==null) {
		return existing;
	}
	var newState = proposed;
	newState.stateNumber = dfa.states.length;
	configs.setReadonly(true);
	newState.configs = configs;
	dfa.states.add(newState);
	return newState;
};

LexerATNSimulator.prototype.getDFA = function(mode) {
	return this.decisionToDFA[mode];
};

// Get the text matched so far for the current token.
LexerATNSimulator.prototype.getText = function(input) {
	// index is first lookahead char, don't include.
	return input.getText(this.startIndex, input.index - 1);
};

LexerATNSimulator.prototype.consume = function(input) {
	var curChar = input.LA(1);
	if (curChar === "\n".charCodeAt(0)) {
		this.line += 1;
		this.column = 0;
	} else {
		this.column += 1;
	}
	input.consume();
};

LexerATNSimulator.prototype.getTokenName = function(tt) {
	if (tt === -1) {
		return "EOF";
	} else {
		return "'" + String.fromCharCode(tt) + "'";
	}
};

exports.LexerATNSimulator = LexerATNSimulator;


/***/ }),
/* 117 */
/***/ (function(module, exports, __webpack_require__) {

//
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
//

//
// This default implementation of {@link TokenFactory} creates
// {@link CommonToken} objects.
//

var CommonToken = __webpack_require__(2).CommonToken;

function TokenFactory() {
	return this;
}

function CommonTokenFactory(copyText) {
	TokenFactory.call(this);
    // Indicates whether {@link CommonToken//setText} should be called after
    // constructing tokens to explicitly set the text. This is useful for cases
    // where the input stream might not be able to provide arbitrary substrings
    // of text from the input after the lexer creates a token (e.g. the
    // implementation of {@link CharStream//getText} in
    // {@link UnbufferedCharStream} throws an
    // {@link UnsupportedOperationException}). Explicitly setting the token text
    // allows {@link Token//getText} to be called at any time regardless of the
    // input stream implementation.
    //
    // <p>
    // The default value is {@code false} to avoid the performance and memory
    // overhead of copying text for every token unless explicitly requested.</p>
    //
    this.copyText = copyText===undefined ? false : copyText;
	return this;
}

CommonTokenFactory.prototype = Object.create(TokenFactory.prototype);
CommonTokenFactory.prototype.constructor = CommonTokenFactory;

//
// The default {@link CommonTokenFactory} instance.
//
// <p>
// This token factory does not explicitly copy token text when constructing
// tokens.</p>
//
CommonTokenFactory.DEFAULT = new CommonTokenFactory();

CommonTokenFactory.prototype.create = function(source, type, text, channel, start, stop, line, column) {
    var t = new CommonToken(source, type, channel, start, stop);
    t.line = line;
    t.column = column;
    if (text !==null) {
        t.text = text;
    } else if (this.copyText && source[1] !==null) {
        t.text = source[1].getText(start,stop);
    }
    return t;
};

CommonTokenFactory.prototype.createThin = function(type, text) {
    var t = new CommonToken(null, type);
    t.text = text;
    return t;
};

exports.CommonTokenFactory = CommonTokenFactory;


/***/ }),
/* 118 */
/***/ (function(module, exports, __webpack_require__) {

//
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
///

// Represents an executor for a sequence of lexer actions which traversed during
// the matching operation of a lexer rule (token).
//
// <p>The executor tracks position information for position-dependent lexer actions
// efficiently, ensuring that actions appearing only at the end of the rule do
// not cause bloating of the {@link DFA} created for the lexer.</p>

var hashStuff = __webpack_require__(1).hashStuff;
var LexerIndexedCustomAction = __webpack_require__(73).LexerIndexedCustomAction;

function LexerActionExecutor(lexerActions) {
	this.lexerActions = lexerActions === null ? [] : lexerActions;
	// Caches the result of {@link //hashCode} since the hash code is an element
	// of the performance-critical {@link LexerATNConfig//hashCode} operation.
	this.cachedHashCode = hashStuff(lexerActions); // "".join([str(la) for la in
	// lexerActions]))
	return this;
}

// Creates a {@link LexerActionExecutor} which executes the actions for
// the input {@code lexerActionExecutor} followed by a specified
// {@code lexerAction}.
//
// @param lexerActionExecutor The executor for actions already traversed by
// the lexer while matching a token within a particular
// {@link LexerATNConfig}. If this is {@code null}, the method behaves as
// though it were an empty executor.
// @param lexerAction The lexer action to execute after the actions
// specified in {@code lexerActionExecutor}.
//
// @return A {@link LexerActionExecutor} for executing the combine actions
// of {@code lexerActionExecutor} and {@code lexerAction}.
LexerActionExecutor.append = function(lexerActionExecutor, lexerAction) {
	if (lexerActionExecutor === null) {
		return new LexerActionExecutor([ lexerAction ]);
	}
	var lexerActions = lexerActionExecutor.lexerActions.concat([ lexerAction ]);
	return new LexerActionExecutor(lexerActions);
};

// Creates a {@link LexerActionExecutor} which encodes the current offset
// for position-dependent lexer actions.
//
// <p>Normally, when the executor encounters lexer actions where
// {@link LexerAction//isPositionDependent} returns {@code true}, it calls
// {@link IntStream//seek} on the input {@link CharStream} to set the input
// position to the <em>end</em> of the current token. This behavior provides
// for efficient DFA representation of lexer actions which appear at the end
// of a lexer rule, even when the lexer rule matches a variable number of
// characters.</p>
//
// <p>Prior to traversing a match transition in the ATN, the current offset
// from the token start index is assigned to all position-dependent lexer
// actions which have not already been assigned a fixed offset. By storing
// the offsets relative to the token start index, the DFA representation of
// lexer actions which appear in the middle of tokens remains efficient due
// to sharing among tokens of the same length, regardless of their absolute
// position in the input stream.</p>
//
// <p>If the current executor already has offsets assigned to all
// position-dependent lexer actions, the method returns {@code this}.</p>
//
// @param offset The current offset to assign to all position-dependent
// lexer actions which do not already have offsets assigned.
//
// @return A {@link LexerActionExecutor} which stores input stream offsets
// for all position-dependent lexer actions.
// /
LexerActionExecutor.prototype.fixOffsetBeforeMatch = function(offset) {
	var updatedLexerActions = null;
	for (var i = 0; i < this.lexerActions.length; i++) {
		if (this.lexerActions[i].isPositionDependent &&
				!(this.lexerActions[i] instanceof LexerIndexedCustomAction)) {
			if (updatedLexerActions === null) {
				updatedLexerActions = this.lexerActions.concat([]);
			}
			updatedLexerActions[i] = new LexerIndexedCustomAction(offset,
					this.lexerActions[i]);
		}
	}
	if (updatedLexerActions === null) {
		return this;
	} else {
		return new LexerActionExecutor(updatedLexerActions);
	}
};

// Execute the actions encapsulated by this executor within the context of a
// particular {@link Lexer}.
//
// <p>This method calls {@link IntStream//seek} to set the position of the
// {@code input} {@link CharStream} prior to calling
// {@link LexerAction//execute} on a position-dependent action. Before the
// method returns, the input position will be restored to the same position
// it was in when the method was invoked.</p>
//
// @param lexer The lexer instance.
// @param input The input stream which is the source for the current token.
// When this method is called, the current {@link IntStream//index} for
// {@code input} should be the start of the following token, i.e. 1
// character past the end of the current token.
// @param startIndex The token start index. This value may be passed to
// {@link IntStream//seek} to set the {@code input} position to the beginning
// of the token.
// /
LexerActionExecutor.prototype.execute = function(lexer, input, startIndex) {
	var requiresSeek = false;
	var stopIndex = input.index;
	try {
		for (var i = 0; i < this.lexerActions.length; i++) {
			var lexerAction = this.lexerActions[i];
			if (lexerAction instanceof LexerIndexedCustomAction) {
				var offset = lexerAction.offset;
				input.seek(startIndex + offset);
				lexerAction = lexerAction.action;
				requiresSeek = (startIndex + offset) !== stopIndex;
			} else if (lexerAction.isPositionDependent) {
				input.seek(stopIndex);
				requiresSeek = false;
			}
			lexerAction.execute(lexer);
		}
	} finally {
		if (requiresSeek) {
			input.seek(stopIndex);
		}
	}
};

LexerActionExecutor.prototype.hashCode = function() {
	return this.cachedHashCode;
};

LexerActionExecutor.prototype.updateHashCode = function(hash) {
    hash.update(this.cachedHashCode);
};


LexerActionExecutor.prototype.equals = function(other) {
	if (this === other) {
		return true;
	} else if (!(other instanceof LexerActionExecutor)) {
		return false;
	} else if (this.cachedHashCode != other.cachedHashCode) {
		return false;
	} else if (this.lexerActions.length != other.lexerActions.length) {
		return false;
	} else {
		var numActions = this.lexerActions.length
		for (var idx = 0; idx < numActions; ++idx) {
			if (!this.lexerActions[idx].equals(other.lexerActions[idx])) {
				return false;
			}
		}
		return true;
	}
};

exports.LexerActionExecutor = LexerActionExecutor;


/***/ }),
/* 119 */
/***/ (function(module, exports, __webpack_require__) {

//
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
//

//
// The embodiment of the adaptive LL(*), ALL(*), parsing strategy.
//
// <p>
// The basic complexity of the adaptive strategy makes it harder to understand.
// We begin with ATN simulation to build paths in a DFA. Subsequent prediction
// requests go through the DFA first. If they reach a state without an edge for
// the current symbol, the algorithm fails over to the ATN simulation to
// complete the DFA path for the current input (until it finds a conflict state
// or uniquely predicting state).</p>
//
// <p>
// All of that is done without using the outer context because we want to create
// a DFA that is not dependent upon the rule invocation stack when we do a
// prediction. One DFA works in all contexts. We avoid using context not
// necessarily because it's slower, although it can be, but because of the DFA
// caching problem. The closure routine only considers the rule invocation stack
// created during prediction beginning in the decision rule. For example, if
// prediction occurs without invoking another rule's ATN, there are no context
// stacks in the configurations. When lack of context leads to a conflict, we
// don't know if it's an ambiguity or a weakness in the strong LL(*) parsing
// strategy (versus full LL(*)).</p>
//
// <p>
// When SLL yields a configuration set with conflict, we rewind the input and
// retry the ATN simulation, this time using full outer context without adding
// to the DFA. Configuration context stacks will be the full invocation stacks
// from the start rule. If we get a conflict using full context, then we can
// definitively say we have a true ambiguity for that input sequence. If we
// don't get a conflict, it implies that the decision is sensitive to the outer
// context. (It is not context-sensitive in the sense of context-sensitive
// grammars.)</p>
//
// <p>
// The next time we reach this DFA state with an SLL conflict, through DFA
// simulation, we will again retry the ATN simulation using full context mode.
// This is slow because we can't save the results and have to "interpret" the
// ATN each time we get that input.</p>
//
// <p>
// <strong>CACHING FULL CONTEXT PREDICTIONS</strong></p>
//
// <p>
// We could cache results from full context to predicted alternative easily and
// that saves a lot of time but doesn't work in presence of predicates. The set
// of visible predicates from the ATN start state changes depending on the
// context, because closure can fall off the end of a rule. I tried to cache
// tuples (stack context, semantic context, predicted alt) but it was slower
// than interpreting and much more complicated. Also required a huge amount of
// memory. The goal is not to create the world's fastest parser anyway. I'd like
// to keep this algorithm simple. By launching multiple threads, we can improve
// the speed of parsing across a large number of files.</p>
//
// <p>
// There is no strict ordering between the amount of input used by SLL vs LL,
// which makes it really hard to build a cache for full context. Let's say that
// we have input A B C that leads to an SLL conflict with full context X. That
// implies that using X we might only use A B but we could also use A B C D to
// resolve conflict. Input A B C D could predict alternative 1 in one position
// in the input and A B C E could predict alternative 2 in another position in
// input. The conflicting SLL configurations could still be non-unique in the
// full context prediction, which would lead us to requiring more input than the
// original A B C.	To make a	prediction cache work, we have to track	the exact
// input	used during the previous prediction. That amounts to a cache that maps
// X to a specific DFA for that context.</p>
//
// <p>
// Something should be done for left-recursive expression predictions. They are
// likely LL(1) + pred eval. Easier to do the whole SLL unless error and retry
// with full LL thing Sam does.</p>
//
// <p>
// <strong>AVOIDING FULL CONTEXT PREDICTION</strong></p>
//
// <p>
// We avoid doing full context retry when the outer context is empty, we did not
// dip into the outer context by falling off the end of the decision state rule,
// or when we force SLL mode.</p>
//
// <p>
// As an example of the not dip into outer context case, consider as super
// constructor calls versus function calls. One grammar might look like
// this:</p>
//
// <pre>
// ctorBody
//   : '{' superCall? stat* '}'
//   ;
// </pre>
//
// <p>
// Or, you might see something like</p>
//
// <pre>
// stat
//   : superCall ';'
//   | expression ';'
//   | ...
//   ;
// </pre>
//
// <p>
// In both cases I believe that no closure operations will dip into the outer
// context. In the first case ctorBody in the worst case will stop at the '}'.
// In the 2nd case it should stop at the ';'. Both cases should stay within the
// entry rule and not dip into the outer context.</p>
//
// <p>
// <strong>PREDICATES</strong></p>
//
// <p>
// Predicates are always evaluated if present in either SLL or LL both. SLL and
// LL simulation deals with predicates differently. SLL collects predicates as
// it performs closure operations like ANTLR v3 did. It delays predicate
// evaluation until it reaches and accept state. This allows us to cache the SLL
// ATN simulation whereas, if we had evaluated predicates on-the-fly during
// closure, the DFA state configuration sets would be different and we couldn't
// build up a suitable DFA.</p>
//
// <p>
// When building a DFA accept state during ATN simulation, we evaluate any
// predicates and return the sole semantically valid alternative. If there is
// more than 1 alternative, we report an ambiguity. If there are 0 alternatives,
// we throw an exception. Alternatives without predicates act like they have
// true predicates. The simple way to think about it is to strip away all
// alternatives with false predicates and choose the minimum alternative that
// remains.</p>
//
// <p>
// When we start in the DFA and reach an accept state that's predicated, we test
// those and return the minimum semantically viable alternative. If no
// alternatives are viable, we throw an exception.</p>
//
// <p>
// During full LL ATN simulation, closure always evaluates predicates and
// on-the-fly. This is crucial to reducing the configuration set size during
// closure. It hits a landmine when parsing with the Java grammar, for example,
// without this on-the-fly evaluation.</p>
//
// <p>
// <strong>SHARING DFA</strong></p>
//
// <p>
// All instances of the same parser share the same decision DFAs through a
// static field. Each instance gets its own ATN simulator but they share the
// same {@link //decisionToDFA} field. They also share a
// {@link PredictionContextCache} object that makes sure that all
// {@link PredictionContext} objects are shared among the DFA states. This makes
// a big size difference.</p>
//
// <p>
// <strong>THREAD SAFETY</strong></p>
//
// <p>
// The {@link ParserATNSimulator} locks on the {@link //decisionToDFA} field when
// it adds a new DFA object to that array. {@link //addDFAEdge}
// locks on the DFA for the current decision when setting the
// {@link DFAState//edges} field. {@link //addDFAState} locks on
// the DFA for the current decision when looking up a DFA state to see if it
// already exists. We must make sure that all requests to add DFA states that
// are equivalent result in the same shared DFA object. This is because lots of
// threads will be trying to update the DFA at once. The
// {@link //addDFAState} method also locks inside the DFA lock
// but this time on the shared context cache when it rebuilds the
// configurations' {@link PredictionContext} objects using cached
// subgraphs/nodes. No other locking occurs, even during DFA simulation. This is
// safe as long as we can guarantee that all threads referencing
// {@code s.edge[t]} get the same physical target {@link DFAState}, or
// {@code null}. Once into the DFA, the DFA simulation does not reference the
// {@link DFA//states} map. It follows the {@link DFAState//edges} field to new
// targets. The DFA simulator will either find {@link DFAState//edges} to be
// {@code null}, to be non-{@code null} and {@code dfa.edges[t]} null, or
// {@code dfa.edges[t]} to be non-null. The
// {@link //addDFAEdge} method could be racing to set the field
// but in either case the DFA simulator works; if {@code null}, and requests ATN
// simulation. It could also race trying to get {@code dfa.edges[t]}, but either
// way it will work because it's not doing a test and set operation.</p>
//
// <p>
// <strong>Starting with SLL then failing to combined SLL/LL (Two-Stage
// Parsing)</strong></p>
//
// <p>
// Sam pointed out that if SLL does not give a syntax error, then there is no
// point in doing full LL, which is slower. We only have to try LL if we get a
// syntax error. For maximum speed, Sam starts the parser set to pure SLL
// mode with the {@link BailErrorStrategy}:</p>
//
// <pre>
// parser.{@link Parser//getInterpreter() getInterpreter()}.{@link //setPredictionMode setPredictionMode}{@code (}{@link PredictionMode//SLL}{@code )};
// parser.{@link Parser//setErrorHandler setErrorHandler}(new {@link BailErrorStrategy}());
// </pre>
//
// <p>
// If it does not get a syntax error, then we're done. If it does get a syntax
// error, we need to retry with the combined SLL/LL strategy.</p>
//
// <p>
// The reason this works is as follows. If there are no SLL conflicts, then the
// grammar is SLL (at least for that input set). If there is an SLL conflict,
// the full LL analysis must yield a set of viable alternatives which is a
// subset of the alternatives reported by SLL. If the LL set is a singleton,
// then the grammar is LL but not SLL. If the LL set is the same size as the SLL
// set, the decision is SLL. If the LL set has size &gt; 1, then that decision
// is truly ambiguous on the current input. If the LL set is smaller, then the
// SLL conflict resolution might choose an alternative that the full LL would
// rule out as a possibility based upon better context information. If that's
// the case, then the SLL parse will definitely get an error because the full LL
// analysis says it's not viable. If SLL conflict resolution chooses an
// alternative within the LL set, them both SLL and LL would choose the same
// alternative because they both choose the minimum of multiple conflicting
// alternatives.</p>
//
// <p>
// Let's say we have a set of SLL conflicting alternatives {@code {1, 2, 3}} and
// a smaller LL set called <em>s</em>. If <em>s</em> is {@code {2, 3}}, then SLL
// parsing will get an error because SLL will pursue alternative 1. If
// <em>s</em> is {@code {1, 2}} or {@code {1, 3}} then both SLL and LL will
// choose the same alternative because alternative one is the minimum of either
// set. If <em>s</em> is {@code {2}} or {@code {3}} then SLL will get a syntax
// error. If <em>s</em> is {@code {1}} then SLL will succeed.</p>
//
// <p>
// Of course, if the input is invalid, then we will get an error for sure in
// both SLL and LL parsing. Erroneous input will therefore require 2 passes over
// the input.</p>
//

var Utils = __webpack_require__(1);
var Set = Utils.Set;
var BitSet = Utils.BitSet;
var DoubleDict = Utils.DoubleDict;
var ATN = __webpack_require__(10).ATN;
var ATNState = __webpack_require__(7).ATNState;
var ATNConfig = __webpack_require__(30).ATNConfig;
var ATNConfigSet = __webpack_require__(15).ATNConfigSet;
var Token = __webpack_require__(2).Token;
var DFAState = __webpack_require__(18).DFAState;
var PredPrediction = __webpack_require__(18).PredPrediction;
var ATNSimulator = __webpack_require__(75).ATNSimulator;
var PredictionMode = __webpack_require__(76).PredictionMode;
var RuleContext = __webpack_require__(20).RuleContext;
var ParserRuleContext = __webpack_require__(48).ParserRuleContext;
var SemanticContext = __webpack_require__(17).SemanticContext;
var StarLoopEntryState = __webpack_require__(7).StarLoopEntryState;
var RuleStopState = __webpack_require__(7).RuleStopState;
var PredictionContext = __webpack_require__(9).PredictionContext;
var Interval = __webpack_require__(4).Interval;
var Transitions = __webpack_require__(11);
var Transition = Transitions.Transition;
var SetTransition = Transitions.SetTransition;
var NotSetTransition = Transitions.NotSetTransition;
var RuleTransition = Transitions.RuleTransition;
var ActionTransition = Transitions.ActionTransition;
var NoViableAltException = __webpack_require__(8).NoViableAltException;

var SingletonPredictionContext = __webpack_require__(9).SingletonPredictionContext;
var predictionContextFromRuleContext = __webpack_require__(9).predictionContextFromRuleContext;

function ParserATNSimulator(parser, atn, decisionToDFA, sharedContextCache) {
	ATNSimulator.call(this, atn, sharedContextCache);
    this.parser = parser;
    this.decisionToDFA = decisionToDFA;
    // SLL, LL, or LL + exact ambig detection?//
    this.predictionMode = PredictionMode.LL;
    // LAME globals to avoid parameters!!!!! I need these down deep in predTransition
    this._input = null;
    this._startIndex = 0;
    this._outerContext = null;
    this._dfa = null;
    // Each prediction operation uses a cache for merge of prediction contexts.
    //  Don't keep around as it wastes huge amounts of memory. DoubleKeyMap
    //  isn't synchronized but we're ok since two threads shouldn't reuse same
    //  parser/atnsim object because it can only handle one input at a time.
    //  This maps graphs a and b to merged result c. (a,b)&rarr;c. We can avoid
    //  the merge if we ever see a and b again.  Note that (b,a)&rarr;c should
    //  also be examined during cache lookup.
    //
    this.mergeCache = null;
    return this;
}

ParserATNSimulator.prototype = Object.create(ATNSimulator.prototype);
ParserATNSimulator.prototype.constructor = ParserATNSimulator;

ParserATNSimulator.prototype.debug = false;
ParserATNSimulator.prototype.debug_closure = false;
ParserATNSimulator.prototype.debug_add = false;
ParserATNSimulator.prototype.debug_list_atn_decisions = false;
ParserATNSimulator.prototype.dfa_debug = false;
ParserATNSimulator.prototype.retry_debug = false;


ParserATNSimulator.prototype.reset = function() {
};

ParserATNSimulator.prototype.adaptivePredict = function(input, decision, outerContext) {
    if (this.debug || this.debug_list_atn_decisions) {
        console.log("adaptivePredict decision " + decision +
                               " exec LA(1)==" + this.getLookaheadName(input) +
                               " line " + input.LT(1).line + ":" +
                               input.LT(1).column);
    }
    this._input = input;
    this._startIndex = input.index;
    this._outerContext = outerContext;

    var dfa = this.decisionToDFA[decision];
    this._dfa = dfa;
    var m = input.mark();
    var index = input.index;

    // Now we are certain to have a specific decision's DFA
    // But, do we still need an initial state?
    try {
        var s0;
        if (dfa.precedenceDfa) {
            // the start state for a precedence DFA depends on the current
            // parser precedence, and is provided by a DFA method.
            s0 = dfa.getPrecedenceStartState(this.parser.getPrecedence());
        } else {
            // the start state for a "regular" DFA is just s0
            s0 = dfa.s0;
        }
        if (s0===null) {
            if (outerContext===null) {
                outerContext = RuleContext.EMPTY;
            }
            if (this.debug || this.debug_list_atn_decisions) {
                console.log("predictATN decision " + dfa.decision +
                                   " exec LA(1)==" + this.getLookaheadName(input) +
                                   ", outerContext=" + outerContext.toString(this.parser.ruleNames));
            }

            var fullCtx = false;
            var s0_closure = this.computeStartState(dfa.atnStartState, RuleContext.EMPTY, fullCtx);

            if( dfa.precedenceDfa) {
                // If this is a precedence DFA, we use applyPrecedenceFilter
                // to convert the computed start state to a precedence start
                // state. We then use DFA.setPrecedenceStartState to set the
                // appropriate start state for the precedence level rather
                // than simply setting DFA.s0.
                //
                dfa.s0.configs = s0_closure; // not used for prediction but useful to know start configs anyway
                s0_closure = this.applyPrecedenceFilter(s0_closure);
                s0 = this.addDFAState(dfa, new DFAState(null, s0_closure));
                dfa.setPrecedenceStartState(this.parser.getPrecedence(), s0);
            } else {
                s0 = this.addDFAState(dfa, new DFAState(null, s0_closure));
                dfa.s0 = s0;
            }
        }
        var alt = this.execATN(dfa, s0, input, index, outerContext);
        if (this.debug) {
            console.log("DFA after predictATN: " + dfa.toString(this.parser.literalNames));
        }
        return alt;
    } finally {
        this._dfa = null;
        this.mergeCache = null; // wack cache after each prediction
        input.seek(index);
        input.release(m);
    }
};
// Performs ATN simulation to compute a predicted alternative based
//  upon the remaining input, but also updates the DFA cache to avoid
//  having to traverse the ATN again for the same input sequence.

// There are some key conditions we're looking for after computing a new
// set of ATN configs (proposed DFA state):
      // if the set is empty, there is no viable alternative for current symbol
      // does the state uniquely predict an alternative?
      // does the state have a conflict that would prevent us from
      //   putting it on the work list?

// We also have some key operations to do:
      // add an edge from previous DFA state to potentially new DFA state, D,
      //   upon current symbol but only if adding to work list, which means in all
      //   cases except no viable alternative (and possibly non-greedy decisions?)
      // collecting predicates and adding semantic context to DFA accept states
      // adding rule context to context-sensitive DFA accept states
      // consuming an input symbol
      // reporting a conflict
      // reporting an ambiguity
      // reporting a context sensitivity
      // reporting insufficient predicates

// cover these cases:
//    dead end
//    single alt
//    single alt + preds
//    conflict
//    conflict + preds
//
ParserATNSimulator.prototype.execATN = function(dfa, s0, input, startIndex, outerContext ) {
    if (this.debug || this.debug_list_atn_decisions) {
        console.log("execATN decision " + dfa.decision +
                " exec LA(1)==" + this.getLookaheadName(input) +
                " line " + input.LT(1).line + ":" + input.LT(1).column);
    }
    var alt;
    var previousD = s0;

    if (this.debug) {
        console.log("s0 = " + s0);
    }
    var t = input.LA(1);
    while(true) { // while more work
        var D = this.getExistingTargetState(previousD, t);
        if(D===null) {
            D = this.computeTargetState(dfa, previousD, t);
        }
        if(D===ATNSimulator.ERROR) {
            // if any configs in previous dipped into outer context, that
            // means that input up to t actually finished entry rule
            // at least for SLL decision. Full LL doesn't dip into outer
            // so don't need special case.
            // We will get an error no matter what so delay until after
            // decision; better error message. Also, no reachable target
            // ATN states in SLL implies LL will also get nowhere.
            // If conflict in states that dip out, choose min since we
            // will get error no matter what.
            var e = this.noViableAlt(input, outerContext, previousD.configs, startIndex);
            input.seek(startIndex);
            alt = this.getSynValidOrSemInvalidAltThatFinishedDecisionEntryRule(previousD.configs, outerContext);
            if(alt!==ATN.INVALID_ALT_NUMBER) {
                return alt;
            } else {
                throw e;
            }
        }
        if(D.requiresFullContext && this.predictionMode !== PredictionMode.SLL) {
            // IF PREDS, MIGHT RESOLVE TO SINGLE ALT => SLL (or syntax error)
            var conflictingAlts = null;
            if (D.predicates!==null) {
                if (this.debug) {
                    console.log("DFA state has preds in DFA sim LL failover");
                }
                var conflictIndex = input.index;
                if(conflictIndex !== startIndex) {
                    input.seek(startIndex);
                }
                conflictingAlts = this.evalSemanticContext(D.predicates, outerContext, true);
                if (conflictingAlts.length===1) {
                    if(this.debug) {
                        console.log("Full LL avoided");
                    }
                    return conflictingAlts.minValue();
                }
                if (conflictIndex !== startIndex) {
                    // restore the index so reporting the fallback to full
                    // context occurs with the index at the correct spot
                    input.seek(conflictIndex);
                }
            }
            if (this.dfa_debug) {
                console.log("ctx sensitive state " + outerContext +" in " + D);
            }
            var fullCtx = true;
            var s0_closure = this.computeStartState(dfa.atnStartState, outerContext, fullCtx);
            this.reportAttemptingFullContext(dfa, conflictingAlts, D.configs, startIndex, input.index);
            alt = this.execATNWithFullContext(dfa, D, s0_closure, input, startIndex, outerContext);
            return alt;
        }
        if (D.isAcceptState) {
            if (D.predicates===null) {
                return D.prediction;
            }
            var stopIndex = input.index;
            input.seek(startIndex);
            var alts = this.evalSemanticContext(D.predicates, outerContext, true);
            if (alts.length===0) {
                throw this.noViableAlt(input, outerContext, D.configs, startIndex);
            } else if (alts.length===1) {
                return alts.minValue();
            } else {
                // report ambiguity after predicate evaluation to make sure the correct set of ambig alts is reported.
                this.reportAmbiguity(dfa, D, startIndex, stopIndex, false, alts, D.configs);
                return alts.minValue();
            }
        }
        previousD = D;

        if (t !== Token.EOF) {
            input.consume();
            t = input.LA(1);
        }
    }
};
//
// Get an existing target state for an edge in the DFA. If the target state
// for the edge has not yet been computed or is otherwise not available,
// this method returns {@code null}.
//
// @param previousD The current DFA state
// @param t The next input symbol
// @return The existing target DFA state for the given input symbol
// {@code t}, or {@code null} if the target state for this edge is not
// already cached
//
ParserATNSimulator.prototype.getExistingTargetState = function(previousD, t) {
    var edges = previousD.edges;
    if (edges===null) {
        return null;
    } else {
        return edges[t + 1] || null;
    }
};
//
// Compute a target state for an edge in the DFA, and attempt to add the
// computed state and corresponding edge to the DFA.
//
// @param dfa The DFA
// @param previousD The current DFA state
// @param t The next input symbol
//
// @return The computed target DFA state for the given input symbol
// {@code t}. If {@code t} does not lead to a valid DFA state, this method
// returns {@link //ERROR}.
//
ParserATNSimulator.prototype.computeTargetState = function(dfa, previousD, t) {
   var reach = this.computeReachSet(previousD.configs, t, false);
    if(reach===null) {
        this.addDFAEdge(dfa, previousD, t, ATNSimulator.ERROR);
        return ATNSimulator.ERROR;
    }
    // create new target state; we'll add to DFA after it's complete
    var D = new DFAState(null, reach);

    var predictedAlt = this.getUniqueAlt(reach);

    if (this.debug) {
        var altSubSets = PredictionMode.getConflictingAltSubsets(reach);
        console.log("SLL altSubSets=" + Utils.arrayToString(altSubSets) +
                    ", previous=" + previousD.configs +
                    ", configs=" + reach +
                    ", predict=" + predictedAlt +
                    ", allSubsetsConflict=" +
                    PredictionMode.allSubsetsConflict(altSubSets) + ", conflictingAlts=" +
                    this.getConflictingAlts(reach));
    }
    if (predictedAlt!==ATN.INVALID_ALT_NUMBER) {
        // NO CONFLICT, UNIQUELY PREDICTED ALT
        D.isAcceptState = true;
        D.configs.uniqueAlt = predictedAlt;
        D.prediction = predictedAlt;
    } else if (PredictionMode.hasSLLConflictTerminatingPrediction(this.predictionMode, reach)) {
        // MORE THAN ONE VIABLE ALTERNATIVE
        D.configs.conflictingAlts = this.getConflictingAlts(reach);
        D.requiresFullContext = true;
        // in SLL-only mode, we will stop at this state and return the minimum alt
        D.isAcceptState = true;
        D.prediction = D.configs.conflictingAlts.minValue();
    }
    if (D.isAcceptState && D.configs.hasSemanticContext) {
        this.predicateDFAState(D, this.atn.getDecisionState(dfa.decision));
        if( D.predicates!==null) {
            D.prediction = ATN.INVALID_ALT_NUMBER;
        }
    }
    // all adds to dfa are done after we've created full D state
    D = this.addDFAEdge(dfa, previousD, t, D);
    return D;
};

ParserATNSimulator.prototype.predicateDFAState = function(dfaState, decisionState) {
    // We need to test all predicates, even in DFA states that
    // uniquely predict alternative.
    var nalts = decisionState.transitions.length;
    // Update DFA so reach becomes accept state with (predicate,alt)
    // pairs if preds found for conflicting alts
    var altsToCollectPredsFrom = this.getConflictingAltsOrUniqueAlt(dfaState.configs);
    var altToPred = this.getPredsForAmbigAlts(altsToCollectPredsFrom, dfaState.configs, nalts);
    if (altToPred!==null) {
        dfaState.predicates = this.getPredicatePredictions(altsToCollectPredsFrom, altToPred);
        dfaState.prediction = ATN.INVALID_ALT_NUMBER; // make sure we use preds
    } else {
        // There are preds in configs but they might go away
        // when OR'd together like {p}? || NONE == NONE. If neither
        // alt has preds, resolve to min alt
        dfaState.prediction = altsToCollectPredsFrom.minValue();
    }
};

// comes back with reach.uniqueAlt set to a valid alt
ParserATNSimulator.prototype.execATNWithFullContext = function(dfa, D, // how far we got before failing over
                                     s0,
                                     input,
                                     startIndex,
                                     outerContext) {
    if (this.debug || this.debug_list_atn_decisions) {
        console.log("execATNWithFullContext "+s0);
    }
    var fullCtx = true;
    var foundExactAmbig = false;
    var reach = null;
    var previous = s0;
    input.seek(startIndex);
    var t = input.LA(1);
    var predictedAlt = -1;
    while (true) { // while more work
        reach = this.computeReachSet(previous, t, fullCtx);
        if (reach===null) {
            // if any configs in previous dipped into outer context, that
            // means that input up to t actually finished entry rule
            // at least for LL decision. Full LL doesn't dip into outer
            // so don't need special case.
            // We will get an error no matter what so delay until after
            // decision; better error message. Also, no reachable target
            // ATN states in SLL implies LL will also get nowhere.
            // If conflict in states that dip out, choose min since we
            // will get error no matter what.
            var e = this.noViableAlt(input, outerContext, previous, startIndex);
            input.seek(startIndex);
            var alt = this.getSynValidOrSemInvalidAltThatFinishedDecisionEntryRule(previous, outerContext);
            if(alt!==ATN.INVALID_ALT_NUMBER) {
                return alt;
            } else {
                throw e;
            }
        }
        var altSubSets = PredictionMode.getConflictingAltSubsets(reach);
        if(this.debug) {
            console.log("LL altSubSets=" + altSubSets + ", predict=" +
                  PredictionMode.getUniqueAlt(altSubSets) + ", resolvesToJustOneViableAlt=" +
                  PredictionMode.resolvesToJustOneViableAlt(altSubSets));
        }
        reach.uniqueAlt = this.getUniqueAlt(reach);
        // unique prediction?
        if(reach.uniqueAlt!==ATN.INVALID_ALT_NUMBER) {
            predictedAlt = reach.uniqueAlt;
            break;
        } else if (this.predictionMode !== PredictionMode.LL_EXACT_AMBIG_DETECTION) {
            predictedAlt = PredictionMode.resolvesToJustOneViableAlt(altSubSets);
            if(predictedAlt !== ATN.INVALID_ALT_NUMBER) {
                break;
            }
        } else {
            // In exact ambiguity mode, we never try to terminate early.
            // Just keeps scarfing until we know what the conflict is
            if (PredictionMode.allSubsetsConflict(altSubSets) && PredictionMode.allSubsetsEqual(altSubSets)) {
                foundExactAmbig = true;
                predictedAlt = PredictionMode.getSingleViableAlt(altSubSets);
                break;
            }
            // else there are multiple non-conflicting subsets or
            // we're not sure what the ambiguity is yet.
            // So, keep going.
        }
        previous = reach;
        if( t !== Token.EOF) {
            input.consume();
            t = input.LA(1);
        }
    }
    // If the configuration set uniquely predicts an alternative,
    // without conflict, then we know that it's a full LL decision
    // not SLL.
    if (reach.uniqueAlt !== ATN.INVALID_ALT_NUMBER ) {
        this.reportContextSensitivity(dfa, predictedAlt, reach, startIndex, input.index);
        return predictedAlt;
    }
    // We do not check predicates here because we have checked them
    // on-the-fly when doing full context prediction.

    //
    // In non-exact ambiguity detection mode, we might	actually be able to
    // detect an exact ambiguity, but I'm not going to spend the cycles
    // needed to check. We only emit ambiguity warnings in exact ambiguity
    // mode.
    //
    // For example, we might know that we have conflicting configurations.
    // But, that does not mean that there is no way forward without a
    // conflict. It's possible to have nonconflicting alt subsets as in:

    // altSubSets=[{1, 2}, {1, 2}, {1}, {1, 2}]

    // from
    //
    //    [(17,1,[5 $]), (13,1,[5 10 $]), (21,1,[5 10 $]), (11,1,[$]),
    //     (13,2,[5 10 $]), (21,2,[5 10 $]), (11,2,[$])]
    //
    // In this case, (17,1,[5 $]) indicates there is some next sequence that
    // would resolve this without conflict to alternative 1. Any other viable
    // next sequence, however, is associated with a conflict.  We stop
    // looking for input because no amount of further lookahead will alter
    // the fact that we should predict alternative 1.  We just can't say for
    // sure that there is an ambiguity without looking further.

    this.reportAmbiguity(dfa, D, startIndex, input.index, foundExactAmbig, null, reach);

    return predictedAlt;
};

ParserATNSimulator.prototype.computeReachSet = function(closure, t, fullCtx) {
    if (this.debug) {
        console.log("in computeReachSet, starting closure: " + closure);
    }
    if( this.mergeCache===null) {
        this.mergeCache = new DoubleDict();
    }
    var intermediate = new ATNConfigSet(fullCtx);

    // Configurations already in a rule stop state indicate reaching the end
    // of the decision rule (local context) or end of the start rule (full
    // context). Once reached, these configurations are never updated by a
    // closure operation, so they are handled separately for the performance
    // advantage of having a smaller intermediate set when calling closure.
    //
    // For full-context reach operations, separate handling is required to
    // ensure that the alternative matching the longest overall sequence is
    // chosen when multiple such configurations can match the input.

    var skippedStopStates = null;

    // First figure out where we can reach on input t
    for (var i=0; i<closure.items.length;i++) {
        var c = closure.items[i];
        if(this.debug_add) {
            console.log("testing " + this.getTokenName(t) + " at " + c);
        }
        if (c.state instanceof RuleStopState) {
            if (fullCtx || t === Token.EOF) {
                if (skippedStopStates===null) {
                    skippedStopStates = [];
                }
                skippedStopStates.push(c);
                if(this.debug_add) {
                    console.log("added " + c + " to skippedStopStates");
                }
            }
            continue;
        }
        for(var j=0;j<c.state.transitions.length;j++) {
            var trans = c.state.transitions[j];
            var target = this.getReachableTarget(trans, t);
            if (target!==null) {
                var cfg = new ATNConfig({state:target}, c);
                intermediate.add(cfg, this.mergeCache);
                if(this.debug_add) {
                    console.log("added " + cfg + " to intermediate");
                }
            }
        }
    }
    // Now figure out where the reach operation can take us...
    var reach = null;

    // This block optimizes the reach operation for intermediate sets which
    // trivially indicate a termination state for the overall
    // adaptivePredict operation.
    //
    // The conditions assume that intermediate
    // contains all configurations relevant to the reach set, but this
    // condition is not true when one or more configurations have been
    // withheld in skippedStopStates, or when the current symbol is EOF.
    //
    if (skippedStopStates===null && t!==Token.EOF) {
        if (intermediate.items.length===1) {
            // Don't pursue the closure if there is just one state.
            // It can only have one alternative; just add to result
            // Also don't pursue the closure if there is unique alternative
            // among the configurations.
            reach = intermediate;
        } else if (this.getUniqueAlt(intermediate)!==ATN.INVALID_ALT_NUMBER) {
            // Also don't pursue the closure if there is unique alternative
            // among the configurations.
            reach = intermediate;
        }
    }
    // If the reach set could not be trivially determined, perform a closure
    // operation on the intermediate set to compute its initial value.
    //
    if (reach===null) {
        reach = new ATNConfigSet(fullCtx);
        var closureBusy = new Set();
        var treatEofAsEpsilon = t === Token.EOF;
        for (var k=0; k<intermediate.items.length;k++) {
            this.closure(intermediate.items[k], reach, closureBusy, false, fullCtx, treatEofAsEpsilon);
        }
    }
    if (t === Token.EOF) {
        // After consuming EOF no additional input is possible, so we are
        // only interested in configurations which reached the end of the
        // decision rule (local context) or end of the start rule (full
        // context). Update reach to contain only these configurations. This
        // handles both explicit EOF transitions in the grammar and implicit
        // EOF transitions following the end of the decision or start rule.
        //
        // When reach==intermediate, no closure operation was performed. In
        // this case, removeAllConfigsNotInRuleStopState needs to check for
        // reachable rule stop states as well as configurations already in
        // a rule stop state.
        //
        // This is handled before the configurations in skippedStopStates,
        // because any configurations potentially added from that list are
        // already guaranteed to meet this condition whether or not it's
        // required.
        //
        reach = this.removeAllConfigsNotInRuleStopState(reach, reach === intermediate);
    }
    // If skippedStopStates!==null, then it contains at least one
    // configuration. For full-context reach operations, these
    // configurations reached the end of the start rule, in which case we
    // only add them back to reach if no configuration during the current
    // closure operation reached such a state. This ensures adaptivePredict
    // chooses an alternative matching the longest overall sequence when
    // multiple alternatives are viable.
    //
    if (skippedStopStates!==null && ( (! fullCtx) || (! PredictionMode.hasConfigInRuleStopState(reach)))) {
        for (var l=0; l<skippedStopStates.length;l++) {
            reach.add(skippedStopStates[l], this.mergeCache);
        }
    }
    if (reach.items.length===0) {
        return null;
    } else {
        return reach;
    }
};
//
// Return a configuration set containing only the configurations from
// {@code configs} which are in a {@link RuleStopState}. If all
// configurations in {@code configs} are already in a rule stop state, this
// method simply returns {@code configs}.
//
// <p>When {@code lookToEndOfRule} is true, this method uses
// {@link ATN//nextTokens} for each configuration in {@code configs} which is
// not already in a rule stop state to see if a rule stop state is reachable
// from the configuration via epsilon-only transitions.</p>
//
// @param configs the configuration set to update
// @param lookToEndOfRule when true, this method checks for rule stop states
// reachable by epsilon-only transitions from each configuration in
// {@code configs}.
//
// @return {@code configs} if all configurations in {@code configs} are in a
// rule stop state, otherwise return a new configuration set containing only
// the configurations from {@code configs} which are in a rule stop state
//
ParserATNSimulator.prototype.removeAllConfigsNotInRuleStopState = function(configs, lookToEndOfRule) {
    if (PredictionMode.allConfigsInRuleStopStates(configs)) {
        return configs;
    }
    var result = new ATNConfigSet(configs.fullCtx);
    for(var i=0; i<configs.items.length;i++) {
        var config = configs.items[i];
        if (config.state instanceof RuleStopState) {
            result.add(config, this.mergeCache);
            continue;
        }
        if (lookToEndOfRule && config.state.epsilonOnlyTransitions) {
            var nextTokens = this.atn.nextTokens(config.state);
            if (nextTokens.contains(Token.EPSILON)) {
                var endOfRuleState = this.atn.ruleToStopState[config.state.ruleIndex];
                result.add(new ATNConfig({state:endOfRuleState}, config), this.mergeCache);
            }
        }
    }
    return result;
};

ParserATNSimulator.prototype.computeStartState = function(p, ctx, fullCtx) {
    // always at least the implicit call to start rule
    var initialContext = predictionContextFromRuleContext(this.atn, ctx);
    var configs = new ATNConfigSet(fullCtx);
    for(var i=0;i<p.transitions.length;i++) {
        var target = p.transitions[i].target;
        var c = new ATNConfig({ state:target, alt:i+1, context:initialContext }, null);
        var closureBusy = new Set();
        this.closure(c, configs, closureBusy, true, fullCtx, false);
    }
    return configs;
};

//
// This method transforms the start state computed by
// {@link //computeStartState} to the special start state used by a
// precedence DFA for a particular precedence value. The transformation
// process applies the following changes to the start state's configuration
// set.
//
// <ol>
// <li>Evaluate the precedence predicates for each configuration using
// {@link SemanticContext//evalPrecedence}.</li>
// <li>Remove all configurations which predict an alternative greater than
// 1, for which another configuration that predicts alternative 1 is in the
// same ATN state with the same prediction context. This transformation is
// valid for the following reasons:
// <ul>
// <li>The closure block cannot contain any epsilon transitions which bypass
// the body of the closure, so all states reachable via alternative 1 are
// part of the precedence alternatives of the transformed left-recursive
// rule.</li>
// <li>The "primary" portion of a left recursive rule cannot contain an
// epsilon transition, so the only way an alternative other than 1 can exist
// in a state that is also reachable via alternative 1 is by nesting calls
// to the left-recursive rule, with the outer calls not being at the
// preferred precedence level.</li>
// </ul>
// </li>
// </ol>
//
// <p>
// The prediction context must be considered by this filter to address
// situations like the following.
// </p>
// <code>
// <pre>
// grammar TA;
// prog: statement* EOF;
// statement: letterA | statement letterA 'b' ;
// letterA: 'a';
// </pre>
// </code>
// <p>
// If the above grammar, the ATN state immediately before the token
// reference {@code 'a'} in {@code letterA} is reachable from the left edge
// of both the primary and closure blocks of the left-recursive rule
// {@code statement}. The prediction context associated with each of these
// configurations distinguishes between them, and prevents the alternative
// which stepped out to {@code prog} (and then back in to {@code statement}
// from being eliminated by the filter.
// </p>
//
// @param configs The configuration set computed by
// {@link //computeStartState} as the start state for the DFA.
// @return The transformed configuration set representing the start state
// for a precedence DFA at a particular precedence level (determined by
// calling {@link Parser//getPrecedence}).
//
ParserATNSimulator.prototype.applyPrecedenceFilter = function(configs) {
	var config;
	var statesFromAlt1 = [];
    var configSet = new ATNConfigSet(configs.fullCtx);
    for(var i=0; i<configs.items.length; i++) {
        config = configs.items[i];
        // handle alt 1 first
        if (config.alt !== 1) {
            continue;
        }
        var updatedContext = config.semanticContext.evalPrecedence(this.parser, this._outerContext);
        if (updatedContext===null) {
            // the configuration was eliminated
            continue;
        }
        statesFromAlt1[config.state.stateNumber] = config.context;
        if (updatedContext !== config.semanticContext) {
            configSet.add(new ATNConfig({semanticContext:updatedContext}, config), this.mergeCache);
        } else {
            configSet.add(config, this.mergeCache);
        }
    }
    for(i=0; i<configs.items.length; i++) {
        config = configs.items[i];
        if (config.alt === 1) {
            // already handled
            continue;
        }
        // In the future, this elimination step could be updated to also
        // filter the prediction context for alternatives predicting alt>1
        // (basically a graph subtraction algorithm).
		if (!config.precedenceFilterSuppressed) {
            var context = statesFromAlt1[config.state.stateNumber] || null;
            if (context!==null && context.equals(config.context)) {
                // eliminated
                continue;
            }
		}
        configSet.add(config, this.mergeCache);
    }
    return configSet;
};

ParserATNSimulator.prototype.getReachableTarget = function(trans, ttype) {
    if (trans.matches(ttype, 0, this.atn.maxTokenType)) {
        return trans.target;
    } else {
        return null;
    }
};

ParserATNSimulator.prototype.getPredsForAmbigAlts = function(ambigAlts, configs, nalts) {
    // REACH=[1|1|[]|0:0, 1|2|[]|0:1]
    // altToPred starts as an array of all null contexts. The entry at index i
    // corresponds to alternative i. altToPred[i] may have one of three values:
    //   1. null: no ATNConfig c is found such that c.alt==i
    //   2. SemanticContext.NONE: At least one ATNConfig c exists such that
    //      c.alt==i and c.semanticContext==SemanticContext.NONE. In other words,
    //      alt i has at least one unpredicated config.
    //   3. Non-NONE Semantic Context: There exists at least one, and for all
    //      ATNConfig c such that c.alt==i, c.semanticContext!=SemanticContext.NONE.
    //
    // From this, it is clear that NONE||anything==NONE.
    //
    var altToPred = [];
    for(var i=0;i<configs.items.length;i++) {
        var c = configs.items[i];
        if(ambigAlts.contains( c.alt )) {
            altToPred[c.alt] = SemanticContext.orContext(altToPred[c.alt] || null, c.semanticContext);
        }
    }
    var nPredAlts = 0;
    for (i =1;i< nalts+1;i++) {
        var pred = altToPred[i] || null;
        if (pred===null) {
            altToPred[i] = SemanticContext.NONE;
        } else if (pred !== SemanticContext.NONE) {
            nPredAlts += 1;
        }
    }
    // nonambig alts are null in altToPred
    if (nPredAlts===0) {
        altToPred = null;
    }
    if (this.debug) {
        console.log("getPredsForAmbigAlts result " + Utils.arrayToString(altToPred));
    }
    return altToPred;
};

ParserATNSimulator.prototype.getPredicatePredictions = function(ambigAlts, altToPred) {
    var pairs = [];
    var containsPredicate = false;
    for (var i=1; i<altToPred.length;i++) {
        var pred = altToPred[i];
        // unpredicated is indicated by SemanticContext.NONE
        if( ambigAlts!==null && ambigAlts.contains( i )) {
            pairs.push(new PredPrediction(pred, i));
        }
        if (pred !== SemanticContext.NONE) {
            containsPredicate = true;
        }
    }
    if (! containsPredicate) {
        return null;
    }
    return pairs;
};

//
// This method is used to improve the localization of error messages by
// choosing an alternative rather than throwing a
// {@link NoViableAltException} in particular prediction scenarios where the
// {@link //ERROR} state was reached during ATN simulation.
//
// <p>
// The default implementation of this method uses the following
// algorithm to identify an ATN configuration which successfully parsed the
// decision entry rule. Choosing such an alternative ensures that the
// {@link ParserRuleContext} returned by the calling rule will be complete
// and valid, and the syntax error will be reported later at a more
// localized location.</p>
//
// <ul>
// <li>If a syntactically valid path or paths reach the end of the decision rule and
// they are semantically valid if predicated, return the min associated alt.</li>
// <li>Else, if a semantically invalid but syntactically valid path exist
// or paths exist, return the minimum associated alt.
// </li>
// <li>Otherwise, return {@link ATN//INVALID_ALT_NUMBER}.</li>
// </ul>
//
// <p>
// In some scenarios, the algorithm described above could predict an
// alternative which will result in a {@link FailedPredicateException} in
// the parser. Specifically, this could occur if the <em>only</em> configuration
// capable of successfully parsing to the end of the decision rule is
// blocked by a semantic predicate. By choosing this alternative within
// {@link //adaptivePredict} instead of throwing a
// {@link NoViableAltException}, the resulting
// {@link FailedPredicateException} in the parser will identify the specific
// predicate which is preventing the parser from successfully parsing the
// decision rule, which helps developers identify and correct logic errors
// in semantic predicates.
// </p>
//
// @param configs The ATN configurations which were valid immediately before
// the {@link //ERROR} state was reached
// @param outerContext The is the \gamma_0 initial parser context from the paper
// or the parser stack at the instant before prediction commences.
//
// @return The value to return from {@link //adaptivePredict}, or
// {@link ATN//INVALID_ALT_NUMBER} if a suitable alternative was not
// identified and {@link //adaptivePredict} should report an error instead.
//
ParserATNSimulator.prototype.getSynValidOrSemInvalidAltThatFinishedDecisionEntryRule = function(configs, outerContext) {
    var cfgs = this.splitAccordingToSemanticValidity(configs, outerContext);
    var semValidConfigs = cfgs[0];
    var semInvalidConfigs = cfgs[1];
    var alt = this.getAltThatFinishedDecisionEntryRule(semValidConfigs);
    if (alt!==ATN.INVALID_ALT_NUMBER) { // semantically/syntactically viable path exists
        return alt;
    }
    // Is there a syntactically valid path with a failed pred?
    if (semInvalidConfigs.items.length>0) {
        alt = this.getAltThatFinishedDecisionEntryRule(semInvalidConfigs);
        if (alt!==ATN.INVALID_ALT_NUMBER) { // syntactically viable path exists
            return alt;
        }
    }
    return ATN.INVALID_ALT_NUMBER;
};

ParserATNSimulator.prototype.getAltThatFinishedDecisionEntryRule = function(configs) {
    var alts = [];
    for(var i=0;i<configs.items.length; i++) {
        var c = configs.items[i];
        if (c.reachesIntoOuterContext>0 || ((c.state instanceof RuleStopState) && c.context.hasEmptyPath())) {
            if(alts.indexOf(c.alt)<0) {
                alts.push(c.alt);
            }
        }
    }
    if (alts.length===0) {
        return ATN.INVALID_ALT_NUMBER;
    } else {
        return Math.min.apply(null, alts);
    }
};
// Walk the list of configurations and split them according to
//  those that have preds evaluating to true/false.  If no pred, assume
//  true pred and include in succeeded set.  Returns Pair of sets.
//
//  Create a new set so as not to alter the incoming parameter.
//
//  Assumption: the input stream has been restored to the starting point
//  prediction, which is where predicates need to evaluate.
//
ParserATNSimulator.prototype.splitAccordingToSemanticValidity = function( configs, outerContext) {
    var succeeded = new ATNConfigSet(configs.fullCtx);
    var failed = new ATNConfigSet(configs.fullCtx);
    for(var i=0;i<configs.items.length; i++) {
        var c = configs.items[i];
        if (c.semanticContext !== SemanticContext.NONE) {
            var predicateEvaluationResult = c.semanticContext.evaluate(this.parser, outerContext);
            if (predicateEvaluationResult) {
                succeeded.add(c);
            } else {
                failed.add(c);
            }
        } else {
            succeeded.add(c);
        }
    }
    return [succeeded, failed];
};

// Look through a list of predicate/alt pairs, returning alts for the
//  pairs that win. A {@code NONE} predicate indicates an alt containing an
//  unpredicated config which behaves as "always true." If !complete
//  then we stop at the first predicate that evaluates to true. This
//  includes pairs with null predicates.
//
ParserATNSimulator.prototype.evalSemanticContext = function(predPredictions, outerContext, complete) {
    var predictions = new BitSet();
    for(var i=0;i<predPredictions.length;i++) {
    	var pair = predPredictions[i];
        if (pair.pred === SemanticContext.NONE) {
            predictions.add(pair.alt);
            if (! complete) {
                break;
            }
            continue;
        }
        var predicateEvaluationResult = pair.pred.evaluate(this.parser, outerContext);
        if (this.debug || this.dfa_debug) {
            console.log("eval pred " + pair + "=" + predicateEvaluationResult);
        }
        if (predicateEvaluationResult) {
            if (this.debug || this.dfa_debug) {
                console.log("PREDICT " + pair.alt);
            }
            predictions.add(pair.alt);
            if (! complete) {
                break;
            }
        }
    }
    return predictions;
};

// TODO: If we are doing predicates, there is no point in pursuing
//     closure operations if we reach a DFA state that uniquely predicts
//     alternative. We will not be caching that DFA state and it is a
//     waste to pursue the closure. Might have to advance when we do
//     ambig detection thought :(
//

ParserATNSimulator.prototype.closure = function(config, configs, closureBusy, collectPredicates, fullCtx, treatEofAsEpsilon) {
    var initialDepth = 0;
    this.closureCheckingStopState(config, configs, closureBusy, collectPredicates,
                             fullCtx, initialDepth, treatEofAsEpsilon);
};


ParserATNSimulator.prototype.closureCheckingStopState = function(config, configs, closureBusy, collectPredicates, fullCtx, depth, treatEofAsEpsilon) {
    if (this.debug || this.debug_closure) {
        console.log("closure(" + config.toString(this.parser,true) + ")");
        // console.log("configs(" + configs.toString() + ")");
        if(config.reachesIntoOuterContext>50) {
            throw "problem";
        }
    }
    if (config.state instanceof RuleStopState) {
        // We hit rule end. If we have context info, use it
        // run thru all possible stack tops in ctx
        if (! config.context.isEmpty()) {
            for ( var i =0; i<config.context.length; i++) {
                if (config.context.getReturnState(i) === PredictionContext.EMPTY_RETURN_STATE) {
                    if (fullCtx) {
                        configs.add(new ATNConfig({state:config.state, context:PredictionContext.EMPTY}, config), this.mergeCache);
                        continue;
                    } else {
                        // we have no context info, just chase follow links (if greedy)
                        if (this.debug) {
                            console.log("FALLING off rule " + this.getRuleName(config.state.ruleIndex));
                        }
                        this.closure_(config, configs, closureBusy, collectPredicates,
                                 fullCtx, depth, treatEofAsEpsilon);
                    }
                    continue;
                }
                var returnState = this.atn.states[config.context.getReturnState(i)];
                var newContext = config.context.getParent(i); // "pop" return state
                var parms = {state:returnState, alt:config.alt, context:newContext, semanticContext:config.semanticContext};
                var c = new ATNConfig(parms, null);
                // While we have context to pop back from, we may have
                // gotten that context AFTER having falling off a rule.
                // Make sure we track that we are now out of context.
                c.reachesIntoOuterContext = config.reachesIntoOuterContext;
                this.closureCheckingStopState(c, configs, closureBusy, collectPredicates, fullCtx, depth - 1, treatEofAsEpsilon);
            }
            return;
        } else if( fullCtx) {
            // reached end of start rule
            configs.add(config, this.mergeCache);
            return;
        } else {
            // else if we have no context info, just chase follow links (if greedy)
            if (this.debug) {
                console.log("FALLING off rule " + this.getRuleName(config.state.ruleIndex));
            }
        }
    }
    this.closure_(config, configs, closureBusy, collectPredicates, fullCtx, depth, treatEofAsEpsilon);
};


// Do the actual work of walking epsilon edges//
ParserATNSimulator.prototype.closure_ = function(config, configs, closureBusy, collectPredicates, fullCtx, depth, treatEofAsEpsilon) {
    var p = config.state;
    // optimization
    if (! p.epsilonOnlyTransitions) {
        configs.add(config, this.mergeCache);
        // make sure to not return here, because EOF transitions can act as
        // both epsilon transitions and non-epsilon transitions.
    }
    for(var i = 0;i<p.transitions.length; i++) {
        if(i==0 && this.canDropLoopEntryEdgeInLeftRecursiveRule(config))
            continue;

        var t = p.transitions[i];
        var continueCollecting = collectPredicates && !(t instanceof ActionTransition);
        var c = this.getEpsilonTarget(config, t, continueCollecting, depth === 0, fullCtx, treatEofAsEpsilon);
        if (c!==null) {
			if (!t.isEpsilon && closureBusy.add(c)!==c){
				// avoid infinite recursion for EOF* and EOF+
				continue;
			}
            var newDepth = depth;
            if ( config.state instanceof RuleStopState) {
                // target fell off end of rule; mark resulting c as having dipped into outer context
                // We can't get here if incoming config was rule stop and we had context
                // track how far we dip into outer context.  Might
                // come in handy and we avoid evaluating context dependent
                // preds if this is > 0.

                if (closureBusy.add(c)!==c) {
                    // avoid infinite recursion for right-recursive rules
                    continue;
                }

				if (this._dfa !== null && this._dfa.precedenceDfa) {
					if (t.outermostPrecedenceReturn === this._dfa.atnStartState.ruleIndex) {
						c.precedenceFilterSuppressed = true;
					}
				}

                c.reachesIntoOuterContext += 1;
                configs.dipsIntoOuterContext = true; // TODO: can remove? only care when we add to set per middle of this method
                newDepth -= 1;
                if (this.debug) {
                    console.log("dips into outer ctx: " + c);
                }
            } else if (t instanceof RuleTransition) {
                // latch when newDepth goes negative - once we step out of the entry context we can't return
                if (newDepth >= 0) {
                    newDepth += 1;
                }
            }
            this.closureCheckingStopState(c, configs, closureBusy, continueCollecting, fullCtx, newDepth, treatEofAsEpsilon);
        }
    }
};


ParserATNSimulator.prototype.canDropLoopEntryEdgeInLeftRecursiveRule = function(config) {
    // return False
    var p = config.state;
    // First check to see if we are in StarLoopEntryState generated during
    // left-recursion elimination. For efficiency, also check if
    // the context has an empty stack case. If so, it would mean
    // global FOLLOW so we can't perform optimization
    // Are we the special loop entry/exit state? or SLL wildcard
    if(p.stateType != ATNState.STAR_LOOP_ENTRY)
        return false;
    if(p.stateType != ATNState.STAR_LOOP_ENTRY || !p.isPrecedenceDecision ||
           config.context.isEmpty() || config.context.hasEmptyPath())
        return false;

    // Require all return states to return back to the same rule that p is in.
    var numCtxs = config.context.length;
    for(var i=0; i<numCtxs; i++) { // for each stack context
        var returnState = this.atn.states[config.context.getReturnState(i)];
        if (returnState.ruleIndex != p.ruleIndex)
            return false;
    }

    var decisionStartState = p.transitions[0].target;
    var blockEndStateNum = decisionStartState.endState.stateNumber;
    var blockEndState = this.atn.states[blockEndStateNum];

    // Verify that the top of each stack context leads to loop entry/exit
    // state through epsilon edges and w/o leaving rule.
    for(var i=0; i<numCtxs; i++) { // for each stack context
        var returnStateNumber = config.context.getReturnState(i);
        var returnState = this.atn.states[returnStateNumber];
        // all states must have single outgoing epsilon edge
        if (returnState.transitions.length != 1 || !returnState.transitions[0].isEpsilon)
            return false;

        // Look for prefix op case like 'not expr', (' type ')' expr
        var returnStateTarget = returnState.transitions[0].target;
        if ( returnState.stateType == ATNState.BLOCK_END && returnStateTarget == p )
            continue;

        // Look for 'expr op expr' or case where expr's return state is block end
        // of (...)* internal block; the block end points to loop back
        // which points to p but we don't need to check that
        if ( returnState == blockEndState )
            continue;

        // Look for ternary expr ? expr : expr. The return state points at block end,
        // which points at loop entry state
        if ( returnStateTarget == blockEndState )
            continue;

        // Look for complex prefix 'between expr and expr' case where 2nd expr's
        // return state points at block end state of (...)* internal block
        if (returnStateTarget.stateType == ATNState.BLOCK_END && returnStateTarget.transitions.length == 1
                && returnStateTarget.transitions[0].isEpsilon && returnStateTarget.transitions[0].target == p)
            continue;

        // anything else ain't conforming
        return false;
    }
    return true;
};


ParserATNSimulator.prototype.getRuleName = function( index) {
    if (this.parser!==null && index>=0) {
        return this.parser.ruleNames[index];
    } else {
        return "<rule " + index + ">";
    }
};

ParserATNSimulator.prototype.getEpsilonTarget = function(config, t, collectPredicates, inContext, fullCtx, treatEofAsEpsilon) {
    switch(t.serializationType) {
    case Transition.RULE:
        return this.ruleTransition(config, t);
    case Transition.PRECEDENCE:
        return this.precedenceTransition(config, t, collectPredicates, inContext, fullCtx);
    case Transition.PREDICATE:
        return this.predTransition(config, t, collectPredicates, inContext, fullCtx);
    case Transition.ACTION:
        return this.actionTransition(config, t);
    case Transition.EPSILON:
        return new ATNConfig({state:t.target}, config);
    case Transition.ATOM:
    case Transition.RANGE:
    case Transition.SET:
        // EOF transitions act like epsilon transitions after the first EOF
        // transition is traversed
        if (treatEofAsEpsilon) {
            if (t.matches(Token.EOF, 0, 1)) {
                return new ATNConfig({state: t.target}, config);
            }
        }
        return null;
    default:
    	return null;
    }
};

ParserATNSimulator.prototype.actionTransition = function(config, t) {
    if (this.debug) {
        var index = t.actionIndex==-1 ? 65535 : t.actionIndex;
        console.log("ACTION edge " + t.ruleIndex + ":" + index);
    }
    return new ATNConfig({state:t.target}, config);
};

ParserATNSimulator.prototype.precedenceTransition = function(config, pt,  collectPredicates, inContext, fullCtx) {
    if (this.debug) {
        console.log("PRED (collectPredicates=" + collectPredicates + ") " +
                pt.precedence + ">=_p, ctx dependent=true");
        if (this.parser!==null) {
        	console.log("context surrounding pred is " + Utils.arrayToString(this.parser.getRuleInvocationStack()));
        }
    }
    var c = null;
    if (collectPredicates && inContext) {
        if (fullCtx) {
            // In full context mode, we can evaluate predicates on-the-fly
            // during closure, which dramatically reduces the size of
            // the config sets. It also obviates the need to test predicates
            // later during conflict resolution.
            var currentPosition = this._input.index;
            this._input.seek(this._startIndex);
            var predSucceeds = pt.getPredicate().evaluate(this.parser, this._outerContext);
            this._input.seek(currentPosition);
            if (predSucceeds) {
                c = new ATNConfig({state:pt.target}, config); // no pred context
            }
        } else {
            var newSemCtx = SemanticContext.andContext(config.semanticContext, pt.getPredicate());
            c = new ATNConfig({state:pt.target, semanticContext:newSemCtx}, config);
        }
    } else {
        c = new ATNConfig({state:pt.target}, config);
    }
    if (this.debug) {
        console.log("config from pred transition=" + c);
    }
    return c;
};

ParserATNSimulator.prototype.predTransition = function(config, pt, collectPredicates, inContext, fullCtx) {
    if (this.debug) {
        console.log("PRED (collectPredicates=" + collectPredicates + ") " + pt.ruleIndex +
                ":" + pt.predIndex + ", ctx dependent=" + pt.isCtxDependent);
        if (this.parser!==null) {
            console.log("context surrounding pred is " + Utils.arrayToString(this.parser.getRuleInvocationStack()));
        }
    }
    var c = null;
    if (collectPredicates && ((pt.isCtxDependent && inContext) || ! pt.isCtxDependent)) {
        if (fullCtx) {
            // In full context mode, we can evaluate predicates on-the-fly
            // during closure, which dramatically reduces the size of
            // the config sets. It also obviates the need to test predicates
            // later during conflict resolution.
            var currentPosition = this._input.index;
            this._input.seek(this._startIndex);
            var predSucceeds = pt.getPredicate().evaluate(this.parser, this._outerContext);
            this._input.seek(currentPosition);
            if (predSucceeds) {
                c = new ATNConfig({state:pt.target}, config); // no pred context
            }
        } else {
            var newSemCtx = SemanticContext.andContext(config.semanticContext, pt.getPredicate());
            c = new ATNConfig({state:pt.target, semanticContext:newSemCtx}, config);
        }
    } else {
        c = new ATNConfig({state:pt.target}, config);
    }
    if (this.debug) {
        console.log("config from pred transition=" + c);
    }
    return c;
};

ParserATNSimulator.prototype.ruleTransition = function(config, t) {
    if (this.debug) {
        console.log("CALL rule " + this.getRuleName(t.target.ruleIndex) + ", ctx=" + config.context);
    }
    var returnState = t.followState;
    var newContext = SingletonPredictionContext.create(config.context, returnState.stateNumber);
    return new ATNConfig({state:t.target, context:newContext}, config );
};

ParserATNSimulator.prototype.getConflictingAlts = function(configs) {
    var altsets = PredictionMode.getConflictingAltSubsets(configs);
    return PredictionMode.getAlts(altsets);
};

 // Sam pointed out a problem with the previous definition, v3, of
 // ambiguous states. If we have another state associated with conflicting
 // alternatives, we should keep going. For example, the following grammar
 //
 // s : (ID | ID ID?) ';' ;
 //
 // When the ATN simulation reaches the state before ';', it has a DFA
 // state that looks like: [12|1|[], 6|2|[], 12|2|[]]. Naturally
 // 12|1|[] and 12|2|[] conflict, but we cannot stop processing this node
 // because alternative to has another way to continue, via [6|2|[]].
 // The key is that we have a single state that has config's only associated
 // with a single alternative, 2, and crucially the state transitions
 // among the configurations are all non-epsilon transitions. That means
 // we don't consider any conflicts that include alternative 2. So, we
 // ignore the conflict between alts 1 and 2. We ignore a set of
 // conflicting alts when there is an intersection with an alternative
 // associated with a single alt state in the state&rarr;config-list map.
 //
 // It's also the case that we might have two conflicting configurations but
 // also a 3rd nonconflicting configuration for a different alternative:
 // [1|1|[], 1|2|[], 8|3|[]]. This can come about from grammar:
 //
 // a : A | A | A B ;
 //
 // After matching input A, we reach the stop state for rule A, state 1.
 // State 8 is the state right before B. Clearly alternatives 1 and 2
 // conflict and no amount of further lookahead will separate the two.
 // However, alternative 3 will be able to continue and so we do not
 // stop working on this state. In the previous example, we're concerned
 // with states associated with the conflicting alternatives. Here alt
 // 3 is not associated with the conflicting configs, but since we can continue
 // looking for input reasonably, I don't declare the state done. We
 // ignore a set of conflicting alts when we have an alternative
 // that we still need to pursue.
//

ParserATNSimulator.prototype.getConflictingAltsOrUniqueAlt = function(configs) {
    var conflictingAlts = null;
    if (configs.uniqueAlt!== ATN.INVALID_ALT_NUMBER) {
        conflictingAlts = new BitSet();
        conflictingAlts.add(configs.uniqueAlt);
    } else {
        conflictingAlts = configs.conflictingAlts;
    }
    return conflictingAlts;
};

ParserATNSimulator.prototype.getTokenName = function( t) {
    if (t===Token.EOF) {
        return "EOF";
    }
    if( this.parser!==null && this.parser.literalNames!==null) {
        if (t >= this.parser.literalNames.length && t >= this.parser.symbolicNames.length) {
            console.log("" + t + " ttype out of range: " + this.parser.literalNames);
            console.log("" + this.parser.getInputStream().getTokens());
        } else {
            var name = this.parser.literalNames[t] || this.parser.symbolicNames[t];
            return name + "<" + t + ">";
        }
    }
    return "" + t;
};

ParserATNSimulator.prototype.getLookaheadName = function(input) {
    return this.getTokenName(input.LA(1));
};

// Used for debugging in adaptivePredict around execATN but I cut
//  it out for clarity now that alg. works well. We can leave this
//  "dead" code for a bit.
//
ParserATNSimulator.prototype.dumpDeadEndConfigs = function(nvae) {
    console.log("dead end configs: ");
    var decs = nvae.getDeadEndConfigs();
    for(var i=0; i<decs.length; i++) {
    	var c = decs[i];
        var trans = "no edges";
        if (c.state.transitions.length>0) {
            var t = c.state.transitions[0];
            if (t instanceof AtomTransition) {
                trans = "Atom "+ this.getTokenName(t.label);
            } else if (t instanceof SetTransition) {
                var neg = (t instanceof NotSetTransition);
                trans = (neg ? "~" : "") + "Set " + t.set;
            }
        }
        console.error(c.toString(this.parser, true) + ":" + trans);
    }
};

ParserATNSimulator.prototype.noViableAlt = function(input, outerContext, configs, startIndex) {
    return new NoViableAltException(this.parser, input, input.get(startIndex), input.LT(1), configs, outerContext);
};

ParserATNSimulator.prototype.getUniqueAlt = function(configs) {
    var alt = ATN.INVALID_ALT_NUMBER;
    for(var i=0;i<configs.items.length;i++) {
    	var c = configs.items[i];
        if (alt === ATN.INVALID_ALT_NUMBER) {
            alt = c.alt // found first alt
        } else if( c.alt!==alt) {
            return ATN.INVALID_ALT_NUMBER;
        }
    }
    return alt;
};

//
// Add an edge to the DFA, if possible. This method calls
// {@link //addDFAState} to ensure the {@code to} state is present in the
// DFA. If {@code from} is {@code null}, or if {@code t} is outside the
// range of edges that can be represented in the DFA tables, this method
// returns without adding the edge to the DFA.
//
// <p>If {@code to} is {@code null}, this method returns {@code null}.
// Otherwise, this method returns the {@link DFAState} returned by calling
// {@link //addDFAState} for the {@code to} state.</p>
//
// @param dfa The DFA
// @param from The source state for the edge
// @param t The input symbol
// @param to The target state for the edge
//
// @return If {@code to} is {@code null}, this method returns {@code null};
// otherwise this method returns the result of calling {@link //addDFAState}
// on {@code to}
//
ParserATNSimulator.prototype.addDFAEdge = function(dfa, from_, t, to) {
    if( this.debug) {
        console.log("EDGE " + from_ + " -> " + to + " upon " + this.getTokenName(t));
    }
    if (to===null) {
        return null;
    }
    to = this.addDFAState(dfa, to); // used existing if possible not incoming
    if (from_===null || t < -1 || t > this.atn.maxTokenType) {
        return to;
    }
    if (from_.edges===null) {
        from_.edges = [];
    }
    from_.edges[t+1] = to; // connect

    if (this.debug) {
        var literalNames = this.parser===null ? null : this.parser.literalNames;
        var symbolicNames = this.parser===null ? null : this.parser.symbolicNames;
        console.log("DFA=\n" + dfa.toString(literalNames, symbolicNames));
    }
    return to;
};
//
// Add state {@code D} to the DFA if it is not already present, and return
// the actual instance stored in the DFA. If a state equivalent to {@code D}
// is already in the DFA, the existing state is returned. Otherwise this
// method returns {@code D} after adding it to the DFA.
//
// <p>If {@code D} is {@link //ERROR}, this method returns {@link //ERROR} and
// does not change the DFA.</p>
//
// @param dfa The dfa
// @param D The DFA state to add
// @return The state stored in the DFA. This will be either the existing
// state if {@code D} is already in the DFA, or {@code D} itself if the
// state was not already present.
//
ParserATNSimulator.prototype.addDFAState = function(dfa, D) {
    if (D == ATNSimulator.ERROR) {
        return D;
    }
    var existing = dfa.states.get(D);
    if(existing!==null) {
        return existing;
    }
    D.stateNumber = dfa.states.length;
    if (! D.configs.readOnly) {
        D.configs.optimizeConfigs(this);
        D.configs.setReadonly(true);
    }
    dfa.states.add(D);
    if (this.debug) {
        console.log("adding new DFA state: " + D);
    }
    return D;
};

ParserATNSimulator.prototype.reportAttemptingFullContext = function(dfa, conflictingAlts, configs, startIndex, stopIndex) {
    if (this.debug || this.retry_debug) {
        var interval = new Interval(startIndex, stopIndex + 1);
        console.log("reportAttemptingFullContext decision=" + dfa.decision + ":" + configs +
                           ", input=" + this.parser.getTokenStream().getText(interval));
    }
    if (this.parser!==null) {
        this.parser.getErrorListenerDispatch().reportAttemptingFullContext(this.parser, dfa, startIndex, stopIndex, conflictingAlts, configs);
    }
};

ParserATNSimulator.prototype.reportContextSensitivity = function(dfa, prediction, configs, startIndex, stopIndex) {
    if (this.debug || this.retry_debug) {
        var interval = new Interval(startIndex, stopIndex + 1);
        console.log("reportContextSensitivity decision=" + dfa.decision + ":" + configs +
                           ", input=" + this.parser.getTokenStream().getText(interval));
    }
    if (this.parser!==null) {
        this.parser.getErrorListenerDispatch().reportContextSensitivity(this.parser, dfa, startIndex, stopIndex, prediction, configs);
    }
};

// If context sensitive parsing, we know it's ambiguity not conflict//
ParserATNSimulator.prototype.reportAmbiguity = function(dfa, D, startIndex, stopIndex,
                               exact, ambigAlts, configs ) {
    if (this.debug || this.retry_debug) {
        var interval = new Interval(startIndex, stopIndex + 1);
        console.log("reportAmbiguity " + ambigAlts + ":" + configs +
                           ", input=" + this.parser.getTokenStream().getText(interval));
    }
    if (this.parser!==null) {
        this.parser.getErrorListenerDispatch().reportAmbiguity(this.parser, dfa, startIndex, stopIndex, exact, ambigAlts, configs);
    }
};

exports.ParserATNSimulator = ParserATNSimulator;

/***/ }),
/* 120 */
/***/ (function(module, exports, __webpack_require__) {

/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

exports.DFA = __webpack_require__(121).DFA;
exports.DFASerializer = __webpack_require__(33).DFASerializer;
exports.LexerDFASerializer = __webpack_require__(33).LexerDFASerializer;
exports.PredPrediction = __webpack_require__(18).PredPrediction;


/***/ }),
/* 121 */
/***/ (function(module, exports, __webpack_require__) {

//
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

var Set = __webpack_require__(1).Set;
var DFAState = __webpack_require__(18).DFAState;
var StarLoopEntryState = __webpack_require__(7).StarLoopEntryState;
var ATNConfigSet = __webpack_require__(15).ATNConfigSet;
var DFASerializer = __webpack_require__(33).DFASerializer;
var LexerDFASerializer = __webpack_require__(33).LexerDFASerializer;



function DFA(atnStartState, decision) {
	if (decision === undefined) {
		decision = 0;
	}
	// From which ATN state did we create this DFA?
	this.atnStartState = atnStartState;
	this.decision = decision;
	// A set of all DFA states. Use {@link Map} so we can get old state back
	// ({@link Set} only allows you to see if it's there).
	this._states = new Set();
	this.s0 = null;
	// {@code true} if this DFA is for a precedence decision; otherwise,
	// {@code false}. This is the backing field for {@link //isPrecedenceDfa},
	// {@link //setPrecedenceDfa}.
	this.precedenceDfa = false;
    if (atnStartState instanceof StarLoopEntryState)
    {
        if (atnStartState.isPrecedenceDecision) {
            this.precedenceDfa = true;
            var precedenceState = new DFAState(null, new ATNConfigSet());
            precedenceState.edges = [];
            precedenceState.isAcceptState = false;
            precedenceState.requiresFullContext = false;
            this.s0 = precedenceState;
        }
    }
	return this;
}

// Get the start state for a specific precedence value.
//
// @param precedence The current precedence.
// @return The start state corresponding to the specified precedence, or
// {@code null} if no start state exists for the specified precedence.
//
// @throws IllegalStateException if this is not a precedence DFA.
// @see //isPrecedenceDfa()

DFA.prototype.getPrecedenceStartState = function(precedence) {
	if (!(this.precedenceDfa)) {
		throw ("Only precedence DFAs may contain a precedence start state.");
	}
	// s0.edges is never null for a precedence DFA
	if (precedence < 0 || precedence >= this.s0.edges.length) {
		return null;
	}
	return this.s0.edges[precedence] || null;
};

// Set the start state for a specific precedence value.
//
// @param precedence The current precedence.
// @param startState The start state corresponding to the specified
// precedence.
//
// @throws IllegalStateException if this is not a precedence DFA.
// @see //isPrecedenceDfa()
//
DFA.prototype.setPrecedenceStartState = function(precedence, startState) {
	if (!(this.precedenceDfa)) {
		throw ("Only precedence DFAs may contain a precedence start state.");
	}
	if (precedence < 0) {
		return;
	}

	// synchronization on s0 here is ok. when the DFA is turned into a
	// precedence DFA, s0 will be initialized once and not updated again
	// s0.edges is never null for a precedence DFA
	this.s0.edges[precedence] = startState;
};

//
// Sets whether this is a precedence DFA. If the specified value differs
// from the current DFA configuration, the following actions are taken;
// otherwise no changes are made to the current DFA.
//
// <ul>
// <li>The {@link //states} map is cleared</li>
// <li>If {@code precedenceDfa} is {@code false}, the initial state
// {@link //s0} is set to {@code null}; otherwise, it is initialized to a new
// {@link DFAState} with an empty outgoing {@link DFAState//edges} array to
// store the start states for individual precedence values.</li>
// <li>The {@link //precedenceDfa} field is updated</li>
// </ul>
//
// @param precedenceDfa {@code true} if this is a precedence DFA; otherwise,
// {@code false}

DFA.prototype.setPrecedenceDfa = function(precedenceDfa) {
	if (this.precedenceDfa!==precedenceDfa) {
		this._states = new DFAStatesSet();
		if (precedenceDfa) {
			var precedenceState = new DFAState(null, new ATNConfigSet());
			precedenceState.edges = [];
			precedenceState.isAcceptState = false;
			precedenceState.requiresFullContext = false;
			this.s0 = precedenceState;
		} else {
			this.s0 = null;
		}
		this.precedenceDfa = precedenceDfa;
	}
};

Object.defineProperty(DFA.prototype, "states", {
	get : function() {
		return this._states;
	}
});

// Return a list of all states in this DFA, ordered by state number.
DFA.prototype.sortedStates = function() {
	var list = this._states.values();
	return list.sort(function(a, b) {
		return a.stateNumber - b.stateNumber;
	});
};

DFA.prototype.toString = function(literalNames, symbolicNames) {
	literalNames = literalNames || null;
	symbolicNames = symbolicNames || null;
	if (this.s0 === null) {
		return "";
	}
	var serializer = new DFASerializer(this, literalNames, symbolicNames);
	return serializer.toString();
};

DFA.prototype.toLexerString = function() {
	if (this.s0 === null) {
		return "";
	}
	var serializer = new LexerDFASerializer(this);
	return serializer.toString();
};

exports.DFA = DFA;


/***/ }),
/* 122 */
/***/ (function(module, exports, __webpack_require__) {

/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

var Tree = __webpack_require__(5);
exports.Trees = __webpack_require__(70).Trees;
exports.RuleNode = Tree.RuleNode;
exports.ParseTreeListener = Tree.ParseTreeListener;
exports.ParseTreeVisitor = Tree.ParseTreeVisitor;
exports.ParseTreeWalker = Tree.ParseTreeWalker;


/***/ }),
/* 123 */
/***/ (function(module, exports, __webpack_require__) {

/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

exports.RecognitionException = __webpack_require__(8).RecognitionException;
exports.NoViableAltException = __webpack_require__(8).NoViableAltException;
exports.LexerNoViableAltException = __webpack_require__(8).LexerNoViableAltException;
exports.InputMismatchException = __webpack_require__(8).InputMismatchException;
exports.FailedPredicateException = __webpack_require__(8).FailedPredicateException;
exports.DiagnosticErrorListener = __webpack_require__(124).DiagnosticErrorListener;
exports.BailErrorStrategy = __webpack_require__(79).BailErrorStrategy;
exports.ErrorListener = __webpack_require__(32).ErrorListener;


/***/ }),
/* 124 */
/***/ (function(module, exports, __webpack_require__) {

//
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
//

//
// This implementation of {@link ANTLRErrorListener} can be used to identify
// certain potential correctness and performance problems in grammars. "Reports"
// are made by calling {@link Parser//notifyErrorListeners} with the appropriate
// message.
//
// <ul>
// <li><b>Ambiguities</b>: These are cases where more than one path through the
// grammar can match the input.</li>
// <li><b>Weak context sensitivity</b>: These are cases where full-context
// prediction resolved an SLL conflict to a unique alternative which equaled the
// minimum alternative of the SLL conflict.</li>
// <li><b>Strong (forced) context sensitivity</b>: These are cases where the
// full-context prediction resolved an SLL conflict to a unique alternative,
// <em>and</em> the minimum alternative of the SLL conflict was found to not be
// a truly viable alternative. Two-stage parsing cannot be used for inputs where
// this situation occurs.</li>
// </ul>

var BitSet = __webpack_require__(1).BitSet;
var ErrorListener = __webpack_require__(32).ErrorListener;
var Interval = __webpack_require__(4).Interval;

function DiagnosticErrorListener(exactOnly) {
	ErrorListener.call(this);
	exactOnly = exactOnly || true;
	// whether all ambiguities or only exact ambiguities are reported.
	this.exactOnly = exactOnly;
	return this;
}

DiagnosticErrorListener.prototype = Object.create(ErrorListener.prototype);
DiagnosticErrorListener.prototype.constructor = DiagnosticErrorListener;

DiagnosticErrorListener.prototype.reportAmbiguity = function(recognizer, dfa,
		startIndex, stopIndex, exact, ambigAlts, configs) {
	if (this.exactOnly && !exact) {
		return;
	}
	var msg = "reportAmbiguity d=" +
			this.getDecisionDescription(recognizer, dfa) +
			": ambigAlts=" +
			this.getConflictingAlts(ambigAlts, configs) +
			", input='" +
			recognizer.getTokenStream().getText(new Interval(startIndex, stopIndex)) + "'";
	recognizer.notifyErrorListeners(msg);
};

DiagnosticErrorListener.prototype.reportAttemptingFullContext = function(
		recognizer, dfa, startIndex, stopIndex, conflictingAlts, configs) {
	var msg = "reportAttemptingFullContext d=" +
			this.getDecisionDescription(recognizer, dfa) +
			", input='" +
			recognizer.getTokenStream().getText(new Interval(startIndex, stopIndex)) + "'";
	recognizer.notifyErrorListeners(msg);
};

DiagnosticErrorListener.prototype.reportContextSensitivity = function(
		recognizer, dfa, startIndex, stopIndex, prediction, configs) {
	var msg = "reportContextSensitivity d=" +
			this.getDecisionDescription(recognizer, dfa) +
			", input='" +
			recognizer.getTokenStream().getText(new Interval(startIndex, stopIndex)) + "'";
	recognizer.notifyErrorListeners(msg);
};

DiagnosticErrorListener.prototype.getDecisionDescription = function(recognizer, dfa) {
	var decision = dfa.decision;
	var ruleIndex = dfa.atnStartState.ruleIndex;

	var ruleNames = recognizer.ruleNames;
	if (ruleIndex < 0 || ruleIndex >= ruleNames.length) {
		return "" + decision;
	}
	var ruleName = ruleNames[ruleIndex] || null;
	if (ruleName === null || ruleName.length === 0) {
		return "" + decision;
	}
	return "" + decision + " (" + ruleName + ")";
};

//
// Computes the set of conflicting or ambiguous alternatives from a
// configuration set, if that information was not already provided by the
// parser.
//
// @param reportedAlts The set of conflicting or ambiguous alternatives, as
// reported by the parser.
// @param configs The conflicting or ambiguous configuration set.
// @return Returns {@code reportedAlts} if it is not {@code null}, otherwise
// returns the set of alternatives represented in {@code configs}.
//
DiagnosticErrorListener.prototype.getConflictingAlts = function(reportedAlts, configs) {
	if (reportedAlts !== null) {
		return reportedAlts;
	}
	var result = new BitSet();
	for (var i = 0; i < configs.items.length; i++) {
		result.add(configs.items[i].alt);
	}
	return "{" + result.values().join(", ") + "}";
};

exports.DiagnosticErrorListener = DiagnosticErrorListener;

/***/ }),
/* 125 */
/***/ (function(module, exports, __webpack_require__) {

//
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
//

var InputStream = __webpack_require__(49).InputStream;

var isNodeJs = typeof window === 'undefined' && typeof importScripts === 'undefined';
var fs = isNodeJs ? __webpack_require__(50) : null;

// Utility functions to create InputStreams from various sources.
//
// All returned InputStreams support the full range of Unicode
// up to U+10FFFF (the default behavior of InputStream only supports
// code points up to U+FFFF).
var CharStreams = {
  // Creates an InputStream from a string.
  fromString: function(str) {
    return new InputStream(str, true);
  },

  // Asynchronously creates an InputStream from a blob given the
  // encoding of the bytes in that blob (defaults to 'utf8' if
  // encoding is null).
  //
  // Invokes onLoad(result) on success, onError(error) on
  // failure.
  fromBlob: function(blob, encoding, onLoad, onError) {
    var reader = FileReader();
    reader.onload = function(e) {
      var is = new InputStream(e.target.result, true);
      onLoad(is);
    };
    reader.onerror = onError;
    reader.readAsText(blob, encoding);
  },

  // Creates an InputStream from a Buffer given the
  // encoding of the bytes in that buffer (defaults to 'utf8' if
  // encoding is null).
  fromBuffer: function(buffer, encoding) {
    return new InputStream(buffer.toString(encoding), true);
  },

  // Asynchronously creates an InputStream from a file on disk given
  // the encoding of the bytes in that file (defaults to 'utf8' if
  // encoding is null).
  //
  // Invokes callback(error, result) on completion.
  fromPath: function(path, encoding, callback) {
    fs.readFile(path, encoding, function(err, data) {
      var is = null;
      if (data !== null) {
        is = new InputStream(data, true);
      }
      callback(err, is);
    });
  },

  // Synchronously creates an InputStream given a path to a file
  // on disk and the encoding of the bytes in that file (defaults to
  // 'utf8' if encoding is null).
  fromPathSync: function(path, encoding) {
    var data = fs.readFileSync(path, encoding);
    return new InputStream(data, true);
  }
};

exports.CharStreams = CharStreams;


/***/ }),
/* 126 */
/***/ (function(module, exports, __webpack_require__) {

//
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
//

//
//  This is an InputStream that is loaded from a file all at once
//  when you construct the object.
//
var InputStream = __webpack_require__(49).InputStream;
var isNodeJs = typeof window === 'undefined' && typeof importScripts === 'undefined';
var fs = isNodeJs ? __webpack_require__(50) : null;

function FileStream(fileName, decodeToUnicodeCodePoints) {
	var data = fs.readFileSync(fileName, "utf8");
	InputStream.call(this, data, decodeToUnicodeCodePoints);
	this.fileName = fileName;
	return this;
}

FileStream.prototype = Object.create(InputStream.prototype);
FileStream.prototype.constructor = FileStream;

exports.FileStream = FileStream;


/***/ }),
/* 127 */
/***/ (function(module, exports, __webpack_require__) {

//
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
///

//
// This class extends {@link BufferedTokenStream} with functionality to filter
// token streams to tokens on a particular channel (tokens where
// {@link Token//getChannel} returns a particular value).
//
// <p>
// This token stream provides access to all tokens by index or when calling
// methods like {@link //getText}. The channel filtering is only used for code
// accessing tokens via the lookahead methods {@link //LA}, {@link //LT}, and
// {@link //LB}.</p>
//
// <p>
// By default, tokens are placed on the default channel
// ({@link Token//DEFAULT_CHANNEL}), but may be reassigned by using the
// {@code ->channel(HIDDEN)} lexer command, or by using an embedded action to
// call {@link Lexer//setChannel}.
// </p>
//
// <p>
// Note: lexer rules which use the {@code ->skip} lexer command or call
// {@link Lexer//skip} do not produce tokens at all, so input text matched by
// such a rule will not be available as part of the token stream, regardless of
// channel.</p>
///

var Token = __webpack_require__(2).Token;
var BufferedTokenStream = __webpack_require__(128).BufferedTokenStream;

function CommonTokenStream(lexer, channel) {
	BufferedTokenStream.call(this, lexer);
    this.channel = channel===undefined ? Token.DEFAULT_CHANNEL : channel;
    return this;
}

CommonTokenStream.prototype = Object.create(BufferedTokenStream.prototype);
CommonTokenStream.prototype.constructor = CommonTokenStream;

CommonTokenStream.prototype.adjustSeekIndex = function(i) {
    return this.nextTokenOnChannel(i, this.channel);
};

CommonTokenStream.prototype.LB = function(k) {
    if (k===0 || this.index-k<0) {
        return null;
    }
    var i = this.index;
    var n = 1;
    // find k good tokens looking backwards
    while (n <= k) {
        // skip off-channel tokens
        i = this.previousTokenOnChannel(i - 1, this.channel);
        n += 1;
    }
    if (i < 0) {
        return null;
    }
    return this.tokens[i];
};

CommonTokenStream.prototype.LT = function(k) {
    this.lazyInit();
    if (k === 0) {
        return null;
    }
    if (k < 0) {
        return this.LB(-k);
    }
    var i = this.index;
    var n = 1; // we know tokens[pos] is a good one
    // find k good tokens
    while (n < k) {
        // skip off-channel tokens, but make sure to not look past EOF
        if (this.sync(i + 1)) {
            i = this.nextTokenOnChannel(i + 1, this.channel);
        }
        n += 1;
    }
    return this.tokens[i];
};

// Count EOF just once.///
CommonTokenStream.prototype.getNumberOfOnChannelTokens = function() {
    var n = 0;
    this.fill();
    for (var i =0; i< this.tokens.length;i++) {
        var t = this.tokens[i];
        if( t.channel===this.channel) {
            n += 1;
        }
        if( t.type===Token.EOF) {
            break;
        }
    }
    return n;
};

exports.CommonTokenStream = CommonTokenStream;

/***/ }),
/* 128 */
/***/ (function(module, exports, __webpack_require__) {

//
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

// This implementation of {@link TokenStream} loads tokens from a
// {@link TokenSource} on-demand, and places the tokens in a buffer to provide
// access to any previous token by index.
//
// <p>
// This token stream ignores the value of {@link Token//getChannel}. If your
// parser requires the token stream filter tokens to only those on a particular
// channel, such as {@link Token//DEFAULT_CHANNEL} or
// {@link Token//HIDDEN_CHANNEL}, use a filtering token stream such a
// {@link CommonTokenStream}.</p>

var Token = __webpack_require__(2).Token;
var Lexer = __webpack_require__(31).Lexer;
var Interval = __webpack_require__(4).Interval;

// this is just to keep meaningful parameter types to Parser
function TokenStream() {
	return this;
}

function BufferedTokenStream(tokenSource) {

	TokenStream.call(this);
	// The {@link TokenSource} from which tokens for this stream are fetched.
	this.tokenSource = tokenSource;

	// A collection of all tokens fetched from the token source. The list is
	// considered a complete view of the input once {@link //fetchedEOF} is set
	// to {@code true}.
	this.tokens = [];

	// The index into {@link //tokens} of the current token (next token to
	// {@link //consume}). {@link //tokens}{@code [}{@link //p}{@code ]} should
	// be
	// {@link //LT LT(1)}.
	//
	// <p>This field is set to -1 when the stream is first constructed or when
	// {@link //setTokenSource} is called, indicating that the first token has
	// not yet been fetched from the token source. For additional information,
	// see the documentation of {@link IntStream} for a description of
	// Initializing Methods.</p>
	this.index = -1;

	// Indicates whether the {@link Token//EOF} token has been fetched from
	// {@link //tokenSource} and added to {@link //tokens}. This field improves
	// performance for the following cases:
	//
	// <ul>
	// <li>{@link //consume}: The lookahead check in {@link //consume} to
	// prevent
	// consuming the EOF symbol is optimized by checking the values of
	// {@link //fetchedEOF} and {@link //p} instead of calling {@link
	// //LA}.</li>
	// <li>{@link //fetch}: The check to prevent adding multiple EOF symbols
	// into
	// {@link //tokens} is trivial with this field.</li>
	// <ul>
	this.fetchedEOF = false;
	return this;
}

BufferedTokenStream.prototype = Object.create(TokenStream.prototype);
BufferedTokenStream.prototype.constructor = BufferedTokenStream;

BufferedTokenStream.prototype.mark = function() {
	return 0;
};

BufferedTokenStream.prototype.release = function(marker) {
	// no resources to release
};

BufferedTokenStream.prototype.reset = function() {
	this.seek(0);
};

BufferedTokenStream.prototype.seek = function(index) {
	this.lazyInit();
	this.index = this.adjustSeekIndex(index);
};

BufferedTokenStream.prototype.get = function(index) {
	this.lazyInit();
	return this.tokens[index];
};

BufferedTokenStream.prototype.consume = function() {
	var skipEofCheck = false;
	if (this.index >= 0) {
		if (this.fetchedEOF) {
			// the last token in tokens is EOF. skip check if p indexes any
			// fetched token except the last.
			skipEofCheck = this.index < this.tokens.length - 1;
		} else {
			// no EOF token in tokens. skip check if p indexes a fetched token.
			skipEofCheck = this.index < this.tokens.length;
		}
	} else {
		// not yet initialized
		skipEofCheck = false;
	}
	if (!skipEofCheck && this.LA(1) === Token.EOF) {
		throw "cannot consume EOF";
	}
	if (this.sync(this.index + 1)) {
		this.index = this.adjustSeekIndex(this.index + 1);
	}
};

// Make sure index {@code i} in tokens has a token.
//
// @return {@code true} if a token is located at index {@code i}, otherwise
// {@code false}.
// @see //get(int i)
// /
BufferedTokenStream.prototype.sync = function(i) {
	var n = i - this.tokens.length + 1; // how many more elements we need?
	if (n > 0) {
		var fetched = this.fetch(n);
		return fetched >= n;
	}
	return true;
};

// Add {@code n} elements to buffer.
//
// @return The actual number of elements added to the buffer.
// /
BufferedTokenStream.prototype.fetch = function(n) {
	if (this.fetchedEOF) {
		return 0;
	}
	for (var i = 0; i < n; i++) {
		var t = this.tokenSource.nextToken();
		t.tokenIndex = this.tokens.length;
		this.tokens.push(t);
		if (t.type === Token.EOF) {
			this.fetchedEOF = true;
			return i + 1;
		}
	}
	return n;
};

// Get all tokens from start..stop inclusively///
BufferedTokenStream.prototype.getTokens = function(start, stop, types) {
	if (types === undefined) {
		types = null;
	}
	if (start < 0 || stop < 0) {
		return null;
	}
	this.lazyInit();
	var subset = [];
	if (stop >= this.tokens.length) {
		stop = this.tokens.length - 1;
	}
	for (var i = start; i < stop; i++) {
		var t = this.tokens[i];
		if (t.type === Token.EOF) {
			break;
		}
		if (types === null || types.contains(t.type)) {
			subset.push(t);
		}
	}
	return subset;
};

BufferedTokenStream.prototype.LA = function(i) {
	return this.LT(i).type;
};

BufferedTokenStream.prototype.LB = function(k) {
	if (this.index - k < 0) {
		return null;
	}
	return this.tokens[this.index - k];
};

BufferedTokenStream.prototype.LT = function(k) {
	this.lazyInit();
	if (k === 0) {
		return null;
	}
	if (k < 0) {
		return this.LB(-k);
	}
	var i = this.index + k - 1;
	this.sync(i);
	if (i >= this.tokens.length) { // return EOF token
		// EOF must be last token
		return this.tokens[this.tokens.length - 1];
	}
	return this.tokens[i];
};

// Allowed derived classes to modify the behavior of operations which change
// the current stream position by adjusting the target token index of a seek
// operation. The default implementation simply returns {@code i}. If an
// exception is thrown in this method, the current stream index should not be
// changed.
//
// <p>For example, {@link CommonTokenStream} overrides this method to ensure
// that
// the seek target is always an on-channel token.</p>
//
// @param i The target token index.
// @return The adjusted target token index.

BufferedTokenStream.prototype.adjustSeekIndex = function(i) {
	return i;
};

BufferedTokenStream.prototype.lazyInit = function() {
	if (this.index === -1) {
		this.setup();
	}
};

BufferedTokenStream.prototype.setup = function() {
	this.sync(0);
	this.index = this.adjustSeekIndex(0);
};

// Reset this token stream by setting its token source.///
BufferedTokenStream.prototype.setTokenSource = function(tokenSource) {
	this.tokenSource = tokenSource;
	this.tokens = [];
	this.index = -1;
	this.fetchedEOF = false;
};


// Given a starting index, return the index of the next token on channel.
// Return i if tokens[i] is on channel. Return -1 if there are no tokens
// on channel between i and EOF.
// /
BufferedTokenStream.prototype.nextTokenOnChannel = function(i, channel) {
	this.sync(i);
	if (i >= this.tokens.length) {
		return -1;
	}
	var token = this.tokens[i];
	while (token.channel !== this.channel) {
		if (token.type === Token.EOF) {
			return -1;
		}
		i += 1;
		this.sync(i);
		token = this.tokens[i];
	}
	return i;
};

// Given a starting index, return the index of the previous token on channel.
// Return i if tokens[i] is on channel. Return -1 if there are no tokens
// on channel between i and 0.
BufferedTokenStream.prototype.previousTokenOnChannel = function(i, channel) {
	while (i >= 0 && this.tokens[i].channel !== channel) {
		i -= 1;
	}
	return i;
};

// Collect all tokens on specified channel to the right of
// the current token up until we see a token on DEFAULT_TOKEN_CHANNEL or
// EOF. If channel is -1, find any non default channel token.
BufferedTokenStream.prototype.getHiddenTokensToRight = function(tokenIndex,
		channel) {
	if (channel === undefined) {
		channel = -1;
	}
	this.lazyInit();
	if (tokenIndex < 0 || tokenIndex >= this.tokens.length) {
		throw "" + tokenIndex + " not in 0.." + this.tokens.length - 1;
	}
	var nextOnChannel = this.nextTokenOnChannel(tokenIndex + 1, Lexer.DEFAULT_TOKEN_CHANNEL);
	var from_ = tokenIndex + 1;
	// if none onchannel to right, nextOnChannel=-1 so set to = last token
	var to = nextOnChannel === -1 ? this.tokens.length - 1 : nextOnChannel;
	return this.filterForChannel(from_, to, channel);
};

// Collect all tokens on specified channel to the left of
// the current token up until we see a token on DEFAULT_TOKEN_CHANNEL.
// If channel is -1, find any non default channel token.
BufferedTokenStream.prototype.getHiddenTokensToLeft = function(tokenIndex,
		channel) {
	if (channel === undefined) {
		channel = -1;
	}
	this.lazyInit();
	if (tokenIndex < 0 || tokenIndex >= this.tokens.length) {
		throw "" + tokenIndex + " not in 0.." + this.tokens.length - 1;
	}
	var prevOnChannel = this.previousTokenOnChannel(tokenIndex - 1, Lexer.DEFAULT_TOKEN_CHANNEL);
	if (prevOnChannel === tokenIndex - 1) {
		return null;
	}
	// if none on channel to left, prevOnChannel=-1 then from=0
	var from_ = prevOnChannel + 1;
	var to = tokenIndex - 1;
	return this.filterForChannel(from_, to, channel);
};

BufferedTokenStream.prototype.filterForChannel = function(left, right, channel) {
	var hidden = [];
	for (var i = left; i < right + 1; i++) {
		var t = this.tokens[i];
		if (channel === -1) {
			if (t.channel !== Lexer.DEFAULT_TOKEN_CHANNEL) {
				hidden.push(t);
			}
		} else if (t.channel === channel) {
			hidden.push(t);
		}
	}
	if (hidden.length === 0) {
		return null;
	}
	return hidden;
};

BufferedTokenStream.prototype.getSourceName = function() {
	return this.tokenSource.getSourceName();
};

// Get the text of all tokens in this buffer.///
BufferedTokenStream.prototype.getText = function(interval) {
	this.lazyInit();
	this.fill();
	if (interval === undefined || interval === null) {
		interval = new Interval(0, this.tokens.length - 1);
	}
	var start = interval.start;
	if (start instanceof Token) {
		start = start.tokenIndex;
	}
	var stop = interval.stop;
	if (stop instanceof Token) {
		stop = stop.tokenIndex;
	}
	if (start === null || stop === null || start < 0 || stop < 0) {
		return "";
	}
	if (stop >= this.tokens.length) {
		stop = this.tokens.length - 1;
	}
	var s = "";
	for (var i = start; i < stop + 1; i++) {
		var t = this.tokens[i];
		if (t.type === Token.EOF) {
			break;
		}
		s = s + t.text;
	}
	return s;
};

// Get all tokens from lexer until EOF///
BufferedTokenStream.prototype.fill = function() {
	this.lazyInit();
	while (this.fetch(1000) === 1000) {
		continue;
	}
};

exports.BufferedTokenStream = BufferedTokenStream;


/***/ }),
/* 129 */
/***/ (function(module, exports, __webpack_require__) {

/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

var Token = __webpack_require__(2).Token;
var ParseTreeListener = __webpack_require__(5).ParseTreeListener;
var Recognizer = __webpack_require__(74).Recognizer;
var DefaultErrorStrategy = __webpack_require__(79).DefaultErrorStrategy;
var ATNDeserializer = __webpack_require__(71).ATNDeserializer;
var ATNDeserializationOptions = __webpack_require__(72).ATNDeserializationOptions;
var TerminalNode = __webpack_require__(5).TerminalNode;
var ErrorNode = __webpack_require__(5).ErrorNode;

function TraceListener(parser) {
	ParseTreeListener.call(this);
    this.parser = parser;
	return this;
}

TraceListener.prototype = Object.create(ParseTreeListener.prototype);
TraceListener.prototype.constructor = TraceListener;

TraceListener.prototype.enterEveryRule = function(ctx) {
	console.log("enter   " + this.parser.ruleNames[ctx.ruleIndex] + ", LT(1)=" + this.parser._input.LT(1).text);
};

TraceListener.prototype.visitTerminal = function( node) {
	console.log("consume " + node.symbol + " rule " + this.parser.ruleNames[this.parser._ctx.ruleIndex]);
};

TraceListener.prototype.exitEveryRule = function(ctx) {
	console.log("exit    " + this.parser.ruleNames[ctx.ruleIndex] + ", LT(1)=" + this.parser._input.LT(1).text);
};

// this is all the parsing support code essentially; most of it is error
// recovery stuff.//
function Parser(input) {
	Recognizer.call(this);
	// The input stream.
	this._input = null;
	// The error handling strategy for the parser. The default value is a new
	// instance of {@link DefaultErrorStrategy}.
	this._errHandler = new DefaultErrorStrategy();
	this._precedenceStack = [];
	this._precedenceStack.push(0);
	// The {@link ParserRuleContext} object for the currently executing rule.
	// this is always non-null during the parsing process.
	this._ctx = null;
	// Specifies whether or not the parser should construct a parse tree during
	// the parsing process. The default value is {@code true}.
	this.buildParseTrees = true;
	// When {@link //setTrace}{@code (true)} is called, a reference to the
	// {@link TraceListener} is stored here so it can be easily removed in a
	// later call to {@link //setTrace}{@code (false)}. The listener itself is
	// implemented as a parser listener so this field is not directly used by
	// other parser methods.
	this._tracer = null;
	// The list of {@link ParseTreeListener} listeners registered to receive
	// events during the parse.
	this._parseListeners = null;
	// The number of syntax errors reported during parsing. this value is
	// incremented each time {@link //notifyErrorListeners} is called.
	this._syntaxErrors = 0;
	this.setInputStream(input);
	return this;
}

Parser.prototype = Object.create(Recognizer.prototype);
Parser.prototype.contructor = Parser;

// this field maps from the serialized ATN string to the deserialized {@link
// ATN} with
// bypass alternatives.
//
// @see ATNDeserializationOptions//isGenerateRuleBypassTransitions()
//
Parser.bypassAltsAtnCache = {};

// reset the parser's state//
Parser.prototype.reset = function() {
	if (this._input !== null) {
		this._input.seek(0);
	}
	this._errHandler.reset(this);
	this._ctx = null;
	this._syntaxErrors = 0;
	this.setTrace(false);
	this._precedenceStack = [];
	this._precedenceStack.push(0);
	if (this._interp !== null) {
		this._interp.reset();
	}
};

// Match current input symbol against {@code ttype}. If the symbol type
// matches, {@link ANTLRErrorStrategy//reportMatch} and {@link //consume} are
// called to complete the match process.
//
// <p>If the symbol type does not match,
// {@link ANTLRErrorStrategy//recoverInline} is called on the current error
// strategy to attempt recovery. If {@link //getBuildParseTree} is
// {@code true} and the token index of the symbol returned by
// {@link ANTLRErrorStrategy//recoverInline} is -1, the symbol is added to
// the parse tree by calling {@link ParserRuleContext//addErrorNode}.</p>
//
// @param ttype the token type to match
// @return the matched symbol
// @throws RecognitionException if the current input symbol did not match
// {@code ttype} and the error strategy could not recover from the
// mismatched symbol

Parser.prototype.match = function(ttype) {
	var t = this.getCurrentToken();
	if (t.type === ttype) {
		this._errHandler.reportMatch(this);
		this.consume();
	} else {
		t = this._errHandler.recoverInline(this);
		if (this.buildParseTrees && t.tokenIndex === -1) {
			// we must have conjured up a new token during single token
			// insertion
			// if it's not the current symbol
			this._ctx.addErrorNode(t);
		}
	}
	return t;
};
// Match current input symbol as a wildcard. If the symbol type matches
// (i.e. has a value greater than 0), {@link ANTLRErrorStrategy//reportMatch}
// and {@link //consume} are called to complete the match process.
//
// <p>If the symbol type does not match,
// {@link ANTLRErrorStrategy//recoverInline} is called on the current error
// strategy to attempt recovery. If {@link //getBuildParseTree} is
// {@code true} and the token index of the symbol returned by
// {@link ANTLRErrorStrategy//recoverInline} is -1, the symbol is added to
// the parse tree by calling {@link ParserRuleContext//addErrorNode}.</p>
//
// @return the matched symbol
// @throws RecognitionException if the current input symbol did not match
// a wildcard and the error strategy could not recover from the mismatched
// symbol

Parser.prototype.matchWildcard = function() {
	var t = this.getCurrentToken();
	if (t.type > 0) {
		this._errHandler.reportMatch(this);
		this.consume();
	} else {
		t = this._errHandler.recoverInline(this);
		if (this._buildParseTrees && t.tokenIndex === -1) {
			// we must have conjured up a new token during single token
			// insertion
			// if it's not the current symbol
			this._ctx.addErrorNode(t);
		}
	}
	return t;
};

Parser.prototype.getParseListeners = function() {
	return this._parseListeners || [];
};

// Registers {@code listener} to receive events during the parsing process.
//
// <p>To support output-preserving grammar transformations (including but not
// limited to left-recursion removal, automated left-factoring, and
// optimized code generation), calls to listener methods during the parse
// may differ substantially from calls made by
// {@link ParseTreeWalker//DEFAULT} used after the parse is complete. In
// particular, rule entry and exit events may occur in a different order
// during the parse than after the parser. In addition, calls to certain
// rule entry methods may be omitted.</p>
//
// <p>With the following specific exceptions, calls to listener events are
// <em>deterministic</em>, i.e. for identical input the calls to listener
// methods will be the same.</p>
//
// <ul>
// <li>Alterations to the grammar used to generate code may change the
// behavior of the listener calls.</li>
// <li>Alterations to the command line options passed to ANTLR 4 when
// generating the parser may change the behavior of the listener calls.</li>
// <li>Changing the version of the ANTLR Tool used to generate the parser
// may change the behavior of the listener calls.</li>
// </ul>
//
// @param listener the listener to add
//
// @throws NullPointerException if {@code} listener is {@code null}
//
Parser.prototype.addParseListener = function(listener) {
	if (listener === null) {
		throw "listener";
	}
	if (this._parseListeners === null) {
		this._parseListeners = [];
	}
	this._parseListeners.push(listener);
};

//
// Remove {@code listener} from the list of parse listeners.
//
// <p>If {@code listener} is {@code null} or has not been added as a parse
// listener, this method does nothing.</p>
// @param listener the listener to remove
//
Parser.prototype.removeParseListener = function(listener) {
	if (this._parseListeners !== null) {
		var idx = this._parseListeners.indexOf(listener);
		if (idx >= 0) {
			this._parseListeners.splice(idx, 1);
		}
		if (this._parseListeners.length === 0) {
			this._parseListeners = null;
		}
	}
};

// Remove all parse listeners.
Parser.prototype.removeParseListeners = function() {
	this._parseListeners = null;
};

// Notify any parse listeners of an enter rule event.
Parser.prototype.triggerEnterRuleEvent = function() {
	if (this._parseListeners !== null) {
        var ctx = this._ctx;
		this._parseListeners.map(function(listener) {
			listener.enterEveryRule(ctx);
			ctx.enterRule(listener);
		});
	}
};

//
// Notify any parse listeners of an exit rule event.
//
// @see //addParseListener
//
Parser.prototype.triggerExitRuleEvent = function() {
	if (this._parseListeners !== null) {
		// reverse order walk of listeners
        var ctx = this._ctx;
		this._parseListeners.slice(0).reverse().map(function(listener) {
			ctx.exitRule(listener);
			listener.exitEveryRule(ctx);
		});
	}
};

Parser.prototype.getTokenFactory = function() {
	return this._input.tokenSource._factory;
};

// Tell our token source and error strategy about a new way to create tokens.//
Parser.prototype.setTokenFactory = function(factory) {
	this._input.tokenSource._factory = factory;
};

// The ATN with bypass alternatives is expensive to create so we create it
// lazily.
//
// @throws UnsupportedOperationException if the current parser does not
// implement the {@link //getSerializedATN()} method.
//
Parser.prototype.getATNWithBypassAlts = function() {
	var serializedAtn = this.getSerializedATN();
	if (serializedAtn === null) {
		throw "The current parser does not support an ATN with bypass alternatives.";
	}
	var result = this.bypassAltsAtnCache[serializedAtn];
	if (result === null) {
		var deserializationOptions = new ATNDeserializationOptions();
		deserializationOptions.generateRuleBypassTransitions = true;
		result = new ATNDeserializer(deserializationOptions)
				.deserialize(serializedAtn);
		this.bypassAltsAtnCache[serializedAtn] = result;
	}
	return result;
};

// The preferred method of getting a tree pattern. For example, here's a
// sample use:
//
// <pre>
// ParseTree t = parser.expr();
// ParseTreePattern p = parser.compileParseTreePattern("&lt;ID&gt;+0",
// MyParser.RULE_expr);
// ParseTreeMatch m = p.match(t);
// String id = m.get("ID");
// </pre>

var Lexer = __webpack_require__(31).Lexer;

Parser.prototype.compileParseTreePattern = function(pattern, patternRuleIndex, lexer) {
	lexer = lexer || null;
	if (lexer === null) {
		if (this.getTokenStream() !== null) {
			var tokenSource = this.getTokenStream().tokenSource;
			if (tokenSource instanceof Lexer) {
				lexer = tokenSource;
			}
		}
	}
	if (lexer === null) {
		throw "Parser can't discover a lexer to use";
	}
	var m = new ParseTreePatternMatcher(lexer, this);
	return m.compile(pattern, patternRuleIndex);
};

Parser.prototype.getInputStream = function() {
	return this.getTokenStream();
};

Parser.prototype.setInputStream = function(input) {
	this.setTokenStream(input);
};

Parser.prototype.getTokenStream = function() {
	return this._input;
};

// Set the token stream and reset the parser.//
Parser.prototype.setTokenStream = function(input) {
	this._input = null;
	this.reset();
	this._input = input;
};

// Match needs to return the current input symbol, which gets put
// into the label for the associated token ref; e.g., x=ID.
//
Parser.prototype.getCurrentToken = function() {
	return this._input.LT(1);
};

Parser.prototype.notifyErrorListeners = function(msg, offendingToken, err) {
	offendingToken = offendingToken || null;
	err = err || null;
	if (offendingToken === null) {
		offendingToken = this.getCurrentToken();
	}
	this._syntaxErrors += 1;
	var line = offendingToken.line;
	var column = offendingToken.column;
	var listener = this.getErrorListenerDispatch();
	listener.syntaxError(this, offendingToken, line, column, msg, err);
};

//
// Consume and return the {@linkplain //getCurrentToken current symbol}.
//
// <p>E.g., given the following input with {@code A} being the current
// lookahead symbol, this function moves the cursor to {@code B} and returns
// {@code A}.</p>
//
// <pre>
// A B
// ^
// </pre>
//
// If the parser is not in error recovery mode, the consumed symbol is added
// to the parse tree using {@link ParserRuleContext//addChild(Token)}, and
// {@link ParseTreeListener//visitTerminal} is called on any parse listeners.
// If the parser <em>is</em> in error recovery mode, the consumed symbol is
// added to the parse tree using
// {@link ParserRuleContext//addErrorNode(Token)}, and
// {@link ParseTreeListener//visitErrorNode} is called on any parse
// listeners.
//
Parser.prototype.consume = function() {
	var o = this.getCurrentToken();
	if (o.type !== Token.EOF) {
		this.getInputStream().consume();
	}
	var hasListener = this._parseListeners !== null && this._parseListeners.length > 0;
	if (this.buildParseTrees || hasListener) {
		var node;
		if (this._errHandler.inErrorRecoveryMode(this)) {
			node = this._ctx.addErrorNode(o);
		} else {
			node = this._ctx.addTokenNode(o);
		}
        node.invokingState = this.state;
		if (hasListener) {
			this._parseListeners.map(function(listener) {
				if (node instanceof ErrorNode || (node.isErrorNode !== undefined && node.isErrorNode())) {
					listener.visitErrorNode(node);
				} else if (node instanceof TerminalNode) {
					listener.visitTerminal(node);
				}
			});
		}
	}
	return o;
};

Parser.prototype.addContextToParseTree = function() {
	// add current context to parent if we have a parent
	if (this._ctx.parentCtx !== null) {
		this._ctx.parentCtx.addChild(this._ctx);
	}
};

// Always called by generated parsers upon entry to a rule. Access field
// {@link //_ctx} get the current context.

Parser.prototype.enterRule = function(localctx, state, ruleIndex) {
	this.state = state;
	this._ctx = localctx;
	this._ctx.start = this._input.LT(1);
	if (this.buildParseTrees) {
		this.addContextToParseTree();
	}
	if (this._parseListeners !== null) {
		this.triggerEnterRuleEvent();
	}
};

Parser.prototype.exitRule = function() {
	this._ctx.stop = this._input.LT(-1);
	// trigger event on _ctx, before it reverts to parent
	if (this._parseListeners !== null) {
		this.triggerExitRuleEvent();
	}
	this.state = this._ctx.invokingState;
	this._ctx = this._ctx.parentCtx;
};

Parser.prototype.enterOuterAlt = function(localctx, altNum) {
   	localctx.setAltNumber(altNum);
	// if we have new localctx, make sure we replace existing ctx
	// that is previous child of parse tree
	if (this.buildParseTrees && this._ctx !== localctx) {
		if (this._ctx.parentCtx !== null) {
			this._ctx.parentCtx.removeLastChild();
			this._ctx.parentCtx.addChild(localctx);
		}
	}
	this._ctx = localctx;
};

// Get the precedence level for the top-most precedence rule.
//
// @return The precedence level for the top-most precedence rule, or -1 if
// the parser context is not nested within a precedence rule.

Parser.prototype.getPrecedence = function() {
	if (this._precedenceStack.length === 0) {
		return -1;
	} else {
		return this._precedenceStack[this._precedenceStack.length-1];
	}
};

Parser.prototype.enterRecursionRule = function(localctx, state, ruleIndex,
		precedence) {
	this.state = state;
	this._precedenceStack.push(precedence);
	this._ctx = localctx;
	this._ctx.start = this._input.LT(1);
	if (this._parseListeners !== null) {
		this.triggerEnterRuleEvent(); // simulates rule entry for
										// left-recursive rules
	}
};

//
// Like {@link //enterRule} but for recursive rules.

Parser.prototype.pushNewRecursionContext = function(localctx, state, ruleIndex) {
	var previous = this._ctx;
	previous.parentCtx = localctx;
	previous.invokingState = state;
	previous.stop = this._input.LT(-1);

	this._ctx = localctx;
	this._ctx.start = previous.start;
	if (this.buildParseTrees) {
		this._ctx.addChild(previous);
	}
	if (this._parseListeners !== null) {
		this.triggerEnterRuleEvent(); // simulates rule entry for
										// left-recursive rules
	}
};

Parser.prototype.unrollRecursionContexts = function(parentCtx) {
	this._precedenceStack.pop();
	this._ctx.stop = this._input.LT(-1);
	var retCtx = this._ctx; // save current ctx (return value)
	// unroll so _ctx is as it was before call to recursive method
	if (this._parseListeners !== null) {
		while (this._ctx !== parentCtx) {
			this.triggerExitRuleEvent();
			this._ctx = this._ctx.parentCtx;
		}
	} else {
		this._ctx = parentCtx;
	}
	// hook into tree
	retCtx.parentCtx = parentCtx;
	if (this.buildParseTrees && parentCtx !== null) {
		// add return ctx into invoking rule's tree
		parentCtx.addChild(retCtx);
	}
};

Parser.prototype.getInvokingContext = function(ruleIndex) {
	var ctx = this._ctx;
	while (ctx !== null) {
		if (ctx.ruleIndex === ruleIndex) {
			return ctx;
		}
		ctx = ctx.parentCtx;
	}
	return null;
};

Parser.prototype.precpred = function(localctx, precedence) {
	return precedence >= this._precedenceStack[this._precedenceStack.length-1];
};

Parser.prototype.inContext = function(context) {
	// TODO: useful in parser?
	return false;
};

//
// Checks whether or not {@code symbol} can follow the current state in the
// ATN. The behavior of this method is equivalent to the following, but is
// implemented such that the complete context-sensitive follow set does not
// need to be explicitly constructed.
//
// <pre>
// return getExpectedTokens().contains(symbol);
// </pre>
//
// @param symbol the symbol type to check
// @return {@code true} if {@code symbol} can follow the current state in
// the ATN, otherwise {@code false}.

Parser.prototype.isExpectedToken = function(symbol) {
	var atn = this._interp.atn;
	var ctx = this._ctx;
	var s = atn.states[this.state];
	var following = atn.nextTokens(s);
	if (following.contains(symbol)) {
		return true;
	}
	if (!following.contains(Token.EPSILON)) {
		return false;
	}
	while (ctx !== null && ctx.invokingState >= 0 && following.contains(Token.EPSILON)) {
		var invokingState = atn.states[ctx.invokingState];
		var rt = invokingState.transitions[0];
		following = atn.nextTokens(rt.followState);
		if (following.contains(symbol)) {
			return true;
		}
		ctx = ctx.parentCtx;
	}
	if (following.contains(Token.EPSILON) && symbol === Token.EOF) {
		return true;
	} else {
		return false;
	}
};

// Computes the set of input symbols which could follow the current parser
// state and context, as given by {@link //getState} and {@link //getContext},
// respectively.
//
// @see ATN//getExpectedTokens(int, RuleContext)
//
Parser.prototype.getExpectedTokens = function() {
	return this._interp.atn.getExpectedTokens(this.state, this._ctx);
};

Parser.prototype.getExpectedTokensWithinCurrentRule = function() {
	var atn = this._interp.atn;
	var s = atn.states[this.state];
	return atn.nextTokens(s);
};

// Get a rule's index (i.e., {@code RULE_ruleName} field) or -1 if not found.//
Parser.prototype.getRuleIndex = function(ruleName) {
	var ruleIndex = this.getRuleIndexMap()[ruleName];
	if (ruleIndex !== null) {
		return ruleIndex;
	} else {
		return -1;
	}
};

// Return List&lt;String&gt; of the rule names in your parser instance
// leading up to a call to the current rule. You could override if
// you want more details such as the file/line info of where
// in the ATN a rule is invoked.
//
// this is very useful for error messages.
//
Parser.prototype.getRuleInvocationStack = function(p) {
	p = p || null;
	if (p === null) {
		p = this._ctx;
	}
	var stack = [];
	while (p !== null) {
		// compute what follows who invoked us
		var ruleIndex = p.ruleIndex;
		if (ruleIndex < 0) {
			stack.push("n/a");
		} else {
			stack.push(this.ruleNames[ruleIndex]);
		}
		p = p.parentCtx;
	}
	return stack;
};

// For debugging and other purposes.//
Parser.prototype.getDFAStrings = function() {
	return this._interp.decisionToDFA.toString();
};
// For debugging and other purposes.//
Parser.prototype.dumpDFA = function() {
	var seenOne = false;
	for (var i = 0; i < this._interp.decisionToDFA.length; i++) {
		var dfa = this._interp.decisionToDFA[i];
		if (dfa.states.length > 0) {
			if (seenOne) {
				console.log();
			}
			this.printer.println("Decision " + dfa.decision + ":");
			this.printer.print(dfa.toString(this.literalNames, this.symbolicNames));
			seenOne = true;
		}
	}
};

/*
"			printer = function() {\r\n" +
"				this.println = function(s) { document.getElementById('output') += s + '\\n'; }\r\n" +
"				this.print = function(s) { document.getElementById('output') += s; }\r\n" +
"			};\r\n" +
*/

Parser.prototype.getSourceName = function() {
	return this._input.sourceName;
};

// During a parse is sometimes useful to listen in on the rule entry and exit
// events as well as token matches. this is for quick and dirty debugging.
//
Parser.prototype.setTrace = function(trace) {
	if (!trace) {
		this.removeParseListener(this._tracer);
		this._tracer = null;
	} else {
		if (this._tracer !== null) {
			this.removeParseListener(this._tracer);
		}
		this._tracer = new TraceListener(this);
		this.addParseListener(this._tracer);
	}
};

exports.Parser = Parser;

/***/ }),
/* 130 */
/***/ (function(module, exports, __webpack_require__) {

// Generated from C:\Users\RYOSUKE\eclipse\java-oxygen\eclipse\..\..\..\eclipse-workspace\net.unicoen\UniMapperGenerator\src-gen\C.g4 by ANTLR 4.7.1
// jshint ignore: start
var antlr4 = __webpack_require__(16);

// This class defines a complete generic visitor for a parse tree produced by CParser.

function CVisitor() {
	antlr4.tree.ParseTreeVisitor.call(this);
	return this;
}

CVisitor.prototype = Object.create(antlr4.tree.ParseTreeVisitor.prototype);
CVisitor.prototype.constructor = CVisitor;

// Visit a parse tree produced by CParser#primaryExpression.
CVisitor.prototype.visitPrimaryExpression = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CParser#genericSelection.
CVisitor.prototype.visitGenericSelection = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CParser#genericAssocList.
CVisitor.prototype.visitGenericAssocList = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CParser#genericAssociation.
CVisitor.prototype.visitGenericAssociation = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CParser#postfixExpression.
CVisitor.prototype.visitPostfixExpression = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CParser#argumentExpressionList.
CVisitor.prototype.visitArgumentExpressionList = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CParser#unaryExpression.
CVisitor.prototype.visitUnaryExpression = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CParser#unaryOperator.
CVisitor.prototype.visitUnaryOperator = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CParser#castExpression.
CVisitor.prototype.visitCastExpression = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CParser#multiplicativeExpression.
CVisitor.prototype.visitMultiplicativeExpression = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CParser#additiveExpression.
CVisitor.prototype.visitAdditiveExpression = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CParser#shiftExpression.
CVisitor.prototype.visitShiftExpression = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CParser#relationalExpression.
CVisitor.prototype.visitRelationalExpression = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CParser#equalityExpression.
CVisitor.prototype.visitEqualityExpression = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CParser#andExpression.
CVisitor.prototype.visitAndExpression = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CParser#exclusiveOrExpression.
CVisitor.prototype.visitExclusiveOrExpression = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CParser#inclusiveOrExpression.
CVisitor.prototype.visitInclusiveOrExpression = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CParser#logicalAndExpression.
CVisitor.prototype.visitLogicalAndExpression = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CParser#logicalOrExpression.
CVisitor.prototype.visitLogicalOrExpression = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CParser#conditionalExpression.
CVisitor.prototype.visitConditionalExpression = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CParser#assignmentExpression.
CVisitor.prototype.visitAssignmentExpression = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CParser#assignmentOperator.
CVisitor.prototype.visitAssignmentOperator = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CParser#expression.
CVisitor.prototype.visitExpression = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CParser#constantExpression.
CVisitor.prototype.visitConstantExpression = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CParser#declaration.
CVisitor.prototype.visitDeclaration = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CParser#declarationSpecifiers.
CVisitor.prototype.visitDeclarationSpecifiers = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CParser#declarationSpecifiers2.
CVisitor.prototype.visitDeclarationSpecifiers2 = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CParser#declarationSpecifier.
CVisitor.prototype.visitDeclarationSpecifier = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CParser#initDeclaratorList.
CVisitor.prototype.visitInitDeclaratorList = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CParser#initDeclarator.
CVisitor.prototype.visitInitDeclarator = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CParser#storageClassSpecifier.
CVisitor.prototype.visitStorageClassSpecifier = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CParser#typeSpecifier.
CVisitor.prototype.visitTypeSpecifier = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CParser#structOrUnionSpecifier.
CVisitor.prototype.visitStructOrUnionSpecifier = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CParser#structOrUnion.
CVisitor.prototype.visitStructOrUnion = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CParser#structDeclarationList.
CVisitor.prototype.visitStructDeclarationList = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CParser#structDeclaration.
CVisitor.prototype.visitStructDeclaration = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CParser#specifierQualifierList.
CVisitor.prototype.visitSpecifierQualifierList = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CParser#structDeclaratorList.
CVisitor.prototype.visitStructDeclaratorList = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CParser#structDeclarator.
CVisitor.prototype.visitStructDeclarator = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CParser#enumSpecifier.
CVisitor.prototype.visitEnumSpecifier = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CParser#enumeratorList.
CVisitor.prototype.visitEnumeratorList = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CParser#enumerator.
CVisitor.prototype.visitEnumerator = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CParser#enumerationConstant.
CVisitor.prototype.visitEnumerationConstant = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CParser#atomicTypeSpecifier.
CVisitor.prototype.visitAtomicTypeSpecifier = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CParser#typeQualifier.
CVisitor.prototype.visitTypeQualifier = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CParser#functionSpecifier.
CVisitor.prototype.visitFunctionSpecifier = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CParser#alignmentSpecifier.
CVisitor.prototype.visitAlignmentSpecifier = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CParser#declarator.
CVisitor.prototype.visitDeclarator = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CParser#directDeclarator.
CVisitor.prototype.visitDirectDeclarator = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CParser#gccDeclaratorExtension.
CVisitor.prototype.visitGccDeclaratorExtension = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CParser#gccAttributeSpecifier.
CVisitor.prototype.visitGccAttributeSpecifier = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CParser#gccAttributeList.
CVisitor.prototype.visitGccAttributeList = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CParser#gccAttribute.
CVisitor.prototype.visitGccAttribute = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CParser#nestedParenthesesBlock.
CVisitor.prototype.visitNestedParenthesesBlock = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CParser#pointer.
CVisitor.prototype.visitPointer = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CParser#typeQualifierList.
CVisitor.prototype.visitTypeQualifierList = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CParser#parameterTypeList.
CVisitor.prototype.visitParameterTypeList = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CParser#parameterList.
CVisitor.prototype.visitParameterList = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CParser#parameterDeclaration.
CVisitor.prototype.visitParameterDeclaration = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CParser#identifierList.
CVisitor.prototype.visitIdentifierList = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CParser#typeName.
CVisitor.prototype.visitTypeName = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CParser#abstractDeclarator.
CVisitor.prototype.visitAbstractDeclarator = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CParser#directAbstractDeclarator.
CVisitor.prototype.visitDirectAbstractDeclarator = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CParser#typedefName.
CVisitor.prototype.visitTypedefName = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CParser#initializer.
CVisitor.prototype.visitInitializer = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CParser#initializerList.
CVisitor.prototype.visitInitializerList = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CParser#designation.
CVisitor.prototype.visitDesignation = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CParser#designatorList.
CVisitor.prototype.visitDesignatorList = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CParser#designator.
CVisitor.prototype.visitDesignator = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CParser#staticAssertDeclaration.
CVisitor.prototype.visitStaticAssertDeclaration = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CParser#statement.
CVisitor.prototype.visitStatement = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CParser#labeledStatement.
CVisitor.prototype.visitLabeledStatement = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CParser#compoundStatement.
CVisitor.prototype.visitCompoundStatement = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CParser#blockItemList.
CVisitor.prototype.visitBlockItemList = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CParser#blockItem.
CVisitor.prototype.visitBlockItem = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CParser#expressionStatement.
CVisitor.prototype.visitExpressionStatement = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CParser#selectionStatement.
CVisitor.prototype.visitSelectionStatement = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CParser#iterationStatement.
CVisitor.prototype.visitIterationStatement = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CParser#forCondition.
CVisitor.prototype.visitForCondition = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CParser#forDeclaration.
CVisitor.prototype.visitForDeclaration = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CParser#forExpression.
CVisitor.prototype.visitForExpression = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CParser#jumpStatement.
CVisitor.prototype.visitJumpStatement = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CParser#compilationUnit.
CVisitor.prototype.visitCompilationUnit = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CParser#translationUnit.
CVisitor.prototype.visitTranslationUnit = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CParser#externalDeclaration.
CVisitor.prototype.visitExternalDeclaration = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CParser#functionDefinition.
CVisitor.prototype.visitFunctionDefinition = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CParser#declarationList.
CVisitor.prototype.visitDeclarationList = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by CParser#constant.
CVisitor.prototype.visitConstant = function(ctx) {
  return this.visitChildren(ctx);
};



exports.CVisitor = CVisitor;

/***/ }),
/* 131 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var __extends = undefined && undefined.__extends || function () {
    var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
        d.__proto__ = b;
    } || function (d, b) {
        for (var p in b) {
            if (b.hasOwnProperty(p)) d[p] = b[p];
        }
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
var __read = undefined && undefined.__read || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o),
        r,
        ar = [],
        e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) {
            ar.push(r.value);
        }
    } catch (error) {
        e = { error: error };
    } finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        } finally {
            if (e) throw e.error;
        }
    }
    return ar;
};
var __values = undefined && undefined.__values || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator],
        i = 0;
    if (m) return m.call(o);
    return {
        next: function next() {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
Object.defineProperty(exports, "__esModule", { value: true });
var UniParam_1 = __webpack_require__(40);
var UniEnhancedFor_1 = __webpack_require__(132);
var UniExpr_1 = __webpack_require__(0);
var UniArray_1 = __webpack_require__(42);
var UniBinOp_1 = __webpack_require__(35);
var UniBlock_1 = __webpack_require__(19);
var UniBoolLiteral_1 = __webpack_require__(51);
var UniBreak_1 = __webpack_require__(52);
var UniCast_1 = __webpack_require__(53);
var UniContinue_1 = __webpack_require__(54);
var UniClassDec_1 = __webpack_require__(68);
var UniDoWhile_1 = __webpack_require__(55);
var UniFunctionDec_1 = __webpack_require__(24);
var UniFor_1 = __webpack_require__(43);
var UniIdent_1 = __webpack_require__(25);
var UniIf_1 = __webpack_require__(44);
var UniIntLiteral_1 = __webpack_require__(58);
var UniDoubleLiteral_1 = __webpack_require__(133);
var UniCharacterLiteral_1 = __webpack_require__(134);
var UniWhile_1 = __webpack_require__(36);
var UniUnaryOp_1 = __webpack_require__(37);
var UniTernaryOp_1 = __webpack_require__(56);
var UniStatement_1 = __webpack_require__(3);
var UniStringLiteral_1 = __webpack_require__(57);
var UniReturn_1 = __webpack_require__(38);
var UniVariableDec_1 = __webpack_require__(21);
var UniVariableDef_1 = __webpack_require__(41);
var UniMethodCall_1 = __webpack_require__(45);
var UniProgram_1 = __webpack_require__(39);
var antlr4_1 = __webpack_require__(16);
var RuleContext_1 = __webpack_require__(20);
var Tree_1 = __webpack_require__(5);
var CPP14Lexer_1 = __webpack_require__(135);
var CPP14Parser_1 = __webpack_require__(136);
var CPP14Visitor_1 = __webpack_require__(80);
var CPP14Mapper = /** @class */function (_super) {
    __extends(CPP14Mapper, _super);
    function CPP14Mapper() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.isDebugMode = false;
        return _this;
    }
    // val List<Comment> _comments = new ArrayList<Comment>;
    // var CommonTokenStream _stream;
    // var UniNode _lastNode;
    // var int _nextTokenIndex;
    /*static class Comment {
        val List<String> contents
        var ParseTree parent
          new(List<String> contents, ParseTree parent) {
            this.contents = contents
            this.parent = parent
        }
    }*/
    CPP14Mapper.prototype.setIsDebugMode = function (isDebugMode) {
        this.isDebugMode = isDebugMode;
    };
    CPP14Mapper.prototype.parse = function (code) {
        var chars = new antlr4_1.InputStream(code);
        var _a = __read(this.parseCore(chars), 2),
            tree = _a[0],
            parser = _a[1];
        return new UniProgram_1.default(this.visit(tree));
    };
    CPP14Mapper.prototype.getRawTree = function (code) {
        var chars = new antlr4_1.InputStream(code);
        return this.parseCore(chars);
    };
    CPP14Mapper.prototype.parseCore = function (chars) {
        var lexer = new CPP14Lexer_1.CPP14Lexer(chars);
        var tokens = new antlr4_1.CommonTokenStream(lexer);
        this.parser = new CPP14Parser_1.CPP14Parser(tokens);
        this.parser.buildParseTrees = true;
        var tree = this.parser.translationunit();
        return [tree, this.parser];
    };
    /*def parseFile(String path) {
        val inputStream = new FileInputStream(path)
        try {
            parseCore(new ANTLRInputStream(inputStream))
        } finally {
            inputStream.close
        }
    }
      def parseCore(CharStream chars) {
        parseCore(chars, [parser|parser.translationunit])
    }
      def parse(String code, Function1<CPP14Parser, ParseTree> parseAction) {
        parseCore(new ANTLRInputStream(code), parseAction)
    }
      def parseFile(String path, Function1<CPP14Parser, ParseTree> parseAction) {
        val inputStream = new FileInputStream(path)
        try {
            parseCore(new ANTLRInputStream(inputStream), parseAction)
        } finally {
            inputStream.close
        }
    }
      def parseCore(CharStream chars, Function1<CPP14Parser, ParseTree> parseAction) {
        val lexer = new CPP14Lexer(chars)
        val tokens = new CommonTokenStream(lexer)
        val parser = new CPP14Parser(tokens)
        val tree = parseAction.apply(parser) // parse
        _comments.clear()
        _stream = tokens
        _lastNode = null
        _nextTokenIndex = 0
          val ret = tree.visit.flatten
          if (_lastNode !== null) {
            val count = _stream.size - 1
            for (var i = _nextTokenIndex; i < count; i++) {
                val hiddenToken = _stream.get(i) // Includes skipped tokens (maybe)
                if (_lastNode.comments === null) {
                    _lastNode.comments = newArrayList
                }
                _lastNode.comments += hiddenToken.text
            }
        }
        ret
    }*/
    CPP14Mapper.prototype.visitChildren = function (node) {
        var n = node.getChildCount();
        var list = [];
        for (var i = 0; i < n; ++i) {
            var c = node.getChild(i);
            var childResult = this.visit(c);
            list.push(childResult);
        }
        var flatten = this.flatten(list);
        return flatten;
    };
    CPP14Mapper.prototype.visit = function (node) {
        if (!this.isDebugMode) {
            return node.accept(this);
        }
        if (!(node instanceof RuleContext_1.RuleContext)) {
            return node.accept(this);
        }
        var ruleName = this.getRuleName(node);
        console.log('*** visit Rule : ' + ruleName + ' ***');
        var ret = node.accept(this);
        console.log('returned: ' + ret);
        return ret;
        /*val node = if (result instanceof List<?>) {
                if(result.size == 1) result.get(0) else result
            } else {
                result
            }
        if (node instanceof UniNode) {
            if (tree instanceof RuleContext)
            {
                val start = (tree as ParserRuleContext).start
                val stop = (tree as ParserRuleContext).stop
                val begin = new CodeLocation(start.charPositionInLine,start.line)
                val endPos = stop.charPositionInLine
                val length = 1 + stop.stopIndex - stop.startIndex
                val end = new CodeLocation(endPos + length, stop.line)
                node.codeRange = new CodeRange(begin,end)
            }
            var List<String> contents = newArrayList
            for (var i = _comments.size - 1; i >= 0 && _comments.get(i).parent == tree; i--) {
                _comments.get(i).contents += contents
                contents = _comments.get(i).contents
                _comments.remove(i)
            }
            if (contents.size > 0) {
                if (node.comments === null) {
                    node.comments = contents
                } else {
                    node.comments += contents
                }
            }
            _lastNode = node
        } else {
            for (var i = _comments.size - 1; i >= 0 && _comments.get(i).parent == tree; i--) {
                _comments.get(i).parent = _comments.get(i).parent.parent
            }
            _lastNode = null
        }
          result*/
    };
    CPP14Mapper.prototype.isNonEmptyNode = function (node) {
        if (node instanceof antlr4_1.ParserRuleContext) {
            var n = node.getChildCount();
            if (n > 1) {
                return true;
            }
            // n === 1 && node.children.exists[isNonEmptyNode]
            return n === 1;
        } else {
            return true;
        }
    };
    CPP14Mapper.prototype.getRuleName = function (node) {
        return this.parser.ruleNames[node.ruleIndex];
    };
    CPP14Mapper.prototype.visitTerminal = function (node) {
        if (this.isDebugMode) {
            console.log("visit TERMINAL : " + node.text);
        }
        var token = node.symbol;
        /*if (token.type > 0) {
            val count = token.tokenIndex
            val List<String> contents = newArrayList
            var i = _nextTokenIndex
            for (; i < count; i++) {
                val hiddenToken = _stream.get(i) // Includes skipped tokens (maybe)
                if (_lastNode !== null && _stream.get(_nextTokenIndex - 1).line == hiddenToken.line) {
                    if (_lastNode.comments === null) {
                        _lastNode.comments = newArrayList
                    }
                    _lastNode.comments += hiddenToken.text
                } else {
                    contents += hiddenToken.text
                }
            }
            val count2 = _stream.size - 1
            for (i = count + 1; i < count2 && _stream.get(i).channel == Token.HIDDEN_CHANNEL &&
                _stream.get(count).line == _stream.get(i).line; i++) {
                contents += _stream.get(i).text
            }
            if (contents.size > 0) {
                _comments.add(new Comment(contents, node.parent))
            }
            _nextTokenIndex = i
        }*/
        return token.text;
    };
    CPP14Mapper.prototype.flatten = function (obj) {
        var _this = this;
        if (Array.isArray(obj)) {
            if (obj.length === 1) {
                return this.flatten(obj[0]);
            }
            var ret_1 = [];
            obj.forEach(function (it) {
                ret_1.push(_this.flatten(it));
            });
            return ret_1;
        }
        if (obj instanceof Map) {
            if (obj.size === 1) {
                try {
                    for (var _a = __values(obj.values()), _b = _a.next(); !_b.done; _b = _a.next()) {
                        var value = _b.value;
                        return this.flatten(value);
                    }
                } catch (e_1_1) {
                    e_1 = { error: e_1_1 };
                } finally {
                    try {
                        if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
                    } finally {
                        if (e_1) throw e_1.error;
                    }
                }
            }
            var ret_2 = new Map();
            obj.forEach(function (value, key) {
                ret_2.set(key, _this.flatten(value));
            });
            return ret_2;
        }
        return obj;
        var e_1, _c;
    };
    // tslint:disable-next-line:prefer-array-literal
    CPP14Mapper.prototype.castToList = function (obj, clazz) {
        var _this = this;
        var temp = this.flatten(obj);
        var ret = [];
        if (temp instanceof Map) {
            var add_1 = temp.has('add');
            temp.forEach(function (value, key) {
                switch (key) {
                    case 'add':
                        {
                            if (value instanceof Map) {
                                ret.push(_this.castTo(value, clazz));
                            } else if (Array.isArray(value)) {
                                value.forEach(function (it) {
                                    var t = _this.castTo(it, clazz);
                                    if (t != null) {
                                        ret.push(t);
                                    }
                                });
                            } else {
                                ret.push(_this.castToList(value, clazz));
                            }
                        }
                        break;
                    default:
                        if (!add_1) {
                            ret.push(_this.castToList(value, clazz));
                        }
                        break;
                }
            });
        } else if (Array.isArray(temp)) {
            temp.forEach(function (it) {
                ret.push(_this.castToList(it, clazz));
            });
        } else {
            ret.push(this.castTo(temp, clazz));
        }
        return ret;
    };
    CPP14Mapper.prototype.castTo = function (obj, clazz) {
        var _this = this;
        var temp = this.flatten(obj);
        var instance = new clazz();
        var fields = instance.fields;
        var fieldsName = [];
        for (var it in instance) {
            fieldsName.push(it);
        }
        if (temp instanceof Map) {
            if (clazz === String) {
                var builder_1 = '';
                var hasAdd_1 = temp.has('add');
                temp.forEach(function (value, key) {
                    switch (key) {
                        case 'add':
                            {
                                builder_1 += _this.castTo(value, clazz);
                            }
                            break;
                        default:
                            {
                                if (!hasAdd_1) {
                                    builder_1 += _this.castTo(value, clazz);
                                }
                            }
                            break;
                    }
                });
                return builder_1.length > 0 ? builder_1 : null;
            }
            temp.forEach(function (value, key) {
                if (fieldsName.includes(key)) {
                    var field = fields.get(key);
                    if (Array.isArray(instance[key])) {
                        var list = _this.flatten(_this.castToList(value, field));
                        if (!Array.isArray(list)) {
                            instance[key] = [list];
                        } else {
                            instance[key] = list;
                        }
                    } else if (value.length == 0 && (field == UniExpr_1.default || field == UniStatement_1.default)) {
                        instance[key] = null;
                    } else {
                        instance[key] = _this.castTo(value, field);
                    }
                }
            });
            return instance;
        }
        if (Array.isArray(temp)) {
            if (clazz === String) {
                var builder_2 = '';
                temp.forEach(function (it) {
                    builder_2 += _this.castTo(it, clazz);
                });
                return builder_2.length > 0 ? builder_2 : null;
            }
            var first = temp.find(function (it) {
                return it instanceof clazz;
            });
            if (first === null) {
                try {
                    return instance;
                } catch (e) {
                    return null;
                }
            } else {
                return this.castTo(first, clazz);
            }
        }
        if (temp != null) {
            return temp;
        }
        return instance;
    };
    CPP14Mapper.prototype.visitTranslationunit = function (ctx) {
        var map = new Map();
        var none = [];
        map.set("none", none);
        var body = [];
        map.set("body", body);
        var n = ctx.getChildCount();
        for (var i = 0; i < n; ++i) {
            var it = ctx.getChild(i);
            if (it instanceof RuleContext_1.RuleContext) {
                switch (it.invokingState) {
                    case 462:
                        {
                            body.push(this.visit(it));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            } else if (it instanceof Tree_1.TerminalNode) {
                switch (it.symbol.type) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        var node = this.castTo(map, UniBlock_1.default);
        return node;
    };
    CPP14Mapper.prototype.visitPrimaryexpression = function (ctx) {
        var map = new Map();
        var none = [];
        map.set("none", none);
        var ret = [];
        var n = ctx.getChildCount();
        for (var i = 0; i < n; ++i) {
            var it = ctx.getChild(i);
            if (it instanceof RuleContext_1.RuleContext) {
                switch (it.invokingState) {
                    case 465:
                        {
                            ret.push(this.visit(it));
                        }
                        break;
                    case 468:
                        {
                            ret.push(this.visit(it));
                        }
                        break;
                    case 471:
                        {
                            ret.push(this.visit(it));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            } else if (it instanceof Tree_1.TerminalNode) {
                switch (it.symbol.type) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        if (ret.length != 0) {
            return ret;
        }
        var node = this.castTo(map, UniUnaryOp_1.default);
        return node;
    };
    CPP14Mapper.prototype.visitIdentexpression = function (ctx) {
        var map = new Map();
        var none = [];
        map.set("none", none);
        var name = [];
        map.set("name", name);
        var n = ctx.getChildCount();
        for (var i = 0; i < n; ++i) {
            var it = ctx.getChild(i);
            if (it instanceof RuleContext_1.RuleContext) {
                switch (it.invokingState) {
                    case 479:
                        {
                            name.push(this.visit(it));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            } else if (it instanceof Tree_1.TerminalNode) {
                switch (it.symbol.type) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        var node = this.castTo(map, UniIdent_1.default);
        return node;
    };
    CPP14Mapper.prototype.visitIdexpressionlapper = function (ctx) {
        var map = new Map();
        var none = [];
        map.set("none", none);
        var name = [];
        map.set("name", name);
        var n = ctx.getChildCount();
        for (var i = 0; i < n; ++i) {
            var it = ctx.getChild(i);
            if (it instanceof RuleContext_1.RuleContext) {
                switch (it.invokingState) {
                    case 598:
                        {
                            name.push(this.visit(it));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            } else if (it instanceof Tree_1.TerminalNode) {
                switch (it.symbol.type) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        var node = this.castTo(map, UniIdent_1.default);
        return node;
    };
    CPP14Mapper.prototype.visitFunctioncallexpression = function (ctx) {
        var map = new Map();
        var none = [];
        map.set("none", none);
        var args = [];
        map.set("args", args);
        var methodName = [];
        map.set("methodName", methodName);
        var n = ctx.getChildCount();
        for (var i = 0; i < n; ++i) {
            var it = ctx.getChild(i);
            if (it instanceof RuleContext_1.RuleContext) {
                switch (it.invokingState) {
                    case 600:
                        {
                            methodName.push(this.visit(it));
                        }
                        break;
                    case 602:
                        {
                            args.push(this.visit(it));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            } else if (it instanceof Tree_1.TerminalNode) {
                switch (it.symbol.type) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        var node = this.castTo(map, UniMethodCall_1.default);
        return node;
    };
    CPP14Mapper.prototype.visitPostfixexpression = function (ctx) {
        var map = new Map();
        var none = [];
        map.set("none", none);
        var ret = [];
        var left = [];
        map.set("left", left);
        var right = [];
        map.set("right", right);
        var operator = [];
        map.set("operator", operator);
        var n = ctx.getChildCount();
        for (var i = 0; i < n; ++i) {
            var it = ctx.getChild(i);
            if (it instanceof RuleContext_1.RuleContext) {
                switch (it.invokingState) {
                    case 608:
                        {
                            ret.push(this.visit(it));
                        }
                        break;
                    case 609:
                        {
                            ret.push(this.visit(it));
                        }
                        break;
                    case 36:
                        {
                            left.push(this.visit(it));
                        }
                        break;
                    case 676:
                        {
                            right.push(this.visit(it));
                        }
                        break;
                    case 689:
                        {
                            right.push(this.visit(it));
                        }
                        break;
                    case 695:
                        {
                            right.push(this.visit(it));
                        }
                        break;
                    case 698:
                        {
                            right.push(this.visit(it));
                        }
                        break;
                    case 701:
                        {
                            right.push(this.visit(it));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            } else if (it instanceof Tree_1.TerminalNode) {
                switch (it.symbol.type) {
                    case CPP14Parser_1.CPP14Parser.LeftBracket:
                        {
                            operator.push(this.flatten(this.visit(it)));
                        }
                        break;
                    case CPP14Parser_1.CPP14Parser.RightBracket:
                        {
                            operator.push(this.flatten(this.visit(it)));
                        }
                        break;
                    case CPP14Parser_1.CPP14Parser.Dot:
                        {
                            operator.push(this.flatten(this.visit(it)));
                        }
                        break;
                    case CPP14Parser_1.CPP14Parser.Arrow:
                        {
                            operator.push(this.flatten(this.visit(it)));
                        }
                        break;
                    case CPP14Parser_1.CPP14Parser.PlusPlus:
                        {
                            operator.push(this.flatten(this.visit(it)));
                        }
                        break;
                    case CPP14Parser_1.CPP14Parser.MinusMinus:
                        {
                            operator.push(this.flatten(this.visit(it)));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        if (ret.length != 0) {
            return ret;
        }
        var node = this.castTo(map, UniBinOp_1.default);
        return node;
    };
    CPP14Mapper.prototype.visitExpressionlist = function (ctx) {
        var map = new Map();
        var none = [];
        map.set("none", none);
        var items = [];
        map.set("items", items);
        var n = ctx.getChildCount();
        for (var i = 0; i < n; ++i) {
            var it = ctx.getChild(i);
            if (it instanceof RuleContext_1.RuleContext) {
                switch (it.invokingState) {
                    case 711:
                        {
                            items.push(this.visit(it));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            } else if (it instanceof Tree_1.TerminalNode) {
                switch (it.symbol.type) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        var node = this.castTo(map, UniArray_1.default);
        return node;
    };
    CPP14Mapper.prototype.visitBinaryexpression = function (ctx) {
        var map = new Map();
        var none = [];
        map.set("none", none);
        var ret = [];
        var n = ctx.getChildCount();
        for (var i = 0; i < n; ++i) {
            var it = ctx.getChild(i);
            if (it instanceof RuleContext_1.RuleContext) {
                switch (it.invokingState) {
                    case 737:
                        {
                            ret.push(this.visit(it));
                        }
                        break;
                    case 738:
                        {
                            ret.push(this.visit(it));
                        }
                        break;
                    case 739:
                        {
                            ret.push(this.visit(it));
                        }
                        break;
                    case 740:
                        {
                            ret.push(this.visit(it));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            } else if (it instanceof Tree_1.TerminalNode) {
                switch (it.symbol.type) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        if (ret.length != 0) {
            return ret;
        }
        var node = this.castTo(map, UniBinOp_1.default);
        return node;
    };
    CPP14Mapper.prototype.visitUnaryexpression = function (ctx) {
        var map = new Map();
        var none = [];
        map.set("none", none);
        var ret = [];
        var expr = [];
        map.set("expr", expr);
        var operator = [];
        map.set("operator", operator);
        var n = ctx.getChildCount();
        for (var i = 0; i < n; ++i) {
            var it = ctx.getChild(i);
            if (it instanceof RuleContext_1.RuleContext) {
                switch (it.invokingState) {
                    case 744:
                        {
                            expr.push(this.visit(it));
                        }
                        break;
                    case 746:
                        {
                            expr.push(this.visit(it));
                        }
                        break;
                    case 747:
                        {
                            operator.push(this.visit(it));
                        }
                        break;
                    case 748:
                        {
                            expr.push(this.visit(it));
                        }
                        break;
                    case 751:
                        {
                            expr.push(this.visit(it));
                        }
                        break;
                    case 754:
                        {
                            expr.push(this.visit(it));
                        }
                        break;
                    case 759:
                        {
                            expr.push(this.visit(it));
                        }
                        break;
                    case 769:
                        {
                            expr.push(this.visit(it));
                        }
                        break;
                    case 772:
                        {
                            ret.push(this.visit(it));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            } else if (it instanceof Tree_1.TerminalNode) {
                switch (it.symbol.type) {
                    case CPP14Parser_1.CPP14Parser.PlusPlus:
                        {
                            operator.push(this.flatten(this.visit(it)));
                        }
                        break;
                    case CPP14Parser_1.CPP14Parser.MinusMinus:
                        {
                            operator.push(this.flatten(this.visit(it)));
                        }
                        break;
                    case CPP14Parser_1.CPP14Parser.Sizeof:
                        {
                            operator.push(this.flatten(this.visit(it)));
                        }
                        break;
                    case CPP14Parser_1.CPP14Parser.Identifier:
                        {
                            expr.push(this.flatten(this.visit(it)));
                        }
                        break;
                    case CPP14Parser_1.CPP14Parser.Alignof:
                        {
                            operator.push(this.flatten(this.visit(it)));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        if (ret.length != 0) {
            return ret;
        }
        var node = this.castTo(map, UniUnaryOp_1.default);
        return node;
    };
    CPP14Mapper.prototype.visitTypeidlapper = function (ctx) {
        var map = new Map();
        var none = [];
        map.set("none", none);
        var name = [];
        map.set("name", name);
        var n = ctx.getChildCount();
        for (var i = 0; i < n; ++i) {
            var it = ctx.getChild(i);
            if (it instanceof RuleContext_1.RuleContext) {
                switch (it.invokingState) {
                    case 775:
                        {
                            name.push(this.visit(it));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            } else if (it instanceof Tree_1.TerminalNode) {
                switch (it.symbol.type) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        var node = this.castTo(map, UniIdent_1.default);
        return node;
    };
    CPP14Mapper.prototype.visitCastexpression = function (ctx) {
        var map = new Map();
        var none = [];
        map.set("none", none);
        var ret = [];
        var type = [];
        map.set("type", type);
        var value = [];
        map.set("value", value);
        var operator = [];
        map.set("operator", operator);
        var n = ctx.getChildCount();
        for (var i = 0; i < n; ++i) {
            var it = ctx.getChild(i);
            if (it instanceof RuleContext_1.RuleContext) {
                switch (it.invokingState) {
                    case 866:
                        {
                            ret.push(this.visit(it));
                        }
                        break;
                    case 868:
                        {
                            type.push(this.visit(it));
                        }
                        break;
                    case 870:
                        {
                            value.push(this.visit(it));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            } else if (it instanceof Tree_1.TerminalNode) {
                switch (it.symbol.type) {
                    case CPP14Parser_1.CPP14Parser.RightParen:
                        {
                            operator.push(this.flatten(this.visit(it)));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        if (ret.length != 0) {
            return ret;
        }
        var node = this.castTo(map, UniCast_1.default);
        return node;
    };
    CPP14Mapper.prototype.visitPmexpression = function (ctx) {
        var map = new Map();
        var none = [];
        map.set("none", none);
        var ret = [];
        var left = [];
        map.set("left", left);
        var right = [];
        map.set("right", right);
        var operator = [];
        map.set("operator", operator);
        var n = ctx.getChildCount();
        for (var i = 0; i < n; ++i) {
            var it = ctx.getChild(i);
            if (it instanceof RuleContext_1.RuleContext) {
                switch (it.invokingState) {
                    case 875:
                        {
                            ret.push(this.visit(it));
                        }
                        break;
                    case 68:
                        {
                            left.push(this.visit(it));
                        }
                        break;
                    case 879:
                        {
                            right.push(this.visit(it));
                        }
                        break;
                    case 882:
                        {
                            right.push(this.visit(it));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            } else if (it instanceof Tree_1.TerminalNode) {
                switch (it.symbol.type) {
                    case CPP14Parser_1.CPP14Parser.DotStar:
                        {
                            operator.push(this.flatten(this.visit(it)));
                        }
                        break;
                    case CPP14Parser_1.CPP14Parser.ArrowStar:
                        {
                            operator.push(this.flatten(this.visit(it)));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        if (ret.length != 0) {
            return ret;
        }
        var node = this.castTo(map, UniBinOp_1.default);
        return node;
    };
    CPP14Mapper.prototype.visitMultiplicativeexpression = function (ctx) {
        var map = new Map();
        var none = [];
        map.set("none", none);
        var ret = [];
        var left = [];
        map.set("left", left);
        var right = [];
        map.set("right", right);
        var operator = [];
        map.set("operator", operator);
        var n = ctx.getChildCount();
        for (var i = 0; i < n; ++i) {
            var it = ctx.getChild(i);
            if (it instanceof RuleContext_1.RuleContext) {
                switch (it.invokingState) {
                    case 889:
                        {
                            ret.push(this.visit(it));
                        }
                        break;
                    case 70:
                        {
                            left.push(this.visit(it));
                        }
                        break;
                    case 893:
                        {
                            right.push(this.visit(it));
                        }
                        break;
                    case 896:
                        {
                            right.push(this.visit(it));
                        }
                        break;
                    case 899:
                        {
                            right.push(this.visit(it));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            } else if (it instanceof Tree_1.TerminalNode) {
                switch (it.symbol.type) {
                    case CPP14Parser_1.CPP14Parser.Star:
                        {
                            operator.push(this.flatten(this.visit(it)));
                        }
                        break;
                    case CPP14Parser_1.CPP14Parser.Div:
                        {
                            operator.push(this.flatten(this.visit(it)));
                        }
                        break;
                    case CPP14Parser_1.CPP14Parser.Mod:
                        {
                            operator.push(this.flatten(this.visit(it)));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        if (ret.length != 0) {
            return ret;
        }
        var node = this.castTo(map, UniBinOp_1.default);
        return node;
    };
    CPP14Mapper.prototype.visitAdditiveexpression = function (ctx) {
        var map = new Map();
        var none = [];
        map.set("none", none);
        var ret = [];
        var left = [];
        map.set("left", left);
        var right = [];
        map.set("right", right);
        var operator = [];
        map.set("operator", operator);
        var n = ctx.getChildCount();
        for (var i = 0; i < n; ++i) {
            var it = ctx.getChild(i);
            if (it instanceof RuleContext_1.RuleContext) {
                switch (it.invokingState) {
                    case 906:
                        {
                            ret.push(this.visit(it));
                        }
                        break;
                    case 72:
                        {
                            left.push(this.visit(it));
                        }
                        break;
                    case 910:
                        {
                            right.push(this.visit(it));
                        }
                        break;
                    case 913:
                        {
                            right.push(this.visit(it));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            } else if (it instanceof Tree_1.TerminalNode) {
                switch (it.symbol.type) {
                    case CPP14Parser_1.CPP14Parser.Plus:
                        {
                            operator.push(this.flatten(this.visit(it)));
                        }
                        break;
                    case CPP14Parser_1.CPP14Parser.Minus:
                        {
                            operator.push(this.flatten(this.visit(it)));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        if (ret.length != 0) {
            return ret;
        }
        var node = this.castTo(map, UniBinOp_1.default);
        return node;
    };
    CPP14Mapper.prototype.visitShiftexpression = function (ctx) {
        var map = new Map();
        var none = [];
        map.set("none", none);
        var ret = [];
        var left = [];
        map.set("left", left);
        var right = [];
        map.set("right", right);
        var operator = [];
        map.set("operator", operator);
        var n = ctx.getChildCount();
        for (var i = 0; i < n; ++i) {
            var it = ctx.getChild(i);
            if (it instanceof RuleContext_1.RuleContext) {
                switch (it.invokingState) {
                    case 920:
                        {
                            ret.push(this.visit(it));
                        }
                        break;
                    case 74:
                        {
                            left.push(this.visit(it));
                        }
                        break;
                    case 924:
                        {
                            right.push(this.visit(it));
                        }
                        break;
                    case 926:
                        {
                            operator.push(this.visit(it));
                        }
                        break;
                    case 927:
                        {
                            right.push(this.visit(it));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            } else if (it instanceof Tree_1.TerminalNode) {
                switch (it.symbol.type) {
                    case CPP14Parser_1.CPP14Parser.LeftShift:
                        {
                            operator.push(this.flatten(this.visit(it)));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        if (ret.length != 0) {
            return ret;
        }
        var node = this.castTo(map, UniBinOp_1.default);
        return node;
    };
    CPP14Mapper.prototype.visitRelationalexpression = function (ctx) {
        var map = new Map();
        var none = [];
        map.set("none", none);
        var ret = [];
        var left = [];
        map.set("left", left);
        var right = [];
        map.set("right", right);
        var operator = [];
        map.set("operator", operator);
        var n = ctx.getChildCount();
        for (var i = 0; i < n; ++i) {
            var it = ctx.getChild(i);
            if (it instanceof RuleContext_1.RuleContext) {
                switch (it.invokingState) {
                    case 935:
                        {
                            ret.push(this.visit(it));
                        }
                        break;
                    case 76:
                        {
                            left.push(this.visit(it));
                        }
                        break;
                    case 939:
                        {
                            right.push(this.visit(it));
                        }
                        break;
                    case 942:
                        {
                            right.push(this.visit(it));
                        }
                        break;
                    case 945:
                        {
                            right.push(this.visit(it));
                        }
                        break;
                    case 948:
                        {
                            right.push(this.visit(it));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            } else if (it instanceof Tree_1.TerminalNode) {
                switch (it.symbol.type) {
                    case CPP14Parser_1.CPP14Parser.Less:
                        {
                            operator.push(this.flatten(this.visit(it)));
                        }
                        break;
                    case CPP14Parser_1.CPP14Parser.Greater:
                        {
                            operator.push(this.flatten(this.visit(it)));
                        }
                        break;
                    case CPP14Parser_1.CPP14Parser.LessEqual:
                        {
                            operator.push(this.flatten(this.visit(it)));
                        }
                        break;
                    case CPP14Parser_1.CPP14Parser.GreaterEqual:
                        {
                            operator.push(this.flatten(this.visit(it)));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        if (ret.length != 0) {
            return ret;
        }
        var node = this.castTo(map, UniBinOp_1.default);
        return node;
    };
    CPP14Mapper.prototype.visitEqualityexpression = function (ctx) {
        var map = new Map();
        var none = [];
        map.set("none", none);
        var ret = [];
        var left = [];
        map.set("left", left);
        var right = [];
        map.set("right", right);
        var operator = [];
        map.set("operator", operator);
        var n = ctx.getChildCount();
        for (var i = 0; i < n; ++i) {
            var it = ctx.getChild(i);
            if (it instanceof RuleContext_1.RuleContext) {
                switch (it.invokingState) {
                    case 955:
                        {
                            ret.push(this.visit(it));
                        }
                        break;
                    case 78:
                        {
                            left.push(this.visit(it));
                        }
                        break;
                    case 959:
                        {
                            right.push(this.visit(it));
                        }
                        break;
                    case 962:
                        {
                            right.push(this.visit(it));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            } else if (it instanceof Tree_1.TerminalNode) {
                switch (it.symbol.type) {
                    case CPP14Parser_1.CPP14Parser.Equal:
                        {
                            operator.push(this.flatten(this.visit(it)));
                        }
                        break;
                    case CPP14Parser_1.CPP14Parser.NotEqual:
                        {
                            operator.push(this.flatten(this.visit(it)));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        if (ret.length != 0) {
            return ret;
        }
        var node = this.castTo(map, UniBinOp_1.default);
        return node;
    };
    CPP14Mapper.prototype.visitAndexpression = function (ctx) {
        var map = new Map();
        var none = [];
        map.set("none", none);
        var ret = [];
        var left = [];
        map.set("left", left);
        var right = [];
        map.set("right", right);
        var operator = [];
        map.set("operator", operator);
        var n = ctx.getChildCount();
        for (var i = 0; i < n; ++i) {
            var it = ctx.getChild(i);
            if (it instanceof RuleContext_1.RuleContext) {
                switch (it.invokingState) {
                    case 969:
                        {
                            ret.push(this.visit(it));
                        }
                        break;
                    case 80:
                        {
                            left.push(this.visit(it));
                        }
                        break;
                    case 973:
                        {
                            right.push(this.visit(it));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            } else if (it instanceof Tree_1.TerminalNode) {
                switch (it.symbol.type) {
                    case CPP14Parser_1.CPP14Parser.And:
                        {
                            operator.push(this.flatten(this.visit(it)));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        if (ret.length != 0) {
            return ret;
        }
        var node = this.castTo(map, UniBinOp_1.default);
        return node;
    };
    CPP14Mapper.prototype.visitExclusiveorexpression = function (ctx) {
        var map = new Map();
        var none = [];
        map.set("none", none);
        var ret = [];
        var left = [];
        map.set("left", left);
        var right = [];
        map.set("right", right);
        var operator = [];
        map.set("operator", operator);
        var n = ctx.getChildCount();
        for (var i = 0; i < n; ++i) {
            var it = ctx.getChild(i);
            if (it instanceof RuleContext_1.RuleContext) {
                switch (it.invokingState) {
                    case 980:
                        {
                            ret.push(this.visit(it));
                        }
                        break;
                    case 82:
                        {
                            left.push(this.visit(it));
                        }
                        break;
                    case 984:
                        {
                            right.push(this.visit(it));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            } else if (it instanceof Tree_1.TerminalNode) {
                switch (it.symbol.type) {
                    case CPP14Parser_1.CPP14Parser.Caret:
                        {
                            operator.push(this.flatten(this.visit(it)));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        if (ret.length != 0) {
            return ret;
        }
        var node = this.castTo(map, UniBinOp_1.default);
        return node;
    };
    CPP14Mapper.prototype.visitInclusiveorexpression = function (ctx) {
        var map = new Map();
        var none = [];
        map.set("none", none);
        var ret = [];
        var left = [];
        map.set("left", left);
        var right = [];
        map.set("right", right);
        var operator = [];
        map.set("operator", operator);
        var n = ctx.getChildCount();
        for (var i = 0; i < n; ++i) {
            var it = ctx.getChild(i);
            if (it instanceof RuleContext_1.RuleContext) {
                switch (it.invokingState) {
                    case 991:
                        {
                            ret.push(this.visit(it));
                        }
                        break;
                    case 84:
                        {
                            left.push(this.visit(it));
                        }
                        break;
                    case 995:
                        {
                            right.push(this.visit(it));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            } else if (it instanceof Tree_1.TerminalNode) {
                switch (it.symbol.type) {
                    case CPP14Parser_1.CPP14Parser.Or:
                        {
                            operator.push(this.flatten(this.visit(it)));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        if (ret.length != 0) {
            return ret;
        }
        var node = this.castTo(map, UniBinOp_1.default);
        return node;
    };
    CPP14Mapper.prototype.visitLogicalandexpression = function (ctx) {
        var map = new Map();
        var none = [];
        map.set("none", none);
        var ret = [];
        var left = [];
        map.set("left", left);
        var right = [];
        map.set("right", right);
        var operator = [];
        map.set("operator", operator);
        var n = ctx.getChildCount();
        for (var i = 0; i < n; ++i) {
            var it = ctx.getChild(i);
            if (it instanceof RuleContext_1.RuleContext) {
                switch (it.invokingState) {
                    case 1002:
                        {
                            ret.push(this.visit(it));
                        }
                        break;
                    case 86:
                        {
                            left.push(this.visit(it));
                        }
                        break;
                    case 1006:
                        {
                            right.push(this.visit(it));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            } else if (it instanceof Tree_1.TerminalNode) {
                switch (it.symbol.type) {
                    case CPP14Parser_1.CPP14Parser.AndAnd:
                        {
                            operator.push(this.flatten(this.visit(it)));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        if (ret.length != 0) {
            return ret;
        }
        var node = this.castTo(map, UniBinOp_1.default);
        return node;
    };
    CPP14Mapper.prototype.visitLogicalorexpression = function (ctx) {
        var map = new Map();
        var none = [];
        map.set("none", none);
        var ret = [];
        var left = [];
        map.set("left", left);
        var right = [];
        map.set("right", right);
        var operator = [];
        map.set("operator", operator);
        var n = ctx.getChildCount();
        for (var i = 0; i < n; ++i) {
            var it = ctx.getChild(i);
            if (it instanceof RuleContext_1.RuleContext) {
                switch (it.invokingState) {
                    case 1013:
                        {
                            ret.push(this.visit(it));
                        }
                        break;
                    case 88:
                        {
                            left.push(this.visit(it));
                        }
                        break;
                    case 1017:
                        {
                            right.push(this.visit(it));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            } else if (it instanceof Tree_1.TerminalNode) {
                switch (it.symbol.type) {
                    case CPP14Parser_1.CPP14Parser.OrOr:
                        {
                            operator.push(this.flatten(this.visit(it)));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        if (ret.length != 0) {
            return ret;
        }
        var node = this.castTo(map, UniBinOp_1.default);
        return node;
    };
    CPP14Mapper.prototype.visitConditionalexpression = function (ctx) {
        var map = new Map();
        var none = [];
        map.set("none", none);
        var ret = [];
        var trueExpr = [];
        map.set("trueExpr", trueExpr);
        var cond = [];
        map.set("cond", cond);
        var falseExpr = [];
        map.set("falseExpr", falseExpr);
        var n = ctx.getChildCount();
        for (var i = 0; i < n; ++i) {
            var it = ctx.getChild(i);
            if (it instanceof RuleContext_1.RuleContext) {
                switch (it.invokingState) {
                    case 1023:
                        {
                            ret.push(this.visit(it));
                        }
                        break;
                    case 1024:
                        {
                            cond.push(this.visit(it));
                        }
                        break;
                    case 1028:
                        {
                            falseExpr.push(this.visit(it));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            } else if (it instanceof Tree_1.TerminalNode) {
                switch (it.symbol.type) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        if (ret.length != 0) {
            return ret;
        }
        var node = this.castTo(map, UniTernaryOp_1.default);
        return node;
    };
    CPP14Mapper.prototype.visitAssignmentexpression = function (ctx) {
        var map = new Map();
        var none = [];
        map.set("none", none);
        var ret = [];
        var left = [];
        map.set("left", left);
        var right = [];
        map.set("right", right);
        var operator = [];
        map.set("operator", operator);
        var n = ctx.getChildCount();
        for (var i = 0; i < n; ++i) {
            var it = ctx.getChild(i);
            if (it instanceof RuleContext_1.RuleContext) {
                switch (it.invokingState) {
                    case 1032:
                        {
                            ret.push(this.visit(it));
                        }
                        break;
                    case 1033:
                        {
                            left.push(this.visit(it));
                        }
                        break;
                    case 1034:
                        {
                            operator.push(this.visit(it));
                        }
                        break;
                    case 1035:
                        {
                            right.push(this.visit(it));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            } else if (it instanceof Tree_1.TerminalNode) {
                switch (it.symbol.type) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        if (ret.length != 0) {
            return ret;
        }
        var node = this.castTo(map, UniBinOp_1.default);
        return node;
    };
    CPP14Mapper.prototype.visitExpressionstatement = function (ctx) {
        var map = new Map();
        var none = [];
        map.set("none", none);
        var ret = [];
        var n = ctx.getChildCount();
        for (var i = 0; i < n; ++i) {
            var it = ctx.getChild(i);
            if (it instanceof RuleContext_1.RuleContext) {
                switch (it.invokingState) {
                    case 1141:
                        {
                            ret.push(this.visit(it));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            } else if (it instanceof Tree_1.TerminalNode) {
                switch (it.symbol.type) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        if (ret.length != 0) {
            return ret;
        }
        return map;
    };
    CPP14Mapper.prototype.visitCompoundstatement = function (ctx) {
        var map = new Map();
        var none = [];
        map.set("none", none);
        var body = [];
        map.set("body", body);
        var n = ctx.getChildCount();
        for (var i = 0; i < n; ++i) {
            var it = ctx.getChild(i);
            if (it instanceof RuleContext_1.RuleContext) {
                switch (it.invokingState) {
                    case 1147:
                        {
                            body.push(this.visit(it));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            } else if (it instanceof Tree_1.TerminalNode) {
                switch (it.symbol.type) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        var node = this.castTo(map, UniBlock_1.default);
        return node;
    };
    CPP14Mapper.prototype.visitStatementseq = function (ctx) {
        var map = new Map();
        var none = [];
        map.set("none", none);
        var add = [];
        map.set("add", add);
        var n = ctx.getChildCount();
        if (0 < n) {
            for (var i = 0; i < n; ++i) {
                var it = ctx.getChild(i);
                if (it instanceof RuleContext_1.RuleContext) {
                    switch (it.invokingState) {
                        case 1152:
                            {
                                var results = this.flatten(this.visit(it));
                                if (Array.isArray(results)) {
                                    try {
                                        for (var results_1 = __values(results), results_1_1 = results_1.next(); !results_1_1.done; results_1_1 = results_1.next()) {
                                            var result = results_1_1.value;
                                            add.push(result);
                                        }
                                    } catch (e_2_1) {
                                        e_2 = { error: e_2_1 };
                                    } finally {
                                        try {
                                            if (results_1_1 && !results_1_1.done && (_a = results_1.return)) _a.call(results_1);
                                        } finally {
                                            if (e_2) throw e_2.error;
                                        }
                                    }
                                } else add.push(results);
                            }
                            break;
                        case 1153:
                            {
                                var results = this.flatten(this.visit(it));
                                if (Array.isArray(results)) {
                                    try {
                                        for (var results_2 = __values(results), results_2_1 = results_2.next(); !results_2_1.done; results_2_1 = results_2.next()) {
                                            var result = results_2_1.value;
                                            add.push(result);
                                        }
                                    } catch (e_3_1) {
                                        e_3 = { error: e_3_1 };
                                    } finally {
                                        try {
                                            if (results_2_1 && !results_2_1.done && (_b = results_2.return)) _b.call(results_2);
                                        } finally {
                                            if (e_3) throw e_3.error;
                                        }
                                    }
                                } else add.push(results);
                            }
                            break;
                        default:
                            {
                                none.push(this.visit(it));
                            }
                            break;
                    }
                } else if (it instanceof Tree_1.TerminalNode) {
                    switch (it.symbol.type) {
                        default:
                            {
                                none.push(this.visit(it));
                            }
                            break;
                    }
                }
            }
        }
        var node = this.castToList(map, UniExpr_1.default);
        return node;
        var e_2, _a, e_3, _b;
    };
    CPP14Mapper.prototype.visitSelectionstatement = function (ctx) {
        var map = new Map();
        var none = [];
        map.set("none", none);
        var trueStatement = [];
        map.set("trueStatement", trueStatement);
        var falseStatement = [];
        map.set("falseStatement", falseStatement);
        var cond = [];
        map.set("cond", cond);
        var n = ctx.getChildCount();
        for (var i = 0; i < n; ++i) {
            var it = ctx.getChild(i);
            if (it instanceof RuleContext_1.RuleContext) {
                switch (it.invokingState) {
                    case 1161:
                        {
                            cond.push(this.visit(it));
                        }
                        break;
                    case 1163:
                        {
                            trueStatement.push(this.visit(it));
                        }
                        break;
                    case 1167:
                        {
                            cond.push(this.visit(it));
                        }
                        break;
                    case 1169:
                        {
                            trueStatement.push(this.visit(it));
                        }
                        break;
                    case 1171:
                        {
                            falseStatement.push(this.visit(it));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            } else if (it instanceof Tree_1.TerminalNode) {
                switch (it.symbol.type) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        var node = this.castTo(map, UniIf_1.default);
        return node;
    };
    CPP14Mapper.prototype.visitWhilestatement = function (ctx) {
        var map = new Map();
        var none = [];
        map.set("none", none);
        var statement = [];
        map.set("statement", statement);
        var cond = [];
        map.set("cond", cond);
        var n = ctx.getChildCount();
        for (var i = 0; i < n; ++i) {
            var it = ctx.getChild(i);
            if (it instanceof RuleContext_1.RuleContext) {
                switch (it.invokingState) {
                    case 1201:
                        {
                            cond.push(this.visit(it));
                        }
                        break;
                    case 1203:
                        {
                            statement.push(this.visit(it));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            } else if (it instanceof Tree_1.TerminalNode) {
                switch (it.symbol.type) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        var node = this.castTo(map, UniWhile_1.default);
        return node;
    };
    CPP14Mapper.prototype.visitDowhilestatement = function (ctx) {
        var map = new Map();
        var none = [];
        map.set("none", none);
        var statement = [];
        map.set("statement", statement);
        var cond = [];
        map.set("cond", cond);
        var n = ctx.getChildCount();
        for (var i = 0; i < n; ++i) {
            var it = ctx.getChild(i);
            if (it instanceof RuleContext_1.RuleContext) {
                switch (it.invokingState) {
                    case 1206:
                        {
                            statement.push(this.visit(it));
                        }
                        break;
                    case 1209:
                        {
                            cond.push(this.visit(it));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            } else if (it instanceof Tree_1.TerminalNode) {
                switch (it.symbol.type) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        var node = this.castTo(map, UniDoWhile_1.default);
        return node;
    };
    CPP14Mapper.prototype.visitIterationstatement = function (ctx) {
        var map = new Map();
        var none = [];
        map.set("none", none);
        var init = [];
        map.set("init", init);
        var statement = [];
        map.set("statement", statement);
        var step = [];
        map.set("step", step);
        var cond = [];
        map.set("cond", cond);
        var n = ctx.getChildCount();
        for (var i = 0; i < n; ++i) {
            var it = ctx.getChild(i);
            if (it instanceof RuleContext_1.RuleContext) {
                switch (it.invokingState) {
                    case 1215:
                        {
                            init.push(this.visit(it));
                        }
                        break;
                    case 1216:
                        {
                            cond.push(this.visit(it));
                        }
                        break;
                    case 1220:
                        {
                            step.push(this.visit(it));
                        }
                        break;
                    case 1224:
                        {
                            statement.push(this.visit(it));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            } else if (it instanceof Tree_1.TerminalNode) {
                switch (it.symbol.type) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        var node = this.castTo(map, UniFor_1.default);
        return node;
    };
    CPP14Mapper.prototype.visitEnhancedForStatement = function (ctx) {
        var _this = this;
        var map = new Map();
        var none = [];
        map.set("none", none);
        var container = [];
        map.set("container", container);
        var statement = [];
        map.set("statement", statement);
        var merge = [];
        var n = ctx.getChildCount();
        for (var i = 0; i < n; ++i) {
            var it = ctx.getChild(i);
            if (it instanceof RuleContext_1.RuleContext) {
                switch (it.invokingState) {
                    case 1228:
                        {
                            merge.push(this.visit(it));
                        }
                        break;
                    case 1230:
                        {
                            container.push(this.visit(it));
                        }
                        break;
                    case 1232:
                        {
                            statement.push(this.visit(it));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            } else if (it instanceof Tree_1.TerminalNode) {
                switch (it.symbol.type) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        var node = this.castTo(map, UniEnhancedFor_1.default);
        merge.forEach(function (it) {
            node.merge(_this.castTo(it, UniEnhancedFor_1.default));
        });
        return node;
    };
    CPP14Mapper.prototype.visitBreakStatement = function (ctx) {
        var map = new Map();
        var none = [];
        map.set("none", none);
        var n = ctx.getChildCount();
        for (var i = 0; i < n; ++i) {
            var it = ctx.getChild(i);
            if (it instanceof RuleContext_1.RuleContext) {
                switch (it.invokingState) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            } else if (it instanceof Tree_1.TerminalNode) {
                switch (it.symbol.type) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        var node = this.castTo(map, UniBreak_1.default);
        return node;
    };
    CPP14Mapper.prototype.visitContinueStatement = function (ctx) {
        var map = new Map();
        var none = [];
        map.set("none", none);
        var n = ctx.getChildCount();
        for (var i = 0; i < n; ++i) {
            var it = ctx.getChild(i);
            if (it instanceof RuleContext_1.RuleContext) {
                switch (it.invokingState) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            } else if (it instanceof Tree_1.TerminalNode) {
                switch (it.symbol.type) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        var node = this.castTo(map, UniContinue_1.default);
        return node;
    };
    CPP14Mapper.prototype.visitReturnStatement = function (ctx) {
        var map = new Map();
        var none = [];
        map.set("none", none);
        var value = [];
        map.set("value", value);
        var n = ctx.getChildCount();
        for (var i = 0; i < n; ++i) {
            var it = ctx.getChild(i);
            if (it instanceof RuleContext_1.RuleContext) {
                switch (it.invokingState) {
                    case 1260:
                        {
                            value.push(this.visit(it));
                        }
                        break;
                    case 1265:
                        {
                            value.push(this.visit(it));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            } else if (it instanceof Tree_1.TerminalNode) {
                switch (it.symbol.type) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        var node = this.castTo(map, UniReturn_1.default);
        return node;
    };
    CPP14Mapper.prototype.visitDeclarationseq = function (ctx) {
        var map = new Map();
        var none = [];
        map.set("none", none);
        var add = [];
        map.set("add", add);
        var n = ctx.getChildCount();
        if (0 < n) {
            for (var i = 0; i < n; ++i) {
                var it = ctx.getChild(i);
                if (it instanceof RuleContext_1.RuleContext) {
                    switch (it.invokingState) {
                        case 1275:
                            {
                                var results = this.flatten(this.visit(it));
                                if (Array.isArray(results)) {
                                    try {
                                        for (var results_3 = __values(results), results_3_1 = results_3.next(); !results_3_1.done; results_3_1 = results_3.next()) {
                                            var result = results_3_1.value;
                                            add.push(result);
                                        }
                                    } catch (e_4_1) {
                                        e_4 = { error: e_4_1 };
                                    } finally {
                                        try {
                                            if (results_3_1 && !results_3_1.done && (_a = results_3.return)) _a.call(results_3);
                                        } finally {
                                            if (e_4) throw e_4.error;
                                        }
                                    }
                                } else add.push(results);
                            }
                            break;
                        case 140:
                            {
                                var results = this.flatten(this.visit(it));
                                if (Array.isArray(results)) {
                                    try {
                                        for (var results_4 = __values(results), results_4_1 = results_4.next(); !results_4_1.done; results_4_1 = results_4.next()) {
                                            var result = results_4_1.value;
                                            add.push(result);
                                        }
                                    } catch (e_5_1) {
                                        e_5 = { error: e_5_1 };
                                    } finally {
                                        try {
                                            if (results_4_1 && !results_4_1.done && (_b = results_4.return)) _b.call(results_4);
                                        } finally {
                                            if (e_5) throw e_5.error;
                                        }
                                    }
                                } else add.push(results);
                            }
                            break;
                        case 1278:
                            {
                                var results = this.flatten(this.visit(it));
                                if (Array.isArray(results)) {
                                    try {
                                        for (var results_5 = __values(results), results_5_1 = results_5.next(); !results_5_1.done; results_5_1 = results_5.next()) {
                                            var result = results_5_1.value;
                                            add.push(result);
                                        }
                                    } catch (e_6_1) {
                                        e_6 = { error: e_6_1 };
                                    } finally {
                                        try {
                                            if (results_5_1 && !results_5_1.done && (_c = results_5.return)) _c.call(results_5);
                                        } finally {
                                            if (e_6) throw e_6.error;
                                        }
                                    }
                                } else add.push(results);
                            }
                            break;
                        default:
                            {
                                none.push(this.visit(it));
                            }
                            break;
                    }
                } else if (it instanceof Tree_1.TerminalNode) {
                    switch (it.symbol.type) {
                        default:
                            {
                                none.push(this.visit(it));
                            }
                            break;
                    }
                }
            }
        }
        var node = this.castToList(map, UniStatement_1.default);
        return node;
        var e_4, _a, e_5, _b, e_6, _c;
    };
    CPP14Mapper.prototype.visitMyclassbody = function (ctx) {
        var map = new Map();
        var none = [];
        map.set("none", none);
        var add = [];
        map.set("add", add);
        var n = ctx.getChildCount();
        if (0 < n) {
            for (var i = 0; i < n; ++i) {
                var it = ctx.getChild(i);
                if (it instanceof RuleContext_1.RuleContext) {
                    switch (it.invokingState) {
                        case 1284:
                            {
                                var results = this.flatten(this.visit(it));
                                if (Array.isArray(results)) {
                                    try {
                                        for (var results_6 = __values(results), results_6_1 = results_6.next(); !results_6_1.done; results_6_1 = results_6.next()) {
                                            var result = results_6_1.value;
                                            add.push(result);
                                        }
                                    } catch (e_7_1) {
                                        e_7 = { error: e_7_1 };
                                    } finally {
                                        try {
                                            if (results_6_1 && !results_6_1.done && (_a = results_6.return)) _a.call(results_6);
                                        } finally {
                                            if (e_7) throw e_7.error;
                                        }
                                    }
                                } else add.push(results);
                            }
                            break;
                        default:
                            {
                                none.push(this.visit(it));
                            }
                            break;
                    }
                } else if (it instanceof Tree_1.TerminalNode) {
                    switch (it.symbol.type) {
                        default:
                            {
                                none.push(this.visit(it));
                            }
                            break;
                    }
                }
            }
        }
        var node = this.castToList(map, UniVariableDec_1.default);
        return node;
        var e_7, _a;
    };
    CPP14Mapper.prototype.visitMyclassspecifier = function (ctx) {
        var _this = this;
        var map = new Map();
        var none = [];
        map.set("none", none);
        var members = [];
        map.set("members", members);
        var merge = [];
        var n = ctx.getChildCount();
        for (var i = 0; i < n; ++i) {
            var it = ctx.getChild(i);
            if (it instanceof RuleContext_1.RuleContext) {
                switch (it.invokingState) {
                    case 1287:
                        {
                            merge.push(this.visit(it));
                        }
                        break;
                    case 1289:
                        {
                            members.push(this.visit(it));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            } else if (it instanceof Tree_1.TerminalNode) {
                switch (it.symbol.type) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        var node = this.castTo(map, UniClassDec_1.default);
        merge.forEach(function (it) {
            node.merge(_this.castTo(it, UniClassDec_1.default));
        });
        return node;
    };
    CPP14Mapper.prototype.visitMyclasshead = function (ctx) {
        var map = new Map();
        var none = [];
        map.set("none", none);
        var className = [];
        map.set("className", className);
        var n = ctx.getChildCount();
        for (var i = 0; i < n; ++i) {
            var it = ctx.getChild(i);
            if (it instanceof RuleContext_1.RuleContext) {
                switch (it.invokingState) {
                    case 1300:
                        {
                            className.push(this.visit(it));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            } else if (it instanceof Tree_1.TerminalNode) {
                switch (it.symbol.type) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        var node = this.castTo(map, UniClassDec_1.default);
        return node;
    };
    CPP14Mapper.prototype.visitVariabledeclarationstatement = function (ctx) {
        var map = new Map();
        var none = [];
        map.set("none", none);
        var ret = [];
        var n = ctx.getChildCount();
        if (0 < n) {
            for (var i = 0; i < n; ++i) {
                var it = ctx.getChild(i);
                if (it instanceof RuleContext_1.RuleContext) {
                    switch (it.invokingState) {
                        case 1351:
                            {
                                ret.push(this.visit(it));
                            }
                            break;
                        default:
                            {
                                none.push(this.visit(it));
                            }
                            break;
                    }
                } else if (it instanceof Tree_1.TerminalNode) {
                    switch (it.symbol.type) {
                        default:
                            {
                                none.push(this.visit(it));
                            }
                            break;
                    }
                }
            }
        }
        if (ret.length != 0) {
            return ret;
        }
        var node = this.castToList(map, UniVariableDec_1.default);
        return node;
    };
    CPP14Mapper.prototype.visitVariabledeclaration = function (ctx) {
        var map = new Map();
        var none = [];
        map.set("none", none);
        var variables = [];
        map.set("variables", variables);
        var modifiers = [];
        map.set("modifiers", modifiers);
        var type = [];
        map.set("type", type);
        var n = ctx.getChildCount();
        for (var i = 0; i < n; ++i) {
            var it = ctx.getChild(i);
            if (it instanceof RuleContext_1.RuleContext) {
                switch (it.invokingState) {
                    case 1357:
                        {
                            modifiers.push(this.visit(it));
                        }
                        break;
                    case 1360:
                        {
                            type.push(this.visit(it));
                        }
                        break;
                    case 1361:
                        {
                            variables.push(this.visit(it));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            } else if (it instanceof Tree_1.TerminalNode) {
                switch (it.symbol.type) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        var node = this.castTo(map, UniVariableDec_1.default);
        return node;
    };
    CPP14Mapper.prototype.visitVariableDeclaratorList = function (ctx) {
        var map = new Map();
        var none = [];
        map.set("none", none);
        var add = [];
        map.set("add", add);
        var n = ctx.getChildCount();
        if (0 < n) {
            for (var i = 0; i < n; ++i) {
                var it = ctx.getChild(i);
                if (it instanceof RuleContext_1.RuleContext) {
                    switch (it.invokingState) {
                        case 1365:
                            {
                                var results = this.flatten(this.visit(it));
                                if (Array.isArray(results)) {
                                    try {
                                        for (var results_7 = __values(results), results_7_1 = results_7.next(); !results_7_1.done; results_7_1 = results_7.next()) {
                                            var result = results_7_1.value;
                                            add.push(result);
                                        }
                                    } catch (e_8_1) {
                                        e_8 = { error: e_8_1 };
                                    } finally {
                                        try {
                                            if (results_7_1 && !results_7_1.done && (_a = results_7.return)) _a.call(results_7);
                                        } finally {
                                            if (e_8) throw e_8.error;
                                        }
                                    }
                                } else add.push(results);
                            }
                            break;
                        case 1367:
                            {
                                var results = this.flatten(this.visit(it));
                                if (Array.isArray(results)) {
                                    try {
                                        for (var results_8 = __values(results), results_8_1 = results_8.next(); !results_8_1.done; results_8_1 = results_8.next()) {
                                            var result = results_8_1.value;
                                            add.push(result);
                                        }
                                    } catch (e_9_1) {
                                        e_9 = { error: e_9_1 };
                                    } finally {
                                        try {
                                            if (results_8_1 && !results_8_1.done && (_b = results_8.return)) _b.call(results_8);
                                        } finally {
                                            if (e_9) throw e_9.error;
                                        }
                                    }
                                } else add.push(results);
                            }
                            break;
                        default:
                            {
                                none.push(this.visit(it));
                            }
                            break;
                    }
                } else if (it instanceof Tree_1.TerminalNode) {
                    switch (it.symbol.type) {
                        default:
                            {
                                none.push(this.visit(it));
                            }
                            break;
                    }
                }
            }
        }
        var node = this.castToList(map, UniVariableDef_1.default);
        return node;
        var e_8, _a, e_9, _b;
    };
    CPP14Mapper.prototype.visitVariableDeclarator = function (ctx) {
        var map = new Map();
        var none = [];
        map.set("none", none);
        var typeSuffix = [];
        map.set("typeSuffix", typeSuffix);
        var name = [];
        map.set("name", name);
        var value = [];
        map.set("value", value);
        var n = ctx.getChildCount();
        for (var i = 0; i < n; ++i) {
            var it = ctx.getChild(i);
            if (it instanceof RuleContext_1.RuleContext) {
                switch (it.invokingState) {
                    case 1375:
                        {
                            name.push(this.visit(it));
                        }
                        break;
                    case 1381:
                        {
                            name.push(this.visit(it));
                        }
                        break;
                    case 1393:
                        {
                            value.push(this.visit(it));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            } else if (it instanceof Tree_1.TerminalNode) {
                switch (it.symbol.type) {
                    case CPP14Parser_1.CPP14Parser.LeftBracket:
                        {
                            typeSuffix.push(this.flatten(this.visit(it)));
                        }
                        break;
                    case CPP14Parser_1.CPP14Parser.Integerliteral:
                        {
                            typeSuffix.push(this.flatten(this.visit(it)));
                        }
                        break;
                    case CPP14Parser_1.CPP14Parser.RightBracket:
                        {
                            typeSuffix.push(this.flatten(this.visit(it)));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        var node = this.castTo(map, UniVariableDef_1.default);
        return node;
    };
    CPP14Mapper.prototype.visitDims = function (ctx) {
        var map = new Map();
        var none = [];
        map.set("none", none);
        var n = ctx.getChildCount();
        for (var i = 0; i < n; ++i) {
            var it = ctx.getChild(i);
            if (it instanceof RuleContext_1.RuleContext) {
                switch (it.invokingState) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            } else if (it instanceof Tree_1.TerminalNode) {
                switch (it.symbol.type) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        var node = this.castTo(map, String);
        return node;
    };
    CPP14Mapper.prototype.visitTrailingtypespecifier = function (ctx) {
        var map = new Map();
        var none = [];
        map.set("none", none);
        var n = ctx.getChildCount();
        for (var i = 0; i < n; ++i) {
            var it = ctx.getChild(i);
            if (it instanceof RuleContext_1.RuleContext) {
                switch (it.invokingState) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            } else if (it instanceof Tree_1.TerminalNode) {
                switch (it.symbol.type) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        var node = this.castTo(map, String);
        return node;
    };
    CPP14Mapper.prototype.visitInitdeclaratorlist = function (ctx) {
        var map = new Map();
        var none = [];
        map.set("none", none);
        var add = [];
        map.set("add", add);
        var n = ctx.getChildCount();
        for (var i = 0; i < n; ++i) {
            var it = ctx.getChild(i);
            if (it instanceof RuleContext_1.RuleContext) {
                switch (it.invokingState) {
                    case 1846:
                        {
                            add.push(this.visit(it));
                        }
                        break;
                    case 1848:
                        {
                            add.push(this.visit(it));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            } else if (it instanceof Tree_1.TerminalNode) {
                switch (it.symbol.type) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        return map;
    };
    CPP14Mapper.prototype.visitDeclaratorid = function (ctx) {
        var map = new Map();
        var none = [];
        map.set("none", none);
        var n = ctx.getChildCount();
        for (var i = 0; i < n; ++i) {
            var it = ctx.getChild(i);
            if (it instanceof RuleContext_1.RuleContext) {
                switch (it.invokingState) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            } else if (it instanceof Tree_1.TerminalNode) {
                switch (it.symbol.type) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        var node = this.castTo(map, String);
        return node;
    };
    CPP14Mapper.prototype.visitParameterdeclarationclause = function (ctx) {
        var map = new Map();
        var none = [];
        map.set("none", none);
        var add = [];
        map.set("add", add);
        var n = ctx.getChildCount();
        if (0 < n) {
            for (var i = 0; i < n; ++i) {
                var it = ctx.getChild(i);
                if (it instanceof RuleContext_1.RuleContext) {
                    switch (it.invokingState) {
                        case 2036:
                            {
                                var results = this.flatten(this.visit(it));
                                if (Array.isArray(results)) {
                                    try {
                                        for (var results_9 = __values(results), results_9_1 = results_9.next(); !results_9_1.done; results_9_1 = results_9.next()) {
                                            var result = results_9_1.value;
                                            add.push(result);
                                        }
                                    } catch (e_10_1) {
                                        e_10 = { error: e_10_1 };
                                    } finally {
                                        try {
                                            if (results_9_1 && !results_9_1.done && (_a = results_9.return)) _a.call(results_9);
                                        } finally {
                                            if (e_10) throw e_10.error;
                                        }
                                    }
                                } else add.push(results);
                            }
                            break;
                        case 2042:
                            {
                                var results = this.flatten(this.visit(it));
                                if (Array.isArray(results)) {
                                    try {
                                        for (var results_10 = __values(results), results_10_1 = results_10.next(); !results_10_1.done; results_10_1 = results_10.next()) {
                                            var result = results_10_1.value;
                                            add.push(result);
                                        }
                                    } catch (e_11_1) {
                                        e_11 = { error: e_11_1 };
                                    } finally {
                                        try {
                                            if (results_10_1 && !results_10_1.done && (_b = results_10.return)) _b.call(results_10);
                                        } finally {
                                            if (e_11) throw e_11.error;
                                        }
                                    }
                                } else add.push(results);
                            }
                            break;
                        default:
                            {
                                none.push(this.visit(it));
                            }
                            break;
                    }
                } else if (it instanceof Tree_1.TerminalNode) {
                    switch (it.symbol.type) {
                        default:
                            {
                                none.push(this.visit(it));
                            }
                            break;
                    }
                }
            }
        }
        var node = this.castToList(map, UniParam_1.default);
        return node;
        var e_10, _a, e_11, _b;
    };
    CPP14Mapper.prototype.visitParameterdeclarationlist = function (ctx) {
        var map = new Map();
        var none = [];
        map.set("none", none);
        var add = [];
        map.set("add", add);
        var n = ctx.getChildCount();
        if (0 < n) {
            for (var i = 0; i < n; ++i) {
                var it = ctx.getChild(i);
                if (it instanceof RuleContext_1.RuleContext) {
                    switch (it.invokingState) {
                        case 2049:
                            {
                                var results = this.flatten(this.visit(it));
                                if (Array.isArray(results)) {
                                    try {
                                        for (var results_11 = __values(results), results_11_1 = results_11.next(); !results_11_1.done; results_11_1 = results_11.next()) {
                                            var result = results_11_1.value;
                                            add.push(result);
                                        }
                                    } catch (e_12_1) {
                                        e_12 = { error: e_12_1 };
                                    } finally {
                                        try {
                                            if (results_11_1 && !results_11_1.done && (_a = results_11.return)) _a.call(results_11);
                                        } finally {
                                            if (e_12) throw e_12.error;
                                        }
                                    }
                                } else add.push(results);
                            }
                            break;
                        case 312:
                            {
                                var results = this.flatten(this.visit(it));
                                if (Array.isArray(results)) {
                                    try {
                                        for (var results_12 = __values(results), results_12_1 = results_12.next(); !results_12_1.done; results_12_1 = results_12.next()) {
                                            var result = results_12_1.value;
                                            add.push(result);
                                        }
                                    } catch (e_13_1) {
                                        e_13 = { error: e_13_1 };
                                    } finally {
                                        try {
                                            if (results_12_1 && !results_12_1.done && (_b = results_12.return)) _b.call(results_12);
                                        } finally {
                                            if (e_13) throw e_13.error;
                                        }
                                    }
                                } else add.push(results);
                            }
                            break;
                        case 2053:
                            {
                                var results = this.flatten(this.visit(it));
                                if (Array.isArray(results)) {
                                    try {
                                        for (var results_13 = __values(results), results_13_1 = results_13.next(); !results_13_1.done; results_13_1 = results_13.next()) {
                                            var result = results_13_1.value;
                                            add.push(result);
                                        }
                                    } catch (e_14_1) {
                                        e_14 = { error: e_14_1 };
                                    } finally {
                                        try {
                                            if (results_13_1 && !results_13_1.done && (_c = results_13.return)) _c.call(results_13);
                                        } finally {
                                            if (e_14) throw e_14.error;
                                        }
                                    }
                                } else add.push(results);
                            }
                            break;
                        default:
                            {
                                none.push(this.visit(it));
                            }
                            break;
                    }
                } else if (it instanceof Tree_1.TerminalNode) {
                    switch (it.symbol.type) {
                        default:
                            {
                                none.push(this.visit(it));
                            }
                            break;
                    }
                }
            }
        }
        var node = this.castToList(map, UniParam_1.default);
        return node;
        var e_12, _a, e_13, _b, e_14, _c;
    };
    CPP14Mapper.prototype.visitParameterdeclaration = function (ctx) {
        var map = new Map();
        var none = [];
        map.set("none", none);
        var variables = [];
        map.set("variables", variables);
        var modifiers = [];
        map.set("modifiers", modifiers);
        var type = [];
        map.set("type", type);
        var n = ctx.getChildCount();
        for (var i = 0; i < n; ++i) {
            var it = ctx.getChild(i);
            if (it instanceof RuleContext_1.RuleContext) {
                switch (it.invokingState) {
                    case 2062:
                        {
                            modifiers.push(this.visit(it));
                        }
                        break;
                    case 2065:
                        {
                            type.push(this.visit(it));
                        }
                        break;
                    case 2066:
                        {
                            variables.push(this.visit(it));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            } else if (it instanceof Tree_1.TerminalNode) {
                switch (it.symbol.type) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        var node = this.castTo(map, UniParam_1.default);
        return node;
    };
    CPP14Mapper.prototype.visitFunctiondefinition = function (ctx) {
        var _this = this;
        var map = new Map();
        var none = [];
        map.set("none", none);
        var block = [];
        map.set("block", block);
        var modifiers = [];
        map.set("modifiers", modifiers);
        var merge = [];
        var n = ctx.getChildCount();
        for (var i = 0; i < n; ++i) {
            var it = ctx.getChild(i);
            if (it instanceof RuleContext_1.RuleContext) {
                switch (it.invokingState) {
                    case 2072:
                        {
                            modifiers.push(this.visit(it));
                        }
                        break;
                    case 2075:
                        {
                            merge.push(this.visit(it));
                        }
                        break;
                    case 2079:
                        {
                            block.push(this.visit(it));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            } else if (it instanceof Tree_1.TerminalNode) {
                switch (it.symbol.type) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        var node = this.castTo(map, UniFunctionDec_1.default);
        merge.forEach(function (it) {
            node.merge(_this.castTo(it, UniFunctionDec_1.default));
        });
        return node;
    };
    CPP14Mapper.prototype.visitFunctionheader = function (ctx) {
        var _this = this;
        var map = new Map();
        var none = [];
        map.set("none", none);
        var returnType = [];
        map.set("returnType", returnType);
        var merge = [];
        var n = ctx.getChildCount();
        for (var i = 0; i < n; ++i) {
            var it = ctx.getChild(i);
            if (it instanceof RuleContext_1.RuleContext) {
                switch (it.invokingState) {
                    case 2081:
                        {
                            returnType.push(this.visit(it));
                        }
                        break;
                    case 2084:
                        {
                            merge.push(this.visit(it));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            } else if (it instanceof Tree_1.TerminalNode) {
                switch (it.symbol.type) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        var node = this.castTo(map, UniFunctionDec_1.default);
        merge.forEach(function (it) {
            node.merge(_this.castTo(it, UniFunctionDec_1.default));
        });
        return node;
    };
    CPP14Mapper.prototype.visitFunctiondeclarator = function (ctx) {
        var map = new Map();
        var none = [];
        map.set("none", none);
        var name = [];
        map.set("name", name);
        var params = [];
        map.set("params", params);
        var n = ctx.getChildCount();
        for (var i = 0; i < n; ++i) {
            var it = ctx.getChild(i);
            if (it instanceof RuleContext_1.RuleContext) {
                switch (it.invokingState) {
                    case 2086:
                        {
                            name.push(this.visit(it));
                        }
                        break;
                    case 2088:
                        {
                            params.push(this.visit(it));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            } else if (it instanceof Tree_1.TerminalNode) {
                switch (it.symbol.type) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        var node = this.castTo(map, UniFunctionDec_1.default);
        return node;
    };
    CPP14Mapper.prototype.visitFunctionbody = function (ctx) {
        var _this = this;
        var map = new Map();
        var none = [];
        map.set("none", none);
        var merge = [];
        var n = ctx.getChildCount();
        for (var i = 0; i < n; ++i) {
            var it = ctx.getChild(i);
            if (it instanceof RuleContext_1.RuleContext) {
                switch (it.invokingState) {
                    case 2094:
                        {
                            merge.push(this.visit(it));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            } else if (it instanceof Tree_1.TerminalNode) {
                switch (it.symbol.type) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        var node = this.castTo(map, UniBlock_1.default);
        merge.forEach(function (it) {
            node.merge(_this.castTo(it, UniBlock_1.default));
        });
        return node;
    };
    CPP14Mapper.prototype.visitInitializerlist = function (ctx) {
        var map = new Map();
        var none = [];
        map.set("none", none);
        var add = [];
        map.set("add", add);
        var n = ctx.getChildCount();
        if (0 < n) {
            for (var i = 0; i < n; ++i) {
                var it = ctx.getChild(i);
                if (it instanceof RuleContext_1.RuleContext) {
                    switch (it.invokingState) {
                        case 2120:
                            {
                                var results = this.flatten(this.visit(it));
                                if (Array.isArray(results)) {
                                    try {
                                        for (var results_14 = __values(results), results_14_1 = results_14.next(); !results_14_1.done; results_14_1 = results_14.next()) {
                                            var result = results_14_1.value;
                                            add.push(result);
                                        }
                                    } catch (e_15_1) {
                                        e_15 = { error: e_15_1 };
                                    } finally {
                                        try {
                                            if (results_14_1 && !results_14_1.done && (_a = results_14.return)) _a.call(results_14);
                                        } finally {
                                            if (e_15) throw e_15.error;
                                        }
                                    }
                                } else add.push(results);
                            }
                            break;
                        case 2122:
                            {
                                var results = this.flatten(this.visit(it));
                                if (Array.isArray(results)) {
                                    try {
                                        for (var results_15 = __values(results), results_15_1 = results_15.next(); !results_15_1.done; results_15_1 = results_15.next()) {
                                            var result = results_15_1.value;
                                            add.push(result);
                                        }
                                    } catch (e_16_1) {
                                        e_16 = { error: e_16_1 };
                                    } finally {
                                        try {
                                            if (results_15_1 && !results_15_1.done && (_b = results_15.return)) _b.call(results_15);
                                        } finally {
                                            if (e_16) throw e_16.error;
                                        }
                                    }
                                } else add.push(results);
                            }
                            break;
                        default:
                            {
                                none.push(this.visit(it));
                            }
                            break;
                    }
                } else if (it instanceof Tree_1.TerminalNode) {
                    switch (it.symbol.type) {
                        default:
                            {
                                none.push(this.visit(it));
                            }
                            break;
                    }
                }
            }
        }
        var node = this.castToList(map, UniExpr_1.default);
        return node;
        var e_15, _a, e_16, _b;
    };
    CPP14Mapper.prototype.visitBracedinitlist = function (ctx) {
        var map = new Map();
        var none = [];
        map.set("none", none);
        var items = [];
        map.set("items", items);
        var n = ctx.getChildCount();
        for (var i = 0; i < n; ++i) {
            var it = ctx.getChild(i);
            if (it instanceof RuleContext_1.RuleContext) {
                switch (it.invokingState) {
                    case 2129:
                        {
                            items.push(this.visit(it));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            } else if (it instanceof Tree_1.TerminalNode) {
                switch (it.symbol.type) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        var node = this.castTo(map, UniArray_1.default);
        return node;
    };
    CPP14Mapper.prototype.visitMyclassname = function (ctx) {
        var map = new Map();
        var none = [];
        map.set("none", none);
        var n = ctx.getChildCount();
        for (var i = 0; i < n; ++i) {
            var it = ctx.getChild(i);
            if (it instanceof RuleContext_1.RuleContext) {
                switch (it.invokingState) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            } else if (it instanceof Tree_1.TerminalNode) {
                switch (it.symbol.type) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        var node = this.castTo(map, String);
        return node;
    };
    CPP14Mapper.prototype.visitClassspecifier = function (ctx) {
        var _this = this;
        var map = new Map();
        var none = [];
        map.set("none", none);
        var members = [];
        map.set("members", members);
        var merge = [];
        var n = ctx.getChildCount();
        for (var i = 0; i < n; ++i) {
            var it = ctx.getChild(i);
            if (it instanceof RuleContext_1.RuleContext) {
                switch (it.invokingState) {
                    case 2143:
                        {
                            merge.push(this.visit(it));
                        }
                        break;
                    case 2144:
                        {
                            members.push(this.visit(it));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            } else if (it instanceof Tree_1.TerminalNode) {
                switch (it.symbol.type) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        var node = this.castTo(map, UniClassDec_1.default);
        merge.forEach(function (it) {
            node.merge(_this.castTo(it, UniClassDec_1.default));
        });
        return node;
    };
    CPP14Mapper.prototype.visitClassbody = function (ctx) {
        var map = new Map();
        var none = [];
        map.set("none", none);
        var add = [];
        map.set("add", add);
        var n = ctx.getChildCount();
        if (0 < n) {
            for (var i = 0; i < n; ++i) {
                var it = ctx.getChild(i);
                if (it instanceof RuleContext_1.RuleContext) {
                    switch (it.invokingState) {
                        case 2147:
                            {
                                var results = this.flatten(this.visit(it));
                                if (Array.isArray(results)) {
                                    try {
                                        for (var results_16 = __values(results), results_16_1 = results_16.next(); !results_16_1.done; results_16_1 = results_16.next()) {
                                            var result = results_16_1.value;
                                            add.push(result);
                                        }
                                    } catch (e_17_1) {
                                        e_17 = { error: e_17_1 };
                                    } finally {
                                        try {
                                            if (results_16_1 && !results_16_1.done && (_a = results_16.return)) _a.call(results_16);
                                        } finally {
                                            if (e_17) throw e_17.error;
                                        }
                                    }
                                } else add.push(results);
                            }
                            break;
                        default:
                            {
                                none.push(this.visit(it));
                            }
                            break;
                    }
                } else if (it instanceof Tree_1.TerminalNode) {
                    switch (it.symbol.type) {
                        default:
                            {
                                none.push(this.visit(it));
                            }
                            break;
                    }
                }
            }
        }
        var node = this.castToList(map, UniVariableDec_1.default);
        return node;
        var e_17, _a;
    };
    CPP14Mapper.prototype.visitClasshead = function (ctx) {
        var map = new Map();
        var none = [];
        map.set("none", none);
        var className = [];
        map.set("className", className);
        var n = ctx.getChildCount();
        for (var i = 0; i < n; ++i) {
            var it = ctx.getChild(i);
            if (it instanceof RuleContext_1.RuleContext) {
                switch (it.invokingState) {
                    case 2159:
                        {
                            className.push(this.visit(it));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            } else if (it instanceof Tree_1.TerminalNode) {
                switch (it.symbol.type) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        var node = this.castTo(map, UniClassDec_1.default);
        return node;
    };
    CPP14Mapper.prototype.visitMemberspecification = function (ctx) {
        var map = new Map();
        var none = [];
        map.set("none", none);
        var add = [];
        map.set("add", add);
        var n = ctx.getChildCount();
        if (0 < n) {
            for (var i = 0; i < n; ++i) {
                var it = ctx.getChild(i);
                if (it instanceof RuleContext_1.RuleContext) {
                    switch (it.invokingState) {
                        case 2184:
                            {
                                var results = this.flatten(this.visit(it));
                                if (Array.isArray(results)) {
                                    try {
                                        for (var results_17 = __values(results), results_17_1 = results_17.next(); !results_17_1.done; results_17_1 = results_17.next()) {
                                            var result = results_17_1.value;
                                            add.push(result);
                                        }
                                    } catch (e_18_1) {
                                        e_18 = { error: e_18_1 };
                                    } finally {
                                        try {
                                            if (results_17_1 && !results_17_1.done && (_a = results_17.return)) _a.call(results_17);
                                        } finally {
                                            if (e_18) throw e_18.error;
                                        }
                                    }
                                } else add.push(results);
                            }
                            break;
                        case 2185:
                            {
                                var results = this.flatten(this.visit(it));
                                if (Array.isArray(results)) {
                                    try {
                                        for (var results_18 = __values(results), results_18_1 = results_18.next(); !results_18_1.done; results_18_1 = results_18.next()) {
                                            var result = results_18_1.value;
                                            add.push(result);
                                        }
                                    } catch (e_19_1) {
                                        e_19 = { error: e_19_1 };
                                    } finally {
                                        try {
                                            if (results_18_1 && !results_18_1.done && (_b = results_18.return)) _b.call(results_18);
                                        } finally {
                                            if (e_19) throw e_19.error;
                                        }
                                    }
                                } else add.push(results);
                            }
                            break;
                        case 2188:
                            {
                                var results = this.flatten(this.visit(it));
                                if (Array.isArray(results)) {
                                    try {
                                        for (var results_19 = __values(results), results_19_1 = results_19.next(); !results_19_1.done; results_19_1 = results_19.next()) {
                                            var result = results_19_1.value;
                                            add.push(result);
                                        }
                                    } catch (e_20_1) {
                                        e_20 = { error: e_20_1 };
                                    } finally {
                                        try {
                                            if (results_19_1 && !results_19_1.done && (_c = results_19.return)) _c.call(results_19);
                                        } finally {
                                            if (e_20) throw e_20.error;
                                        }
                                    }
                                } else add.push(results);
                            }
                            break;
                        case 2190:
                            {
                                var results = this.flatten(this.visit(it));
                                if (Array.isArray(results)) {
                                    try {
                                        for (var results_20 = __values(results), results_20_1 = results_20.next(); !results_20_1.done; results_20_1 = results_20.next()) {
                                            var result = results_20_1.value;
                                            add.push(result);
                                        }
                                    } catch (e_21_1) {
                                        e_21 = { error: e_21_1 };
                                    } finally {
                                        try {
                                            if (results_20_1 && !results_20_1.done && (_d = results_20.return)) _d.call(results_20);
                                        } finally {
                                            if (e_21) throw e_21.error;
                                        }
                                    }
                                } else add.push(results);
                            }
                            break;
                        default:
                            {
                                none.push(this.visit(it));
                            }
                            break;
                    }
                } else if (it instanceof Tree_1.TerminalNode) {
                    switch (it.symbol.type) {
                        default:
                            {
                                none.push(this.visit(it));
                            }
                            break;
                    }
                }
            }
        }
        var node = this.castToList(map, UniVariableDec_1.default);
        return node;
        var e_18, _a, e_19, _b, e_20, _c, e_21, _d;
    };
    CPP14Mapper.prototype.visitMembervariabledeclarationstatement = function (ctx) {
        var map = new Map();
        var none = [];
        map.set("none", none);
        var ret = [];
        var n = ctx.getChildCount();
        if (0 < n) {
            for (var i = 0; i < n; ++i) {
                var it = ctx.getChild(i);
                if (it instanceof RuleContext_1.RuleContext) {
                    switch (it.invokingState) {
                        case 2204:
                            {
                                ret.push(this.visit(it));
                            }
                            break;
                        default:
                            {
                                none.push(this.visit(it));
                            }
                            break;
                    }
                } else if (it instanceof Tree_1.TerminalNode) {
                    switch (it.symbol.type) {
                        default:
                            {
                                none.push(this.visit(it));
                            }
                            break;
                    }
                }
            }
        }
        if (ret.length != 0) {
            return ret;
        }
        var node = this.castToList(map, UniVariableDec_1.default);
        return node;
    };
    CPP14Mapper.prototype.visitMembervariabledeclaration = function (ctx) {
        var map = new Map();
        var none = [];
        map.set("none", none);
        var modifiers = [];
        map.set("modifiers", modifiers);
        var type = [];
        map.set("type", type);
        var merge = [];
        var n = ctx.getChildCount();
        if (0 < n) {
            for (var i = 0; i < n; ++i) {
                var it = ctx.getChild(i);
                if (it instanceof RuleContext_1.RuleContext) {
                    switch (it.invokingState) {
                        case 2210:
                            {
                                modifiers.push(this.visit(it));
                            }
                            break;
                        case 2213:
                            {
                                type.push(this.visit(it));
                            }
                            break;
                        case 2214:
                            {
                                type.push(this.visit(it));
                            }
                            break;
                        case 2220:
                            {
                                merge.push(this.visit(it));
                            }
                            break;
                        default:
                            {
                                none.push(this.visit(it));
                            }
                            break;
                    }
                } else if (it instanceof Tree_1.TerminalNode) {
                    switch (it.symbol.type) {
                        default:
                            {
                                none.push(this.visit(it));
                            }
                            break;
                    }
                }
            }
        }
        var node = this.castTo(map, UniVariableDec_1.default);
        var ret = [];
        this.castToList(merge, UniVariableDec_1.default).forEach(function (it) {
            it.merge(node);
            ret.push(it);
        });
        return ret;
    };
    CPP14Mapper.prototype.visitMemberdeclaratorlist = function (ctx) {
        var map = new Map();
        var none = [];
        map.set("none", none);
        var add = [];
        map.set("add", add);
        var n = ctx.getChildCount();
        for (var i = 0; i < n; ++i) {
            var it = ctx.getChild(i);
            if (it instanceof RuleContext_1.RuleContext) {
                switch (it.invokingState) {
                    case 2224:
                        {
                            add.push(this.visit(it));
                        }
                        break;
                    case 356:
                        {
                            add.push(this.visit(it));
                        }
                        break;
                    case 2228:
                        {
                            add.push(this.visit(it));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            } else if (it instanceof Tree_1.TerminalNode) {
                switch (it.symbol.type) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        return map;
    };
    CPP14Mapper.prototype.visitMemberdeclarator = function (ctx) {
        var map = new Map();
        var none = [];
        map.set("none", none);
        var name = [];
        map.set("name", name);
        var modifiers = [];
        map.set("modifiers", modifiers);
        var value = [];
        map.set("value", value);
        var n = ctx.getChildCount();
        for (var i = 0; i < n; ++i) {
            var it = ctx.getChild(i);
            if (it instanceof RuleContext_1.RuleContext) {
                switch (it.invokingState) {
                    case 2234:
                        {
                            name.push(this.visit(it));
                        }
                        break;
                    case 2235:
                        {
                            modifiers.push(this.visit(it));
                        }
                        break;
                    case 2241:
                        {
                            name.push(this.visit(it));
                        }
                        break;
                    case 2243:
                        {
                            value.push(this.visit(it));
                        }
                        break;
                    case 2246:
                        {
                            name.push(this.visit(it));
                        }
                        break;
                    case 2247:
                        {
                            value.push(this.visit(it));
                        }
                        break;
                    case 2257:
                        {
                            value.push(this.visit(it));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            } else if (it instanceof Tree_1.TerminalNode) {
                switch (it.symbol.type) {
                    case CPP14Parser_1.CPP14Parser.Identifier:
                        {
                            name.push(this.flatten(this.visit(it)));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        return map;
    };
    CPP14Mapper.prototype.visitIntegerliteral = function (ctx) {
        var findFirst = function findFirst(ctx) {
            var n = ctx.getChildCount();
            for (var i = 0; i < n; ++i) {
                var it = ctx.getChild(i);
                if (it instanceof Tree_1.TerminalNodeImpl) {
                    if (it.symbol.type == CPP14Parser_1.CPP14Parser.Integerliteral) {
                        return it;
                    }
                }
            }
            return undefined;
        };
        var text = this.visit(findFirst(ctx));
        return new UniIntLiteral_1.default(Number(text));
    };
    CPP14Mapper.prototype.visitCharacterliteral = function (ctx) {
        var findFirst = function findFirst(ctx) {
            var n = ctx.getChildCount();
            for (var i = 0; i < n; ++i) {
                var it = ctx.getChild(i);
                if (it instanceof Tree_1.TerminalNodeImpl) {
                    if (it.symbol.type == CPP14Parser_1.CPP14Parser.Characterliteral) {
                        return it;
                    }
                }
            }
            return undefined;
        };
        var text = this.visit(findFirst(ctx));
        return new UniCharacterLiteral_1.default(text.substring(1, text.length - 1).charAt(0));
    };
    CPP14Mapper.prototype.visitFloatingliteral = function (ctx) {
        var findFirst = function findFirst(ctx) {
            var n = ctx.getChildCount();
            for (var i = 0; i < n; ++i) {
                var it = ctx.getChild(i);
                if (it instanceof Tree_1.TerminalNodeImpl) {
                    if (it.symbol.type == CPP14Parser_1.CPP14Parser.Floatingliteral) {
                        return it;
                    }
                }
            }
            return undefined;
        };
        var text = this.visit(findFirst(ctx));
        return new UniDoubleLiteral_1.default(Number(text));
    };
    CPP14Mapper.prototype.visitStringliteral = function (ctx) {
        var findFirst = function findFirst(ctx) {
            var n = ctx.getChildCount();
            for (var i = 0; i < n; ++i) {
                var it = ctx.getChild(i);
                if (it instanceof Tree_1.TerminalNodeImpl) {
                    if (it.symbol.type == CPP14Parser_1.CPP14Parser.Stringliteral) {
                        return it;
                    }
                }
            }
            return undefined;
        };
        var text = this.visit(findFirst(ctx));
        return new UniStringLiteral_1.default(text.substring(1, text.length - 1));
    };
    CPP14Mapper.prototype.visitBooleanliteral = function (ctx) {
        var findFirst = function findFirst(ctx) {
            var n = ctx.getChildCount();
            for (var i = 0; i < n; ++i) {
                var it = ctx.getChild(i);
                if (it instanceof Tree_1.TerminalNodeImpl) {
                    if (it.symbol.type == CPP14Parser_1.CPP14Parser.Booleanliteral) {
                        return it;
                    }
                }
            }
            return undefined;
        };
        var text = this.visit(findFirst(ctx));
        return new UniBoolLiteral_1.default(Boolean(text));
    };
    return CPP14Mapper;
}(CPP14Visitor_1.CPP14Visitor);
exports.default = CPP14Mapper;

/***/ }),
/* 132 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var __extends = undefined && undefined.__extends || function () {
    var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
        d.__proto__ = b;
    } || function (d, b) {
        for (var p in b) {
            if (b.hasOwnProperty(p)) d[p] = b[p];
        }
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
var __read = undefined && undefined.__read || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o),
        r,
        ar = [],
        e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) {
            ar.push(r.value);
        }
    } catch (error) {
        e = { error: error };
    } finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        } finally {
            if (e) throw e.error;
        }
    }
    return ar;
};
var __spread = undefined && undefined.__spread || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) {
        ar = ar.concat(__read(arguments[i]));
    }return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
var UniStatement_1 = __webpack_require__(3);
var UniExpr_1 = __webpack_require__(0);
var UniEnhancedFor = /** @class */function (_super) {
    __extends(UniEnhancedFor, _super);
    function UniEnhancedFor(modifiers, type, name, container, statement) {
        var _this = _super.call(this) || this;
        if (modifiers === undefined && type === undefined && name === undefined && container === undefined && statement === undefined) {
            _this.modifiers = [];
            _this.type = null;
            _this.name = null;
            _this.container = null;
            _this.statement = null;
        } else if (modifiers === undefined || type === undefined || name === undefined || container === undefined || statement === undefined) {
            throw new Error('invalid arguments');
        } else {
            _this.modifiers = modifiers;
            _this.type = type;
            _this.name = name;
            _this.container = container;
            _this.statement = statement;
        }
        _this.fields.set('modifiers', String);
        _this.fields.set('type', String);
        _this.fields.set('name', String);
        _this.fields.set('container', UniExpr_1.default);
        _this.fields.set('statement', UniStatement_1.default);
        return _this;
    }
    UniEnhancedFor.prototype.toString = function () {
        return 'EnhancedFor(' + this.type + ', ' + this.name + ')';
    };
    UniEnhancedFor.prototype.equals = function (obj) {
        if (obj == null || !(obj instanceof UniEnhancedFor)) return false;
        var that = obj;
        return _super.prototype.equals.call(this, that) && (this.modifiers == null ? that.modifiers == null : this.modifiers.equals(that.modifiers)) && (this.type == null ? that.type == null : this.type === that.type) && (this.name == null ? that.name == null : this.name === that.name) && (this.container == null ? that.container == null : this.container.equals(that.container)) && (this.statement == null ? that.statement == null : this.statement.equals(that.statement));
    };
    UniEnhancedFor.prototype.merge = function (that) {
        _super.prototype.merge.call(this, that);
        if (that.modifiers != null) {
            if (this.modifiers == null) {
                this.modifiers = that.modifiers;
            } else {
                (_a = this.modifiers).push.apply(_a, __spread(that.modifiers));
            }
        }
        if (that.type != null) {
            this.type = that.type;
        }
        if (that.name != null) {
            this.name = that.name;
        }
        if (that.container != null) {
            this.container = that.container;
        }
        if (that.statement != null) {
            this.statement = that.statement;
        }
        var _a;
    };
    return UniEnhancedFor;
}(UniStatement_1.default);
exports.default = UniEnhancedFor;

/***/ }),
/* 133 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var __extends = undefined && undefined.__extends || function () {
    var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
        d.__proto__ = b;
    } || function (d, b) {
        for (var p in b) {
            if (b.hasOwnProperty(p)) d[p] = b[p];
        }
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
Object.defineProperty(exports, "__esModule", { value: true });
var UniNumberLiteral_1 = __webpack_require__(23);
var UniDoubleLiteral = /** @class */function (_super) {
    __extends(UniDoubleLiteral, _super);
    function UniDoubleLiteral(value) {
        var _this = _super.call(this) || this;
        if (value === undefined) {
            _this.value = null;
        } else {
            _this.value = value;
        }
        _this.fields.set('value', Number);
        return _this;
    }
    UniDoubleLiteral.prototype.toString = function () {
        return 'DoubleLiteral(' + ')';
    };
    UniDoubleLiteral.prototype.equals = function (obj) {
        if (obj == null || !(obj instanceof UniDoubleLiteral)) return false;
        var that = obj;
        return _super.prototype.equals.call(this, that) && (this.value == null ? that.value == null : this.value === that.value);
    };
    UniDoubleLiteral.prototype.merge = function (that) {
        _super.prototype.merge.call(this, that);
        if (that.value != null) {
            this.value = that.value;
        }
    };
    return UniDoubleLiteral;
}(UniNumberLiteral_1.default);
exports.default = UniDoubleLiteral;

/***/ }),
/* 134 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var __extends = undefined && undefined.__extends || function () {
    var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
        d.__proto__ = b;
    } || function (d, b) {
        for (var p in b) {
            if (b.hasOwnProperty(p)) d[p] = b[p];
        }
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
Object.defineProperty(exports, "__esModule", { value: true });
var UniNumberLiteral_1 = __webpack_require__(23);
var UniCharacterLiteral = /** @class */function (_super) {
    __extends(UniCharacterLiteral, _super);
    function UniCharacterLiteral(value) {
        var _this = _super.call(this) || this;
        if (value === undefined) {
            _this.value = null;
        } else {
            _this.value = value;
        }
        _this.fields.set('value', String);
        return _this;
    }
    UniCharacterLiteral.prototype.toString = function () {
        return 'CharacterLiteral(' + this.value + ')';
    };
    UniCharacterLiteral.prototype.equals = function (obj) {
        if (obj == null || !(obj instanceof UniCharacterLiteral)) return false;
        var that = obj;
        return _super.prototype.equals.call(this, that) && (this.value == null ? that.value == null : this.value === that.value);
    };
    UniCharacterLiteral.prototype.merge = function (that) {
        _super.prototype.merge.call(this, that);
        if (that.value != null) {
            this.value = that.value;
        }
    };
    return UniCharacterLiteral;
}(UniNumberLiteral_1.default);
exports.default = UniCharacterLiteral;

/***/ }),
/* 135 */
/***/ (function(module, exports, __webpack_require__) {

// Generated from C:\Users\RYOSUKE\eclipse\java-oxygen\eclipse\..\..\..\eclipse-workspace\net.unicoen\UniMapperGenerator\src-gen\CPP14.g4 by ANTLR 4.7.1
// jshint ignore: start
var antlr4 = __webpack_require__(16);


var serializedATN = ["\u0003\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964",
    "\u0002\u0091\u059c\b\u0001\u0004\u0002\t\u0002\u0004\u0003\t\u0003\u0004",
    "\u0004\t\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\u0007\t",
    "\u0007\u0004\b\t\b\u0004\t\t\t\u0004\n\t\n\u0004\u000b\t\u000b\u0004",
    "\f\t\f\u0004\r\t\r\u0004\u000e\t\u000e\u0004\u000f\t\u000f\u0004\u0010",
    "\t\u0010\u0004\u0011\t\u0011\u0004\u0012\t\u0012\u0004\u0013\t\u0013",
    "\u0004\u0014\t\u0014\u0004\u0015\t\u0015\u0004\u0016\t\u0016\u0004\u0017",
    "\t\u0017\u0004\u0018\t\u0018\u0004\u0019\t\u0019\u0004\u001a\t\u001a",
    "\u0004\u001b\t\u001b\u0004\u001c\t\u001c\u0004\u001d\t\u001d\u0004\u001e",
    "\t\u001e\u0004\u001f\t\u001f\u0004 \t \u0004!\t!\u0004\"\t\"\u0004#",
    "\t#\u0004$\t$\u0004%\t%\u0004&\t&\u0004\'\t\'\u0004(\t(\u0004)\t)\u0004",
    "*\t*\u0004+\t+\u0004,\t,\u0004-\t-\u0004.\t.\u0004/\t/\u00040\t0\u0004",
    "1\t1\u00042\t2\u00043\t3\u00044\t4\u00045\t5\u00046\t6\u00047\t7\u0004",
    "8\t8\u00049\t9\u0004:\t:\u0004;\t;\u0004<\t<\u0004=\t=\u0004>\t>\u0004",
    "?\t?\u0004@\t@\u0004A\tA\u0004B\tB\u0004C\tC\u0004D\tD\u0004E\tE\u0004",
    "F\tF\u0004G\tG\u0004H\tH\u0004I\tI\u0004J\tJ\u0004K\tK\u0004L\tL\u0004",
    "M\tM\u0004N\tN\u0004O\tO\u0004P\tP\u0004Q\tQ\u0004R\tR\u0004S\tS\u0004",
    "T\tT\u0004U\tU\u0004V\tV\u0004W\tW\u0004X\tX\u0004Y\tY\u0004Z\tZ\u0004",
    "[\t[\u0004\\\t\\\u0004]\t]\u0004^\t^\u0004_\t_\u0004`\t`\u0004a\ta\u0004",
    "b\tb\u0004c\tc\u0004d\td\u0004e\te\u0004f\tf\u0004g\tg\u0004h\th\u0004",
    "i\ti\u0004j\tj\u0004k\tk\u0004l\tl\u0004m\tm\u0004n\tn\u0004o\to\u0004",
    "p\tp\u0004q\tq\u0004r\tr\u0004s\ts\u0004t\tt\u0004u\tu\u0004v\tv\u0004",
    "w\tw\u0004x\tx\u0004y\ty\u0004z\tz\u0004{\t{\u0004|\t|\u0004}\t}\u0004",
    "~\t~\u0004\u007f\t\u007f\u0004\u0080\t\u0080\u0004\u0081\t\u0081\u0004",
    "\u0082\t\u0082\u0004\u0083\t\u0083\u0004\u0084\t\u0084\u0004\u0085\t",
    "\u0085\u0004\u0086\t\u0086\u0004\u0087\t\u0087\u0004\u0088\t\u0088\u0004",
    "\u0089\t\u0089\u0004\u008a\t\u008a\u0004\u008b\t\u008b\u0004\u008c\t",
    "\u008c\u0004\u008d\t\u008d\u0004\u008e\t\u008e\u0004\u008f\t\u008f\u0004",
    "\u0090\t\u0090\u0004\u0091\t\u0091\u0004\u0092\t\u0092\u0004\u0093\t",
    "\u0093\u0004\u0094\t\u0094\u0004\u0095\t\u0095\u0004\u0096\t\u0096\u0004",
    "\u0097\t\u0097\u0004\u0098\t\u0098\u0004\u0099\t\u0099\u0004\u009a\t",
    "\u009a\u0004\u009b\t\u009b\u0004\u009c\t\u009c\u0004\u009d\t\u009d\u0004",
    "\u009e\t\u009e\u0004\u009f\t\u009f\u0004\u00a0\t\u00a0\u0004\u00a1\t",
    "\u00a1\u0004\u00a2\t\u00a2\u0004\u00a3\t\u00a3\u0004\u00a4\t\u00a4\u0004",
    "\u00a5\t\u00a5\u0004\u00a6\t\u00a6\u0004\u00a7\t\u00a7\u0004\u00a8\t",
    "\u00a8\u0004\u00a9\t\u00a9\u0004\u00aa\t\u00aa\u0003\u0002\u0003\u0002",
    "\u0007\u0002\u0158\n\u0002\f\u0002\u000e\u0002\u015b\u000b\u0002\u0003",
    "\u0002\u0003\u0002\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003",
    "\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0004\u0003\u0004\u0003",
    "\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003",
    "\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0006\u0003\u0006\u0003",
    "\u0006\u0003\u0006\u0003\u0006\u0003\u0007\u0003\u0007\u0003\u0007\u0003",
    "\u0007\u0003\u0007\u0003\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003",
    "\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\n\u0003\n\u0003\n\u0003\n\u0003",
    "\n\u0003\n\u0003\u000b\u0003\u000b\u0003\u000b\u0003\u000b\u0003\u000b",
    "\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003",
    "\f\u0003\r\u0003\r\u0003\r\u0003\r\u0003\r\u0003\r\u0003\r\u0003\r\u0003",
    "\r\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003",
    "\u000e\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003",
    "\u000f\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0003",
    "\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0011\u0003",
    "\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0003",
    "\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0003\u0012\u0003\u0012\u0003",
    "\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003",
    "\u0012\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003",
    "\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0014\u0003\u0014\u0003",
    "\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003",
    "\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003",
    "\u0015\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0017\u0003\u0017\u0003",
    "\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0018\u0003",
    "\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0003\u0019\u0003\u0019\u0003",
    "\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0003",
    "\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u001a\u0003",
    "\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001b\u0003\u001b\u0003",
    "\u001b\u0003\u001b\u0003\u001b\u0003\u001c\u0003\u001c\u0003\u001c\u0003",
    "\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003",
    "\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0003",
    "\u001d\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003",
    "\u001e\u0003\u001e\u0003\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0003",
    "\u001f\u0003\u001f\u0003 \u0003 \u0003 \u0003 \u0003 \u0003 \u0003!",
    "\u0003!\u0003!\u0003!\u0003!\u0003!\u0003\"\u0003\"\u0003\"\u0003\"",
    "\u0003#\u0003#\u0003#\u0003#\u0003#\u0003#\u0003#\u0003$\u0003$\u0003",
    "$\u0003$\u0003$\u0003%\u0003%\u0003%\u0003&\u0003&\u0003&\u0003&\u0003",
    "&\u0003&\u0003&\u0003\'\u0003\'\u0003\'\u0003\'\u0003(\u0003(\u0003",
    "(\u0003(\u0003(\u0003)\u0003)\u0003)\u0003)\u0003)\u0003)\u0003)\u0003",
    ")\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003",
    "*\u0003+\u0003+\u0003+\u0003+\u0003,\u0003,\u0003,\u0003,\u0003,\u0003",
    ",\u0003,\u0003,\u0003,\u0003-\u0003-\u0003-\u0003-\u0003-\u0003-\u0003",
    "-\u0003-\u0003.\u0003.\u0003.\u0003.\u0003.\u0003.\u0003.\u0003.\u0003",
    ".\u0003/\u0003/\u0003/\u0003/\u0003/\u0003/\u0003/\u0003/\u0003/\u0003",
    "0\u00030\u00030\u00030\u00030\u00030\u00030\u00030\u00031\u00031\u0003",
    "1\u00031\u00031\u00031\u00031\u00031\u00031\u00031\u00032\u00032\u0003",
    "2\u00032\u00032\u00032\u00032\u00033\u00033\u00033\u00033\u00033\u0003",
    "3\u00033\u00033\u00033\u00034\u00034\u00034\u00034\u00034\u00034\u0003",
    "4\u00034\u00034\u00034\u00034\u00034\u00034\u00034\u00034\u00034\u0003",
    "4\u00035\u00035\u00035\u00035\u00035\u00035\u00035\u00036\u00036\u0003",
    "6\u00036\u00036\u00036\u00037\u00037\u00037\u00037\u00037\u00037\u0003",
    "7\u00038\u00038\u00038\u00038\u00038\u00038\u00038\u00039\u00039\u0003",
    "9\u00039\u00039\u00039\u00039\u0003:\u0003:\u0003:\u0003:\u0003:\u0003",
    ":\u0003:\u0003:\u0003:\u0003:\u0003:\u0003:\u0003:\u0003:\u0003;\u0003",
    ";\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003",
    ";\u0003<\u0003<\u0003<\u0003<\u0003<\u0003<\u0003<\u0003=\u0003=\u0003",
    "=\u0003=\u0003=\u0003=\u0003=\u0003>\u0003>\u0003>\u0003>\u0003>\u0003",
    ">\u0003>\u0003>\u0003>\u0003?\u0003?\u0003?\u0003?\u0003?\u0003@\u0003",
    "@\u0003@\u0003@\u0003@\u0003@\u0003@\u0003@\u0003@\u0003@\u0003@\u0003",
    "@\u0003@\u0003A\u0003A\u0003A\u0003A\u0003A\u0003A\u0003B\u0003B\u0003",
    "B\u0003B\u0003B\u0003C\u0003C\u0003C\u0003C\u0003D\u0003D\u0003D\u0003",
    "D\u0003D\u0003D\u0003D\u0003D\u0003E\u0003E\u0003E\u0003E\u0003E\u0003",
    "E\u0003E\u0003F\u0003F\u0003F\u0003F\u0003F\u0003F\u0003F\u0003F\u0003",
    "F\u0003G\u0003G\u0003G\u0003G\u0003G\u0003G\u0003H\u0003H\u0003H\u0003",
    "H\u0003H\u0003H\u0003H\u0003H\u0003H\u0003I\u0003I\u0003I\u0003I\u0003",
    "I\u0003I\u0003J\u0003J\u0003J\u0003J\u0003J\u0003J\u0003J\u0003J\u0003",
    "K\u0003K\u0003K\u0003K\u0003K\u0003L\u0003L\u0003L\u0003L\u0003L\u0003",
    "L\u0003L\u0003L\u0003L\u0003M\u0003M\u0003M\u0003M\u0003M\u0003M\u0003",
    "M\u0003M\u0003N\u0003N\u0003N\u0003N\u0003N\u0003N\u0003O\u0003O\u0003",
    "P\u0003P\u0003Q\u0003Q\u0003R\u0003R\u0003S\u0003S\u0003T\u0003T\u0003",
    "U\u0003U\u0003V\u0003V\u0003W\u0003W\u0003X\u0003X\u0003Y\u0003Y\u0003",
    "Z\u0003Z\u0003[\u0003[\u0003\\\u0003\\\u0003]\u0003]\u0003^\u0003^\u0003",
    "_\u0003_\u0003`\u0003`\u0003a\u0003a\u0003b\u0003b\u0003b\u0003c\u0003",
    "c\u0003c\u0003d\u0003d\u0003d\u0003e\u0003e\u0003e\u0003f\u0003f\u0003",
    "f\u0003g\u0003g\u0003g\u0003h\u0003h\u0003h\u0003i\u0003i\u0003i\u0003",
    "j\u0003j\u0003j\u0003k\u0003k\u0003k\u0003k\u0003l\u0003l\u0003l\u0003",
    "m\u0003m\u0003m\u0003n\u0003n\u0003n\u0003o\u0003o\u0003o\u0003p\u0003",
    "p\u0003p\u0003q\u0003q\u0003q\u0003r\u0003r\u0003r\u0003s\u0003s\u0003",
    "s\u0003t\u0003t\u0003u\u0003u\u0003u\u0003u\u0003v\u0003v\u0003v\u0003",
    "w\u0003w\u0003x\u0003x\u0003y\u0003y\u0003y\u0003z\u0003z\u0003{\u0003",
    "{\u0003|\u0003|\u0003|\u0003}\u0003}\u0003}\u0003}\u0003~\u0003~\u0003",
    "~\u0003~\u0003~\u0003\u007f\u0003\u007f\u0003\u007f\u0003\u007f\u0003",
    "\u007f\u0003\u007f\u0003\u007f\u0003\u007f\u0003\u007f\u0003\u007f\u0005",
    "\u007f\u0411\n\u007f\u0003\u0080\u0003\u0080\u0003\u0080\u0007\u0080",
    "\u0416\n\u0080\f\u0080\u000e\u0080\u0419\u000b\u0080\u0003\u0081\u0003",
    "\u0081\u0005\u0081\u041d\n\u0081\u0003\u0082\u0003\u0082\u0003\u0083",
    "\u0003\u0083\u0003\u0084\u0003\u0084\u0005\u0084\u0425\n\u0084\u0003",
    "\u0084\u0003\u0084\u0005\u0084\u0429\n\u0084\u0003\u0084\u0003\u0084",
    "\u0005\u0084\u042d\n\u0084\u0003\u0084\u0003\u0084\u0005\u0084\u0431",
    "\n\u0084\u0005\u0084\u0433\n\u0084\u0003\u0085\u0003\u0085\u0005\u0085",
    "\u0437\n\u0085\u0003\u0085\u0007\u0085\u043a\n\u0085\f\u0085\u000e\u0085",
    "\u043d\u000b\u0085\u0003\u0086\u0003\u0086\u0005\u0086\u0441\n\u0086",
    "\u0003\u0086\u0007\u0086\u0444\n\u0086\f\u0086\u000e\u0086\u0447\u000b",
    "\u0086\u0003\u0087\u0003\u0087\u0003\u0087\u0003\u0087\u0005\u0087\u044d",
    "\n\u0087\u0003\u0087\u0003\u0087\u0005\u0087\u0451\n\u0087\u0003\u0087",
    "\u0007\u0087\u0454\n\u0087\f\u0087\u000e\u0087\u0457\u000b\u0087\u0003",
    "\u0088\u0003\u0088\u0003\u0088\u0003\u0088\u0005\u0088\u045d\n\u0088",
    "\u0003\u0088\u0003\u0088\u0005\u0088\u0461\n\u0088\u0003\u0088\u0007",
    "\u0088\u0464\n\u0088\f\u0088\u000e\u0088\u0467\u000b\u0088\u0003\u0089",
    "\u0003\u0089\u0003\u008a\u0003\u008a\u0003\u008b\u0003\u008b\u0003\u008c",
    "\u0003\u008c\u0003\u008d\u0003\u008d\u0005\u008d\u0473\n\u008d\u0003",
    "\u008d\u0003\u008d\u0005\u008d\u0477\n\u008d\u0003\u008d\u0003\u008d",
    "\u0005\u008d\u047b\n\u008d\u0003\u008d\u0003\u008d\u0005\u008d\u047f",
    "\n\u008d\u0005\u008d\u0481\n\u008d\u0003\u008e\u0003\u008e\u0003\u008f",
    "\u0003\u008f\u0003\u0090\u0003\u0090\u0003\u0090\u0003\u0090\u0005\u0090",
    "\u048b\n\u0090\u0003\u0091\u0003\u0091\u0006\u0091\u048f\n\u0091\r\u0091",
    "\u000e\u0091\u0490\u0003\u0091\u0003\u0091\u0003\u0091\u0003\u0091\u0003",
    "\u0091\u0006\u0091\u0498\n\u0091\r\u0091\u000e\u0091\u0499\u0003\u0091",
    "\u0003\u0091\u0003\u0091\u0003\u0091\u0003\u0091\u0006\u0091\u04a1\n",
    "\u0091\r\u0091\u000e\u0091\u04a2\u0003\u0091\u0003\u0091\u0003\u0091",
    "\u0003\u0091\u0003\u0091\u0006\u0091\u04aa\n\u0091\r\u0091\u000e\u0091",
    "\u04ab\u0003\u0091\u0003\u0091\u0005\u0091\u04b0\n\u0091\u0003\u0092",
    "\u0003\u0092\u0003\u0092\u0005\u0092\u04b5\n\u0092\u0003\u0093\u0003",
    "\u0093\u0003\u0093\u0005\u0093\u04ba\n\u0093\u0003\u0094\u0003\u0094",
    "\u0003\u0094\u0003\u0094\u0003\u0094\u0003\u0094\u0003\u0094\u0003\u0094",
    "\u0003\u0094\u0003\u0094\u0003\u0094\u0003\u0094\u0003\u0094\u0003\u0094",
    "\u0003\u0094\u0003\u0094\u0003\u0094\u0003\u0094\u0003\u0094\u0003\u0094",
    "\u0003\u0094\u0003\u0094\u0005\u0094\u04d2\n\u0094\u0003\u0095\u0003",
    "\u0095\u0003\u0095\u0003\u0095\u0003\u0095\u0003\u0095\u0003\u0095\u0003",
    "\u0095\u0003\u0095\u0003\u0095\u0003\u0095\u0005\u0095\u04df\n\u0095",
    "\u0003\u0096\u0003\u0096\u0003\u0096\u0003\u0096\u0006\u0096\u04e5\n",
    "\u0096\r\u0096\u000e\u0096\u04e6\u0003\u0097\u0003\u0097\u0005\u0097",
    "\u04eb\n\u0097\u0003\u0097\u0005\u0097\u04ee\n\u0097\u0003\u0097\u0003",
    "\u0097\u0003\u0097\u0005\u0097\u04f3\n\u0097\u0005\u0097\u04f5\n\u0097",
    "\u0003\u0098\u0005\u0098\u04f8\n\u0098\u0003\u0098\u0003\u0098\u0003",
    "\u0098\u0003\u0098\u0003\u0098\u0005\u0098\u04ff\n\u0098\u0003\u0099",
    "\u0003\u0099\u0005\u0099\u0503\n\u0099\u0003\u0099\u0003\u0099\u0003",
    "\u0099\u0005\u0099\u0508\n\u0099\u0003\u0099\u0005\u0099\u050b\n\u0099",
    "\u0003\u009a\u0003\u009a\u0003\u009b\u0003\u009b\u0005\u009b\u0511\n",
    "\u009b\u0003\u009b\u0007\u009b\u0514\n\u009b\f\u009b\u000e\u009b\u0517",
    "\u000b\u009b\u0003\u009c\u0003\u009c\u0003\u009d\u0005\u009d\u051c\n",
    "\u009d\u0003\u009d\u0003\u009d\u0007\u009d\u0520\n\u009d\f\u009d\u000e",
    "\u009d\u0523\u000b\u009d\u0003\u009d\u0003\u009d\u0005\u009d\u0527\n",
    "\u009d\u0003\u009d\u0003\u009d\u0005\u009d\u052b\n\u009d\u0003\u009e",
    "\u0003\u009e\u0003\u009e\u0005\u009e\u0530\n\u009e\u0003\u009f\u0003",
    "\u009f\u0003\u009f\u0005\u009f\u0535\n\u009f\u0003\u00a0\u0003\u00a0",
    "\u0007\u00a0\u0539\n\u00a0\f\u00a0\u000e\u00a0\u053c\u000b\u00a0\u0003",
    "\u00a0\u0003\u00a0\u0007\u00a0\u0540\n\u00a0\f\u00a0\u000e\u00a0\u0543",
    "\u000b\u00a0\u0003\u00a0\u0003\u00a0\u0007\u00a0\u0547\n\u00a0\f\u00a0",
    "\u000e\u00a0\u054a\u000b\u00a0\u0003\u00a0\u0003\u00a0\u0003\u00a1\u0003",
    "\u00a1\u0005\u00a1\u0550\n\u00a1\u0003\u00a2\u0003\u00a2\u0003\u00a2",
    "\u0003\u00a2\u0003\u00a2\u0003\u00a2\u0003\u00a2\u0003\u00a2\u0003\u00a2",
    "\u0003\u00a2\u0003\u00a2\u0003\u00a2\u0005\u00a2\u055e\n\u00a2\u0003",
    "\u00a3\u0003\u00a3\u0005\u00a3\u0562\n\u00a3\u0003\u00a3\u0003\u00a3",
    "\u0003\u00a3\u0003\u00a3\u0003\u00a3\u0003\u00a3\u0005\u00a3\u056a\n",
    "\u00a3\u0003\u00a4\u0003\u00a4\u0003\u00a4\u0003\u00a5\u0003\u00a5\u0003",
    "\u00a5\u0003\u00a6\u0003\u00a6\u0003\u00a7\u0006\u00a7\u0575\n\u00a7",
    "\r\u00a7\u000e\u00a7\u0576\u0003\u00a7\u0003\u00a7\u0003\u00a8\u0003",
    "\u00a8\u0005\u00a8\u057d\n\u00a8\u0003\u00a8\u0005\u00a8\u0580\n\u00a8",
    "\u0003\u00a8\u0003\u00a8\u0003\u00a9\u0003\u00a9\u0003\u00a9\u0003\u00a9",
    "\u0007\u00a9\u0588\n\u00a9\f\u00a9\u000e\u00a9\u058b\u000b\u00a9\u0003",
    "\u00a9\u0003\u00a9\u0003\u00a9\u0003\u00a9\u0003\u00a9\u0003\u00aa\u0003",
    "\u00aa\u0003\u00aa\u0003\u00aa\u0007\u00aa\u0596\n\u00aa\f\u00aa\u000e",
    "\u00aa\u0599\u000b\u00aa\u0003\u00aa\u0003\u00aa\u0006\u053a\u0541\u0548",
    "\u0589\u0002\u00ab\u0003\u0003\u0005\u0004\u0007\u0005\t\u0006\u000b",
    "\u0007\r\b\u000f\t\u0011\n\u0013\u000b\u0015\f\u0017\r\u0019\u000e\u001b",
    "\u000f\u001d\u0010\u001f\u0011!\u0012#\u0013%\u0014\'\u0015)\u0016+",
    "\u0017-\u0018/\u00191\u001a3\u001b5\u001c7\u001d9\u001e;\u001f= ?!A",
    "\"C#E$G%I&K\'M(O)Q*S+U,W-Y.[/]0_1a2c3e4g5i6k7m8o9q:s;u<w=y>{?}@\u007f",
    "A\u0081B\u0083C\u0085D\u0087E\u0089F\u008bG\u008dH\u008fI\u0091J\u0093",
    "K\u0095L\u0097M\u0099N\u009bO\u009dP\u009fQ\u00a1R\u00a3S\u00a5T\u00a7",
    "U\u00a9V\u00abW\u00adX\u00afY\u00b1Z\u00b3[\u00b5\\\u00b7]\u00b9^\u00bb",
    "_\u00bd`\u00bfa\u00c1b\u00c3c\u00c5d\u00c7e\u00c9f\u00cbg\u00cdh\u00cf",
    "i\u00d1j\u00d3k\u00d5l\u00d7m\u00d9n\u00dbo\u00ddp\u00dfq\u00e1r\u00e3",
    "s\u00e5t\u00e7u\u00e9v\u00ebw\u00edx\u00efy\u00f1z\u00f3{\u00f5|\u00f7",
    "}\u00f9~\u00fb\u0002\u00fd\u0002\u00ff\u007f\u0101\u0002\u0103\u0002",
    "\u0105\u0002\u0107\u0080\u0109\u0081\u010b\u0082\u010d\u0083\u010f\u0084",
    "\u0111\u0002\u0113\u0002\u0115\u0002\u0117\u0002\u0119\u0085\u011b\u0002",
    "\u011d\u0002\u011f\u0002\u0121\u0086\u0123\u0002\u0125\u0002\u0127\u0002",
    "\u0129\u0002\u012b\u0002\u012d\u0087\u012f\u0002\u0131\u0002\u0133\u0002",
    "\u0135\u0002\u0137\u0002\u0139\u0088\u013b\u0002\u013d\u0002\u013f\u0002",
    "\u0141\u0089\u0143\u008a\u0145\u008b\u0147\u008c\u0149\u008d\u014b\u0002",
    "\u014d\u008e\u014f\u008f\u0151\u0090\u0153\u0091\u0003\u0002\u0011\u0004",
    "\u0002\f\f\u000f\u000f\u0005\u0002C\\aac|\u0003\u00022;\u0003\u0002",
    "3;\u0003\u000229\u0005\u00022;CHch\u0003\u000223\u0004\u0002WWww\u0004",
    "\u0002NNnn\u0006\u0002\f\f\u000f\u000f))^^\u0004\u0002--//\u0006\u0002",
    "HHNNhhnn\u0005\u0002NNWWww\u0006\u0002\f\f\u000f\u000f$$^^\u0004\u0002",
    "\u000b\u000b\"\"\u0002\u05d7\u0002\u0003\u0003\u0002\u0002\u0002\u0002",
    "\u0005\u0003\u0002\u0002\u0002\u0002\u0007\u0003\u0002\u0002\u0002\u0002",
    "\t\u0003\u0002\u0002\u0002\u0002\u000b\u0003\u0002\u0002\u0002\u0002",
    "\r\u0003\u0002\u0002\u0002\u0002\u000f\u0003\u0002\u0002\u0002\u0002",
    "\u0011\u0003\u0002\u0002\u0002\u0002\u0013\u0003\u0002\u0002\u0002\u0002",
    "\u0015\u0003\u0002\u0002\u0002\u0002\u0017\u0003\u0002\u0002\u0002\u0002",
    "\u0019\u0003\u0002\u0002\u0002\u0002\u001b\u0003\u0002\u0002\u0002\u0002",
    "\u001d\u0003\u0002\u0002\u0002\u0002\u001f\u0003\u0002\u0002\u0002\u0002",
    "!\u0003\u0002\u0002\u0002\u0002#\u0003\u0002\u0002\u0002\u0002%\u0003",
    "\u0002\u0002\u0002\u0002\'\u0003\u0002\u0002\u0002\u0002)\u0003\u0002",
    "\u0002\u0002\u0002+\u0003\u0002\u0002\u0002\u0002-\u0003\u0002\u0002",
    "\u0002\u0002/\u0003\u0002\u0002\u0002\u00021\u0003\u0002\u0002\u0002",
    "\u00023\u0003\u0002\u0002\u0002\u00025\u0003\u0002\u0002\u0002\u0002",
    "7\u0003\u0002\u0002\u0002\u00029\u0003\u0002\u0002\u0002\u0002;\u0003",
    "\u0002\u0002\u0002\u0002=\u0003\u0002\u0002\u0002\u0002?\u0003\u0002",
    "\u0002\u0002\u0002A\u0003\u0002\u0002\u0002\u0002C\u0003\u0002\u0002",
    "\u0002\u0002E\u0003\u0002\u0002\u0002\u0002G\u0003\u0002\u0002\u0002",
    "\u0002I\u0003\u0002\u0002\u0002\u0002K\u0003\u0002\u0002\u0002\u0002",
    "M\u0003\u0002\u0002\u0002\u0002O\u0003\u0002\u0002\u0002\u0002Q\u0003",
    "\u0002\u0002\u0002\u0002S\u0003\u0002\u0002\u0002\u0002U\u0003\u0002",
    "\u0002\u0002\u0002W\u0003\u0002\u0002\u0002\u0002Y\u0003\u0002\u0002",
    "\u0002\u0002[\u0003\u0002\u0002\u0002\u0002]\u0003\u0002\u0002\u0002",
    "\u0002_\u0003\u0002\u0002\u0002\u0002a\u0003\u0002\u0002\u0002\u0002",
    "c\u0003\u0002\u0002\u0002\u0002e\u0003\u0002\u0002\u0002\u0002g\u0003",
    "\u0002\u0002\u0002\u0002i\u0003\u0002\u0002\u0002\u0002k\u0003\u0002",
    "\u0002\u0002\u0002m\u0003\u0002\u0002\u0002\u0002o\u0003\u0002\u0002",
    "\u0002\u0002q\u0003\u0002\u0002\u0002\u0002s\u0003\u0002\u0002\u0002",
    "\u0002u\u0003\u0002\u0002\u0002\u0002w\u0003\u0002\u0002\u0002\u0002",
    "y\u0003\u0002\u0002\u0002\u0002{\u0003\u0002\u0002\u0002\u0002}\u0003",
    "\u0002\u0002\u0002\u0002\u007f\u0003\u0002\u0002\u0002\u0002\u0081\u0003",
    "\u0002\u0002\u0002\u0002\u0083\u0003\u0002\u0002\u0002\u0002\u0085\u0003",
    "\u0002\u0002\u0002\u0002\u0087\u0003\u0002\u0002\u0002\u0002\u0089\u0003",
    "\u0002\u0002\u0002\u0002\u008b\u0003\u0002\u0002\u0002\u0002\u008d\u0003",
    "\u0002\u0002\u0002\u0002\u008f\u0003\u0002\u0002\u0002\u0002\u0091\u0003",
    "\u0002\u0002\u0002\u0002\u0093\u0003\u0002\u0002\u0002\u0002\u0095\u0003",
    "\u0002\u0002\u0002\u0002\u0097\u0003\u0002\u0002\u0002\u0002\u0099\u0003",
    "\u0002\u0002\u0002\u0002\u009b\u0003\u0002\u0002\u0002\u0002\u009d\u0003",
    "\u0002\u0002\u0002\u0002\u009f\u0003\u0002\u0002\u0002\u0002\u00a1\u0003",
    "\u0002\u0002\u0002\u0002\u00a3\u0003\u0002\u0002\u0002\u0002\u00a5\u0003",
    "\u0002\u0002\u0002\u0002\u00a7\u0003\u0002\u0002\u0002\u0002\u00a9\u0003",
    "\u0002\u0002\u0002\u0002\u00ab\u0003\u0002\u0002\u0002\u0002\u00ad\u0003",
    "\u0002\u0002\u0002\u0002\u00af\u0003\u0002\u0002\u0002\u0002\u00b1\u0003",
    "\u0002\u0002\u0002\u0002\u00b3\u0003\u0002\u0002\u0002\u0002\u00b5\u0003",
    "\u0002\u0002\u0002\u0002\u00b7\u0003\u0002\u0002\u0002\u0002\u00b9\u0003",
    "\u0002\u0002\u0002\u0002\u00bb\u0003\u0002\u0002\u0002\u0002\u00bd\u0003",
    "\u0002\u0002\u0002\u0002\u00bf\u0003\u0002\u0002\u0002\u0002\u00c1\u0003",
    "\u0002\u0002\u0002\u0002\u00c3\u0003\u0002\u0002\u0002\u0002\u00c5\u0003",
    "\u0002\u0002\u0002\u0002\u00c7\u0003\u0002\u0002\u0002\u0002\u00c9\u0003",
    "\u0002\u0002\u0002\u0002\u00cb\u0003\u0002\u0002\u0002\u0002\u00cd\u0003",
    "\u0002\u0002\u0002\u0002\u00cf\u0003\u0002\u0002\u0002\u0002\u00d1\u0003",
    "\u0002\u0002\u0002\u0002\u00d3\u0003\u0002\u0002\u0002\u0002\u00d5\u0003",
    "\u0002\u0002\u0002\u0002\u00d7\u0003\u0002\u0002\u0002\u0002\u00d9\u0003",
    "\u0002\u0002\u0002\u0002\u00db\u0003\u0002\u0002\u0002\u0002\u00dd\u0003",
    "\u0002\u0002\u0002\u0002\u00df\u0003\u0002\u0002\u0002\u0002\u00e1\u0003",
    "\u0002\u0002\u0002\u0002\u00e3\u0003\u0002\u0002\u0002\u0002\u00e5\u0003",
    "\u0002\u0002\u0002\u0002\u00e7\u0003\u0002\u0002\u0002\u0002\u00e9\u0003",
    "\u0002\u0002\u0002\u0002\u00eb\u0003\u0002\u0002\u0002\u0002\u00ed\u0003",
    "\u0002\u0002\u0002\u0002\u00ef\u0003\u0002\u0002\u0002\u0002\u00f1\u0003",
    "\u0002\u0002\u0002\u0002\u00f3\u0003\u0002\u0002\u0002\u0002\u00f5\u0003",
    "\u0002\u0002\u0002\u0002\u00f7\u0003\u0002\u0002\u0002\u0002\u00f9\u0003",
    "\u0002\u0002\u0002\u0002\u00ff\u0003\u0002\u0002\u0002\u0002\u0107\u0003",
    "\u0002\u0002\u0002\u0002\u0109\u0003\u0002\u0002\u0002\u0002\u010b\u0003",
    "\u0002\u0002\u0002\u0002\u010d\u0003\u0002\u0002\u0002\u0002\u010f\u0003",
    "\u0002\u0002\u0002\u0002\u0119\u0003\u0002\u0002\u0002\u0002\u0121\u0003",
    "\u0002\u0002\u0002\u0002\u012d\u0003\u0002\u0002\u0002\u0002\u0139\u0003",
    "\u0002\u0002\u0002\u0002\u0141\u0003\u0002\u0002\u0002\u0002\u0143\u0003",
    "\u0002\u0002\u0002\u0002\u0145\u0003\u0002\u0002\u0002\u0002\u0147\u0003",
    "\u0002\u0002\u0002\u0002\u0149\u0003\u0002\u0002\u0002\u0002\u014d\u0003",
    "\u0002\u0002\u0002\u0002\u014f\u0003\u0002\u0002\u0002\u0002\u0151\u0003",
    "\u0002\u0002\u0002\u0002\u0153\u0003\u0002\u0002\u0002\u0003\u0155\u0003",
    "\u0002\u0002\u0002\u0005\u015e\u0003\u0002\u0002\u0002\u0007\u0166\u0003",
    "\u0002\u0002\u0002\t\u016e\u0003\u0002\u0002\u0002\u000b\u0172\u0003",
    "\u0002\u0002\u0002\r\u0177\u0003\u0002\u0002\u0002\u000f\u017c\u0003",
    "\u0002\u0002\u0002\u0011\u0182\u0003\u0002\u0002\u0002\u0013\u0187\u0003",
    "\u0002\u0002\u0002\u0015\u018d\u0003\u0002\u0002\u0002\u0017\u0192\u0003",
    "\u0002\u0002\u0002\u0019\u019b\u0003\u0002\u0002\u0002\u001b\u01a4\u0003",
    "\u0002\u0002\u0002\u001d\u01aa\u0003\u0002\u0002\u0002\u001f\u01b0\u0003",
    "\u0002\u0002\u0002!\u01ba\u0003\u0002\u0002\u0002#\u01c5\u0003\u0002",
    "\u0002\u0002%\u01ce\u0003\u0002\u0002\u0002\'\u01d7\u0003\u0002\u0002",
    "\u0002)\u01df\u0003\u0002\u0002\u0002+\u01e6\u0003\u0002\u0002\u0002",
    "-\u01e9\u0003\u0002\u0002\u0002/\u01f0\u0003\u0002\u0002\u00021\u01f5",
    "\u0003\u0002\u0002\u00023\u0202\u0003\u0002\u0002\u00025\u0207\u0003",
    "\u0002\u0002\u00027\u020c\u0003\u0002\u0002\u00029\u0215\u0003\u0002",
    "\u0002\u0002;\u021c\u0003\u0002\u0002\u0002=\u0223\u0003\u0002\u0002",
    "\u0002?\u0229\u0003\u0002\u0002\u0002A\u022f\u0003\u0002\u0002\u0002",
    "C\u0235\u0003\u0002\u0002\u0002E\u0239\u0003\u0002\u0002\u0002G\u0240",
    "\u0003\u0002\u0002\u0002I\u0245\u0003\u0002\u0002\u0002K\u0248\u0003",
    "\u0002\u0002\u0002M\u024f\u0003\u0002\u0002\u0002O\u0253\u0003\u0002",
    "\u0002\u0002Q\u0258\u0003\u0002\u0002\u0002S\u0260\u0003\u0002\u0002",
    "\u0002U\u026a\u0003\u0002\u0002\u0002W\u026e\u0003\u0002\u0002\u0002",
    "Y\u0277\u0003\u0002\u0002\u0002[\u027f\u0003\u0002\u0002\u0002]\u0288",
    "\u0003\u0002\u0002\u0002_\u0291\u0003\u0002\u0002\u0002a\u0299\u0003",
    "\u0002\u0002\u0002c\u02a3\u0003\u0002\u0002\u0002e\u02aa\u0003\u0002",
    "\u0002\u0002g\u02b3\u0003\u0002\u0002\u0002i\u02c4\u0003\u0002\u0002",
    "\u0002k\u02cb\u0003\u0002\u0002\u0002m\u02d1\u0003\u0002\u0002\u0002",
    "o\u02d8\u0003\u0002\u0002\u0002q\u02df\u0003\u0002\u0002\u0002s\u02e6",
    "\u0003\u0002\u0002\u0002u\u02f4\u0003\u0002\u0002\u0002w\u0300\u0003",
    "\u0002\u0002\u0002y\u0307\u0003\u0002\u0002\u0002{\u030e\u0003\u0002",
    "\u0002\u0002}\u0317\u0003\u0002\u0002\u0002\u007f\u031c\u0003\u0002",
    "\u0002\u0002\u0081\u0329\u0003\u0002\u0002\u0002\u0083\u032f\u0003\u0002",
    "\u0002\u0002\u0085\u0334\u0003\u0002\u0002\u0002\u0087\u0338\u0003\u0002",
    "\u0002\u0002\u0089\u0340\u0003\u0002\u0002\u0002\u008b\u0347\u0003\u0002",
    "\u0002\u0002\u008d\u0350\u0003\u0002\u0002\u0002\u008f\u0356\u0003\u0002",
    "\u0002\u0002\u0091\u035f\u0003\u0002\u0002\u0002\u0093\u0365\u0003\u0002",
    "\u0002\u0002\u0095\u036d\u0003\u0002\u0002\u0002\u0097\u0372\u0003\u0002",
    "\u0002\u0002\u0099\u037b\u0003\u0002\u0002\u0002\u009b\u0383\u0003\u0002",
    "\u0002\u0002\u009d\u0389\u0003\u0002\u0002\u0002\u009f\u038b\u0003\u0002",
    "\u0002\u0002\u00a1\u038d\u0003\u0002\u0002\u0002\u00a3\u038f\u0003\u0002",
    "\u0002\u0002\u00a5\u0391\u0003\u0002\u0002\u0002\u00a7\u0393\u0003\u0002",
    "\u0002\u0002\u00a9\u0395\u0003\u0002\u0002\u0002\u00ab\u0397\u0003\u0002",
    "\u0002\u0002\u00ad\u0399\u0003\u0002\u0002\u0002\u00af\u039b\u0003\u0002",
    "\u0002\u0002\u00b1\u039d\u0003\u0002\u0002\u0002\u00b3\u039f\u0003\u0002",
    "\u0002\u0002\u00b5\u03a1\u0003\u0002\u0002\u0002\u00b7\u03a3\u0003\u0002",
    "\u0002\u0002\u00b9\u03a5\u0003\u0002\u0002\u0002\u00bb\u03a7\u0003\u0002",
    "\u0002\u0002\u00bd\u03a9\u0003\u0002\u0002\u0002\u00bf\u03ab\u0003\u0002",
    "\u0002\u0002\u00c1\u03ad\u0003\u0002\u0002\u0002\u00c3\u03af\u0003\u0002",
    "\u0002\u0002\u00c5\u03b2\u0003\u0002\u0002\u0002\u00c7\u03b5\u0003\u0002",
    "\u0002\u0002\u00c9\u03b8\u0003\u0002\u0002\u0002\u00cb\u03bb\u0003\u0002",
    "\u0002\u0002\u00cd\u03be\u0003\u0002\u0002\u0002\u00cf\u03c1\u0003\u0002",
    "\u0002\u0002\u00d1\u03c4\u0003\u0002\u0002\u0002\u00d3\u03c7\u0003\u0002",
    "\u0002\u0002\u00d5\u03ca\u0003\u0002\u0002\u0002\u00d7\u03ce\u0003\u0002",
    "\u0002\u0002\u00d9\u03d1\u0003\u0002\u0002\u0002\u00db\u03d4\u0003\u0002",
    "\u0002\u0002\u00dd\u03d7\u0003\u0002\u0002\u0002\u00df\u03da\u0003\u0002",
    "\u0002\u0002\u00e1\u03dd\u0003\u0002\u0002\u0002\u00e3\u03e0\u0003\u0002",
    "\u0002\u0002\u00e5\u03e3\u0003\u0002\u0002\u0002\u00e7\u03e6\u0003\u0002",
    "\u0002\u0002\u00e9\u03e8\u0003\u0002\u0002\u0002\u00eb\u03ec\u0003\u0002",
    "\u0002\u0002\u00ed\u03ef\u0003\u0002\u0002\u0002\u00ef\u03f1\u0003\u0002",
    "\u0002\u0002\u00f1\u03f3\u0003\u0002\u0002\u0002\u00f3\u03f6\u0003\u0002",
    "\u0002\u0002\u00f5\u03f8\u0003\u0002\u0002\u0002\u00f7\u03fa\u0003\u0002",
    "\u0002\u0002\u00f9\u03fd\u0003\u0002\u0002\u0002\u00fb\u0401\u0003\u0002",
    "\u0002\u0002\u00fd\u0410\u0003\u0002\u0002\u0002\u00ff\u0412\u0003\u0002",
    "\u0002\u0002\u0101\u041c\u0003\u0002\u0002\u0002\u0103\u041e\u0003\u0002",
    "\u0002\u0002\u0105\u0420\u0003\u0002\u0002\u0002\u0107\u0432\u0003\u0002",
    "\u0002\u0002\u0109\u0434\u0003\u0002\u0002\u0002\u010b\u043e\u0003\u0002",
    "\u0002\u0002\u010d\u044c\u0003\u0002\u0002\u0002\u010f\u045c\u0003\u0002",
    "\u0002\u0002\u0111\u0468\u0003\u0002\u0002\u0002\u0113\u046a\u0003\u0002",
    "\u0002\u0002\u0115\u046c\u0003\u0002\u0002\u0002\u0117\u046e\u0003\u0002",
    "\u0002\u0002\u0119\u0480\u0003\u0002\u0002\u0002\u011b\u0482\u0003\u0002",
    "\u0002\u0002\u011d\u0484\u0003\u0002\u0002\u0002\u011f\u048a\u0003\u0002",
    "\u0002\u0002\u0121\u04af\u0003\u0002\u0002\u0002\u0123\u04b4\u0003\u0002",
    "\u0002\u0002\u0125\u04b9\u0003\u0002\u0002\u0002\u0127\u04d1\u0003\u0002",
    "\u0002\u0002\u0129\u04de\u0003\u0002\u0002\u0002\u012b\u04e0\u0003\u0002",
    "\u0002\u0002\u012d\u04f4\u0003\u0002\u0002\u0002\u012f\u04fe\u0003\u0002",
    "\u0002\u0002\u0131\u050a\u0003\u0002\u0002\u0002\u0133\u050c\u0003\u0002",
    "\u0002\u0002\u0135\u050e\u0003\u0002\u0002\u0002\u0137\u0518\u0003\u0002",
    "\u0002\u0002\u0139\u052a\u0003\u0002\u0002\u0002\u013b\u052f\u0003\u0002",
    "\u0002\u0002\u013d\u0534\u0003\u0002\u0002\u0002\u013f\u0536\u0003\u0002",
    "\u0002\u0002\u0141\u054f\u0003\u0002\u0002\u0002\u0143\u055d\u0003\u0002",
    "\u0002\u0002\u0145\u0569\u0003\u0002\u0002\u0002\u0147\u056b\u0003\u0002",
    "\u0002\u0002\u0149\u056e\u0003\u0002\u0002\u0002\u014b\u0571\u0003\u0002",
    "\u0002\u0002\u014d\u0574\u0003\u0002\u0002\u0002\u014f\u057f\u0003\u0002",
    "\u0002\u0002\u0151\u0583\u0003\u0002\u0002\u0002\u0153\u0591\u0003\u0002",
    "\u0002\u0002\u0155\u0159\u0007%\u0002\u0002\u0156\u0158\n\u0002\u0002",
    "\u0002\u0157\u0156\u0003\u0002\u0002\u0002\u0158\u015b\u0003\u0002\u0002",
    "\u0002\u0159\u0157\u0003\u0002\u0002\u0002\u0159\u015a\u0003\u0002\u0002",
    "\u0002\u015a\u015c\u0003\u0002\u0002\u0002\u015b\u0159\u0003\u0002\u0002",
    "\u0002\u015c\u015d\b\u0002\u0002\u0002\u015d\u0004\u0003\u0002\u0002",
    "\u0002\u015e\u015f\u0007c\u0002\u0002\u015f\u0160\u0007n\u0002\u0002",
    "\u0160\u0161\u0007k\u0002\u0002\u0161\u0162\u0007i\u0002\u0002\u0162",
    "\u0163\u0007p\u0002\u0002\u0163\u0164\u0007c\u0002\u0002\u0164\u0165",
    "\u0007u\u0002\u0002\u0165\u0006\u0003\u0002\u0002\u0002\u0166\u0167",
    "\u0007c\u0002\u0002\u0167\u0168\u0007n\u0002\u0002\u0168\u0169\u0007",
    "k\u0002\u0002\u0169\u016a\u0007i\u0002\u0002\u016a\u016b\u0007p\u0002",
    "\u0002\u016b\u016c\u0007q\u0002\u0002\u016c\u016d\u0007h\u0002\u0002",
    "\u016d\b\u0003\u0002\u0002\u0002\u016e\u016f\u0007c\u0002\u0002\u016f",
    "\u0170\u0007u\u0002\u0002\u0170\u0171\u0007o\u0002\u0002\u0171\n\u0003",
    "\u0002\u0002\u0002\u0172\u0173\u0007c\u0002\u0002\u0173\u0174\u0007",
    "w\u0002\u0002\u0174\u0175\u0007v\u0002\u0002\u0175\u0176\u0007q\u0002",
    "\u0002\u0176\f\u0003\u0002\u0002\u0002\u0177\u0178\u0007d\u0002\u0002",
    "\u0178\u0179\u0007q\u0002\u0002\u0179\u017a\u0007q\u0002\u0002\u017a",
    "\u017b\u0007n\u0002\u0002\u017b\u000e\u0003\u0002\u0002\u0002\u017c",
    "\u017d\u0007d\u0002\u0002\u017d\u017e\u0007t\u0002\u0002\u017e\u017f",
    "\u0007g\u0002\u0002\u017f\u0180\u0007c\u0002\u0002\u0180\u0181\u0007",
    "m\u0002\u0002\u0181\u0010\u0003\u0002\u0002\u0002\u0182\u0183\u0007",
    "e\u0002\u0002\u0183\u0184\u0007c\u0002\u0002\u0184\u0185\u0007u\u0002",
    "\u0002\u0185\u0186\u0007g\u0002\u0002\u0186\u0012\u0003\u0002\u0002",
    "\u0002\u0187\u0188\u0007e\u0002\u0002\u0188\u0189\u0007c\u0002\u0002",
    "\u0189\u018a\u0007v\u0002\u0002\u018a\u018b\u0007e\u0002\u0002\u018b",
    "\u018c\u0007j\u0002\u0002\u018c\u0014\u0003\u0002\u0002\u0002\u018d",
    "\u018e\u0007e\u0002\u0002\u018e\u018f\u0007j\u0002\u0002\u018f\u0190",
    "\u0007c\u0002\u0002\u0190\u0191\u0007t\u0002\u0002\u0191\u0016\u0003",
    "\u0002\u0002\u0002\u0192\u0193\u0007e\u0002\u0002\u0193\u0194\u0007",
    "j\u0002\u0002\u0194\u0195\u0007c\u0002\u0002\u0195\u0196\u0007t\u0002",
    "\u0002\u0196\u0197\u00073\u0002\u0002\u0197\u0198\u00078\u0002\u0002",
    "\u0198\u0199\u0007a\u0002\u0002\u0199\u019a\u0007v\u0002\u0002\u019a",
    "\u0018\u0003\u0002\u0002\u0002\u019b\u019c\u0007e\u0002\u0002\u019c",
    "\u019d\u0007j\u0002\u0002\u019d\u019e\u0007c\u0002\u0002\u019e\u019f",
    "\u0007t\u0002\u0002\u019f\u01a0\u00075\u0002\u0002\u01a0\u01a1\u0007",
    "4\u0002\u0002\u01a1\u01a2\u0007a\u0002\u0002\u01a2\u01a3\u0007v\u0002",
    "\u0002\u01a3\u001a\u0003\u0002\u0002\u0002\u01a4\u01a5\u0007e\u0002",
    "\u0002\u01a5\u01a6\u0007n\u0002\u0002\u01a6\u01a7\u0007c\u0002\u0002",
    "\u01a7\u01a8\u0007u\u0002\u0002\u01a8\u01a9\u0007u\u0002\u0002\u01a9",
    "\u001c\u0003\u0002\u0002\u0002\u01aa\u01ab\u0007e\u0002\u0002\u01ab",
    "\u01ac\u0007q\u0002\u0002\u01ac\u01ad\u0007p\u0002\u0002\u01ad\u01ae",
    "\u0007u\u0002\u0002\u01ae\u01af\u0007v\u0002\u0002\u01af\u001e\u0003",
    "\u0002\u0002\u0002\u01b0\u01b1\u0007e\u0002\u0002\u01b1\u01b2\u0007",
    "q\u0002\u0002\u01b2\u01b3\u0007p\u0002\u0002\u01b3\u01b4\u0007u\u0002",
    "\u0002\u01b4\u01b5\u0007v\u0002\u0002\u01b5\u01b6\u0007g\u0002\u0002",
    "\u01b6\u01b7\u0007z\u0002\u0002\u01b7\u01b8\u0007r\u0002\u0002\u01b8",
    "\u01b9\u0007t\u0002\u0002\u01b9 \u0003\u0002\u0002\u0002\u01ba\u01bb",
    "\u0007e\u0002\u0002\u01bb\u01bc\u0007q\u0002\u0002\u01bc\u01bd\u0007",
    "p\u0002\u0002\u01bd\u01be\u0007u\u0002\u0002\u01be\u01bf\u0007v\u0002",
    "\u0002\u01bf\u01c0\u0007a\u0002\u0002\u01c0\u01c1\u0007e\u0002\u0002",
    "\u01c1\u01c2\u0007c\u0002\u0002\u01c2\u01c3\u0007u\u0002\u0002\u01c3",
    "\u01c4\u0007v\u0002\u0002\u01c4\"\u0003\u0002\u0002\u0002\u01c5\u01c6",
    "\u0007e\u0002\u0002\u01c6\u01c7\u0007q\u0002\u0002\u01c7\u01c8\u0007",
    "p\u0002\u0002\u01c8\u01c9\u0007v\u0002\u0002\u01c9\u01ca\u0007k\u0002",
    "\u0002\u01ca\u01cb\u0007p\u0002\u0002\u01cb\u01cc\u0007w\u0002\u0002",
    "\u01cc\u01cd\u0007g\u0002\u0002\u01cd$\u0003\u0002\u0002\u0002\u01ce",
    "\u01cf\u0007f\u0002\u0002\u01cf\u01d0\u0007g\u0002\u0002\u01d0\u01d1",
    "\u0007e\u0002\u0002\u01d1\u01d2\u0007n\u0002\u0002\u01d2\u01d3\u0007",
    "v\u0002\u0002\u01d3\u01d4\u0007{\u0002\u0002\u01d4\u01d5\u0007r\u0002",
    "\u0002\u01d5\u01d6\u0007g\u0002\u0002\u01d6&\u0003\u0002\u0002\u0002",
    "\u01d7\u01d8\u0007f\u0002\u0002\u01d8\u01d9\u0007g\u0002\u0002\u01d9",
    "\u01da\u0007h\u0002\u0002\u01da\u01db\u0007c\u0002\u0002\u01db\u01dc",
    "\u0007w\u0002\u0002\u01dc\u01dd\u0007n\u0002\u0002\u01dd\u01de\u0007",
    "v\u0002\u0002\u01de(\u0003\u0002\u0002\u0002\u01df\u01e0\u0007f\u0002",
    "\u0002\u01e0\u01e1\u0007g\u0002\u0002\u01e1\u01e2\u0007n\u0002\u0002",
    "\u01e2\u01e3\u0007g\u0002\u0002\u01e3\u01e4\u0007v\u0002\u0002\u01e4",
    "\u01e5\u0007g\u0002\u0002\u01e5*\u0003\u0002\u0002\u0002\u01e6\u01e7",
    "\u0007f\u0002\u0002\u01e7\u01e8\u0007q\u0002\u0002\u01e8,\u0003\u0002",
    "\u0002\u0002\u01e9\u01ea\u0007f\u0002\u0002\u01ea\u01eb\u0007q\u0002",
    "\u0002\u01eb\u01ec\u0007w\u0002\u0002\u01ec\u01ed\u0007d\u0002\u0002",
    "\u01ed\u01ee\u0007n\u0002\u0002\u01ee\u01ef\u0007g\u0002\u0002\u01ef",
    ".\u0003\u0002\u0002\u0002\u01f0\u01f1\u0007H\u0002\u0002\u01f1\u01f2",
    "\u0007K\u0002\u0002\u01f2\u01f3\u0007N\u0002\u0002\u01f3\u01f4\u0007",
    "G\u0002\u0002\u01f40\u0003\u0002\u0002\u0002\u01f5\u01f6\u0007f\u0002",
    "\u0002\u01f6\u01f7\u0007{\u0002\u0002\u01f7\u01f8\u0007p\u0002\u0002",
    "\u01f8\u01f9\u0007c\u0002\u0002\u01f9\u01fa\u0007o\u0002\u0002\u01fa",
    "\u01fb\u0007k\u0002\u0002\u01fb\u01fc\u0007e\u0002\u0002\u01fc\u01fd",
    "\u0007a\u0002\u0002\u01fd\u01fe\u0007e\u0002\u0002\u01fe\u01ff\u0007",
    "c\u0002\u0002\u01ff\u0200\u0007u\u0002\u0002\u0200\u0201\u0007v\u0002",
    "\u0002\u02012\u0003\u0002\u0002\u0002\u0202\u0203\u0007g\u0002\u0002",
    "\u0203\u0204\u0007n\u0002\u0002\u0204\u0205\u0007u\u0002\u0002\u0205",
    "\u0206\u0007g\u0002\u0002\u02064\u0003\u0002\u0002\u0002\u0207\u0208",
    "\u0007g\u0002\u0002\u0208\u0209\u0007p\u0002\u0002\u0209\u020a\u0007",
    "w\u0002\u0002\u020a\u020b\u0007o\u0002\u0002\u020b6\u0003\u0002\u0002",
    "\u0002\u020c\u020d\u0007g\u0002\u0002\u020d\u020e\u0007z\u0002\u0002",
    "\u020e\u020f\u0007r\u0002\u0002\u020f\u0210\u0007n\u0002\u0002\u0210",
    "\u0211\u0007k\u0002\u0002\u0211\u0212\u0007e\u0002\u0002\u0212\u0213",
    "\u0007k\u0002\u0002\u0213\u0214\u0007v\u0002\u0002\u02148\u0003\u0002",
    "\u0002\u0002\u0215\u0216\u0007g\u0002\u0002\u0216\u0217\u0007z\u0002",
    "\u0002\u0217\u0218\u0007r\u0002\u0002\u0218\u0219\u0007q\u0002\u0002",
    "\u0219\u021a\u0007t\u0002\u0002\u021a\u021b\u0007v\u0002\u0002\u021b",
    ":\u0003\u0002\u0002\u0002\u021c\u021d\u0007g\u0002\u0002\u021d\u021e",
    "\u0007z\u0002\u0002\u021e\u021f\u0007v\u0002\u0002\u021f\u0220\u0007",
    "g\u0002\u0002\u0220\u0221\u0007t\u0002\u0002\u0221\u0222\u0007p\u0002",
    "\u0002\u0222<\u0003\u0002\u0002\u0002\u0223\u0224\u0007h\u0002\u0002",
    "\u0224\u0225\u0007c\u0002\u0002\u0225\u0226\u0007n\u0002\u0002\u0226",
    "\u0227\u0007u\u0002\u0002\u0227\u0228\u0007g\u0002\u0002\u0228>\u0003",
    "\u0002\u0002\u0002\u0229\u022a\u0007h\u0002\u0002\u022a\u022b\u0007",
    "k\u0002\u0002\u022b\u022c\u0007p\u0002\u0002\u022c\u022d\u0007c\u0002",
    "\u0002\u022d\u022e\u0007n\u0002\u0002\u022e@\u0003\u0002\u0002\u0002",
    "\u022f\u0230\u0007h\u0002\u0002\u0230\u0231\u0007n\u0002\u0002\u0231",
    "\u0232\u0007q\u0002\u0002\u0232\u0233\u0007c\u0002\u0002\u0233\u0234",
    "\u0007v\u0002\u0002\u0234B\u0003\u0002\u0002\u0002\u0235\u0236\u0007",
    "h\u0002\u0002\u0236\u0237\u0007q\u0002\u0002\u0237\u0238\u0007t\u0002",
    "\u0002\u0238D\u0003\u0002\u0002\u0002\u0239\u023a\u0007h\u0002\u0002",
    "\u023a\u023b\u0007t\u0002\u0002\u023b\u023c\u0007k\u0002\u0002\u023c",
    "\u023d\u0007g\u0002\u0002\u023d\u023e\u0007p\u0002\u0002\u023e\u023f",
    "\u0007f\u0002\u0002\u023fF\u0003\u0002\u0002\u0002\u0240\u0241\u0007",
    "i\u0002\u0002\u0241\u0242\u0007q\u0002\u0002\u0242\u0243\u0007v\u0002",
    "\u0002\u0243\u0244\u0007q\u0002\u0002\u0244H\u0003\u0002\u0002\u0002",
    "\u0245\u0246\u0007k\u0002\u0002\u0246\u0247\u0007h\u0002\u0002\u0247",
    "J\u0003\u0002\u0002\u0002\u0248\u0249\u0007k\u0002\u0002\u0249\u024a",
    "\u0007p\u0002\u0002\u024a\u024b\u0007n\u0002\u0002\u024b\u024c\u0007",
    "k\u0002\u0002\u024c\u024d\u0007p\u0002\u0002\u024d\u024e\u0007g\u0002",
    "\u0002\u024eL\u0003\u0002\u0002\u0002\u024f\u0250\u0007k\u0002\u0002",
    "\u0250\u0251\u0007p\u0002\u0002\u0251\u0252\u0007v\u0002\u0002\u0252",
    "N\u0003\u0002\u0002\u0002\u0253\u0254\u0007n\u0002\u0002\u0254\u0255",
    "\u0007q\u0002\u0002\u0255\u0256\u0007p\u0002\u0002\u0256\u0257\u0007",
    "i\u0002\u0002\u0257P\u0003\u0002\u0002\u0002\u0258\u0259\u0007o\u0002",
    "\u0002\u0259\u025a\u0007w\u0002\u0002\u025a\u025b\u0007v\u0002\u0002",
    "\u025b\u025c\u0007c\u0002\u0002\u025c\u025d\u0007d\u0002\u0002\u025d",
    "\u025e\u0007n\u0002\u0002\u025e\u025f\u0007g\u0002\u0002\u025fR\u0003",
    "\u0002\u0002\u0002\u0260\u0261\u0007p\u0002\u0002\u0261\u0262\u0007",
    "c\u0002\u0002\u0262\u0263\u0007o\u0002\u0002\u0263\u0264\u0007g\u0002",
    "\u0002\u0264\u0265\u0007u\u0002\u0002\u0265\u0266\u0007r\u0002\u0002",
    "\u0266\u0267\u0007c\u0002\u0002\u0267\u0268\u0007e\u0002\u0002\u0268",
    "\u0269\u0007g\u0002\u0002\u0269T\u0003\u0002\u0002\u0002\u026a\u026b",
    "\u0007p\u0002\u0002\u026b\u026c\u0007g\u0002\u0002\u026c\u026d\u0007",
    "y\u0002\u0002\u026dV\u0003\u0002\u0002\u0002\u026e\u026f\u0007p\u0002",
    "\u0002\u026f\u0270\u0007q\u0002\u0002\u0270\u0271\u0007g\u0002\u0002",
    "\u0271\u0272\u0007z\u0002\u0002\u0272\u0273\u0007e\u0002\u0002\u0273",
    "\u0274\u0007g\u0002\u0002\u0274\u0275\u0007r\u0002\u0002\u0275\u0276",
    "\u0007v\u0002\u0002\u0276X\u0003\u0002\u0002\u0002\u0277\u0278\u0007",
    "p\u0002\u0002\u0278\u0279\u0007w\u0002\u0002\u0279\u027a\u0007n\u0002",
    "\u0002\u027a\u027b\u0007n\u0002\u0002\u027b\u027c\u0007r\u0002\u0002",
    "\u027c\u027d\u0007v\u0002\u0002\u027d\u027e\u0007t\u0002\u0002\u027e",
    "Z\u0003\u0002\u0002\u0002\u027f\u0280\u0007q\u0002\u0002\u0280\u0281",
    "\u0007r\u0002\u0002\u0281\u0282\u0007g\u0002\u0002\u0282\u0283\u0007",
    "t\u0002\u0002\u0283\u0284\u0007c\u0002\u0002\u0284\u0285\u0007v\u0002",
    "\u0002\u0285\u0286\u0007q\u0002\u0002\u0286\u0287\u0007t\u0002\u0002",
    "\u0287\\\u0003\u0002\u0002\u0002\u0288\u0289\u0007q\u0002\u0002\u0289",
    "\u028a\u0007x\u0002\u0002\u028a\u028b\u0007g\u0002\u0002\u028b\u028c",
    "\u0007t\u0002\u0002\u028c\u028d\u0007t\u0002\u0002\u028d\u028e\u0007",
    "k\u0002\u0002\u028e\u028f\u0007f\u0002\u0002\u028f\u0290\u0007g\u0002",
    "\u0002\u0290^\u0003\u0002\u0002\u0002\u0291\u0292\u0007r\u0002\u0002",
    "\u0292\u0293\u0007t\u0002\u0002\u0293\u0294\u0007k\u0002\u0002\u0294",
    "\u0295\u0007x\u0002\u0002\u0295\u0296\u0007c\u0002\u0002\u0296\u0297",
    "\u0007v\u0002\u0002\u0297\u0298\u0007g\u0002\u0002\u0298`\u0003\u0002",
    "\u0002\u0002\u0299\u029a\u0007r\u0002\u0002\u029a\u029b\u0007t\u0002",
    "\u0002\u029b\u029c\u0007q\u0002\u0002\u029c\u029d\u0007v\u0002\u0002",
    "\u029d\u029e\u0007g\u0002\u0002\u029e\u029f\u0007e\u0002\u0002\u029f",
    "\u02a0\u0007v\u0002\u0002\u02a0\u02a1\u0007g\u0002\u0002\u02a1\u02a2",
    "\u0007f\u0002\u0002\u02a2b\u0003\u0002\u0002\u0002\u02a3\u02a4\u0007",
    "r\u0002\u0002\u02a4\u02a5\u0007w\u0002\u0002\u02a5\u02a6\u0007d\u0002",
    "\u0002\u02a6\u02a7\u0007n\u0002\u0002\u02a7\u02a8\u0007k\u0002\u0002",
    "\u02a8\u02a9\u0007e\u0002\u0002\u02a9d\u0003\u0002\u0002\u0002\u02aa",
    "\u02ab\u0007t\u0002\u0002\u02ab\u02ac\u0007g\u0002\u0002\u02ac\u02ad",
    "\u0007i\u0002\u0002\u02ad\u02ae\u0007k\u0002\u0002\u02ae\u02af\u0007",
    "u\u0002\u0002\u02af\u02b0\u0007v\u0002\u0002\u02b0\u02b1\u0007g\u0002",
    "\u0002\u02b1\u02b2\u0007t\u0002\u0002\u02b2f\u0003\u0002\u0002\u0002",
    "\u02b3\u02b4\u0007t\u0002\u0002\u02b4\u02b5\u0007g\u0002\u0002\u02b5",
    "\u02b6\u0007k\u0002\u0002\u02b6\u02b7\u0007p\u0002\u0002\u02b7\u02b8",
    "\u0007v\u0002\u0002\u02b8\u02b9\u0007g\u0002\u0002\u02b9\u02ba\u0007",
    "t\u0002\u0002\u02ba\u02bb\u0007r\u0002\u0002\u02bb\u02bc\u0007t\u0002",
    "\u0002\u02bc\u02bd\u0007g\u0002\u0002\u02bd\u02be\u0007v\u0002\u0002",
    "\u02be\u02bf\u0007a\u0002\u0002\u02bf\u02c0\u0007e\u0002\u0002\u02c0",
    "\u02c1\u0007c\u0002\u0002\u02c1\u02c2\u0007u\u0002\u0002\u02c2\u02c3",
    "\u0007v\u0002\u0002\u02c3h\u0003\u0002\u0002\u0002\u02c4\u02c5\u0007",
    "t\u0002\u0002\u02c5\u02c6\u0007g\u0002\u0002\u02c6\u02c7\u0007v\u0002",
    "\u0002\u02c7\u02c8\u0007w\u0002\u0002\u02c8\u02c9\u0007t\u0002\u0002",
    "\u02c9\u02ca\u0007p\u0002\u0002\u02caj\u0003\u0002\u0002\u0002\u02cb",
    "\u02cc\u0007u\u0002\u0002\u02cc\u02cd\u0007j\u0002\u0002\u02cd\u02ce",
    "\u0007q\u0002\u0002\u02ce\u02cf\u0007t\u0002\u0002\u02cf\u02d0\u0007",
    "v\u0002\u0002\u02d0l\u0003\u0002\u0002\u0002\u02d1\u02d2\u0007u\u0002",
    "\u0002\u02d2\u02d3\u0007k\u0002\u0002\u02d3\u02d4\u0007i\u0002\u0002",
    "\u02d4\u02d5\u0007p\u0002\u0002\u02d5\u02d6\u0007g\u0002\u0002\u02d6",
    "\u02d7\u0007f\u0002\u0002\u02d7n\u0003\u0002\u0002\u0002\u02d8\u02d9",
    "\u0007u\u0002\u0002\u02d9\u02da\u0007k\u0002\u0002\u02da\u02db\u0007",
    "|\u0002\u0002\u02db\u02dc\u0007g\u0002\u0002\u02dc\u02dd\u0007q\u0002",
    "\u0002\u02dd\u02de\u0007h\u0002\u0002\u02dep\u0003\u0002\u0002\u0002",
    "\u02df\u02e0\u0007u\u0002\u0002\u02e0\u02e1\u0007v\u0002\u0002\u02e1",
    "\u02e2\u0007c\u0002\u0002\u02e2\u02e3\u0007v\u0002\u0002\u02e3\u02e4",
    "\u0007k\u0002\u0002\u02e4\u02e5\u0007e\u0002\u0002\u02e5r\u0003\u0002",
    "\u0002\u0002\u02e6\u02e7\u0007u\u0002\u0002\u02e7\u02e8\u0007v\u0002",
    "\u0002\u02e8\u02e9\u0007c\u0002\u0002\u02e9\u02ea\u0007v\u0002\u0002",
    "\u02ea\u02eb\u0007k\u0002\u0002\u02eb\u02ec\u0007e\u0002\u0002\u02ec",
    "\u02ed\u0007a\u0002\u0002\u02ed\u02ee\u0007c\u0002\u0002\u02ee\u02ef",
    "\u0007u\u0002\u0002\u02ef\u02f0\u0007u\u0002\u0002\u02f0\u02f1\u0007",
    "g\u0002\u0002\u02f1\u02f2\u0007t\u0002\u0002\u02f2\u02f3\u0007v\u0002",
    "\u0002\u02f3t\u0003\u0002\u0002\u0002\u02f4\u02f5\u0007u\u0002\u0002",
    "\u02f5\u02f6\u0007v\u0002\u0002\u02f6\u02f7\u0007c\u0002\u0002\u02f7",
    "\u02f8\u0007v\u0002\u0002\u02f8\u02f9\u0007k\u0002\u0002\u02f9\u02fa",
    "\u0007e\u0002\u0002\u02fa\u02fb\u0007a\u0002\u0002\u02fb\u02fc\u0007",
    "e\u0002\u0002\u02fc\u02fd\u0007c\u0002\u0002\u02fd\u02fe\u0007u\u0002",
    "\u0002\u02fe\u02ff\u0007v\u0002\u0002\u02ffv\u0003\u0002\u0002\u0002",
    "\u0300\u0301\u0007u\u0002\u0002\u0301\u0302\u0007v\u0002\u0002\u0302",
    "\u0303\u0007t\u0002\u0002\u0303\u0304\u0007w\u0002\u0002\u0304\u0305",
    "\u0007e\u0002\u0002\u0305\u0306\u0007v\u0002\u0002\u0306x\u0003\u0002",
    "\u0002\u0002\u0307\u0308\u0007u\u0002\u0002\u0308\u0309\u0007y\u0002",
    "\u0002\u0309\u030a\u0007k\u0002\u0002\u030a\u030b\u0007v\u0002\u0002",
    "\u030b\u030c\u0007e\u0002\u0002\u030c\u030d\u0007j\u0002\u0002\u030d",
    "z\u0003\u0002\u0002\u0002\u030e\u030f\u0007v\u0002\u0002\u030f\u0310",
    "\u0007g\u0002\u0002\u0310\u0311\u0007o\u0002\u0002\u0311\u0312\u0007",
    "r\u0002\u0002\u0312\u0313\u0007n\u0002\u0002\u0313\u0314\u0007c\u0002",
    "\u0002\u0314\u0315\u0007v\u0002\u0002\u0315\u0316\u0007g\u0002\u0002",
    "\u0316|\u0003\u0002\u0002\u0002\u0317\u0318\u0007v\u0002\u0002\u0318",
    "\u0319\u0007j\u0002\u0002\u0319\u031a\u0007k\u0002\u0002\u031a\u031b",
    "\u0007u\u0002\u0002\u031b~\u0003\u0002\u0002\u0002\u031c\u031d\u0007",
    "v\u0002\u0002\u031d\u031e\u0007j\u0002\u0002\u031e\u031f\u0007t\u0002",
    "\u0002\u031f\u0320\u0007g\u0002\u0002\u0320\u0321\u0007c\u0002\u0002",
    "\u0321\u0322\u0007f\u0002\u0002\u0322\u0323\u0007a\u0002\u0002\u0323",
    "\u0324\u0007n\u0002\u0002\u0324\u0325\u0007q\u0002\u0002\u0325\u0326",
    "\u0007e\u0002\u0002\u0326\u0327\u0007c\u0002\u0002\u0327\u0328\u0007",
    "n\u0002\u0002\u0328\u0080\u0003\u0002\u0002\u0002\u0329\u032a\u0007",
    "v\u0002\u0002\u032a\u032b\u0007j\u0002\u0002\u032b\u032c\u0007t\u0002",
    "\u0002\u032c\u032d\u0007q\u0002\u0002\u032d\u032e\u0007y\u0002\u0002",
    "\u032e\u0082\u0003\u0002\u0002\u0002\u032f\u0330\u0007v\u0002\u0002",
    "\u0330\u0331\u0007t\u0002\u0002\u0331\u0332\u0007w\u0002\u0002\u0332",
    "\u0333\u0007g\u0002\u0002\u0333\u0084\u0003\u0002\u0002\u0002\u0334",
    "\u0335\u0007v\u0002\u0002\u0335\u0336\u0007t\u0002\u0002\u0336\u0337",
    "\u0007{\u0002\u0002\u0337\u0086\u0003\u0002\u0002\u0002\u0338\u0339",
    "\u0007v\u0002\u0002\u0339\u033a\u0007{\u0002\u0002\u033a\u033b\u0007",
    "r\u0002\u0002\u033b\u033c\u0007g\u0002\u0002\u033c\u033d\u0007f\u0002",
    "\u0002\u033d\u033e\u0007g\u0002\u0002\u033e\u033f\u0007h\u0002\u0002",
    "\u033f\u0088\u0003\u0002\u0002\u0002\u0340\u0341\u0007v\u0002\u0002",
    "\u0341\u0342\u0007{\u0002\u0002\u0342\u0343\u0007r\u0002\u0002\u0343",
    "\u0344\u0007g\u0002\u0002\u0344\u0345\u0007k\u0002\u0002\u0345\u0346",
    "\u0007f\u0002\u0002\u0346\u008a\u0003\u0002\u0002\u0002\u0347\u0348",
    "\u0007v\u0002\u0002\u0348\u0349\u0007{\u0002\u0002\u0349\u034a\u0007",
    "r\u0002\u0002\u034a\u034b\u0007g\u0002\u0002\u034b\u034c\u0007p\u0002",
    "\u0002\u034c\u034d\u0007c\u0002\u0002\u034d\u034e\u0007o\u0002\u0002",
    "\u034e\u034f\u0007g\u0002\u0002\u034f\u008c\u0003\u0002\u0002\u0002",
    "\u0350\u0351\u0007w\u0002\u0002\u0351\u0352\u0007p\u0002\u0002\u0352",
    "\u0353\u0007k\u0002\u0002\u0353\u0354\u0007q\u0002\u0002\u0354\u0355",
    "\u0007p\u0002\u0002\u0355\u008e\u0003\u0002\u0002\u0002\u0356\u0357",
    "\u0007w\u0002\u0002\u0357\u0358\u0007p\u0002\u0002\u0358\u0359\u0007",
    "u\u0002\u0002\u0359\u035a\u0007k\u0002\u0002\u035a\u035b\u0007i\u0002",
    "\u0002\u035b\u035c\u0007p\u0002\u0002\u035c\u035d\u0007g\u0002\u0002",
    "\u035d\u035e\u0007f\u0002\u0002\u035e\u0090\u0003\u0002\u0002\u0002",
    "\u035f\u0360\u0007w\u0002\u0002\u0360\u0361\u0007u\u0002\u0002\u0361",
    "\u0362\u0007k\u0002\u0002\u0362\u0363\u0007p\u0002\u0002\u0363\u0364",
    "\u0007i\u0002\u0002\u0364\u0092\u0003\u0002\u0002\u0002\u0365\u0366",
    "\u0007x\u0002\u0002\u0366\u0367\u0007k\u0002\u0002\u0367\u0368\u0007",
    "t\u0002\u0002\u0368\u0369\u0007v\u0002\u0002\u0369\u036a\u0007w\u0002",
    "\u0002\u036a\u036b\u0007c\u0002\u0002\u036b\u036c\u0007n\u0002\u0002",
    "\u036c\u0094\u0003\u0002\u0002\u0002\u036d\u036e\u0007x\u0002\u0002",
    "\u036e\u036f\u0007q\u0002\u0002\u036f\u0370\u0007k\u0002\u0002\u0370",
    "\u0371\u0007f\u0002\u0002\u0371\u0096\u0003\u0002\u0002\u0002\u0372",
    "\u0373\u0007x\u0002\u0002\u0373\u0374\u0007q\u0002\u0002\u0374\u0375",
    "\u0007n\u0002\u0002\u0375\u0376\u0007c\u0002\u0002\u0376\u0377\u0007",
    "v\u0002\u0002\u0377\u0378\u0007k\u0002\u0002\u0378\u0379\u0007n\u0002",
    "\u0002\u0379\u037a\u0007g\u0002\u0002\u037a\u0098\u0003\u0002\u0002",
    "\u0002\u037b\u037c\u0007y\u0002\u0002\u037c\u037d\u0007e\u0002\u0002",
    "\u037d\u037e\u0007j\u0002\u0002\u037e\u037f\u0007c\u0002\u0002\u037f",
    "\u0380\u0007t\u0002\u0002\u0380\u0381\u0007a\u0002\u0002\u0381\u0382",
    "\u0007v\u0002\u0002\u0382\u009a\u0003\u0002\u0002\u0002\u0383\u0384",
    "\u0007y\u0002\u0002\u0384\u0385\u0007j\u0002\u0002\u0385\u0386\u0007",
    "k\u0002\u0002\u0386\u0387\u0007n\u0002\u0002\u0387\u0388\u0007g\u0002",
    "\u0002\u0388\u009c\u0003\u0002\u0002\u0002\u0389\u038a\u0007*\u0002",
    "\u0002\u038a\u009e\u0003\u0002\u0002\u0002\u038b\u038c\u0007+\u0002",
    "\u0002\u038c\u00a0\u0003\u0002\u0002\u0002\u038d\u038e\u0007]\u0002",
    "\u0002\u038e\u00a2\u0003\u0002\u0002\u0002\u038f\u0390\u0007_\u0002",
    "\u0002\u0390\u00a4\u0003\u0002\u0002\u0002\u0391\u0392\u0007}\u0002",
    "\u0002\u0392\u00a6\u0003\u0002\u0002\u0002\u0393\u0394\u0007\u007f\u0002",
    "\u0002\u0394\u00a8\u0003\u0002\u0002\u0002\u0395\u0396\u0007-\u0002",
    "\u0002\u0396\u00aa\u0003\u0002\u0002\u0002\u0397\u0398\u0007/\u0002",
    "\u0002\u0398\u00ac\u0003\u0002\u0002\u0002\u0399\u039a\u0007,\u0002",
    "\u0002\u039a\u00ae\u0003\u0002\u0002\u0002\u039b\u039c\u00071\u0002",
    "\u0002\u039c\u00b0\u0003\u0002\u0002\u0002\u039d\u039e\u0007\'\u0002",
    "\u0002\u039e\u00b2\u0003\u0002\u0002\u0002\u039f\u03a0\u0007`\u0002",
    "\u0002\u03a0\u00b4\u0003\u0002\u0002\u0002\u03a1\u03a2\u0007(\u0002",
    "\u0002\u03a2\u00b6\u0003\u0002\u0002\u0002\u03a3\u03a4\u0007~\u0002",
    "\u0002\u03a4\u00b8\u0003\u0002\u0002\u0002\u03a5\u03a6\u0007\u0080\u0002",
    "\u0002\u03a6\u00ba\u0003\u0002\u0002\u0002\u03a7\u03a8\u0007#\u0002",
    "\u0002\u03a8\u00bc\u0003\u0002\u0002\u0002\u03a9\u03aa\u0007?\u0002",
    "\u0002\u03aa\u00be\u0003\u0002\u0002\u0002\u03ab\u03ac\u0007>\u0002",
    "\u0002\u03ac\u00c0\u0003\u0002\u0002\u0002\u03ad\u03ae\u0007@\u0002",
    "\u0002\u03ae\u00c2\u0003\u0002\u0002\u0002\u03af\u03b0\u0007-\u0002",
    "\u0002\u03b0\u03b1\u0007?\u0002\u0002\u03b1\u00c4\u0003\u0002\u0002",
    "\u0002\u03b2\u03b3\u0007/\u0002\u0002\u03b3\u03b4\u0007?\u0002\u0002",
    "\u03b4\u00c6\u0003\u0002\u0002\u0002\u03b5\u03b6\u0007,\u0002\u0002",
    "\u03b6\u03b7\u0007?\u0002\u0002\u03b7\u00c8\u0003\u0002\u0002\u0002",
    "\u03b8\u03b9\u00071\u0002\u0002\u03b9\u03ba\u0007?\u0002\u0002\u03ba",
    "\u00ca\u0003\u0002\u0002\u0002\u03bb\u03bc\u0007\'\u0002\u0002\u03bc",
    "\u03bd\u0007?\u0002\u0002\u03bd\u00cc\u0003\u0002\u0002\u0002\u03be",
    "\u03bf\u0007`\u0002\u0002\u03bf\u03c0\u0007?\u0002\u0002\u03c0\u00ce",
    "\u0003\u0002\u0002\u0002\u03c1\u03c2\u0007(\u0002\u0002\u03c2\u03c3",
    "\u0007?\u0002\u0002\u03c3\u00d0\u0003\u0002\u0002\u0002\u03c4\u03c5",
    "\u0007~\u0002\u0002\u03c5\u03c6\u0007?\u0002\u0002\u03c6\u00d2\u0003",
    "\u0002\u0002\u0002\u03c7\u03c8\u0007>\u0002\u0002\u03c8\u03c9\u0007",
    ">\u0002\u0002\u03c9\u00d4\u0003\u0002\u0002\u0002\u03ca\u03cb\u0007",
    ">\u0002\u0002\u03cb\u03cc\u0007>\u0002\u0002\u03cc\u03cd\u0007?\u0002",
    "\u0002\u03cd\u00d6\u0003\u0002\u0002\u0002\u03ce\u03cf\u0007?\u0002",
    "\u0002\u03cf\u03d0\u0007?\u0002\u0002\u03d0\u00d8\u0003\u0002\u0002",
    "\u0002\u03d1\u03d2\u0007#\u0002\u0002\u03d2\u03d3\u0007?\u0002\u0002",
    "\u03d3\u00da\u0003\u0002\u0002\u0002\u03d4\u03d5\u0007>\u0002\u0002",
    "\u03d5\u03d6\u0007?\u0002\u0002\u03d6\u00dc\u0003\u0002\u0002\u0002",
    "\u03d7\u03d8\u0007@\u0002\u0002\u03d8\u03d9\u0007?\u0002\u0002\u03d9",
    "\u00de\u0003\u0002\u0002\u0002\u03da\u03db\u0007(\u0002\u0002\u03db",
    "\u03dc\u0007(\u0002\u0002\u03dc\u00e0\u0003\u0002\u0002\u0002\u03dd",
    "\u03de\u0007~\u0002\u0002\u03de\u03df\u0007~\u0002\u0002\u03df\u00e2",
    "\u0003\u0002\u0002\u0002\u03e0\u03e1\u0007-\u0002\u0002\u03e1\u03e2",
    "\u0007-\u0002\u0002\u03e2\u00e4\u0003\u0002\u0002\u0002\u03e3\u03e4",
    "\u0007/\u0002\u0002\u03e4\u03e5\u0007/\u0002\u0002\u03e5\u00e6\u0003",
    "\u0002\u0002\u0002\u03e6\u03e7\u0007.\u0002\u0002\u03e7\u00e8\u0003",
    "\u0002\u0002\u0002\u03e8\u03e9\u0007/\u0002\u0002\u03e9\u03ea\u0007",
    "@\u0002\u0002\u03ea\u03eb\u0007,\u0002\u0002\u03eb\u00ea\u0003\u0002",
    "\u0002\u0002\u03ec\u03ed\u0007/\u0002\u0002\u03ed\u03ee\u0007@\u0002",
    "\u0002\u03ee\u00ec\u0003\u0002\u0002\u0002\u03ef\u03f0\u0007A\u0002",
    "\u0002\u03f0\u00ee\u0003\u0002\u0002\u0002\u03f1\u03f2\u0007<\u0002",
    "\u0002\u03f2\u00f0\u0003\u0002\u0002\u0002\u03f3\u03f4\u0007<\u0002",
    "\u0002\u03f4\u03f5\u0007<\u0002\u0002\u03f5\u00f2\u0003\u0002\u0002",
    "\u0002\u03f6\u03f7\u0007=\u0002\u0002\u03f7\u00f4\u0003\u0002\u0002",
    "\u0002\u03f8\u03f9\u00070\u0002\u0002\u03f9\u00f6\u0003\u0002\u0002",
    "\u0002\u03fa\u03fb\u00070\u0002\u0002\u03fb\u03fc\u0007,\u0002\u0002",
    "\u03fc\u00f8\u0003\u0002\u0002\u0002\u03fd\u03fe\u00070\u0002\u0002",
    "\u03fe\u03ff\u00070\u0002\u0002\u03ff\u0400\u00070\u0002\u0002\u0400",
    "\u00fa\u0003\u0002\u0002\u0002\u0401\u0402\u0005\u0115\u008b\u0002\u0402",
    "\u0403\u0005\u0115\u008b\u0002\u0403\u0404\u0005\u0115\u008b\u0002\u0404",
    "\u0405\u0005\u0115\u008b\u0002\u0405\u00fc\u0003\u0002\u0002\u0002\u0406",
    "\u0407\u0007^\u0002\u0002\u0407\u0408\u0007w\u0002\u0002\u0408\u0409",
    "\u0003\u0002\u0002\u0002\u0409\u0411\u0005\u00fb~\u0002\u040a\u040b",
    "\u0007^\u0002\u0002\u040b\u040c\u0007W\u0002\u0002\u040c\u040d\u0003",
    "\u0002\u0002\u0002\u040d\u040e\u0005\u00fb~\u0002\u040e\u040f\u0005",
    "\u00fb~\u0002\u040f\u0411\u0003\u0002\u0002\u0002\u0410\u0406\u0003",
    "\u0002\u0002\u0002\u0410\u040a\u0003\u0002\u0002\u0002\u0411\u00fe\u0003",
    "\u0002\u0002\u0002\u0412\u0417\u0005\u0101\u0081\u0002\u0413\u0416\u0005",
    "\u0101\u0081\u0002\u0414\u0416\u0005\u0105\u0083\u0002\u0415\u0413\u0003",
    "\u0002\u0002\u0002\u0415\u0414\u0003\u0002\u0002\u0002\u0416\u0419\u0003",
    "\u0002\u0002\u0002\u0417\u0415\u0003\u0002\u0002\u0002\u0417\u0418\u0003",
    "\u0002\u0002\u0002\u0418\u0100\u0003\u0002\u0002\u0002\u0419\u0417\u0003",
    "\u0002\u0002\u0002\u041a\u041d\u0005\u0103\u0082\u0002\u041b\u041d\u0005",
    "\u00fd\u007f\u0002\u041c\u041a\u0003\u0002\u0002\u0002\u041c\u041b\u0003",
    "\u0002\u0002\u0002\u041d\u0102\u0003\u0002\u0002\u0002\u041e\u041f\t",
    "\u0003\u0002\u0002\u041f\u0104\u0003\u0002\u0002\u0002\u0420\u0421\t",
    "\u0004\u0002\u0002\u0421\u0106\u0003\u0002\u0002\u0002\u0422\u0424\u0005",
    "\u0109\u0085\u0002\u0423\u0425\u0005\u0119\u008d\u0002\u0424\u0423\u0003",
    "\u0002\u0002\u0002\u0424\u0425\u0003\u0002\u0002\u0002\u0425\u0433\u0003",
    "\u0002\u0002\u0002\u0426\u0428\u0005\u010b\u0086\u0002\u0427\u0429\u0005",
    "\u0119\u008d\u0002\u0428\u0427\u0003\u0002\u0002\u0002\u0428\u0429\u0003",
    "\u0002\u0002\u0002\u0429\u0433\u0003\u0002\u0002\u0002\u042a\u042c\u0005",
    "\u010d\u0087\u0002\u042b\u042d\u0005\u0119\u008d\u0002\u042c\u042b\u0003",
    "\u0002\u0002\u0002\u042c\u042d\u0003\u0002\u0002\u0002\u042d\u0433\u0003",
    "\u0002\u0002\u0002\u042e\u0430\u0005\u010f\u0088\u0002\u042f\u0431\u0005",
    "\u0119\u008d\u0002\u0430\u042f\u0003\u0002\u0002\u0002\u0430\u0431\u0003",
    "\u0002\u0002\u0002\u0431\u0433\u0003\u0002\u0002\u0002\u0432\u0422\u0003",
    "\u0002\u0002\u0002\u0432\u0426\u0003\u0002\u0002\u0002\u0432\u042a\u0003",
    "\u0002\u0002\u0002\u0432\u042e\u0003\u0002\u0002\u0002\u0433\u0108\u0003",
    "\u0002\u0002\u0002\u0434\u043b\u0005\u0111\u0089\u0002\u0435\u0437\u0007",
    ")\u0002\u0002\u0436\u0435\u0003\u0002\u0002\u0002\u0436\u0437\u0003",
    "\u0002\u0002\u0002\u0437\u0438\u0003\u0002\u0002\u0002\u0438\u043a\u0005",
    "\u0105\u0083\u0002\u0439\u0436\u0003\u0002\u0002\u0002\u043a\u043d\u0003",
    "\u0002\u0002\u0002\u043b\u0439\u0003\u0002\u0002\u0002\u043b\u043c\u0003",
    "\u0002\u0002\u0002\u043c\u010a\u0003\u0002\u0002\u0002\u043d\u043b\u0003",
    "\u0002\u0002\u0002\u043e\u0445\u00072\u0002\u0002\u043f\u0441\u0007",
    ")\u0002\u0002\u0440\u043f\u0003\u0002\u0002\u0002\u0440\u0441\u0003",
    "\u0002\u0002\u0002\u0441\u0442\u0003\u0002\u0002\u0002\u0442\u0444\u0005",
    "\u0113\u008a\u0002\u0443\u0440\u0003\u0002\u0002\u0002\u0444\u0447\u0003",
    "\u0002\u0002\u0002\u0445\u0443\u0003\u0002\u0002\u0002\u0445\u0446\u0003",
    "\u0002\u0002\u0002\u0446\u010c\u0003\u0002\u0002\u0002\u0447\u0445\u0003",
    "\u0002\u0002\u0002\u0448\u0449\u00072\u0002\u0002\u0449\u044d\u0007",
    "z\u0002\u0002\u044a\u044b\u00072\u0002\u0002\u044b\u044d\u0007Z\u0002",
    "\u0002\u044c\u0448\u0003\u0002\u0002\u0002\u044c\u044a\u0003\u0002\u0002",
    "\u0002\u044d\u044e\u0003\u0002\u0002\u0002\u044e\u0455\u0005\u0115\u008b",
    "\u0002\u044f\u0451\u0007)\u0002\u0002\u0450\u044f\u0003\u0002\u0002",
    "\u0002\u0450\u0451\u0003\u0002\u0002\u0002\u0451\u0452\u0003\u0002\u0002",
    "\u0002\u0452\u0454\u0005\u0115\u008b\u0002\u0453\u0450\u0003\u0002\u0002",
    "\u0002\u0454\u0457\u0003\u0002\u0002\u0002\u0455\u0453\u0003\u0002\u0002",
    "\u0002\u0455\u0456\u0003\u0002\u0002\u0002\u0456\u010e\u0003\u0002\u0002",
    "\u0002\u0457\u0455\u0003\u0002\u0002\u0002\u0458\u0459\u00072\u0002",
    "\u0002\u0459\u045d\u0007d\u0002\u0002\u045a\u045b\u00072\u0002\u0002",
    "\u045b\u045d\u0007D\u0002\u0002\u045c\u0458\u0003\u0002\u0002\u0002",
    "\u045c\u045a\u0003\u0002\u0002\u0002\u045d\u045e\u0003\u0002\u0002\u0002",
    "\u045e\u0465\u0005\u0117\u008c\u0002\u045f\u0461\u0007)\u0002\u0002",
    "\u0460\u045f\u0003\u0002\u0002\u0002\u0460\u0461\u0003\u0002\u0002\u0002",
    "\u0461\u0462\u0003\u0002\u0002\u0002\u0462\u0464\u0005\u0117\u008c\u0002",
    "\u0463\u0460\u0003\u0002\u0002\u0002\u0464\u0467\u0003\u0002\u0002\u0002",
    "\u0465\u0463\u0003\u0002\u0002\u0002\u0465\u0466\u0003\u0002\u0002\u0002",
    "\u0466\u0110\u0003\u0002\u0002\u0002\u0467\u0465\u0003\u0002\u0002\u0002",
    "\u0468\u0469\t\u0005\u0002\u0002\u0469\u0112\u0003\u0002\u0002\u0002",
    "\u046a\u046b\t\u0006\u0002\u0002\u046b\u0114\u0003\u0002\u0002\u0002",
    "\u046c\u046d\t\u0007\u0002\u0002\u046d\u0116\u0003\u0002\u0002\u0002",
    "\u046e\u046f\t\b\u0002\u0002\u046f\u0118\u0003\u0002\u0002\u0002\u0470",
    "\u0472\u0005\u011b\u008e\u0002\u0471\u0473\u0005\u011d\u008f\u0002\u0472",
    "\u0471\u0003\u0002\u0002\u0002\u0472\u0473\u0003\u0002\u0002\u0002\u0473",
    "\u0481\u0003\u0002\u0002\u0002\u0474\u0476\u0005\u011b\u008e\u0002\u0475",
    "\u0477\u0005\u011f\u0090\u0002\u0476\u0475\u0003\u0002\u0002\u0002\u0476",
    "\u0477\u0003\u0002\u0002\u0002\u0477\u0481\u0003\u0002\u0002\u0002\u0478",
    "\u047a\u0005\u011d\u008f\u0002\u0479\u047b\u0005\u011b\u008e\u0002\u047a",
    "\u0479\u0003\u0002\u0002\u0002\u047a\u047b\u0003\u0002\u0002\u0002\u047b",
    "\u0481\u0003\u0002\u0002\u0002\u047c\u047e\u0005\u011f\u0090\u0002\u047d",
    "\u047f\u0005\u011b\u008e\u0002\u047e\u047d\u0003\u0002\u0002\u0002\u047e",
    "\u047f\u0003\u0002\u0002\u0002\u047f\u0481\u0003\u0002\u0002\u0002\u0480",
    "\u0470\u0003\u0002\u0002\u0002\u0480\u0474\u0003\u0002\u0002\u0002\u0480",
    "\u0478\u0003\u0002\u0002\u0002\u0480\u047c\u0003\u0002\u0002\u0002\u0481",
    "\u011a\u0003\u0002\u0002\u0002\u0482\u0483\t\t\u0002\u0002\u0483\u011c",
    "\u0003\u0002\u0002\u0002\u0484\u0485\t\n\u0002\u0002\u0485\u011e\u0003",
    "\u0002\u0002\u0002\u0486\u0487\u0007n\u0002\u0002\u0487\u048b\u0007",
    "n\u0002\u0002\u0488\u0489\u0007N\u0002\u0002\u0489\u048b\u0007N\u0002",
    "\u0002\u048a\u0486\u0003\u0002\u0002\u0002\u048a\u0488\u0003\u0002\u0002",
    "\u0002\u048b\u0120\u0003\u0002\u0002\u0002\u048c\u048e\u0007)\u0002",
    "\u0002\u048d\u048f\u0005\u0123\u0092\u0002\u048e\u048d\u0003\u0002\u0002",
    "\u0002\u048f\u0490\u0003\u0002\u0002\u0002\u0490\u048e\u0003\u0002\u0002",
    "\u0002\u0490\u0491\u0003\u0002\u0002\u0002\u0491\u0492\u0003\u0002\u0002",
    "\u0002\u0492\u0493\u0007)\u0002\u0002\u0493\u04b0\u0003\u0002\u0002",
    "\u0002\u0494\u0495\u0007w\u0002\u0002\u0495\u0497\u0007)\u0002\u0002",
    "\u0496\u0498\u0005\u0123\u0092\u0002\u0497\u0496\u0003\u0002\u0002\u0002",
    "\u0498\u0499\u0003\u0002\u0002\u0002\u0499\u0497\u0003\u0002\u0002\u0002",
    "\u0499\u049a\u0003\u0002\u0002\u0002\u049a\u049b\u0003\u0002\u0002\u0002",
    "\u049b\u049c\u0007)\u0002\u0002\u049c\u04b0\u0003\u0002\u0002\u0002",
    "\u049d\u049e\u0007W\u0002\u0002\u049e\u04a0\u0007)\u0002\u0002\u049f",
    "\u04a1\u0005\u0123\u0092\u0002\u04a0\u049f\u0003\u0002\u0002\u0002\u04a1",
    "\u04a2\u0003\u0002\u0002\u0002\u04a2\u04a0\u0003\u0002\u0002\u0002\u04a2",
    "\u04a3\u0003\u0002\u0002\u0002\u04a3\u04a4\u0003\u0002\u0002\u0002\u04a4",
    "\u04a5\u0007)\u0002\u0002\u04a5\u04b0\u0003\u0002\u0002\u0002\u04a6",
    "\u04a7\u0007N\u0002\u0002\u04a7\u04a9\u0007)\u0002\u0002\u04a8\u04aa",
    "\u0005\u0123\u0092\u0002\u04a9\u04a8\u0003\u0002\u0002\u0002\u04aa\u04ab",
    "\u0003\u0002\u0002\u0002\u04ab\u04a9\u0003\u0002\u0002\u0002\u04ab\u04ac",
    "\u0003\u0002\u0002\u0002\u04ac\u04ad\u0003\u0002\u0002\u0002\u04ad\u04ae",
    "\u0007)\u0002\u0002\u04ae\u04b0\u0003\u0002\u0002\u0002\u04af\u048c",
    "\u0003\u0002\u0002\u0002\u04af\u0494\u0003\u0002\u0002\u0002\u04af\u049d",
    "\u0003\u0002\u0002\u0002\u04af\u04a6\u0003\u0002\u0002\u0002\u04b0\u0122",
    "\u0003\u0002\u0002\u0002\u04b1\u04b5\n\u000b\u0002\u0002\u04b2\u04b5",
    "\u0005\u0125\u0093\u0002\u04b3\u04b5\u0005\u00fd\u007f\u0002\u04b4\u04b1",
    "\u0003\u0002\u0002\u0002\u04b4\u04b2\u0003\u0002\u0002\u0002\u04b4\u04b3",
    "\u0003\u0002\u0002\u0002\u04b5\u0124\u0003\u0002\u0002\u0002\u04b6\u04ba",
    "\u0005\u0127\u0094\u0002\u04b7\u04ba\u0005\u0129\u0095\u0002\u04b8\u04ba",
    "\u0005\u012b\u0096\u0002\u04b9\u04b6\u0003\u0002\u0002\u0002\u04b9\u04b7",
    "\u0003\u0002\u0002\u0002\u04b9\u04b8\u0003\u0002\u0002\u0002\u04ba\u0126",
    "\u0003\u0002\u0002\u0002\u04bb\u04bc\u0007^\u0002\u0002\u04bc\u04d2",
    "\u0007)\u0002\u0002\u04bd\u04be\u0007^\u0002\u0002\u04be\u04d2\u0007",
    "$\u0002\u0002\u04bf\u04c0\u0007^\u0002\u0002\u04c0\u04d2\u0007A\u0002",
    "\u0002\u04c1\u04c2\u0007^\u0002\u0002\u04c2\u04d2\u0007^\u0002\u0002",
    "\u04c3\u04c4\u0007^\u0002\u0002\u04c4\u04d2\u0007c\u0002\u0002\u04c5",
    "\u04c6\u0007^\u0002\u0002\u04c6\u04d2\u0007d\u0002\u0002\u04c7\u04c8",
    "\u0007^\u0002\u0002\u04c8\u04d2\u0007h\u0002\u0002\u04c9\u04ca\u0007",
    "^\u0002\u0002\u04ca\u04d2\u0007p\u0002\u0002\u04cb\u04cc\u0007^\u0002",
    "\u0002\u04cc\u04d2\u0007t\u0002\u0002\u04cd\u04ce\u0007^\u0002\u0002",
    "\u04ce\u04d2\u0007v\u0002\u0002\u04cf\u04d0\u0007^\u0002\u0002\u04d0",
    "\u04d2\u0007x\u0002\u0002\u04d1\u04bb\u0003\u0002\u0002\u0002\u04d1",
    "\u04bd\u0003\u0002\u0002\u0002\u04d1\u04bf\u0003\u0002\u0002\u0002\u04d1",
    "\u04c1\u0003\u0002\u0002\u0002\u04d1\u04c3\u0003\u0002\u0002\u0002\u04d1",
    "\u04c5\u0003\u0002\u0002\u0002\u04d1\u04c7\u0003\u0002\u0002\u0002\u04d1",
    "\u04c9\u0003\u0002\u0002\u0002\u04d1\u04cb\u0003\u0002\u0002\u0002\u04d1",
    "\u04cd\u0003\u0002\u0002\u0002\u04d1\u04cf\u0003\u0002\u0002\u0002\u04d2",
    "\u0128\u0003\u0002\u0002\u0002\u04d3\u04d4\u0007^\u0002\u0002\u04d4",
    "\u04df\u0005\u0113\u008a\u0002\u04d5\u04d6\u0007^\u0002\u0002\u04d6",
    "\u04d7\u0005\u0113\u008a\u0002\u04d7\u04d8\u0005\u0113\u008a\u0002\u04d8",
    "\u04df\u0003\u0002\u0002\u0002\u04d9\u04da\u0007^\u0002\u0002\u04da",
    "\u04db\u0005\u0113\u008a\u0002\u04db\u04dc\u0005\u0113\u008a\u0002\u04dc",
    "\u04dd\u0005\u0113\u008a\u0002\u04dd\u04df\u0003\u0002\u0002\u0002\u04de",
    "\u04d3\u0003\u0002\u0002\u0002\u04de\u04d5\u0003\u0002\u0002\u0002\u04de",
    "\u04d9\u0003\u0002\u0002\u0002\u04df\u012a\u0003\u0002\u0002\u0002\u04e0",
    "\u04e1\u0007^\u0002\u0002\u04e1\u04e2\u0007z\u0002\u0002\u04e2\u04e4",
    "\u0003\u0002\u0002\u0002\u04e3\u04e5\u0005\u0115\u008b\u0002\u04e4\u04e3",
    "\u0003\u0002\u0002\u0002\u04e5\u04e6\u0003\u0002\u0002\u0002\u04e6\u04e4",
    "\u0003\u0002\u0002\u0002\u04e6\u04e7\u0003\u0002\u0002\u0002\u04e7\u012c",
    "\u0003\u0002\u0002\u0002\u04e8\u04ea\u0005\u012f\u0098\u0002\u04e9\u04eb",
    "\u0005\u0131\u0099\u0002\u04ea\u04e9\u0003\u0002\u0002\u0002\u04ea\u04eb",
    "\u0003\u0002\u0002\u0002\u04eb\u04ed\u0003\u0002\u0002\u0002\u04ec\u04ee",
    "\u0005\u0137\u009c\u0002\u04ed\u04ec\u0003\u0002\u0002\u0002\u04ed\u04ee",
    "\u0003\u0002\u0002\u0002\u04ee\u04f5\u0003\u0002\u0002\u0002\u04ef\u04f0",
    "\u0005\u0135\u009b\u0002\u04f0\u04f2\u0005\u0131\u0099\u0002\u04f1\u04f3",
    "\u0005\u0137\u009c\u0002\u04f2\u04f1\u0003\u0002\u0002\u0002\u04f2\u04f3",
    "\u0003\u0002\u0002\u0002\u04f3\u04f5\u0003\u0002\u0002\u0002\u04f4\u04e8",
    "\u0003\u0002\u0002\u0002\u04f4\u04ef\u0003\u0002\u0002\u0002\u04f5\u012e",
    "\u0003\u0002\u0002\u0002\u04f6\u04f8\u0005\u0135\u009b\u0002\u04f7\u04f6",
    "\u0003\u0002\u0002\u0002\u04f7\u04f8\u0003\u0002\u0002\u0002\u04f8\u04f9",
    "\u0003\u0002\u0002\u0002\u04f9\u04fa\u00070\u0002\u0002\u04fa\u04ff",
    "\u0005\u0135\u009b\u0002\u04fb\u04fc\u0005\u0135\u009b\u0002\u04fc\u04fd",
    "\u00070\u0002\u0002\u04fd\u04ff\u0003\u0002\u0002\u0002\u04fe\u04f7",
    "\u0003\u0002\u0002\u0002\u04fe\u04fb\u0003\u0002\u0002\u0002\u04ff\u0130",
    "\u0003\u0002\u0002\u0002\u0500\u0502\u0007g\u0002\u0002\u0501\u0503",
    "\u0005\u0133\u009a\u0002\u0502\u0501\u0003\u0002\u0002\u0002\u0502\u0503",
    "\u0003\u0002\u0002\u0002\u0503\u0504\u0003\u0002\u0002\u0002\u0504\u050b",
    "\u0005\u0135\u009b\u0002\u0505\u0507\u0007G\u0002\u0002\u0506\u0508",
    "\u0005\u0133\u009a\u0002\u0507\u0506\u0003\u0002\u0002\u0002\u0507\u0508",
    "\u0003\u0002\u0002\u0002\u0508\u0509\u0003\u0002\u0002\u0002\u0509\u050b",
    "\u0005\u0135\u009b\u0002\u050a\u0500\u0003\u0002\u0002\u0002\u050a\u0505",
    "\u0003\u0002\u0002\u0002\u050b\u0132\u0003\u0002\u0002\u0002\u050c\u050d",
    "\t\f\u0002\u0002\u050d\u0134\u0003\u0002\u0002\u0002\u050e\u0515\u0005",
    "\u0105\u0083\u0002\u050f\u0511\u0007)\u0002\u0002\u0510\u050f\u0003",
    "\u0002\u0002\u0002\u0510\u0511\u0003\u0002\u0002\u0002\u0511\u0512\u0003",
    "\u0002\u0002\u0002\u0512\u0514\u0005\u0105\u0083\u0002\u0513\u0510\u0003",
    "\u0002\u0002\u0002\u0514\u0517\u0003\u0002\u0002\u0002\u0515\u0513\u0003",
    "\u0002\u0002\u0002\u0515\u0516\u0003\u0002\u0002\u0002\u0516\u0136\u0003",
    "\u0002\u0002\u0002\u0517\u0515\u0003\u0002\u0002\u0002\u0518\u0519\t",
    "\r\u0002\u0002\u0519\u0138\u0003\u0002\u0002\u0002\u051a\u051c\u0005",
    "\u013b\u009e\u0002\u051b\u051a\u0003\u0002\u0002\u0002\u051b\u051c\u0003",
    "\u0002\u0002\u0002\u051c\u051d\u0003\u0002\u0002\u0002\u051d\u0521\u0007",
    "$\u0002\u0002\u051e\u0520\u0005\u013d\u009f\u0002\u051f\u051e\u0003",
    "\u0002\u0002\u0002\u0520\u0523\u0003\u0002\u0002\u0002\u0521\u051f\u0003",
    "\u0002\u0002\u0002\u0521\u0522\u0003\u0002\u0002\u0002\u0522\u0524\u0003",
    "\u0002\u0002\u0002\u0523\u0521\u0003\u0002\u0002\u0002\u0524\u052b\u0007",
    "$\u0002\u0002\u0525\u0527\u0005\u013b\u009e\u0002\u0526\u0525\u0003",
    "\u0002\u0002\u0002\u0526\u0527\u0003\u0002\u0002\u0002\u0527\u0528\u0003",
    "\u0002\u0002\u0002\u0528\u0529\u0007T\u0002\u0002\u0529\u052b\u0005",
    "\u013f\u00a0\u0002\u052a\u051b\u0003\u0002\u0002\u0002\u052a\u0526\u0003",
    "\u0002\u0002\u0002\u052b\u013a\u0003\u0002\u0002\u0002\u052c\u052d\u0007",
    "w\u0002\u0002\u052d\u0530\u0007:\u0002\u0002\u052e\u0530\t\u000e\u0002",
    "\u0002\u052f\u052c\u0003\u0002\u0002\u0002\u052f\u052e\u0003\u0002\u0002",
    "\u0002\u0530\u013c\u0003\u0002\u0002\u0002\u0531\u0535\n\u000f\u0002",
    "\u0002\u0532\u0535\u0005\u0125\u0093\u0002\u0533\u0535\u0005\u00fd\u007f",
    "\u0002\u0534\u0531\u0003\u0002\u0002\u0002\u0534\u0532\u0003\u0002\u0002",
    "\u0002\u0534\u0533\u0003\u0002\u0002\u0002\u0535\u013e\u0003\u0002\u0002",
    "\u0002\u0536\u053a\u0007$\u0002\u0002\u0537\u0539\u000b\u0002\u0002",
    "\u0002\u0538\u0537\u0003\u0002\u0002\u0002\u0539\u053c\u0003\u0002\u0002",
    "\u0002\u053a\u053b\u0003\u0002\u0002\u0002\u053a\u0538\u0003\u0002\u0002",
    "\u0002\u053b\u053d\u0003\u0002\u0002\u0002\u053c\u053a\u0003\u0002\u0002",
    "\u0002\u053d\u0541\u0007*\u0002\u0002\u053e\u0540\u000b\u0002\u0002",
    "\u0002\u053f\u053e\u0003\u0002\u0002\u0002\u0540\u0543\u0003\u0002\u0002",
    "\u0002\u0541\u0542\u0003\u0002\u0002\u0002\u0541\u053f\u0003\u0002\u0002",
    "\u0002\u0542\u0544\u0003\u0002\u0002\u0002\u0543\u0541\u0003\u0002\u0002",
    "\u0002\u0544\u0548\u0007+\u0002\u0002\u0545\u0547\u000b\u0002\u0002",
    "\u0002\u0546\u0545\u0003\u0002\u0002\u0002\u0547\u054a\u0003\u0002\u0002",
    "\u0002\u0548\u0549\u0003\u0002\u0002\u0002\u0548\u0546\u0003\u0002\u0002",
    "\u0002\u0549\u054b\u0003\u0002\u0002\u0002\u054a\u0548\u0003\u0002\u0002",
    "\u0002\u054b\u054c\u0007$\u0002\u0002\u054c\u0140\u0003\u0002\u0002",
    "\u0002\u054d\u0550\u0005=\u001f\u0002\u054e\u0550\u0005\u0083B\u0002",
    "\u054f\u054d\u0003\u0002\u0002\u0002\u054f\u054e\u0003\u0002\u0002\u0002",
    "\u0550\u0142\u0003\u0002\u0002\u0002\u0551\u0552\u0005\u0109\u0085\u0002",
    "\u0552\u0553\u0005\u014b\u00a6\u0002\u0553\u055e\u0003\u0002\u0002\u0002",
    "\u0554\u0555\u0005\u010b\u0086\u0002\u0555\u0556\u0005\u014b\u00a6\u0002",
    "\u0556\u055e\u0003\u0002\u0002\u0002\u0557\u0558\u0005\u010d\u0087\u0002",
    "\u0558\u0559\u0005\u014b\u00a6\u0002\u0559\u055e\u0003\u0002\u0002\u0002",
    "\u055a\u055b\u0005\u010f\u0088\u0002\u055b\u055c\u0005\u014b\u00a6\u0002",
    "\u055c\u055e\u0003\u0002\u0002\u0002\u055d\u0551\u0003\u0002\u0002\u0002",
    "\u055d\u0554\u0003\u0002\u0002\u0002\u055d\u0557\u0003\u0002\u0002\u0002",
    "\u055d\u055a\u0003\u0002\u0002\u0002\u055e\u0144\u0003\u0002\u0002\u0002",
    "\u055f\u0561\u0005\u012f\u0098\u0002\u0560\u0562\u0005\u0131\u0099\u0002",
    "\u0561\u0560\u0003\u0002\u0002\u0002\u0561\u0562\u0003\u0002\u0002\u0002",
    "\u0562\u0563\u0003\u0002\u0002\u0002\u0563\u0564\u0005\u014b\u00a6\u0002",
    "\u0564\u056a\u0003\u0002\u0002\u0002\u0565\u0566\u0005\u0135\u009b\u0002",
    "\u0566\u0567\u0005\u0131\u0099\u0002\u0567\u0568\u0005\u014b\u00a6\u0002",
    "\u0568\u056a\u0003\u0002\u0002\u0002\u0569\u055f\u0003\u0002\u0002\u0002",
    "\u0569\u0565\u0003\u0002\u0002\u0002\u056a\u0146\u0003\u0002\u0002\u0002",
    "\u056b\u056c\u0005\u0139\u009d\u0002\u056c\u056d\u0005\u014b\u00a6\u0002",
    "\u056d\u0148\u0003\u0002\u0002\u0002\u056e\u056f\u0005\u0121\u0091\u0002",
    "\u056f\u0570\u0005\u014b\u00a6\u0002\u0570\u014a\u0003\u0002\u0002\u0002",
    "\u0571\u0572\u0005\u00ff\u0080\u0002\u0572\u014c\u0003\u0002\u0002\u0002",
    "\u0573\u0575\t\u0010\u0002\u0002\u0574\u0573\u0003\u0002\u0002\u0002",
    "\u0575\u0576\u0003\u0002\u0002\u0002\u0576\u0574\u0003\u0002\u0002\u0002",
    "\u0576\u0577\u0003\u0002\u0002\u0002\u0577\u0578\u0003\u0002\u0002\u0002",
    "\u0578\u0579\b\u00a7\u0002\u0002\u0579\u014e\u0003\u0002\u0002\u0002",
    "\u057a\u057c\u0007\u000f\u0002\u0002\u057b\u057d\u0007\f\u0002\u0002",
    "\u057c\u057b\u0003\u0002\u0002\u0002\u057c\u057d\u0003\u0002\u0002\u0002",
    "\u057d\u0580\u0003\u0002\u0002\u0002\u057e\u0580\u0007\f\u0002\u0002",
    "\u057f\u057a\u0003\u0002\u0002\u0002\u057f\u057e\u0003\u0002\u0002\u0002",
    "\u0580\u0581\u0003\u0002\u0002\u0002\u0581\u0582\b\u00a8\u0002\u0002",
    "\u0582\u0150\u0003\u0002\u0002\u0002\u0583\u0584\u00071\u0002\u0002",
    "\u0584\u0585\u0007,\u0002\u0002\u0585\u0589\u0003\u0002\u0002\u0002",
    "\u0586\u0588\u000b\u0002\u0002\u0002\u0587\u0586\u0003\u0002\u0002\u0002",
    "\u0588\u058b\u0003\u0002\u0002\u0002\u0589\u058a\u0003\u0002\u0002\u0002",
    "\u0589\u0587\u0003\u0002\u0002\u0002\u058a\u058c\u0003\u0002\u0002\u0002",
    "\u058b\u0589\u0003\u0002\u0002\u0002\u058c\u058d\u0007,\u0002\u0002",
    "\u058d\u058e\u00071\u0002\u0002\u058e\u058f\u0003\u0002\u0002\u0002",
    "\u058f\u0590\b\u00a9\u0002\u0002\u0590\u0152\u0003\u0002\u0002\u0002",
    "\u0591\u0592\u00071\u0002\u0002\u0592\u0593\u00071\u0002\u0002\u0593",
    "\u0597\u0003\u0002\u0002\u0002\u0594\u0596\n\u0002\u0002\u0002\u0595",
    "\u0594\u0003\u0002\u0002\u0002\u0596\u0599\u0003\u0002\u0002\u0002\u0597",
    "\u0595\u0003\u0002\u0002\u0002\u0597\u0598\u0003\u0002\u0002\u0002\u0598",
    "\u059a\u0003\u0002\u0002\u0002\u0599\u0597\u0003\u0002\u0002\u0002\u059a",
    "\u059b\b\u00aa\u0002\u0002\u059b\u0154\u0003\u0002\u0002\u0002D\u0002",
    "\u0159\u0410\u0415\u0417\u041c\u0424\u0428\u042c\u0430\u0432\u0436\u043b",
    "\u0440\u0445\u044c\u0450\u0455\u045c\u0460\u0465\u0472\u0476\u047a\u047e",
    "\u0480\u048a\u0490\u0499\u04a2\u04ab\u04af\u04b4\u04b9\u04d1\u04de\u04e6",
    "\u04ea\u04ed\u04f2\u04f4\u04f7\u04fe\u0502\u0507\u050a\u0510\u0515\u051b",
    "\u0521\u0526\u052a\u052f\u0534\u053a\u0541\u0548\u054f\u055d\u0561\u0569",
    "\u0576\u057c\u057f\u0589\u0597\u0003\b\u0002\u0002"].join("");


var atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

var decisionsToDFA = atn.decisionToState.map( function(ds, index) { return new antlr4.dfa.DFA(ds, index); });

function CPP14Lexer(input) {
	antlr4.Lexer.call(this, input);
    this._interp = new antlr4.atn.LexerATNSimulator(this, atn, decisionsToDFA, new antlr4.PredictionContextCache());
    return this;
}

CPP14Lexer.prototype = Object.create(antlr4.Lexer.prototype);
CPP14Lexer.prototype.constructor = CPP14Lexer;

Object.defineProperty(CPP14Lexer.prototype, "atn", {
        get : function() {
                return atn;
        }
});

CPP14Lexer.EOF = antlr4.Token.EOF;
CPP14Lexer.Directive = 1;
CPP14Lexer.Alignas = 2;
CPP14Lexer.Alignof = 3;
CPP14Lexer.Asm = 4;
CPP14Lexer.Auto = 5;
CPP14Lexer.Bool = 6;
CPP14Lexer.Break = 7;
CPP14Lexer.Case = 8;
CPP14Lexer.Catch = 9;
CPP14Lexer.Char = 10;
CPP14Lexer.Char16 = 11;
CPP14Lexer.Char32 = 12;
CPP14Lexer.Class = 13;
CPP14Lexer.Const = 14;
CPP14Lexer.Constexpr = 15;
CPP14Lexer.Const_cast = 16;
CPP14Lexer.Continue = 17;
CPP14Lexer.Decltype = 18;
CPP14Lexer.Default = 19;
CPP14Lexer.Delete = 20;
CPP14Lexer.Do = 21;
CPP14Lexer.Double = 22;
CPP14Lexer.File = 23;
CPP14Lexer.Dynamic_cast = 24;
CPP14Lexer.Else = 25;
CPP14Lexer.Enum = 26;
CPP14Lexer.Explicit = 27;
CPP14Lexer.Export = 28;
CPP14Lexer.Extern = 29;
CPP14Lexer.False = 30;
CPP14Lexer.Final = 31;
CPP14Lexer.Float = 32;
CPP14Lexer.For = 33;
CPP14Lexer.Friend = 34;
CPP14Lexer.Goto = 35;
CPP14Lexer.If = 36;
CPP14Lexer.Inline = 37;
CPP14Lexer.Int = 38;
CPP14Lexer.Long = 39;
CPP14Lexer.Mutable = 40;
CPP14Lexer.Namespace = 41;
CPP14Lexer.New = 42;
CPP14Lexer.Noexcept = 43;
CPP14Lexer.Nullptr = 44;
CPP14Lexer.Operator = 45;
CPP14Lexer.Override = 46;
CPP14Lexer.Private = 47;
CPP14Lexer.Protected = 48;
CPP14Lexer.Public = 49;
CPP14Lexer.Register = 50;
CPP14Lexer.Reinterpret_cast = 51;
CPP14Lexer.Return = 52;
CPP14Lexer.Short = 53;
CPP14Lexer.Signed = 54;
CPP14Lexer.Sizeof = 55;
CPP14Lexer.Static = 56;
CPP14Lexer.Static_assert = 57;
CPP14Lexer.Static_cast = 58;
CPP14Lexer.Struct = 59;
CPP14Lexer.Switch = 60;
CPP14Lexer.Template = 61;
CPP14Lexer.This = 62;
CPP14Lexer.Thread_local = 63;
CPP14Lexer.Throw = 64;
CPP14Lexer.True = 65;
CPP14Lexer.Try = 66;
CPP14Lexer.Typedef = 67;
CPP14Lexer.Typeid = 68;
CPP14Lexer.Typename = 69;
CPP14Lexer.Union = 70;
CPP14Lexer.Unsigned = 71;
CPP14Lexer.Using = 72;
CPP14Lexer.Virtual = 73;
CPP14Lexer.Void = 74;
CPP14Lexer.Volatile = 75;
CPP14Lexer.Wchar = 76;
CPP14Lexer.While = 77;
CPP14Lexer.LeftParen = 78;
CPP14Lexer.RightParen = 79;
CPP14Lexer.LeftBracket = 80;
CPP14Lexer.RightBracket = 81;
CPP14Lexer.LeftBrace = 82;
CPP14Lexer.RightBrace = 83;
CPP14Lexer.Plus = 84;
CPP14Lexer.Minus = 85;
CPP14Lexer.Star = 86;
CPP14Lexer.Div = 87;
CPP14Lexer.Mod = 88;
CPP14Lexer.Caret = 89;
CPP14Lexer.And = 90;
CPP14Lexer.Or = 91;
CPP14Lexer.Tilde = 92;
CPP14Lexer.Not = 93;
CPP14Lexer.Assign = 94;
CPP14Lexer.Less = 95;
CPP14Lexer.Greater = 96;
CPP14Lexer.PlusAssign = 97;
CPP14Lexer.MinusAssign = 98;
CPP14Lexer.StarAssign = 99;
CPP14Lexer.DivAssign = 100;
CPP14Lexer.ModAssign = 101;
CPP14Lexer.XorAssign = 102;
CPP14Lexer.AndAssign = 103;
CPP14Lexer.OrAssign = 104;
CPP14Lexer.LeftShift = 105;
CPP14Lexer.LeftShiftAssign = 106;
CPP14Lexer.Equal = 107;
CPP14Lexer.NotEqual = 108;
CPP14Lexer.LessEqual = 109;
CPP14Lexer.GreaterEqual = 110;
CPP14Lexer.AndAnd = 111;
CPP14Lexer.OrOr = 112;
CPP14Lexer.PlusPlus = 113;
CPP14Lexer.MinusMinus = 114;
CPP14Lexer.Comma = 115;
CPP14Lexer.ArrowStar = 116;
CPP14Lexer.Arrow = 117;
CPP14Lexer.Question = 118;
CPP14Lexer.Colon = 119;
CPP14Lexer.Doublecolon = 120;
CPP14Lexer.Semi = 121;
CPP14Lexer.Dot = 122;
CPP14Lexer.DotStar = 123;
CPP14Lexer.Ellipsis = 124;
CPP14Lexer.Identifier = 125;
CPP14Lexer.Integerliteral = 126;
CPP14Lexer.Decimalliteral = 127;
CPP14Lexer.Octalliteral = 128;
CPP14Lexer.Hexadecimalliteral = 129;
CPP14Lexer.Binaryliteral = 130;
CPP14Lexer.Integersuffix = 131;
CPP14Lexer.Characterliteral = 132;
CPP14Lexer.Floatingliteral = 133;
CPP14Lexer.Stringliteral = 134;
CPP14Lexer.Booleanliteral = 135;
CPP14Lexer.Userdefinedintegerliteral = 136;
CPP14Lexer.Userdefinedfloatingliteral = 137;
CPP14Lexer.Userdefinedstringliteral = 138;
CPP14Lexer.Userdefinedcharacterliteral = 139;
CPP14Lexer.Whitespace = 140;
CPP14Lexer.Newline = 141;
CPP14Lexer.BlockComment = 142;
CPP14Lexer.LineComment = 143;

CPP14Lexer.prototype.channelNames = [ "DEFAULT_TOKEN_CHANNEL", "HIDDEN" ];

CPP14Lexer.prototype.modeNames = [ "DEFAULT_MODE" ];

CPP14Lexer.prototype.literalNames = [ null, null, "'alignas'", "'alignof'", 
                                      "'asm'", "'auto'", "'bool'", "'break'", 
                                      "'case'", "'catch'", "'char'", "'char16_t'", 
                                      "'char32_t'", "'class'", "'const'", 
                                      "'constexpr'", "'const_cast'", "'continue'", 
                                      "'decltype'", "'default'", "'delete'", 
                                      "'do'", "'double'", "'FILE'", "'dynamic_cast'", 
                                      "'else'", "'enum'", "'explicit'", 
                                      "'export'", "'extern'", "'false'", 
                                      "'final'", "'float'", "'for'", "'friend'", 
                                      "'goto'", "'if'", "'inline'", "'int'", 
                                      "'long'", "'mutable'", "'namespace'", 
                                      "'new'", "'noexcept'", "'nullptr'", 
                                      "'operator'", "'override'", "'private'", 
                                      "'protected'", "'public'", "'register'", 
                                      "'reinterpret_cast'", "'return'", 
                                      "'short'", "'signed'", "'sizeof'", 
                                      "'static'", "'static_assert'", "'static_cast'", 
                                      "'struct'", "'switch'", "'template'", 
                                      "'this'", "'thread_local'", "'throw'", 
                                      "'true'", "'try'", "'typedef'", "'typeid'", 
                                      "'typename'", "'union'", "'unsigned'", 
                                      "'using'", "'virtual'", "'void'", 
                                      "'volatile'", "'wchar_t'", "'while'", 
                                      "'('", "')'", "'['", "']'", "'{'", 
                                      "'}'", "'+'", "'-'", "'*'", "'/'", 
                                      "'%'", "'^'", "'&'", "'|'", "'~'", 
                                      "'!'", "'='", "'<'", "'>'", "'+='", 
                                      "'-='", "'*='", "'/='", "'%='", "'^='", 
                                      "'&='", "'|='", "'<<'", "'<<='", "'=='", 
                                      "'!='", "'<='", "'>='", "'&&'", "'||'", 
                                      "'++'", "'--'", "','", "'->*'", "'->'", 
                                      "'?'", "':'", "'::'", "';'", "'.'", 
                                      "'.*'", "'...'" ];

CPP14Lexer.prototype.symbolicNames = [ null, "Directive", "Alignas", "Alignof", 
                                       "Asm", "Auto", "Bool", "Break", "Case", 
                                       "Catch", "Char", "Char16", "Char32", 
                                       "Class", "Const", "Constexpr", "Const_cast", 
                                       "Continue", "Decltype", "Default", 
                                       "Delete", "Do", "Double", "File", 
                                       "Dynamic_cast", "Else", "Enum", "Explicit", 
                                       "Export", "Extern", "False", "Final", 
                                       "Float", "For", "Friend", "Goto", 
                                       "If", "Inline", "Int", "Long", "Mutable", 
                                       "Namespace", "New", "Noexcept", "Nullptr", 
                                       "Operator", "Override", "Private", 
                                       "Protected", "Public", "Register", 
                                       "Reinterpret_cast", "Return", "Short", 
                                       "Signed", "Sizeof", "Static", "Static_assert", 
                                       "Static_cast", "Struct", "Switch", 
                                       "Template", "This", "Thread_local", 
                                       "Throw", "True", "Try", "Typedef", 
                                       "Typeid", "Typename", "Union", "Unsigned", 
                                       "Using", "Virtual", "Void", "Volatile", 
                                       "Wchar", "While", "LeftParen", "RightParen", 
                                       "LeftBracket", "RightBracket", "LeftBrace", 
                                       "RightBrace", "Plus", "Minus", "Star", 
                                       "Div", "Mod", "Caret", "And", "Or", 
                                       "Tilde", "Not", "Assign", "Less", 
                                       "Greater", "PlusAssign", "MinusAssign", 
                                       "StarAssign", "DivAssign", "ModAssign", 
                                       "XorAssign", "AndAssign", "OrAssign", 
                                       "LeftShift", "LeftShiftAssign", "Equal", 
                                       "NotEqual", "LessEqual", "GreaterEqual", 
                                       "AndAnd", "OrOr", "PlusPlus", "MinusMinus", 
                                       "Comma", "ArrowStar", "Arrow", "Question", 
                                       "Colon", "Doublecolon", "Semi", "Dot", 
                                       "DotStar", "Ellipsis", "Identifier", 
                                       "Integerliteral", "Decimalliteral", 
                                       "Octalliteral", "Hexadecimalliteral", 
                                       "Binaryliteral", "Integersuffix", 
                                       "Characterliteral", "Floatingliteral", 
                                       "Stringliteral", "Booleanliteral", 
                                       "Userdefinedintegerliteral", "Userdefinedfloatingliteral", 
                                       "Userdefinedstringliteral", "Userdefinedcharacterliteral", 
                                       "Whitespace", "Newline", "BlockComment", 
                                       "LineComment" ];

CPP14Lexer.prototype.ruleNames = [ "Directive", "Alignas", "Alignof", "Asm", 
                                   "Auto", "Bool", "Break", "Case", "Catch", 
                                   "Char", "Char16", "Char32", "Class", 
                                   "Const", "Constexpr", "Const_cast", "Continue", 
                                   "Decltype", "Default", "Delete", "Do", 
                                   "Double", "File", "Dynamic_cast", "Else", 
                                   "Enum", "Explicit", "Export", "Extern", 
                                   "False", "Final", "Float", "For", "Friend", 
                                   "Goto", "If", "Inline", "Int", "Long", 
                                   "Mutable", "Namespace", "New", "Noexcept", 
                                   "Nullptr", "Operator", "Override", "Private", 
                                   "Protected", "Public", "Register", "Reinterpret_cast", 
                                   "Return", "Short", "Signed", "Sizeof", 
                                   "Static", "Static_assert", "Static_cast", 
                                   "Struct", "Switch", "Template", "This", 
                                   "Thread_local", "Throw", "True", "Try", 
                                   "Typedef", "Typeid", "Typename", "Union", 
                                   "Unsigned", "Using", "Virtual", "Void", 
                                   "Volatile", "Wchar", "While", "LeftParen", 
                                   "RightParen", "LeftBracket", "RightBracket", 
                                   "LeftBrace", "RightBrace", "Plus", "Minus", 
                                   "Star", "Div", "Mod", "Caret", "And", 
                                   "Or", "Tilde", "Not", "Assign", "Less", 
                                   "Greater", "PlusAssign", "MinusAssign", 
                                   "StarAssign", "DivAssign", "ModAssign", 
                                   "XorAssign", "AndAssign", "OrAssign", 
                                   "LeftShift", "LeftShiftAssign", "Equal", 
                                   "NotEqual", "LessEqual", "GreaterEqual", 
                                   "AndAnd", "OrOr", "PlusPlus", "MinusMinus", 
                                   "Comma", "ArrowStar", "Arrow", "Question", 
                                   "Colon", "Doublecolon", "Semi", "Dot", 
                                   "DotStar", "Ellipsis", "Hexquad", "Universalcharactername", 
                                   "Identifier", "Identifiernondigit", "NONDIGIT", 
                                   "DIGIT", "Integerliteral", "Decimalliteral", 
                                   "Octalliteral", "Hexadecimalliteral", 
                                   "Binaryliteral", "NONZERODIGIT", "OCTALDIGIT", 
                                   "HEXADECIMALDIGIT", "BINARYDIGIT", "Integersuffix", 
                                   "Unsignedsuffix", "Longsuffix", "Longlongsuffix", 
                                   "Characterliteral", "Cchar", "Escapesequence", 
                                   "Simpleescapesequence", "Octalescapesequence", 
                                   "Hexadecimalescapesequence", "Floatingliteral", 
                                   "Fractionalconstant", "Exponentpart", 
                                   "SIGN", "Digitsequence", "Floatingsuffix", 
                                   "Stringliteral", "Encodingprefix", "Schar", 
                                   "Rawstring", "Booleanliteral", "Userdefinedintegerliteral", 
                                   "Userdefinedfloatingliteral", "Userdefinedstringliteral", 
                                   "Userdefinedcharacterliteral", "Udsuffix", 
                                   "Whitespace", "Newline", "BlockComment", 
                                   "LineComment" ];

CPP14Lexer.prototype.grammarFileName = "CPP14.g4";



exports.CPP14Lexer = CPP14Lexer;



/***/ }),
/* 136 */
/***/ (function(module, exports, __webpack_require__) {

// Generated from C:\Users\RYOSUKE\eclipse\java-oxygen\eclipse\..\..\..\eclipse-workspace\net.unicoen\UniMapperGenerator\src-gen\CPP14.g4 by ANTLR 4.7.1
// jshint ignore: start
var antlr4 = __webpack_require__(16);
var CPP14Visitor = __webpack_require__(80).CPP14Visitor;

var grammarFileName = "CPP14.g4";

var serializedATN = ["\u0003\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964",
    "\u0003\u0091\u0a7a\u0004\u0002\t\u0002\u0004\u0003\t\u0003\u0004\u0004",
    "\t\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\u0007\t\u0007",
    "\u0004\b\t\b\u0004\t\t\t\u0004\n\t\n\u0004\u000b\t\u000b\u0004\f\t\f",
    "\u0004\r\t\r\u0004\u000e\t\u000e\u0004\u000f\t\u000f\u0004\u0010\t\u0010",
    "\u0004\u0011\t\u0011\u0004\u0012\t\u0012\u0004\u0013\t\u0013\u0004\u0014",
    "\t\u0014\u0004\u0015\t\u0015\u0004\u0016\t\u0016\u0004\u0017\t\u0017",
    "\u0004\u0018\t\u0018\u0004\u0019\t\u0019\u0004\u001a\t\u001a\u0004\u001b",
    "\t\u001b\u0004\u001c\t\u001c\u0004\u001d\t\u001d\u0004\u001e\t\u001e",
    "\u0004\u001f\t\u001f\u0004 \t \u0004!\t!\u0004\"\t\"\u0004#\t#\u0004",
    "$\t$\u0004%\t%\u0004&\t&\u0004\'\t\'\u0004(\t(\u0004)\t)\u0004*\t*\u0004",
    "+\t+\u0004,\t,\u0004-\t-\u0004.\t.\u0004/\t/\u00040\t0\u00041\t1\u0004",
    "2\t2\u00043\t3\u00044\t4\u00045\t5\u00046\t6\u00047\t7\u00048\t8\u0004",
    "9\t9\u0004:\t:\u0004;\t;\u0004<\t<\u0004=\t=\u0004>\t>\u0004?\t?\u0004",
    "@\t@\u0004A\tA\u0004B\tB\u0004C\tC\u0004D\tD\u0004E\tE\u0004F\tF\u0004",
    "G\tG\u0004H\tH\u0004I\tI\u0004J\tJ\u0004K\tK\u0004L\tL\u0004M\tM\u0004",
    "N\tN\u0004O\tO\u0004P\tP\u0004Q\tQ\u0004R\tR\u0004S\tS\u0004T\tT\u0004",
    "U\tU\u0004V\tV\u0004W\tW\u0004X\tX\u0004Y\tY\u0004Z\tZ\u0004[\t[\u0004",
    "\\\t\\\u0004]\t]\u0004^\t^\u0004_\t_\u0004`\t`\u0004a\ta\u0004b\tb\u0004",
    "c\tc\u0004d\td\u0004e\te\u0004f\tf\u0004g\tg\u0004h\th\u0004i\ti\u0004",
    "j\tj\u0004k\tk\u0004l\tl\u0004m\tm\u0004n\tn\u0004o\to\u0004p\tp\u0004",
    "q\tq\u0004r\tr\u0004s\ts\u0004t\tt\u0004u\tu\u0004v\tv\u0004w\tw\u0004",
    "x\tx\u0004y\ty\u0004z\tz\u0004{\t{\u0004|\t|\u0004}\t}\u0004~\t~\u0004",
    "\u007f\t\u007f\u0004\u0080\t\u0080\u0004\u0081\t\u0081\u0004\u0082\t",
    "\u0082\u0004\u0083\t\u0083\u0004\u0084\t\u0084\u0004\u0085\t\u0085\u0004",
    "\u0086\t\u0086\u0004\u0087\t\u0087\u0004\u0088\t\u0088\u0004\u0089\t",
    "\u0089\u0004\u008a\t\u008a\u0004\u008b\t\u008b\u0004\u008c\t\u008c\u0004",
    "\u008d\t\u008d\u0004\u008e\t\u008e\u0004\u008f\t\u008f\u0004\u0090\t",
    "\u0090\u0004\u0091\t\u0091\u0004\u0092\t\u0092\u0004\u0093\t\u0093\u0004",
    "\u0094\t\u0094\u0004\u0095\t\u0095\u0004\u0096\t\u0096\u0004\u0097\t",
    "\u0097\u0004\u0098\t\u0098\u0004\u0099\t\u0099\u0004\u009a\t\u009a\u0004",
    "\u009b\t\u009b\u0004\u009c\t\u009c\u0004\u009d\t\u009d\u0004\u009e\t",
    "\u009e\u0004\u009f\t\u009f\u0004\u00a0\t\u00a0\u0004\u00a1\t\u00a1\u0004",
    "\u00a2\t\u00a2\u0004\u00a3\t\u00a3\u0004\u00a4\t\u00a4\u0004\u00a5\t",
    "\u00a5\u0004\u00a6\t\u00a6\u0004\u00a7\t\u00a7\u0004\u00a8\t\u00a8\u0004",
    "\u00a9\t\u00a9\u0004\u00aa\t\u00aa\u0004\u00ab\t\u00ab\u0004\u00ac\t",
    "\u00ac\u0004\u00ad\t\u00ad\u0004\u00ae\t\u00ae\u0004\u00af\t\u00af\u0004",
    "\u00b0\t\u00b0\u0004\u00b1\t\u00b1\u0004\u00b2\t\u00b2\u0004\u00b3\t",
    "\u00b3\u0004\u00b4\t\u00b4\u0004\u00b5\t\u00b5\u0004\u00b6\t\u00b6\u0004",
    "\u00b7\t\u00b7\u0004\u00b8\t\u00b8\u0004\u00b9\t\u00b9\u0004\u00ba\t",
    "\u00ba\u0004\u00bb\t\u00bb\u0004\u00bc\t\u00bc\u0004\u00bd\t\u00bd\u0004",
    "\u00be\t\u00be\u0004\u00bf\t\u00bf\u0004\u00c0\t\u00c0\u0004\u00c1\t",
    "\u00c1\u0004\u00c2\t\u00c2\u0004\u00c3\t\u00c3\u0004\u00c4\t\u00c4\u0004",
    "\u00c5\t\u00c5\u0004\u00c6\t\u00c6\u0004\u00c7\t\u00c7\u0004\u00c8\t",
    "\u00c8\u0004\u00c9\t\u00c9\u0004\u00ca\t\u00ca\u0004\u00cb\t\u00cb\u0004",
    "\u00cc\t\u00cc\u0004\u00cd\t\u00cd\u0004\u00ce\t\u00ce\u0004\u00cf\t",
    "\u00cf\u0004\u00d0\t\u00d0\u0004\u00d1\t\u00d1\u0004\u00d2\t\u00d2\u0004",
    "\u00d3\t\u00d3\u0004\u00d4\t\u00d4\u0004\u00d5\t\u00d5\u0004\u00d6\t",
    "\u00d6\u0004\u00d7\t\u00d7\u0004\u00d8\t\u00d8\u0004\u00d9\t\u00d9\u0004",
    "\u00da\t\u00da\u0004\u00db\t\u00db\u0004\u00dc\t\u00dc\u0004\u00dd\t",
    "\u00dd\u0004\u00de\t\u00de\u0004\u00df\t\u00df\u0004\u00e0\t\u00e0\u0004",
    "\u00e1\t\u00e1\u0004\u00e2\t\u00e2\u0004\u00e3\t\u00e3\u0004\u00e4\t",
    "\u00e4\u0004\u00e5\t\u00e5\u0004\u00e6\t\u00e6\u0004\u00e7\t\u00e7\u0004",
    "\u00e8\t\u00e8\u0003\u0002\u0005\u0002\u01d2\n\u0002\u0003\u0003\u0003",
    "\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003",
    "\u0003\u0005\u0003\u01dc\n\u0003\u0003\u0004\u0003\u0004\u0005\u0004",
    "\u01e0\n\u0004\u0003\u0005\u0003\u0005\u0005\u0005\u01e4\n\u0005\u0003",
    "\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003",
    "\u0006\u0003\u0006\u0003\u0006\u0005\u0006\u01ef\n\u0006\u0003\u0007",
    "\u0003\u0007\u0005\u0007\u01f3\n\u0007\u0003\u0007\u0003\u0007\u0003",
    "\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003",
    "\b\u0003\b\u0005\b\u0202\n\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003\b",
    "\u0005\b\u0209\n\b\u0003\b\u0003\b\u0003\b\u0007\b\u020e\n\b\f\b\u000e",
    "\b\u0211\u000b\b\u0003\t\u0003\t\u0005\t\u0215\n\t\u0003\t\u0003\t\u0003",
    "\n\u0003\n\u0005\n\u021b\n\n\u0003\n\u0003\n\u0003\u000b\u0003\u000b",
    "\u0003\u000b\u0003\u000b\u0003\u000b\u0003\u000b\u0005\u000b\u0225\n",
    "\u000b\u0003\f\u0003\f\u0003\r\u0003\r\u0003\r\u0005\r\u022c\n\r\u0003",
    "\r\u0003\r\u0003\r\u0003\r\u0005\r\u0232\n\r\u0007\r\u0234\n\r\f\r\u000e",
    "\r\u0237\u000b\r\u0003\u000e\u0003\u000e\u0005\u000e\u023b\n\u000e\u0003",
    "\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0005\u000f\u0241\n\u000f",
    "\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0005\u0010",
    "\u0248\n\u0010\u0003\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0005",
    "\u0011\u024e\n\u0011\u0003\u0011\u0005\u0011\u0251\n\u0011\u0003\u0011",
    "\u0005\u0011\u0254\n\u0011\u0003\u0011\u0005\u0011\u0257\n\u0011\u0003",
    "\u0012\u0003\u0012\u0003\u0013\u0003\u0013\u0003\u0013\u0005\u0013\u025e",
    "\n\u0013\u0003\u0013\u0003\u0013\u0003\u0014\u0003\u0014\u0003\u0014",
    "\u0003\u0014\u0003\u0014\u0003\u0014\u0005\u0014\u0268\n\u0014\u0003",
    "\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0005\u0014\u026f",
    "\n\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014",
    "\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014",
    "\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014",
    "\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014",
    "\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014",
    "\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014",
    "\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014",
    "\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014",
    "\u0003\u0014\u0003\u0014\u0003\u0014\u0005\u0014\u02a3\n\u0014\u0003",
    "\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003",
    "\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003",
    "\u0014\u0005\u0014\u02b2\n\u0014\u0003\u0014\u0003\u0014\u0003\u0014",
    "\u0003\u0014\u0005\u0014\u02b8\n\u0014\u0003\u0014\u0003\u0014\u0003",
    "\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003",
    "\u0014\u0003\u0014\u0003\u0014\u0007\u0014\u02c5\n\u0014\f\u0014\u000e",
    "\u0014\u02c8\u000b\u0014\u0003\u0015\u0003\u0015\u0003\u0016\u0005\u0016",
    "\u02cd\n\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003",
    "\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003",
    "\u0016\u0003\u0016\u0003\u0016\u0005\u0016\u02dc\n\u0016\u0003\u0016",
    "\u0003\u0016\u0003\u0016\u0003\u0016\u0005\u0016\u02e2\n\u0016\u0003",
    "\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0005\u0017\u02e8\n\u0017",
    "\u0003\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0003\u0018",
    "\u0003\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0003\u0018",
    "\u0003\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0003\u0018",
    "\u0003\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0003\u0018",
    "\u0003\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0003\u0018",
    "\u0005\u0018\u0308\n\u0018\u0003\u0019\u0003\u0019\u0003\u001a\u0003",
    "\u001a\u0003\u001b\u0005\u001b\u030f\n\u001b\u0003\u001b\u0003\u001b",
    "\u0005\u001b\u0313\n\u001b\u0003\u001b\u0003\u001b\u0005\u001b\u0317",
    "\n\u001b\u0003\u001b\u0005\u001b\u031a\n\u001b\u0003\u001b\u0003\u001b",
    "\u0005\u001b\u031e\n\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0003",
    "\u001b\u0005\u001b\u0324\n\u001b\u0005\u001b\u0326\n\u001b\u0003\u001c",
    "\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001d\u0003\u001d\u0005\u001d",
    "\u032e\n\u001d\u0003\u001e\u0003\u001e\u0005\u001e\u0332\n\u001e\u0003",
    "\u001e\u0005\u001e\u0335\n\u001e\u0003\u001f\u0003\u001f\u0003\u001f",
    "\u0003\u001f\u0003\u001f\u0005\u001f\u033c\n\u001f\u0003\u001f\u0003",
    "\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0005\u001f\u0343\n\u001f",
    "\u0007\u001f\u0345\n\u001f\f\u001f\u000e\u001f\u0348\u000b\u001f\u0003",
    " \u0003 \u0005 \u034c\n \u0003 \u0003 \u0005 \u0350\n \u0003!\u0005",
    "!\u0353\n!\u0003!\u0003!\u0003!\u0005!\u0358\n!\u0003!\u0003!\u0003",
    "!\u0003!\u0005!\u035e\n!\u0003\"\u0003\"\u0003\"\u0003\"\u0003\"\u0003",
    "#\u0003#\u0003#\u0003#\u0003#\u0003#\u0005#\u036b\n#\u0003$\u0003$\u0003",
    "$\u0003$\u0003$\u0003$\u0003$\u0003$\u0003$\u0007$\u0376\n$\f$\u000e",
    "$\u0379\u000b$\u0003%\u0003%\u0003%\u0003%\u0003%\u0003%\u0003%\u0003",
    "%\u0003%\u0003%\u0003%\u0003%\u0007%\u0387\n%\f%\u000e%\u038a\u000b",
    "%\u0003&\u0003&\u0003&\u0003&\u0003&\u0003&\u0003&\u0003&\u0003&\u0007",
    "&\u0395\n&\f&\u000e&\u0398\u000b&\u0003\'\u0003\'\u0003\'\u0003\'\u0003",
    "\'\u0003\'\u0003\'\u0003\'\u0003\'\u0003\'\u0007\'\u03a4\n\'\f\'\u000e",
    "\'\u03a7\u000b\'\u0003(\u0003(\u0003(\u0003(\u0003(\u0003(\u0003(\u0003",
    "(\u0003(\u0003(\u0003(\u0003(\u0003(\u0003(\u0003(\u0007(\u03b8\n(\f",
    "(\u000e(\u03bb\u000b(\u0003)\u0003)\u0003)\u0003)\u0003)\u0003)\u0003",
    ")\u0003)\u0003)\u0007)\u03c6\n)\f)\u000e)\u03c9\u000b)\u0003*\u0003",
    "*\u0003*\u0003*\u0003*\u0003*\u0007*\u03d1\n*\f*\u000e*\u03d4\u000b",
    "*\u0003+\u0003+\u0003+\u0003+\u0003+\u0003+\u0007+\u03dc\n+\f+\u000e",
    "+\u03df\u000b+\u0003,\u0003,\u0003,\u0003,\u0003,\u0003,\u0007,\u03e7",
    "\n,\f,\u000e,\u03ea\u000b,\u0003-\u0003-\u0003-\u0003-\u0003-\u0003",
    "-\u0007-\u03f2\n-\f-\u000e-\u03f5\u000b-\u0003.\u0003.\u0003.\u0003",
    ".\u0003.\u0003.\u0007.\u03fd\n.\f.\u000e.\u0400\u000b.\u0003/\u0003",
    "/\u0003/\u0003/\u0003/\u0003/\u0003/\u0005/\u0409\n/\u00030\u00030\u0003",
    "0\u00030\u00030\u00030\u00050\u0411\n0\u00031\u00031\u00031\u00031\u0003",
    "1\u00031\u00031\u00031\u00031\u00031\u00031\u00051\u041e\n1\u00032\u0003",
    "2\u00032\u00032\u00032\u00032\u00072\u0426\n2\f2\u000e2\u0429\u000b",
    "2\u00033\u00033\u00034\u00034\u00054\u042f\n4\u00034\u00034\u00054\u0433",
    "\n4\u00034\u00034\u00054\u0437\n4\u00034\u00034\u00054\u043b\n4\u0003",
    "4\u00034\u00054\u043f\n4\u00034\u00034\u00054\u0443\n4\u00034\u0003",
    "4\u00054\u0447\n4\u00034\u00034\u00054\u044b\n4\u00034\u00034\u0005",
    "4\u044f\n4\u00034\u00034\u00054\u0453\n4\u00034\u00034\u00054\u0457",
    "\n4\u00034\u00034\u00034\u00034\u00054\u045d\n4\u00034\u00054\u0460",
    "\n4\u00035\u00055\u0463\n5\u00035\u00035\u00035\u00035\u00055\u0469",
    "\n5\u00035\u00035\u00035\u00035\u00035\u00035\u00055\u0471\n5\u0003",
    "5\u00035\u00035\u00055\u0476\n5\u00036\u00056\u0479\n6\u00036\u0003",
    "6\u00037\u00037\u00057\u047f\n7\u00037\u00037\u00038\u00038\u00078\u0485",
    "\n8\f8\u000e8\u0488\u000b8\u00039\u00039\u00039\u00039\u00039\u0003",
    "9\u00039\u00039\u00039\u00039\u00039\u00039\u00039\u00039\u00059\u0498",
    "\n9\u0003:\u0003:\u0003:\u0003:\u0003:\u0003:\u0003;\u0003;\u0005;\u04a2",
    "\n;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0005;\u04aa\n;\u0003",
    ";\u0003;\u0003;\u0003;\u0005;\u04b0\n;\u0003<\u0003<\u0003<\u0003<\u0003",
    "<\u0003<\u0003=\u0003=\u0003=\u0003=\u0003=\u0003=\u0003=\u0003=\u0003",
    ">\u0003>\u0003>\u0003>\u0005>\u04c4\n>\u0003>\u0003>\u0005>\u04c8\n",
    ">\u0003>\u0003>\u0003>\u0003?\u0003?\u0003?\u0003?\u0003?\u0003?\u0003",
    "?\u0003?\u0003@\u0003@\u0003@\u0005@\u04d8\n@\u0003A\u0005A\u04db\n",
    "A\u0003A\u0003A\u0003A\u0003B\u0003B\u0005B\u04e2\nB\u0003C\u0003C\u0003",
    "C\u0003C\u0003D\u0003D\u0003D\u0003E\u0003E\u0003E\u0003F\u0003F\u0005",
    "F\u04f0\nF\u0003F\u0003F\u0003F\u0003F\u0003F\u0005F\u04f7\nF\u0003",
    "G\u0003G\u0005G\u04fb\nG\u0003H\u0003H\u0003H\u0003H\u0003H\u0007H\u0502",
    "\nH\fH\u000eH\u0505\u000bH\u0003I\u0005I\u0508\nI\u0003J\u0003J\u0003",
    "J\u0003J\u0003J\u0003J\u0003K\u0003K\u0005K\u0512\nK\u0003K\u0005K\u0515",
    "\nK\u0003K\u0003K\u0005K\u0519\nK\u0003K\u0005K\u051c\nK\u0003K\u0003",
    "K\u0005K\u0520\nK\u0003K\u0005K\u0523\nK\u0005K\u0525\nK\u0003L\u0003",
    "L\u0003L\u0003L\u0003L\u0003L\u0003L\u0003L\u0003L\u0003L\u0003L\u0005",
    "L\u0532\nL\u0003M\u0003M\u0003M\u0003M\u0003M\u0003M\u0003M\u0005M\u053b",
    "\nM\u0003N\u0003N\u0005N\u053f\nN\u0003O\u0003O\u0003O\u0005O\u0544",
    "\nO\u0003O\u0003O\u0003O\u0003O\u0003P\u0003P\u0003P\u0003Q\u0005Q\u054e",
    "\nQ\u0003Q\u0005Q\u0551\nQ\u0003Q\u0003Q\u0005Q\u0555\nQ\u0003R\u0003",
    "R\u0003R\u0003R\u0007R\u055b\nR\fR\u000eR\u055e\u000bR\u0005R\u0560",
    "\nR\u0003S\u0007S\u0563\nS\fS\u000eS\u0566\u000bS\u0003S\u0003S\u0003",
    "S\u0005S\u056b\nS\u0003S\u0007S\u056e\nS\fS\u000eS\u0571\u000bS\u0003",
    "S\u0003S\u0005S\u0575\nS\u0003T\u0003T\u0003T\u0003U\u0005U\u057b\n",
    "U\u0003U\u0005U\u057e\nU\u0003U\u0003U\u0003U\u0005U\u0583\nU\u0003",
    "U\u0003U\u0003U\u0005U\u0588\nU\u0003V\u0003V\u0003V\u0003V\u0003V\u0003",
    "V\u0003V\u0003V\u0003W\u0003W\u0003X\u0003X\u0003X\u0003Y\u0003Y\u0005",
    "Y\u0599\nY\u0003Z\u0003Z\u0005Z\u059d\nZ\u0003Z\u0003Z\u0003Z\u0005",
    "Z\u05a2\nZ\u0003[\u0003[\u0003[\u0003[\u0003[\u0005[\u05a9\n[\u0003",
    "\\\u0003\\\u0005\\\u05ad\n\\\u0003\\\u0003\\\u0003\\\u0005\\\u05b2\n",
    "\\\u0003]\u0003]\u0003^\u0003^\u0003_\u0003_\u0003`\u0003`\u0003`\u0005",
    "`\u05bd\n`\u0003a\u0003a\u0003a\u0003a\u0005a\u05c3\na\u0003b\u0003",
    "b\u0005b\u05c7\nb\u0003b\u0003b\u0003b\u0005b\u05cc\nb\u0003c\u0003",
    "c\u0005c\u05d0\nc\u0003c\u0003c\u0003c\u0005c\u05d5\nc\u0003d\u0005",
    "d\u05d8\nd\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003",
    "d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0005d\u05ea\nd\u0003",
    "d\u0003d\u0003d\u0003d\u0003d\u0003d\u0005d\u05f2\nd\u0003e\u0003e\u0003",
    "e\u0003e\u0005e\u05f8\ne\u0003f\u0003f\u0003f\u0003f\u0003f\u0003f\u0003",
    "f\u0003f\u0003f\u0005f\u0603\nf\u0003g\u0003g\u0005g\u0607\ng\u0003",
    "g\u0005g\u060a\ng\u0003g\u0003g\u0003g\u0003g\u0003g\u0003g\u0003g\u0003",
    "g\u0005g\u0614\ng\u0003g\u0003g\u0003g\u0003g\u0005g\u061a\ng\u0003",
    "g\u0005g\u061d\ng\u0003h\u0003h\u0003i\u0003i\u0003i\u0005i\u0624\n",
    "i\u0003i\u0003i\u0003i\u0003i\u0003i\u0003i\u0003i\u0003i\u0005i\u062e",
    "\ni\u0003j\u0003j\u0005j\u0632\nj\u0003j\u0005j\u0635\nj\u0003j\u0005",
    "j\u0638\nj\u0003j\u0003j\u0005j\u063c\nj\u0003j\u0003j\u0003j\u0005",
    "j\u0641\nj\u0005j\u0643\nj\u0003k\u0003k\u0005k\u0647\nk\u0003k\u0003",
    "k\u0005k\u064b\nk\u0003k\u0003k\u0003l\u0003l\u0003l\u0003l\u0003l\u0005",
    "l\u0654\nl\u0003m\u0003m\u0003m\u0003n\u0003n\u0003n\u0003n\u0003n\u0003",
    "n\u0007n\u065f\nn\fn\u000en\u0662\u000bn\u0003o\u0003o\u0003o\u0003",
    "o\u0003o\u0005o\u0669\no\u0003p\u0003p\u0003q\u0003q\u0005q\u066f\n",
    "q\u0003r\u0003r\u0003s\u0003s\u0005s\u0675\ns\u0003t\u0003t\u0005t\u0679",
    "\nt\u0003u\u0005u\u067c\nu\u0003u\u0003u\u0003u\u0003u\u0003u\u0003",
    "u\u0003v\u0005v\u0685\nv\u0003v\u0003v\u0003v\u0003v\u0003v\u0003v\u0003",
    "w\u0005w\u068e\nw\u0003w\u0003w\u0003w\u0003w\u0003w\u0003x\u0005x\u0696",
    "\nx\u0003y\u0003y\u0003z\u0003z\u0003z\u0003z\u0003z\u0003z\u0003{\u0005",
    "{\u06a1\n{\u0003{\u0003{\u0003|\u0003|\u0005|\u06a7\n|\u0003|\u0003",
    "|\u0003|\u0003|\u0003|\u0003|\u0003|\u0003|\u0003|\u0005|\u06b2\n|\u0003",
    "}\u0005}\u06b5\n}\u0003}\u0003}\u0003}\u0005}\u06ba\n}\u0003}\u0003",
    "}\u0003}\u0003~\u0003~\u0003~\u0003~\u0003~\u0003~\u0003\u007f\u0003",
    "\u007f\u0003\u007f\u0003\u007f\u0005\u007f\u06c9\n\u007f\u0003\u007f",
    "\u0003\u007f\u0003\u007f\u0003\u007f\u0005\u007f\u06cf\n\u007f\u0003",
    "\u0080\u0003\u0080\u0003\u0080\u0003\u0080\u0003\u0080\u0007\u0080\u06d6",
    "\n\u0080\f\u0080\u000e\u0080\u06d9\u000b\u0080\u0003\u0081\u0003\u0081",
    "\u0003\u0081\u0003\u0081\u0003\u0081\u0003\u0081\u0003\u0081\u0005\u0081",
    "\u06e2\n\u0081\u0003\u0082\u0003\u0082\u0003\u0082\u0003\u0082\u0005",
    "\u0082\u06e8\n\u0082\u0003\u0082\u0003\u0082\u0003\u0082\u0003\u0082",
    "\u0003\u0082\u0003\u0082\u0005\u0082\u06f0\n\u0082\u0003\u0082\u0003",
    "\u0082\u0005\u0082\u06f4\n\u0082\u0003\u0083\u0003\u0083\u0005\u0083",
    "\u06f8\n\u0083\u0003\u0083\u0003\u0083\u0003\u0083\u0005\u0083\u06fd",
    "\n\u0083\u0003\u0083\u0003\u0083\u0003\u0083\u0005\u0083\u0702\n\u0083",
    "\u0003\u0083\u0003\u0083\u0003\u0083\u0003\u0083\u0003\u0083\u0007\u0083",
    "\u0709\n\u0083\f\u0083\u000e\u0083\u070c\u000b\u0083\u0003\u0084\u0003",
    "\u0084\u0005\u0084\u0710\n\u0084\u0003\u0085\u0003\u0085\u0005\u0085",
    "\u0714\n\u0085\u0003\u0086\u0003\u0086\u0003\u0086\u0003\u0086\u0003",
    "\u0087\u0003\u0087\u0003\u0088\u0003\u0088\u0003\u0088\u0003\u0088\u0003",
    "\u0089\u0003\u0089\u0005\u0089\u0722\n\u0089\u0003\u0089\u0003\u0089",
    "\u0007\u0089\u0726\n\u0089\f\u0089\u000e\u0089\u0729\u000b\u0089\u0003",
    "\u008a\u0003\u008a\u0003\u008a\u0003\u008a\u0003\u008a\u0003\u008a\u0003",
    "\u008a\u0003\u008a\u0003\u008a\u0003\u008a\u0003\u008a\u0003\u008a\u0005",
    "\u008a\u0737\n\u008a\u0003\u008b\u0003\u008b\u0003\u008b\u0007\u008b",
    "\u073c\n\u008b\f\u008b\u000e\u008b\u073f\u000b\u008b\u0003\u008c\u0003",
    "\u008c\u0005\u008c\u0743\n\u008c\u0003\u008d\u0003\u008d\u0003\u008d",
    "\u0003\u008d\u0003\u008d\u0005\u008d\u074a\n\u008d\u0003\u008e\u0007",
    "\u008e\u074d\n\u008e\f\u008e\u000e\u008e\u0750\u000b\u008e\u0003\u008e",
    "\u0003\u008e\u0003\u008f\u0003\u008f\u0003\u008f\u0005\u008f\u0757\n",
    "\u008f\u0003\u008f\u0003\u008f\u0003\u008f\u0003\u008f\u0005\u008f\u075d",
    "\n\u008f\u0003\u008f\u0003\u008f\u0003\u008f\u0003\u008f\u0003\u008f",
    "\u0005\u008f\u0764\n\u008f\u0003\u008f\u0003\u008f\u0005\u008f\u0768",
    "\n\u008f\u0007\u008f\u076a\n\u008f\f\u008f\u000e\u008f\u076d\u000b\u008f",
    "\u0003\u0090\u0003\u0090\u0003\u0090\u0003\u0090\u0005\u0090\u0773\n",
    "\u0090\u0003\u0090\u0005\u0090\u0776\n\u0090\u0003\u0090\u0005\u0090",
    "\u0779\n\u0090\u0003\u0090\u0005\u0090\u077c\n\u0090\u0003\u0091\u0003",
    "\u0091\u0003\u0091\u0005\u0091\u0781\n\u0091\u0003\u0092\u0003\u0092",
    "\u0005\u0092\u0785\n\u0092\u0003\u0092\u0005\u0092\u0788\n\u0092\u0003",
    "\u0092\u0003\u0092\u0005\u0092\u078c\n\u0092\u0003\u0092\u0003\u0092",
    "\u0005\u0092\u0790\n\u0092\u0003\u0092\u0003\u0092\u0003\u0092\u0005",
    "\u0092\u0795\n\u0092\u0003\u0092\u0005\u0092\u0798\n\u0092\u0005\u0092",
    "\u079a\n\u0092\u0003\u0093\u0003\u0093\u0005\u0093\u079e\n\u0093\u0003",
    "\u0094\u0003\u0094\u0003\u0095\u0003\u0095\u0003\u0096\u0005\u0096\u07a5",
    "\n\u0096\u0003\u0096\u0003\u0096\u0003\u0097\u0003\u0097\u0005\u0097",
    "\u07ab\n\u0097\u0003\u0098\u0003\u0098\u0005\u0098\u07af\n\u0098\u0003",
    "\u0098\u0003\u0098\u0003\u0098\u0003\u0098\u0005\u0098\u07b5\n\u0098",
    "\u0003\u0099\u0003\u0099\u0003\u0099\u0005\u0099\u07ba\n\u0099\u0005",
    "\u0099\u07bc\n\u0099\u0003\u009a\u0003\u009a\u0003\u009a\u0003\u009a",
    "\u0005\u009a\u07c2\n\u009a\u0003\u009a\u0003\u009a\u0005\u009a\u07c6",
    "\n\u009a\u0003\u009a\u0003\u009a\u0003\u009a\u0003\u009a\u0005\u009a",
    "\u07cc\n\u009a\u0003\u009a\u0003\u009a\u0003\u009a\u0003\u009a\u0003",
    "\u009a\u0005\u009a\u07d3\n\u009a\u0003\u009a\u0003\u009a\u0005\u009a",
    "\u07d7\n\u009a\u0007\u009a\u07d9\n\u009a\f\u009a\u000e\u009a\u07dc\u000b",
    "\u009a\u0003\u009b\u0003\u009b\u0003\u009b\u0003\u009b\u0005\u009b\u07e2",
    "\n\u009b\u0003\u009c\u0003\u009c\u0003\u009c\u0003\u009c\u0003\u009c",
    "\u0003\u009c\u0003\u009c\u0003\u009c\u0005\u009c\u07ec\n\u009c\u0003",
    "\u009c\u0003\u009c\u0005\u009c\u07f0\n\u009c\u0007\u009c\u07f2\n\u009c",
    "\f\u009c\u000e\u009c\u07f5\u000b\u009c\u0003\u009d\u0005\u009d\u07f8",
    "\n\u009d\u0003\u009d\u0005\u009d\u07fb\n\u009d\u0003\u009d\u0003\u009d",
    "\u0003\u009d\u0003\u009d\u0005\u009d\u0801\n\u009d\u0003\u009e\u0003",
    "\u009e\u0003\u009e\u0003\u009e\u0003\u009e\u0003\u009e\u0007\u009e\u0809",
    "\n\u009e\f\u009e\u000e\u009e\u080c\u000b\u009e\u0003\u009f\u0005\u009f",
    "\u080f\n\u009f\u0003\u009f\u0005\u009f\u0812\n\u009f\u0003\u009f\u0003",
    "\u009f\u0005\u009f\u0816\n\u009f\u0003\u00a0\u0005\u00a0\u0819\n\u00a0",
    "\u0003\u00a0\u0005\u00a0\u081c\n\u00a0\u0003\u00a0\u0003\u00a0\u0005",
    "\u00a0\u0820\n\u00a0\u0003\u00a0\u0003\u00a0\u0003\u00a1\u0005\u00a1",
    "\u0825\n\u00a1\u0003\u00a1\u0003\u00a1\u0003\u00a2\u0003\u00a2\u0003",
    "\u00a2\u0003\u00a2\u0003\u00a2\u0003\u00a3\u0005\u00a3\u082f\n\u00a3",
    "\u0003\u00a3\u0003\u00a3\u0003\u00a3\u0003\u00a3\u0003\u00a3\u0003\u00a3",
    "\u0003\u00a3\u0003\u00a3\u0005\u00a3\u0839\n\u00a3\u0003\u00a4\u0003",
    "\u00a4\u0003\u00a4\u0003\u00a4\u0003\u00a4\u0005\u00a4\u0840\n\u00a4",
    "\u0003\u00a5\u0003\u00a5\u0003\u00a5\u0005\u00a5\u0845\n\u00a5\u0003",
    "\u00a6\u0003\u00a6\u0005\u00a6\u0849\n\u00a6\u0003\u00a7\u0003\u00a7",
    "\u0003\u00a7\u0007\u00a7\u084e\n\u00a7\f\u00a7\u000e\u00a7\u0851\u000b",
    "\u00a7\u0003\u00a8\u0003\u00a8\u0003\u00a8\u0005\u00a8\u0856\n\u00a8",
    "\u0003\u00a8\u0003\u00a8\u0003\u00a8\u0003\u00a8\u0005\u00a8\u085c\n",
    "\u00a8\u0003\u00a9\u0003\u00a9\u0005\u00a9\u0860\n\u00a9\u0003\u00aa",
    "\u0003\u00aa\u0003\u00aa\u0003\u00ab\u0003\u00ab\u0005\u00ab\u0867\n",
    "\u00ab\u0003\u00ab\u0003\u00ab\u0003\u00ac\u0003\u00ac\u0005\u00ac\u086d",
    "\n\u00ac\u0003\u00ac\u0005\u00ac\u0870\n\u00ac\u0003\u00ac\u0003\u00ac",
    "\u0005\u00ac\u0874\n\u00ac\u0003\u00ac\u0005\u00ac\u0877\n\u00ac\u0003",
    "\u00ac\u0003\u00ac\u0005\u00ac\u087b\n\u00ac\u0003\u00ac\u0005\u00ac",
    "\u087e\n\u00ac\u0005\u00ac\u0880\n\u00ac\u0003\u00ad\u0005\u00ad\u0883",
    "\n\u00ad\u0003\u00ad\u0003\u00ad\u0003\u00ae\u0003\u00ae\u0003\u00af",
    "\u0003\u00af\u0003\u00b0\u0003\u00b0\u0005\u00b0\u088d\n\u00b0\u0003",
    "\u00b0\u0003\u00b0\u0003\u00b0\u0005\u00b0\u0892\n\u00b0\u0005\u00b0",
    "\u0894\n\u00b0\u0003\u00b1\u0003\u00b1\u0003\u00b1\u0003\u00b1\u0003",
    "\u00b1\u0003\u00b1\u0003\u00b1\u0005\u00b1\u089d\n\u00b1\u0003\u00b2",
    "\u0003\u00b2\u0003\u00b2\u0003\u00b3\u0005\u00b3\u08a3\n\u00b3\u0003",
    "\u00b3\u0005\u00b3\u08a6\n\u00b3\u0003\u00b3\u0003\u00b3\u0007\u00b3",
    "\u08aa\n\u00b3\f\u00b3\u000e\u00b3\u08ad\u000b\u00b3\u0003\u00b3\u0005",
    "\u00b3\u08b0\n\u00b3\u0003\u00b4\u0003\u00b4\u0003\u00b4\u0003\u00b4",
    "\u0003\u00b4\u0003\u00b4\u0007\u00b4\u08b8\n\u00b4\f\u00b4\u000e\u00b4",
    "\u08bb\u000b\u00b4\u0003\u00b5\u0003\u00b5\u0005\u00b5\u08bf\n\u00b5",
    "\u0003\u00b5\u0005\u00b5\u08c2\n\u00b5\u0003\u00b5\u0003\u00b5\u0003",
    "\u00b5\u0005\u00b5\u08c7\n\u00b5\u0003\u00b5\u0003\u00b5\u0005\u00b5",
    "\u08cb\n\u00b5\u0003\u00b5\u0005\u00b5\u08ce\n\u00b5\u0003\u00b5\u0005",
    "\u00b5\u08d1\n\u00b5\u0003\u00b5\u0003\u00b5\u0005\u00b5\u08d5\n\u00b5",
    "\u0003\u00b6\u0003\u00b6\u0003\u00b6\u0003\u00b6\u0003\u00b6\u0007\u00b6",
    "\u08dc\n\u00b6\f\u00b6\u000e\u00b6\u08df\u000b\u00b6\u0003\u00b7\u0003",
    "\u00b7\u0003\u00b8\u0003\u00b8\u0003\u00b8\u0003\u00b9\u0003\u00b9\u0003",
    "\u00b9\u0003\u00ba\u0003\u00ba\u0003\u00ba\u0005\u00ba\u08ec\n\u00ba",
    "\u0003\u00ba\u0003\u00ba\u0003\u00ba\u0003\u00ba\u0005\u00ba\u08f2\n",
    "\u00ba\u0007\u00ba\u08f4\n\u00ba\f\u00ba\u000e\u00ba\u08f7\u000b\u00ba",
    "\u0003\u00bb\u0005\u00bb\u08fa\n\u00bb\u0003\u00bb\u0003\u00bb\u0005",
    "\u00bb\u08fe\n\u00bb\u0003\u00bb\u0003\u00bb\u0005\u00bb\u0902\n\u00bb",
    "\u0003\u00bb\u0003\u00bb\u0005\u00bb\u0906\n\u00bb\u0003\u00bb\u0003",
    "\u00bb\u0005\u00bb\u090a\n\u00bb\u0003\u00bb\u0003\u00bb\u0005\u00bb",
    "\u090e\n\u00bb\u0003\u00bc\u0005\u00bc\u0911\n\u00bc\u0003\u00bc\u0003",
    "\u00bc\u0005\u00bc\u0915\n\u00bc\u0003\u00bd\u0003\u00bd\u0003\u00be",
    "\u0003\u00be\u0003\u00bf\u0003\u00bf\u0003\u00bf\u0003\u00c0\u0003\u00c0",
    "\u0005\u00c0\u0920\n\u00c0\u0003\u00c1\u0003\u00c1\u0005\u00c1\u0924",
    "\n\u00c1\u0003\u00c2\u0003\u00c2\u0003\u00c2\u0003\u00c3\u0003\u00c3",
    "\u0005\u00c3\u092b\n\u00c3\u0003\u00c3\u0003\u00c3\u0005\u00c3\u092f",
    "\n\u00c3\u0003\u00c3\u0003\u00c3\u0003\u00c3\u0005\u00c3\u0934\n\u00c3",
    "\u0003\u00c4\u0003\u00c4\u0003\u00c4\u0005\u00c4\u0939\n\u00c4\u0003",
    "\u00c4\u0003\u00c4\u0003\u00c4\u0003\u00c4\u0003\u00c4\u0005\u00c4\u0940",
    "\n\u00c4\u0003\u00c5\u0003\u00c5\u0005\u00c5\u0944\n\u00c5\u0003\u00c6",
    "\u0003\u00c6\u0003\u00c6\u0003\u00c7\u0003\u00c7\u0003\u00c7\u0003\u00c7",
    "\u0003\u00c7\u0005\u00c7\u094e\n\u00c7\u0003\u00c8\u0003\u00c8\u0003",
    "\u00c8\u0003\u00c8\u0003\u00c8\u0003\u00c8\u0003\u00c9\u0003\u00c9\u0003",
    "\u00c9\u0003\u00c9\u0003\u00c9\u0003\u00c9\u0007\u00c9\u095c\n\u00c9",
    "\f\u00c9\u000e\u00c9\u095f\u000b\u00c9\u0003\u00ca\u0003\u00ca\u0005",
    "\u00ca\u0963\n\u00ca\u0003\u00cb\u0003\u00cb\u0005\u00cb\u0967\n\u00cb",
    "\u0003\u00cb\u0005\u00cb\u096a\n\u00cb\u0003\u00cb\u0003\u00cb\u0005",
    "\u00cb\u096e\n\u00cb\u0003\u00cb\u0003\u00cb\u0003\u00cb\u0003\u00cb",
    "\u0005\u00cb\u0974\n\u00cb\u0003\u00cb\u0005\u00cb\u0977\n\u00cb\u0003",
    "\u00cb\u0003\u00cb\u0005\u00cb\u097b\n\u00cb\u0003\u00cb\u0003\u00cb",
    "\u0003\u00cb\u0003\u00cb\u0003\u00cb\u0003\u00cb\u0003\u00cb\u0003\u00cb",
    "\u0005\u00cb\u0985\n\u00cb\u0003\u00cb\u0005\u00cb\u0988\n\u00cb\u0003",
    "\u00cb\u0003\u00cb\u0003\u00cb\u0003\u00cb\u0003\u00cb\u0003\u00cb\u0005",
    "\u00cb\u0990\n\u00cb\u0003\u00cb\u0003\u00cb\u0003\u00cb\u0005\u00cb",
    "\u0995\n\u00cb\u0003\u00cc\u0003\u00cc\u0003\u00cc\u0005\u00cc\u099a",
    "\n\u00cc\u0003\u00cc\u0003\u00cc\u0003\u00cd\u0003\u00cd\u0003\u00cd",
    "\u0003\u00cd\u0005\u00cd\u09a2\n\u00cd\u0003\u00cd\u0003\u00cd\u0003",
    "\u00cd\u0003\u00cd\u0003\u00cd\u0005\u00cd\u09a9\n\u00cd\u0003\u00cd",
    "\u0003\u00cd\u0005\u00cd\u09ad\n\u00cd\u0003\u00ce\u0003\u00ce\u0003",
    "\u00cf\u0003\u00cf\u0003\u00cf\u0005\u00cf\u09b4\n\u00cf\u0003\u00cf",
    "\u0003\u00cf\u0003\u00cf\u0003\u00cf\u0005\u00cf\u09ba\n\u00cf\u0007",
    "\u00cf\u09bc\n\u00cf\f\u00cf\u000e\u00cf\u09bf\u000b\u00cf\u0003\u00d0",
    "\u0003\u00d0\u0003\u00d0\u0005\u00d0\u09c4\n\u00d0\u0003\u00d1\u0003",
    "\u00d1\u0003\u00d1\u0003\u00d1\u0003\u00d1\u0003\u00d1\u0003\u00d1\u0005",
    "\u00d1\u09cd\n\u00d1\u0003\u00d1\u0003\u00d1\u0005\u00d1\u09d1\n\u00d1",
    "\u0003\u00d2\u0005\u00d2\u09d4\n\u00d2\u0003\u00d2\u0003\u00d2\u0003",
    "\u00d2\u0003\u00d3\u0003\u00d3\u0003\u00d3\u0003\u00d3\u0003\u00d3\u0003",
    "\u00d4\u0003\u00d4\u0003\u00d4\u0003\u00d4\u0003\u00d5\u0003\u00d5\u0005",
    "\u00d5\u09e4\n\u00d5\u0003\u00d5\u0003\u00d5\u0003\u00d5\u0003\u00d6",
    "\u0003\u00d6\u0005\u00d6\u09eb\n\u00d6\u0003\u00d7\u0003\u00d7\u0003",
    "\u00d7\u0003\u00d7\u0003\u00d7\u0003\u00d7\u0003\u00d8\u0005\u00d8\u09f4",
    "\n\u00d8\u0003\u00d8\u0003\u00d8\u0003\u00d8\u0003\u00d8\u0005\u00d8",
    "\u09fa\n\u00d8\u0003\u00d8\u0003\u00d8\u0005\u00d8\u09fe\n\u00d8\u0003",
    "\u00d8\u0005\u00d8\u0a01\n\u00d8\u0003\u00d9\u0003\u00d9\u0005\u00d9",
    "\u0a05\n\u00d9\u0003\u00da\u0003\u00da\u0005\u00da\u0a09\n\u00da\u0003",
    "\u00db\u0003\u00db\u0003\u00db\u0005\u00db\u0a0e\n\u00db\u0003\u00db",
    "\u0003\u00db\u0003\u00dc\u0003\u00dc\u0003\u00dc\u0005\u00dc\u0a15\n",
    "\u00dc\u0003\u00dc\u0003\u00dc\u0003\u00dc\u0003\u00dc\u0005\u00dc\u0a1b",
    "\n\u00dc\u0007\u00dc\u0a1d\n\u00dc\f\u00dc\u000e\u00dc\u0a20\u000b\u00dc",
    "\u0003\u00dd\u0003\u00dd\u0003\u00dd\u0003\u00dd\u0003\u00dd\u0003\u00dd",
    "\u0005\u00dd\u0a28\n\u00dd\u0003\u00de\u0003\u00de\u0003\u00de\u0003",
    "\u00df\u0003\u00df\u0003\u00df\u0003\u00df\u0003\u00e0\u0003\u00e0\u0003",
    "\u00e0\u0003\u00e0\u0003\u00e0\u0003\u00e0\u0003\u00e0\u0003\u00e0\u0003",
    "\u00e0\u0003\u00e0\u0003\u00e0\u0003\u00e0\u0003\u00e0\u0003\u00e0\u0003",
    "\u00e0\u0003\u00e0\u0003\u00e0\u0003\u00e0\u0003\u00e0\u0003\u00e0\u0003",
    "\u00e0\u0003\u00e0\u0003\u00e0\u0003\u00e0\u0003\u00e0\u0003\u00e0\u0003",
    "\u00e0\u0003\u00e0\u0003\u00e0\u0003\u00e0\u0003\u00e0\u0003\u00e0\u0003",
    "\u00e0\u0003\u00e0\u0003\u00e0\u0003\u00e0\u0003\u00e0\u0003\u00e0\u0003",
    "\u00e0\u0003\u00e0\u0003\u00e0\u0003\u00e0\u0003\u00e0\u0003\u00e0\u0003",
    "\u00e0\u0003\u00e0\u0003\u00e0\u0003\u00e0\u0005\u00e0\u0a61\n\u00e0",
    "\u0003\u00e1\u0003\u00e1\u0003\u00e1\u0003\u00e1\u0003\u00e1\u0003\u00e1",
    "\u0003\u00e1\u0005\u00e1\u0a6a\n\u00e1\u0003\u00e2\u0003\u00e2\u0003",
    "\u00e3\u0003\u00e3\u0003\u00e4\u0003\u00e4\u0003\u00e5\u0003\u00e5\u0003",
    "\u00e6\u0003\u00e6\u0003\u00e7\u0003\u00e7\u0003\u00e8\u0003\u00e8\u0003",
    "\u00e8\u0002!\u000e\u0018&<FHJLNPRTVXZb\u008e\u00da\u00fe\u0104\u0110",
    "\u011c\u0132\u0136\u013a\u0166\u016a\u0172\u0190\u019c\u01b6\u00e9\u0002",
    "\u0004\u0006\b\n\f\u000e\u0010\u0012\u0014\u0016\u0018\u001a\u001c\u001e",
    " \"$&(*,.02468:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084",
    "\u0086\u0088\u008a\u008c\u008e\u0090\u0092\u0094\u0096\u0098\u009a\u009c",
    "\u009e\u00a0\u00a2\u00a4\u00a6\u00a8\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4",
    "\u00b6\u00b8\u00ba\u00bc\u00be\u00c0\u00c2\u00c4\u00c6\u00c8\u00ca\u00cc",
    "\u00ce\u00d0\u00d2\u00d4\u00d6\u00d8\u00da\u00dc\u00de\u00e0\u00e2\u00e4",
    "\u00e6\u00e8\u00ea\u00ec\u00ee\u00f0\u00f2\u00f4\u00f6\u00f8\u00fa\u00fc",
    "\u00fe\u0100\u0102\u0104\u0106\u0108\u010a\u010c\u010e\u0110\u0112\u0114",
    "\u0116\u0118\u011a\u011c\u011e\u0120\u0122\u0124\u0126\u0128\u012a\u012c",
    "\u012e\u0130\u0132\u0134\u0136\u0138\u013a\u013c\u013e\u0140\u0142\u0144",
    "\u0146\u0148\u014a\u014c\u014e\u0150\u0152\u0154\u0156\u0158\u015a\u015c",
    "\u015e\u0160\u0162\u0164\u0166\u0168\u016a\u016c\u016e\u0170\u0172\u0174",
    "\u0176\u0178\u017a\u017c\u017e\u0180\u0182\u0184\u0186\u0188\u018a\u018c",
    "\u018e\u0190\u0192\u0194\u0196\u0198\u019a\u019c\u019e\u01a0\u01a2\u01a4",
    "\u01a6\u01a8\u01aa\u01ac\u01ae\u01b0\u01b2\u01b4\u01b6\u01b8\u01ba\u01bc",
    "\u01be\u01c0\u01c2\u01c4\u01c6\u01c8\u01ca\u01cc\u01ce\u0002\f\u0004",
    "\u0002\\\\``\u0004\u0002VX\\_\u0007\u0002\u001f\u001f**44::AA\u0005",
    "\u0002\u001d\u001d\'\'KK\u0004\u0002\u0010\u0010MM\u0004\u0002\\\\q",
    "q\u0005\u0002\u000f\u000f==HH\u0004\u0002!!00\u0003\u000213\u0003\u0002",
    "\u008a\u008d\u0002\u0b99\u0002\u01d1\u0003\u0002\u0002\u0002\u0004\u01db",
    "\u0003\u0002\u0002\u0002\u0006\u01df\u0003\u0002\u0002\u0002\b\u01e3",
    "\u0003\u0002\u0002\u0002\n\u01ee\u0003\u0002\u0002\u0002\f\u01f0\u0003",
    "\u0002\u0002\u0002\u000e\u0201\u0003\u0002\u0002\u0002\u0010\u0212\u0003",
    "\u0002\u0002\u0002\u0012\u0218\u0003\u0002\u0002\u0002\u0014\u0224\u0003",
    "\u0002\u0002\u0002\u0016\u0226\u0003\u0002\u0002\u0002\u0018\u0228\u0003",
    "\u0002\u0002\u0002\u001a\u023a\u0003\u0002\u0002\u0002\u001c\u0240\u0003",
    "\u0002\u0002\u0002\u001e\u0247\u0003\u0002\u0002\u0002 \u0249\u0003",
    "\u0002\u0002\u0002\"\u0258\u0003\u0002\u0002\u0002$\u025a\u0003\u0002",
    "\u0002\u0002&\u02a2\u0003\u0002\u0002\u0002(\u02c9\u0003\u0002\u0002",
    "\u0002*\u02e1\u0003\u0002\u0002\u0002,\u02e7\u0003\u0002\u0002\u0002",
    ".\u0307\u0003\u0002\u0002\u00020\u0309\u0003\u0002\u0002\u00022\u030b",
    "\u0003\u0002\u0002\u00024\u0325\u0003\u0002\u0002\u00026\u0327\u0003",
    "\u0002\u0002\u00028\u032b\u0003\u0002\u0002\u0002:\u0334\u0003\u0002",
    "\u0002\u0002<\u0336\u0003\u0002\u0002\u0002>\u034f\u0003\u0002\u0002",
    "\u0002@\u035d\u0003\u0002\u0002\u0002B\u035f\u0003\u0002\u0002\u0002",
    "D\u036a\u0003\u0002\u0002\u0002F\u036c\u0003\u0002\u0002\u0002H\u037a",
    "\u0003\u0002\u0002\u0002J\u038b\u0003\u0002\u0002\u0002L\u0399\u0003",
    "\u0002\u0002\u0002N\u03a8\u0003\u0002\u0002\u0002P\u03bc\u0003\u0002",
    "\u0002\u0002R\u03ca\u0003\u0002\u0002\u0002T\u03d5\u0003\u0002\u0002",
    "\u0002V\u03e0\u0003\u0002\u0002\u0002X\u03eb\u0003\u0002\u0002\u0002",
    "Z\u03f6\u0003\u0002\u0002\u0002\\\u0408\u0003\u0002\u0002\u0002^\u0410",
    "\u0003\u0002\u0002\u0002`\u041d\u0003\u0002\u0002\u0002b\u041f\u0003",
    "\u0002\u0002\u0002d\u042a\u0003\u0002\u0002\u0002f\u045f\u0003\u0002",
    "\u0002\u0002h\u0475\u0003\u0002\u0002\u0002j\u0478\u0003\u0002\u0002",
    "\u0002l\u047c\u0003\u0002\u0002\u0002n\u0482\u0003\u0002\u0002\u0002",
    "p\u0497\u0003\u0002\u0002\u0002r\u0499\u0003\u0002\u0002\u0002t\u04af",
    "\u0003\u0002\u0002\u0002v\u04b1\u0003\u0002\u0002\u0002x\u04b7\u0003",
    "\u0002\u0002\u0002z\u04bf\u0003\u0002\u0002\u0002|\u04cc\u0003\u0002",
    "\u0002\u0002~\u04d7\u0003\u0002\u0002\u0002\u0080\u04da\u0003\u0002",
    "\u0002\u0002\u0082\u04e1\u0003\u0002\u0002\u0002\u0084\u04e3\u0003\u0002",
    "\u0002\u0002\u0086\u04e7\u0003\u0002\u0002\u0002\u0088\u04ea\u0003\u0002",
    "\u0002\u0002\u008a\u04f6\u0003\u0002\u0002\u0002\u008c\u04fa\u0003\u0002",
    "\u0002\u0002\u008e\u04fc\u0003\u0002\u0002\u0002\u0090\u0507\u0003\u0002",
    "\u0002\u0002\u0092\u0509\u0003\u0002\u0002\u0002\u0094\u0524\u0003\u0002",
    "\u0002\u0002\u0096\u0531\u0003\u0002\u0002\u0002\u0098\u053a\u0003\u0002",
    "\u0002\u0002\u009a\u053e\u0003\u0002\u0002\u0002\u009c\u0540\u0003\u0002",
    "\u0002\u0002\u009e\u0549\u0003\u0002\u0002\u0002\u00a0\u054d\u0003\u0002",
    "\u0002\u0002\u00a2\u055f\u0003\u0002\u0002\u0002\u00a4\u0564\u0003\u0002",
    "\u0002\u0002\u00a6\u0576\u0003\u0002\u0002\u0002\u00a8\u0587\u0003\u0002",
    "\u0002\u0002\u00aa\u0589\u0003\u0002\u0002\u0002\u00ac\u0591\u0003\u0002",
    "\u0002\u0002\u00ae\u0593\u0003\u0002\u0002\u0002\u00b0\u0598\u0003\u0002",
    "\u0002\u0002\u00b2\u05a1\u0003\u0002\u0002\u0002\u00b4\u05a8\u0003\u0002",
    "\u0002\u0002\u00b6\u05b1\u0003\u0002\u0002\u0002\u00b8\u05b3\u0003\u0002",
    "\u0002\u0002\u00ba\u05b5\u0003\u0002\u0002\u0002\u00bc\u05b7\u0003\u0002",
    "\u0002\u0002\u00be\u05bc\u0003\u0002\u0002\u0002\u00c0\u05c2\u0003\u0002",
    "\u0002\u0002\u00c2\u05cb\u0003\u0002\u0002\u0002\u00c4\u05d4\u0003\u0002",
    "\u0002\u0002\u00c6\u05f1\u0003\u0002\u0002\u0002\u00c8\u05f7\u0003\u0002",
    "\u0002\u0002\u00ca\u0602\u0003\u0002\u0002\u0002\u00cc\u061c\u0003\u0002",
    "\u0002\u0002\u00ce\u061e\u0003\u0002\u0002\u0002\u00d0\u062d\u0003\u0002",
    "\u0002\u0002\u00d2\u0642\u0003\u0002\u0002\u0002\u00d4\u0644\u0003\u0002",
    "\u0002\u0002\u00d6\u0653\u0003\u0002\u0002\u0002\u00d8\u0655\u0003\u0002",
    "\u0002\u0002\u00da\u0658\u0003\u0002\u0002\u0002\u00dc\u0668\u0003\u0002",
    "\u0002\u0002\u00de\u066a\u0003\u0002\u0002\u0002\u00e0\u066e\u0003\u0002",
    "\u0002\u0002\u00e2\u0670\u0003\u0002\u0002\u0002\u00e4\u0674\u0003\u0002",
    "\u0002\u0002\u00e6\u0678\u0003\u0002\u0002\u0002\u00e8\u067b\u0003\u0002",
    "\u0002\u0002\u00ea\u0684\u0003\u0002\u0002\u0002\u00ec\u068d\u0003\u0002",
    "\u0002\u0002\u00ee\u0695\u0003\u0002\u0002\u0002\u00f0\u0697\u0003\u0002",
    "\u0002\u0002\u00f2\u0699\u0003\u0002\u0002\u0002\u00f4\u06a0\u0003\u0002",
    "\u0002\u0002\u00f6\u06b1\u0003\u0002\u0002\u0002\u00f8\u06b4\u0003\u0002",
    "\u0002\u0002\u00fa\u06be\u0003\u0002\u0002\u0002\u00fc\u06ce\u0003\u0002",
    "\u0002\u0002\u00fe\u06d0\u0003\u0002\u0002\u0002\u0100\u06e1\u0003\u0002",
    "\u0002\u0002\u0102\u06f3\u0003\u0002\u0002\u0002\u0104\u06fc\u0003\u0002",
    "\u0002\u0002\u0106\u070d\u0003\u0002\u0002\u0002\u0108\u0713\u0003\u0002",
    "\u0002\u0002\u010a\u0715\u0003\u0002\u0002\u0002\u010c\u0719\u0003\u0002",
    "\u0002\u0002\u010e\u071b\u0003\u0002\u0002\u0002\u0110\u071f\u0003\u0002",
    "\u0002\u0002\u0112\u0736\u0003\u0002\u0002\u0002\u0114\u0738\u0003\u0002",
    "\u0002\u0002\u0116\u0740\u0003\u0002\u0002\u0002\u0118\u0749\u0003\u0002",
    "\u0002\u0002\u011a\u074e\u0003\u0002\u0002\u0002\u011c\u075c\u0003\u0002",
    "\u0002\u0002\u011e\u076e\u0003\u0002\u0002\u0002\u0120\u077d\u0003\u0002",
    "\u0002\u0002\u0122\u0799\u0003\u0002\u0002\u0002\u0124\u079b\u0003\u0002",
    "\u0002\u0002\u0126\u079f\u0003\u0002\u0002\u0002\u0128\u07a1\u0003\u0002",
    "\u0002\u0002\u012a\u07a4\u0003\u0002\u0002\u0002\u012c\u07a8\u0003\u0002",
    "\u0002\u0002\u012e\u07b4\u0003\u0002\u0002\u0002\u0130\u07bb\u0003\u0002",
    "\u0002\u0002\u0132\u07cb\u0003\u0002\u0002\u0002\u0134\u07e1\u0003\u0002",
    "\u0002\u0002\u0136\u07e3\u0003\u0002\u0002\u0002\u0138\u0800\u0003\u0002",
    "\u0002\u0002\u013a\u0802\u0003\u0002\u0002\u0002\u013c\u080e\u0003\u0002",
    "\u0002\u0002\u013e\u0818\u0003\u0002\u0002\u0002\u0140\u0824\u0003\u0002",
    "\u0002\u0002\u0142\u0828\u0003\u0002\u0002\u0002\u0144\u0838\u0003\u0002",
    "\u0002\u0002\u0146\u083f\u0003\u0002\u0002\u0002\u0148\u0844\u0003\u0002",
    "\u0002\u0002\u014a\u0848\u0003\u0002\u0002\u0002\u014c\u084a\u0003\u0002",
    "\u0002\u0002\u014e\u085b\u0003\u0002\u0002\u0002\u0150\u085f\u0003\u0002",
    "\u0002\u0002\u0152\u0861\u0003\u0002\u0002\u0002\u0154\u0864\u0003\u0002",
    "\u0002\u0002\u0156\u087f\u0003\u0002\u0002\u0002\u0158\u0882\u0003\u0002",
    "\u0002\u0002\u015a\u0886\u0003\u0002\u0002\u0002\u015c\u0888\u0003\u0002",
    "\u0002\u0002\u015e\u0893\u0003\u0002\u0002\u0002\u0160\u089c\u0003\u0002",
    "\u0002\u0002\u0162\u089e\u0003\u0002\u0002\u0002\u0164\u08a2\u0003\u0002",
    "\u0002\u0002\u0166\u08b1\u0003\u0002\u0002\u0002\u0168\u08d4\u0003\u0002",
    "\u0002\u0002\u016a\u08d6\u0003\u0002\u0002\u0002\u016c\u08e0\u0003\u0002",
    "\u0002\u0002\u016e\u08e2\u0003\u0002\u0002\u0002\u0170\u08e5\u0003\u0002",
    "\u0002\u0002\u0172\u08e8\u0003\u0002\u0002\u0002\u0174\u090d\u0003\u0002",
    "\u0002\u0002\u0176\u0914\u0003\u0002\u0002\u0002\u0178\u0916\u0003\u0002",
    "\u0002\u0002\u017a\u0918\u0003\u0002\u0002\u0002\u017c\u091a\u0003\u0002",
    "\u0002\u0002\u017e\u091d\u0003\u0002\u0002\u0002\u0180\u0921\u0003\u0002",
    "\u0002\u0002\u0182\u0925\u0003\u0002\u0002\u0002\u0184\u0933\u0003\u0002",
    "\u0002\u0002\u0186\u093f\u0003\u0002\u0002\u0002\u0188\u0943\u0003\u0002",
    "\u0002\u0002\u018a\u0945\u0003\u0002\u0002\u0002\u018c\u094d\u0003\u0002",
    "\u0002\u0002\u018e\u094f\u0003\u0002\u0002\u0002\u0190\u0955\u0003\u0002",
    "\u0002\u0002\u0192\u0962\u0003\u0002\u0002\u0002\u0194\u0994\u0003\u0002",
    "\u0002\u0002\u0196\u0996\u0003\u0002\u0002\u0002\u0198\u09ac\u0003\u0002",
    "\u0002\u0002\u019a\u09ae\u0003\u0002\u0002\u0002\u019c\u09b0\u0003\u0002",
    "\u0002\u0002\u019e\u09c3\u0003\u0002\u0002\u0002\u01a0\u09d0\u0003\u0002",
    "\u0002\u0002\u01a2\u09d3\u0003\u0002\u0002\u0002\u01a4\u09d8\u0003\u0002",
    "\u0002\u0002\u01a6\u09dd\u0003\u0002\u0002\u0002\u01a8\u09e1\u0003\u0002",
    "\u0002\u0002\u01aa\u09e8\u0003\u0002\u0002\u0002\u01ac\u09ec\u0003\u0002",
    "\u0002\u0002\u01ae\u0a00\u0003\u0002\u0002\u0002\u01b0\u0a02\u0003\u0002",
    "\u0002\u0002\u01b2\u0a08\u0003\u0002\u0002\u0002\u01b4\u0a0a\u0003\u0002",
    "\u0002\u0002\u01b6\u0a11\u0003\u0002\u0002\u0002\u01b8\u0a27\u0003\u0002",
    "\u0002\u0002\u01ba\u0a29\u0003\u0002\u0002\u0002\u01bc\u0a2c\u0003\u0002",
    "\u0002\u0002\u01be\u0a60\u0003\u0002\u0002\u0002\u01c0\u0a69\u0003\u0002",
    "\u0002\u0002\u01c2\u0a6b\u0003\u0002\u0002\u0002\u01c4\u0a6d\u0003\u0002",
    "\u0002\u0002\u01c6\u0a6f\u0003\u0002\u0002\u0002\u01c8\u0a71\u0003\u0002",
    "\u0002\u0002\u01ca\u0a73\u0003\u0002\u0002\u0002\u01cc\u0a75\u0003\u0002",
    "\u0002\u0002\u01ce\u0a77\u0003\u0002\u0002\u0002\u01d0\u01d2\u0005\u008e",
    "H\u0002\u01d1\u01d0\u0003\u0002\u0002\u0002\u01d1\u01d2\u0003\u0002",
    "\u0002\u0002\u01d2\u0003\u0003\u0002\u0002\u0002\u01d3\u01dc\u0005\u01c0",
    "\u00e1\u0002\u01d4\u01dc\u0007@\u0002\u0002\u01d5\u01d6\u0007P\u0002",
    "\u0002\u01d6\u01d7\u0005b2\u0002\u01d7\u01d8\u0007Q\u0002\u0002\u01d8",
    "\u01dc\u0003\u0002\u0002\u0002\u01d9\u01dc\u0005\b\u0005\u0002\u01da",
    "\u01dc\u0005\u0010\t\u0002\u01db\u01d3\u0003\u0002\u0002\u0002\u01db",
    "\u01d4\u0003\u0002\u0002\u0002\u01db\u01d5\u0003\u0002\u0002\u0002\u01db",
    "\u01d9\u0003\u0002\u0002\u0002\u01db\u01da\u0003\u0002\u0002\u0002\u01dc",
    "\u0005\u0003\u0002\u0002\u0002\u01dd\u01e0\u0005\n\u0006\u0002\u01de",
    "\u01e0\u0005\f\u0007\u0002\u01df\u01dd\u0003\u0002\u0002\u0002\u01df",
    "\u01de\u0003\u0002\u0002\u0002\u01e0\u0007\u0003\u0002\u0002\u0002\u01e1",
    "\u01e4\u0005\n\u0006\u0002\u01e2\u01e4\u0005\f\u0007\u0002\u01e3\u01e1",
    "\u0003\u0002\u0002\u0002\u01e3\u01e2\u0003\u0002\u0002\u0002\u01e4\t",
    "\u0003\u0002\u0002\u0002\u01e5\u01ef\u0007\u007f\u0002\u0002\u01e6\u01ef",
    "\u0005\u018a\u00c6\u0002\u01e7\u01ef\u0005\u017c\u00bf\u0002\u01e8\u01ef",
    "\u0005\u018c\u00c7\u0002\u01e9\u01ea\u0007^\u0002\u0002\u01ea\u01ef",
    "\u0005\u0150\u00a9\u0002\u01eb\u01ec\u0007^\u0002\u0002\u01ec\u01ef",
    "\u0005\u00caf\u0002\u01ed\u01ef\u0005\u0198\u00cd\u0002\u01ee\u01e5",
    "\u0003\u0002\u0002\u0002\u01ee\u01e6\u0003\u0002\u0002\u0002\u01ee\u01e7",
    "\u0003\u0002\u0002\u0002\u01ee\u01e8\u0003\u0002\u0002\u0002\u01ee\u01e9",
    "\u0003\u0002\u0002\u0002\u01ee\u01eb\u0003\u0002\u0002\u0002\u01ee\u01ed",
    "\u0003\u0002\u0002\u0002\u01ef\u000b\u0003\u0002\u0002\u0002\u01f0\u01f2",
    "\u0005\u000e\b\u0002\u01f1\u01f3\u0007?\u0002\u0002\u01f2\u01f1\u0003",
    "\u0002\u0002\u0002\u01f2\u01f3\u0003\u0002\u0002\u0002\u01f3\u01f4\u0003",
    "\u0002\u0002\u0002\u01f4\u01f5\u0005\n\u0006\u0002\u01f5\r\u0003\u0002",
    "\u0002\u0002\u01f6\u01f7\b\b\u0001\u0002\u01f7\u0202\u0007z\u0002\u0002",
    "\u01f8\u01f9\u0005\u00c8e\u0002\u01f9\u01fa\u0007z\u0002\u0002\u01fa",
    "\u0202\u0003\u0002\u0002\u0002\u01fb\u01fc\u0005\u00e0q\u0002\u01fc",
    "\u01fd\u0007z\u0002\u0002\u01fd\u0202\u0003\u0002\u0002\u0002\u01fe",
    "\u01ff\u0005\u00caf\u0002\u01ff\u0200\u0007z\u0002\u0002\u0200\u0202",
    "\u0003\u0002\u0002\u0002\u0201\u01f6\u0003\u0002\u0002\u0002\u0201\u01f8",
    "\u0003\u0002\u0002\u0002\u0201\u01fb\u0003\u0002\u0002\u0002\u0201\u01fe",
    "\u0003\u0002\u0002\u0002\u0202\u020f\u0003\u0002\u0002\u0002\u0203\u0204",
    "\f\u0004\u0002\u0002\u0204\u0205\u0007\u007f\u0002\u0002\u0205\u020e",
    "\u0007z\u0002\u0002\u0206\u0208\f\u0003\u0002\u0002\u0207\u0209\u0007",
    "?\u0002\u0002\u0208\u0207\u0003\u0002\u0002\u0002\u0208\u0209\u0003",
    "\u0002\u0002\u0002\u0209\u020a\u0003\u0002\u0002\u0002\u020a\u020b\u0005",
    "\u0196\u00cc\u0002\u020b\u020c\u0007z\u0002\u0002\u020c\u020e\u0003",
    "\u0002\u0002\u0002\u020d\u0203\u0003\u0002\u0002\u0002\u020d\u0206\u0003",
    "\u0002\u0002\u0002\u020e\u0211\u0003\u0002\u0002\u0002\u020f\u020d\u0003",
    "\u0002\u0002\u0002\u020f\u0210\u0003\u0002\u0002\u0002\u0210\u000f\u0003",
    "\u0002\u0002\u0002\u0211\u020f\u0003\u0002\u0002\u0002\u0212\u0214\u0005",
    "\u0012\n\u0002\u0213\u0215\u0005 \u0011\u0002\u0214\u0213\u0003\u0002",
    "\u0002\u0002\u0214\u0215\u0003\u0002\u0002\u0002\u0215\u0216\u0003\u0002",
    "\u0002\u0002\u0216\u0217\u0005l7\u0002\u0217\u0011\u0003\u0002\u0002",
    "\u0002\u0218\u021a\u0007R\u0002\u0002\u0219\u021b\u0005\u0014\u000b",
    "\u0002\u021a\u0219\u0003\u0002\u0002\u0002\u021a\u021b\u0003\u0002\u0002",
    "\u0002\u021b\u021c\u0003\u0002\u0002\u0002\u021c\u021d\u0007S\u0002",
    "\u0002\u021d\u0013\u0003\u0002\u0002\u0002\u021e\u0225\u0005\u0016\f",
    "\u0002\u021f\u0225\u0005\u0018\r\u0002\u0220\u0221\u0005\u0016\f\u0002",
    "\u0221\u0222\u0007u\u0002\u0002\u0222\u0223\u0005\u0018\r\u0002\u0223",
    "\u0225\u0003\u0002\u0002\u0002\u0224\u021e\u0003\u0002\u0002\u0002\u0224",
    "\u021f\u0003\u0002\u0002\u0002\u0224\u0220\u0003\u0002\u0002\u0002\u0225",
    "\u0015\u0003\u0002\u0002\u0002\u0226\u0227\t\u0002\u0002\u0002\u0227",
    "\u0017\u0003\u0002\u0002\u0002\u0228\u0229\b\r\u0001\u0002\u0229\u022b",
    "\u0005\u001a\u000e\u0002\u022a\u022c\u0007~\u0002\u0002\u022b\u022a",
    "\u0003\u0002\u0002\u0002\u022b\u022c\u0003\u0002\u0002\u0002\u022c\u0235",
    "\u0003\u0002\u0002\u0002\u022d\u022e\f\u0003\u0002\u0002\u022e\u022f",
    "\u0007u\u0002\u0002\u022f\u0231\u0005\u001a\u000e\u0002\u0230\u0232",
    "\u0007~\u0002\u0002\u0231\u0230\u0003\u0002\u0002\u0002\u0231\u0232",
    "\u0003\u0002\u0002\u0002\u0232\u0234\u0003\u0002\u0002\u0002\u0233\u022d",
    "\u0003\u0002\u0002\u0002\u0234\u0237\u0003\u0002\u0002\u0002\u0235\u0233",
    "\u0003\u0002\u0002\u0002\u0235\u0236\u0003\u0002\u0002\u0002\u0236\u0019",
    "\u0003\u0002\u0002\u0002\u0237\u0235\u0003\u0002\u0002\u0002\u0238\u023b",
    "\u0005\u001c\u000f\u0002\u0239\u023b\u0005\u001e\u0010\u0002\u023a\u0238",
    "\u0003\u0002\u0002\u0002\u023a\u0239\u0003\u0002\u0002\u0002\u023b\u001b",
    "\u0003\u0002\u0002\u0002\u023c\u0241\u0007\u007f\u0002\u0002\u023d\u023e",
    "\u0007\\\u0002\u0002\u023e\u0241\u0007\u007f\u0002\u0002\u023f\u0241",
    "\u0007@\u0002\u0002\u0240\u023c\u0003\u0002\u0002\u0002\u0240\u023d",
    "\u0003\u0002\u0002\u0002\u0240\u023f\u0003\u0002\u0002\u0002\u0241\u001d",
    "\u0003\u0002\u0002\u0002\u0242\u0243\u0007\u007f\u0002\u0002\u0243\u0248",
    "\u0005\u0146\u00a4\u0002\u0244\u0245\u0007\\\u0002\u0002\u0245\u0246",
    "\u0007\u007f\u0002\u0002\u0246\u0248\u0005\u0146\u00a4\u0002\u0247\u0242",
    "\u0003\u0002\u0002\u0002\u0247\u0244\u0003\u0002\u0002\u0002\u0248\u001f",
    "\u0003\u0002\u0002\u0002\u0249\u024a\u0007P\u0002\u0002\u024a\u024b",
    "\u0005\u0138\u009d\u0002\u024b\u024d\u0007Q\u0002\u0002\u024c\u024e",
    "\u0007*\u0002\u0002\u024d\u024c\u0003\u0002\u0002\u0002\u024d\u024e",
    "\u0003\u0002\u0002\u0002\u024e\u0250\u0003\u0002\u0002\u0002\u024f\u0251",
    "\u0005\u01b2\u00da\u0002\u0250\u024f\u0003\u0002\u0002\u0002\u0250\u0251",
    "\u0003\u0002\u0002\u0002\u0251\u0253\u0003\u0002\u0002\u0002\u0252\u0254",
    "\u0005\u00fe\u0080\u0002\u0253\u0252\u0003\u0002\u0002\u0002\u0253\u0254",
    "\u0003\u0002\u0002\u0002\u0254\u0256\u0003\u0002\u0002\u0002\u0255\u0257",
    "\u0005\u0120\u0091\u0002\u0256\u0255\u0003\u0002\u0002\u0002\u0256\u0257",
    "\u0003\u0002\u0002\u0002\u0257!\u0003\u0002\u0002\u0002\u0258\u0259",
    "\u0005\u0006\u0004\u0002\u0259#\u0003\u0002\u0002\u0002\u025a\u025b",
    "\u0005\u0004\u0003\u0002\u025b\u025d\u0007P\u0002\u0002\u025c\u025e",
    "\u0005\u014c\u00a7\u0002\u025d\u025c\u0003\u0002\u0002\u0002\u025d\u025e",
    "\u0003\u0002\u0002\u0002\u025e\u025f\u0003\u0002\u0002\u0002\u025f\u0260",
    "\u0007Q\u0002\u0002\u0260%\u0003\u0002\u0002\u0002\u0261\u0262\b\u0014",
    "\u0001\u0002\u0262\u02a3\u0005\u0004\u0003\u0002\u0263\u02a3\u0005$",
    "\u0013\u0002\u0264\u0265\u0005\u00c6d\u0002\u0265\u0267\u0007P\u0002",
    "\u0002\u0266\u0268\u0005(\u0015\u0002\u0267\u0266\u0003\u0002\u0002",
    "\u0002\u0267\u0268\u0003\u0002\u0002\u0002\u0268\u0269\u0003\u0002\u0002",
    "\u0002\u0269\u026a\u0007Q\u0002\u0002\u026a\u02a3\u0003\u0002\u0002",
    "\u0002\u026b\u026c\u0005\u01a0\u00d1\u0002\u026c\u026e\u0007P\u0002",
    "\u0002\u026d\u026f\u0005(\u0015\u0002\u026e\u026d\u0003\u0002\u0002",
    "\u0002\u026e\u026f\u0003\u0002\u0002\u0002\u026f\u0270\u0003\u0002\u0002",
    "\u0002\u0270\u0271\u0007Q\u0002\u0002\u0271\u02a3\u0003\u0002\u0002",
    "\u0002\u0272\u0273\u0005\u00c6d\u0002\u0273\u0274\u0005\u014e\u00a8",
    "\u0002\u0274\u02a3\u0003\u0002\u0002\u0002\u0275\u0276\u0005\u01a0\u00d1",
    "\u0002\u0276\u0277\u0005\u014e\u00a8\u0002\u0277\u02a3\u0003\u0002\u0002",
    "\u0002\u0278\u0279\u0007\u001a\u0002\u0002\u0279\u027a\u0007a\u0002",
    "\u0002\u027a\u027b\u0005\u012c\u0097\u0002\u027b\u027c\u0007b\u0002",
    "\u0002\u027c\u027d\u0007P\u0002\u0002\u027d\u027e\u0005b2\u0002\u027e",
    "\u027f\u0007Q\u0002\u0002\u027f\u02a3\u0003\u0002\u0002\u0002\u0280",
    "\u0281\u0007<\u0002\u0002\u0281\u0282\u0007a\u0002\u0002\u0282\u0283",
    "\u0005\u012c\u0097\u0002\u0283\u0284\u0007b\u0002\u0002\u0284\u0285",
    "\u0007P\u0002\u0002\u0285\u0286\u0005b2\u0002\u0286\u0287\u0007Q\u0002",
    "\u0002\u0287\u02a3\u0003\u0002\u0002\u0002\u0288\u0289\u00075\u0002",
    "\u0002\u0289\u028a\u0007a\u0002\u0002\u028a\u028b\u0005\u012c\u0097",
    "\u0002\u028b\u028c\u0007b\u0002\u0002\u028c\u028d\u0007P\u0002\u0002",
    "\u028d\u028e\u0005b2\u0002\u028e\u028f\u0007Q\u0002\u0002\u028f\u02a3",
    "\u0003\u0002\u0002\u0002\u0290\u0291\u0007\u0012\u0002\u0002\u0291\u0292",
    "\u0007a\u0002\u0002\u0292\u0293\u0005\u012c\u0097\u0002\u0293\u0294",
    "\u0007b\u0002\u0002\u0294\u0295\u0007P\u0002\u0002\u0295\u0296\u0005",
    "b2\u0002\u0296\u0297\u0007Q\u0002\u0002\u0297\u02a3\u0003\u0002\u0002",
    "\u0002\u0298\u0299\u0007F\u0002\u0002\u0299\u029a\u0007P\u0002\u0002",
    "\u029a\u029b\u0005b2\u0002\u029b\u029c\u0007Q\u0002\u0002\u029c\u02a3",
    "\u0003\u0002\u0002\u0002\u029d\u029e\u0007F\u0002\u0002\u029e\u029f",
    "\u0007P\u0002\u0002\u029f\u02a0\u0005\u012c\u0097\u0002\u02a0\u02a1",
    "\u0007Q\u0002\u0002\u02a1\u02a3\u0003\u0002\u0002\u0002\u02a2\u0261",
    "\u0003\u0002\u0002\u0002\u02a2\u0263\u0003\u0002\u0002\u0002\u02a2\u0264",
    "\u0003\u0002\u0002\u0002\u02a2\u026b\u0003\u0002\u0002\u0002\u02a2\u0272",
    "\u0003\u0002\u0002\u0002\u02a2\u0275\u0003\u0002\u0002\u0002\u02a2\u0278",
    "\u0003\u0002\u0002\u0002\u02a2\u0280\u0003\u0002\u0002\u0002\u02a2\u0288",
    "\u0003\u0002\u0002\u0002\u02a2\u0290\u0003\u0002\u0002\u0002\u02a2\u0298",
    "\u0003\u0002\u0002\u0002\u02a2\u029d\u0003\u0002\u0002\u0002\u02a3\u02c6",
    "\u0003\u0002\u0002\u0002\u02a4\u02a5\f\u0014\u0002\u0002\u02a5\u02a6",
    "\u0007R\u0002\u0002\u02a6\u02a7\u0005^0\u0002\u02a7\u02a8\u0007S\u0002",
    "\u0002\u02a8\u02c5\u0003\u0002\u0002\u0002\u02a9\u02aa\f\u0013\u0002",
    "\u0002\u02aa\u02ab\u0007R\u0002\u0002\u02ab\u02ac\u0005\u014e\u00a8",
    "\u0002\u02ac\u02ad\u0007S\u0002\u0002\u02ad\u02c5\u0003\u0002\u0002",
    "\u0002\u02ae\u02af\f\u000e\u0002\u0002\u02af\u02b1\u0007|\u0002\u0002",
    "\u02b0\u02b2\u0007?\u0002\u0002\u02b1\u02b0\u0003\u0002\u0002\u0002",
    "\u02b1\u02b2\u0003\u0002\u0002\u0002\u02b2\u02b3\u0003\u0002\u0002\u0002",
    "\u02b3\u02c5\u0005\"\u0012\u0002\u02b4\u02b5\f\r\u0002\u0002\u02b5\u02b7",
    "\u0007w\u0002\u0002\u02b6\u02b8\u0007?\u0002\u0002\u02b7\u02b6\u0003",
    "\u0002\u0002\u0002\u02b7\u02b8\u0003\u0002\u0002\u0002\u02b8\u02b9\u0003",
    "\u0002\u0002\u0002\u02b9\u02c5\u0005\"\u0012\u0002\u02ba\u02bb\f\f\u0002",
    "\u0002\u02bb\u02bc\u0007|\u0002\u0002\u02bc\u02c5\u0005*\u0016\u0002",
    "\u02bd\u02be\f\u000b\u0002\u0002\u02be\u02bf\u0007w\u0002\u0002\u02bf",
    "\u02c5\u0005*\u0016\u0002\u02c0\u02c1\f\n\u0002\u0002\u02c1\u02c5\u0007",
    "s\u0002\u0002\u02c2\u02c3\f\t\u0002\u0002\u02c3\u02c5\u0007t\u0002\u0002",
    "\u02c4\u02a4\u0003\u0002\u0002\u0002\u02c4\u02a9\u0003\u0002\u0002\u0002",
    "\u02c4\u02ae\u0003\u0002\u0002\u0002\u02c4\u02b4\u0003\u0002\u0002\u0002",
    "\u02c4\u02ba\u0003\u0002\u0002\u0002\u02c4\u02bd\u0003\u0002\u0002\u0002",
    "\u02c4\u02c0\u0003\u0002\u0002\u0002\u02c4\u02c2\u0003\u0002\u0002\u0002",
    "\u02c5\u02c8\u0003\u0002\u0002\u0002\u02c6\u02c4\u0003\u0002\u0002\u0002",
    "\u02c6\u02c7\u0003\u0002\u0002\u0002\u02c7\'\u0003\u0002\u0002\u0002",
    "\u02c8\u02c6\u0003\u0002\u0002\u0002\u02c9\u02ca\u0005\u014c\u00a7\u0002",
    "\u02ca)\u0003\u0002\u0002\u0002\u02cb\u02cd\u0005\u000e\b\u0002\u02cc",
    "\u02cb\u0003\u0002\u0002\u0002\u02cc\u02cd\u0003\u0002\u0002\u0002\u02cd",
    "\u02ce\u0003\u0002\u0002\u0002\u02ce\u02cf\u0005\u00c8e\u0002\u02cf",
    "\u02d0\u0007z\u0002\u0002\u02d0\u02d1\u0007^\u0002\u0002\u02d1\u02d2",
    "\u0005\u00c8e\u0002\u02d2\u02e2\u0003\u0002\u0002\u0002\u02d3\u02d4",
    "\u0005\u000e\b\u0002\u02d4\u02d5\u0007?\u0002\u0002\u02d5\u02d6\u0005",
    "\u0196\u00cc\u0002\u02d6\u02d7\u0007z\u0002\u0002\u02d7\u02d8\u0007",
    "^\u0002\u0002\u02d8\u02d9\u0005\u00c8e\u0002\u02d9\u02e2\u0003\u0002",
    "\u0002\u0002\u02da\u02dc\u0005\u000e\b\u0002\u02db\u02da\u0003\u0002",
    "\u0002\u0002\u02db\u02dc\u0003\u0002\u0002\u0002\u02dc\u02dd\u0003\u0002",
    "\u0002\u0002\u02dd\u02de\u0007^\u0002\u0002\u02de\u02e2\u0005\u00c8",
    "e\u0002\u02df\u02e0\u0007^\u0002\u0002\u02e0\u02e2\u0005\u00caf\u0002",
    "\u02e1\u02cc\u0003\u0002\u0002\u0002\u02e1\u02d3\u0003\u0002\u0002\u0002",
    "\u02e1\u02db\u0003\u0002\u0002\u0002\u02e1\u02df\u0003\u0002\u0002\u0002",
    "\u02e2+\u0003\u0002\u0002\u0002\u02e3\u02e8\u0005&\u0014\u0002\u02e4",
    "\u02e8\u0005.\u0018\u0002\u02e5\u02e8\u00054\u001b\u0002\u02e6\u02e8",
    "\u0005@!\u0002\u02e7\u02e3\u0003\u0002\u0002\u0002\u02e7\u02e4\u0003",
    "\u0002\u0002\u0002\u02e7\u02e5\u0003\u0002\u0002\u0002\u02e7\u02e6\u0003",
    "\u0002\u0002\u0002\u02e8-\u0003\u0002\u0002\u0002\u02e9\u02ea\u0007",
    "s\u0002\u0002\u02ea\u0308\u0005D#\u0002\u02eb\u02ec\u0007t\u0002\u0002",
    "\u02ec\u0308\u0005D#\u0002\u02ed\u02ee\u00052\u001a\u0002\u02ee\u02ef",
    "\u0005D#\u0002\u02ef\u0308\u0003\u0002\u0002\u0002\u02f0\u02f1\u0007",
    "9\u0002\u0002\u02f1\u0308\u0005,\u0017\u0002\u02f2\u02f3\u00079\u0002",
    "\u0002\u02f3\u02f4\u0007P\u0002\u0002\u02f4\u02f5\u00050\u0019\u0002",
    "\u02f5\u02f6\u0007Q\u0002\u0002\u02f6\u0308\u0003\u0002\u0002\u0002",
    "\u02f7\u02f8\u00079\u0002\u0002\u02f8\u02f9\u0007P\u0002\u0002\u02f9",
    "\u02fa\u0005\u012c\u0097\u0002\u02fa\u02fb\u0007Q\u0002\u0002\u02fb",
    "\u0308\u0003\u0002\u0002\u0002\u02fc\u02fd\u00079\u0002\u0002\u02fd",
    "\u02fe\u0007~\u0002\u0002\u02fe\u02ff\u0007P\u0002\u0002\u02ff\u0300",
    "\u0007\u007f\u0002\u0002\u0300\u0308\u0007Q\u0002\u0002\u0301\u0302",
    "\u0007\u0005\u0002\u0002\u0302\u0303\u0007P\u0002\u0002\u0303\u0304",
    "\u0005\u012c\u0097\u0002\u0304\u0305\u0007Q\u0002\u0002\u0305\u0308",
    "\u0003\u0002\u0002\u0002\u0306\u0308\u0005B\"\u0002\u0307\u02e9\u0003",
    "\u0002\u0002\u0002\u0307\u02eb\u0003\u0002\u0002\u0002\u0307\u02ed\u0003",
    "\u0002\u0002\u0002\u0307\u02f0\u0003\u0002\u0002\u0002\u0307\u02f2\u0003",
    "\u0002\u0002\u0002\u0307\u02f7\u0003\u0002\u0002\u0002\u0307\u02fc\u0003",
    "\u0002\u0002\u0002\u0307\u0301\u0003\u0002\u0002\u0002\u0307\u0306\u0003",
    "\u0002\u0002\u0002\u0308/\u0003\u0002\u0002\u0002\u0309\u030a\u0005",
    "\u012c\u0097\u0002\u030a1\u0003\u0002\u0002\u0002\u030b\u030c\t\u0003",
    "\u0002\u0002\u030c3\u0003\u0002\u0002\u0002\u030d\u030f\u0007z\u0002",
    "\u0002\u030e\u030d\u0003\u0002\u0002\u0002\u030e\u030f\u0003\u0002\u0002",
    "\u0002\u030f\u0310\u0003\u0002\u0002\u0002\u0310\u0312\u0007,\u0002",
    "\u0002\u0311\u0313\u00056\u001c\u0002\u0312\u0311\u0003\u0002\u0002",
    "\u0002\u0312\u0313\u0003\u0002\u0002\u0002\u0313\u0314\u0003\u0002\u0002",
    "\u0002\u0314\u0316\u00058\u001d\u0002\u0315\u0317\u0005> \u0002\u0316",
    "\u0315\u0003\u0002\u0002\u0002\u0316\u0317\u0003\u0002\u0002\u0002\u0317",
    "\u0326\u0003\u0002\u0002\u0002\u0318\u031a\u0007z\u0002\u0002\u0319",
    "\u0318\u0003\u0002\u0002\u0002\u0319\u031a\u0003\u0002\u0002\u0002\u031a",
    "\u031b\u0003\u0002\u0002\u0002\u031b\u031d\u0007,\u0002\u0002\u031c",
    "\u031e\u00056\u001c\u0002\u031d\u031c\u0003\u0002\u0002\u0002\u031d",
    "\u031e\u0003\u0002\u0002\u0002\u031e\u031f\u0003\u0002\u0002\u0002\u031f",
    "\u0320\u0007P\u0002\u0002\u0320\u0321\u0005\u012c\u0097\u0002\u0321",
    "\u0323\u0007Q\u0002\u0002\u0322\u0324\u0005> \u0002\u0323\u0322\u0003",
    "\u0002\u0002\u0002\u0323\u0324\u0003\u0002\u0002\u0002\u0324\u0326\u0003",
    "\u0002\u0002\u0002\u0325\u030e\u0003\u0002\u0002\u0002\u0325\u0319\u0003",
    "\u0002\u0002\u0002\u03265\u0003\u0002\u0002\u0002\u0327\u0328\u0007",
    "P\u0002\u0002\u0328\u0329\u0005(\u0015\u0002\u0329\u032a\u0007Q\u0002",
    "\u0002\u032a7\u0003\u0002\u0002\u0002\u032b\u032d\u0005\u00c2b\u0002",
    "\u032c\u032e\u0005:\u001e\u0002\u032d\u032c\u0003\u0002\u0002\u0002",
    "\u032d\u032e\u0003\u0002\u0002\u0002\u032e9\u0003\u0002\u0002\u0002",
    "\u032f\u0331\u0005\u0122\u0092\u0002\u0330\u0332\u0005:\u001e\u0002",
    "\u0331\u0330\u0003\u0002\u0002\u0002\u0331\u0332\u0003\u0002\u0002\u0002",
    "\u0332\u0335\u0003\u0002\u0002\u0002\u0333\u0335\u0005<\u001f\u0002",
    "\u0334\u032f\u0003\u0002\u0002\u0002\u0334\u0333\u0003\u0002\u0002\u0002",
    "\u0335;\u0003\u0002\u0002\u0002\u0336\u0337\b\u001f\u0001\u0002\u0337",
    "\u0338\u0007R\u0002\u0002\u0338\u0339\u0005b2\u0002\u0339\u033b\u0007",
    "S\u0002\u0002\u033a\u033c\u0005\u00fe\u0080\u0002\u033b\u033a\u0003",
    "\u0002\u0002\u0002\u033b\u033c\u0003\u0002\u0002\u0002\u033c\u0346\u0003",
    "\u0002\u0002\u0002\u033d\u033e\f\u0003\u0002\u0002\u033e\u033f\u0007",
    "R\u0002\u0002\u033f\u0340\u0005d3\u0002\u0340\u0342\u0007S\u0002\u0002",
    "\u0341\u0343\u0005\u00fe\u0080\u0002\u0342\u0341\u0003\u0002\u0002\u0002",
    "\u0342\u0343\u0003\u0002\u0002\u0002\u0343\u0345\u0003\u0002\u0002\u0002",
    "\u0344\u033d\u0003\u0002\u0002\u0002\u0345\u0348\u0003\u0002\u0002\u0002",
    "\u0346\u0344\u0003\u0002\u0002\u0002\u0346\u0347\u0003\u0002\u0002\u0002",
    "\u0347=\u0003\u0002\u0002\u0002\u0348\u0346\u0003\u0002\u0002\u0002",
    "\u0349\u034b\u0007P\u0002\u0002\u034a\u034c\u0005(\u0015\u0002\u034b",
    "\u034a\u0003\u0002\u0002\u0002\u034b\u034c\u0003\u0002\u0002\u0002\u034c",
    "\u034d\u0003\u0002\u0002\u0002\u034d\u0350\u0007Q\u0002\u0002\u034e",
    "\u0350\u0005\u014e\u00a8\u0002\u034f\u0349\u0003\u0002\u0002\u0002\u034f",
    "\u034e\u0003\u0002\u0002\u0002\u0350?\u0003\u0002\u0002\u0002\u0351",
    "\u0353\u0007z\u0002\u0002\u0352\u0351\u0003\u0002\u0002\u0002\u0352",
    "\u0353\u0003\u0002\u0002\u0002\u0353\u0354\u0003\u0002\u0002\u0002\u0354",
    "\u0355\u0007\u0016\u0002\u0002\u0355\u035e\u0005D#\u0002\u0356\u0358",
    "\u0007z\u0002\u0002\u0357\u0356\u0003\u0002\u0002\u0002\u0357\u0358",
    "\u0003\u0002\u0002\u0002\u0358\u0359\u0003\u0002\u0002\u0002\u0359\u035a",
    "\u0007\u0016\u0002\u0002\u035a\u035b\u0007R\u0002\u0002\u035b\u035c",
    "\u0007S\u0002\u0002\u035c\u035e\u0005D#\u0002\u035d\u0352\u0003\u0002",
    "\u0002\u0002\u035d\u0357\u0003\u0002\u0002\u0002\u035eA\u0003\u0002",
    "\u0002\u0002\u035f\u0360\u0007-\u0002\u0002\u0360\u0361\u0007P\u0002",
    "\u0002\u0361\u0362\u0005b2\u0002\u0362\u0363\u0007Q\u0002\u0002\u0363",
    "C\u0003\u0002\u0002\u0002\u0364\u036b\u0005,\u0017\u0002\u0365\u0366",
    "\u0007P\u0002\u0002\u0366\u0367\u0005\u012c\u0097\u0002\u0367\u0368",
    "\u0007Q\u0002\u0002\u0368\u0369\u0005D#\u0002\u0369\u036b\u0003\u0002",
    "\u0002\u0002\u036a\u0364\u0003\u0002\u0002\u0002\u036a\u0365\u0003\u0002",
    "\u0002\u0002\u036bE\u0003\u0002\u0002\u0002\u036c\u036d\b$\u0001\u0002",
    "\u036d\u036e\u0005D#\u0002\u036e\u0377\u0003\u0002\u0002\u0002\u036f",
    "\u0370\f\u0004\u0002\u0002\u0370\u0371\u0007}\u0002\u0002\u0371\u0376",
    "\u0005D#\u0002\u0372\u0373\f\u0003\u0002\u0002\u0373\u0374\u0007v\u0002",
    "\u0002\u0374\u0376\u0005D#\u0002\u0375\u036f\u0003\u0002\u0002\u0002",
    "\u0375\u0372\u0003\u0002\u0002\u0002\u0376\u0379\u0003\u0002\u0002\u0002",
    "\u0377\u0375\u0003\u0002\u0002\u0002\u0377\u0378\u0003\u0002\u0002\u0002",
    "\u0378G\u0003\u0002\u0002\u0002\u0379\u0377\u0003\u0002\u0002\u0002",
    "\u037a\u037b\b%\u0001\u0002\u037b\u037c\u0005F$\u0002\u037c\u0388\u0003",
    "\u0002\u0002\u0002\u037d\u037e\f\u0005\u0002\u0002\u037e\u037f\u0007",
    "X\u0002\u0002\u037f\u0387\u0005F$\u0002\u0380\u0381\f\u0004\u0002\u0002",
    "\u0381\u0382\u0007Y\u0002\u0002\u0382\u0387\u0005F$\u0002\u0383\u0384",
    "\f\u0003\u0002\u0002\u0384\u0385\u0007Z\u0002\u0002\u0385\u0387\u0005",
    "F$\u0002\u0386\u037d\u0003\u0002\u0002\u0002\u0386\u0380\u0003\u0002",
    "\u0002\u0002\u0386\u0383\u0003\u0002\u0002\u0002\u0387\u038a\u0003\u0002",
    "\u0002\u0002\u0388\u0386\u0003\u0002\u0002\u0002\u0388\u0389\u0003\u0002",
    "\u0002\u0002\u0389I\u0003\u0002\u0002\u0002\u038a\u0388\u0003\u0002",
    "\u0002\u0002\u038b\u038c\b&\u0001\u0002\u038c\u038d\u0005H%\u0002\u038d",
    "\u0396\u0003\u0002\u0002\u0002\u038e\u038f\f\u0004\u0002\u0002\u038f",
    "\u0390\u0007V\u0002\u0002\u0390\u0395\u0005H%\u0002\u0391\u0392\f\u0003",
    "\u0002\u0002\u0392\u0393\u0007W\u0002\u0002\u0393\u0395\u0005H%\u0002",
    "\u0394\u038e\u0003\u0002\u0002\u0002\u0394\u0391\u0003\u0002\u0002\u0002",
    "\u0395\u0398\u0003\u0002\u0002\u0002\u0396\u0394\u0003\u0002\u0002\u0002",
    "\u0396\u0397\u0003\u0002\u0002\u0002\u0397K\u0003\u0002\u0002\u0002",
    "\u0398\u0396\u0003\u0002\u0002\u0002\u0399\u039a\b\'\u0001\u0002\u039a",
    "\u039b\u0005J&\u0002\u039b\u03a5\u0003\u0002\u0002\u0002\u039c\u039d",
    "\f\u0004\u0002\u0002\u039d\u039e\u0007k\u0002\u0002\u039e\u03a4\u0005",
    "J&\u0002\u039f\u03a0\f\u0003\u0002\u0002\u03a0\u03a1\u0005\u01ba\u00de",
    "\u0002\u03a1\u03a2\u0005J&\u0002\u03a2\u03a4\u0003\u0002\u0002\u0002",
    "\u03a3\u039c\u0003\u0002\u0002\u0002\u03a3\u039f\u0003\u0002\u0002\u0002",
    "\u03a4\u03a7\u0003\u0002\u0002\u0002\u03a5\u03a3\u0003\u0002\u0002\u0002",
    "\u03a5\u03a6\u0003\u0002\u0002\u0002\u03a6M\u0003\u0002\u0002\u0002",
    "\u03a7\u03a5\u0003\u0002\u0002\u0002\u03a8\u03a9\b(\u0001\u0002\u03a9",
    "\u03aa\u0005L\'\u0002\u03aa\u03b9\u0003\u0002\u0002\u0002\u03ab\u03ac",
    "\f\u0006\u0002\u0002\u03ac\u03ad\u0007a\u0002\u0002\u03ad\u03b8\u0005",
    "L\'\u0002\u03ae\u03af\f\u0005\u0002\u0002\u03af\u03b0\u0007b\u0002\u0002",
    "\u03b0\u03b8\u0005L\'\u0002\u03b1\u03b2\f\u0004\u0002\u0002\u03b2\u03b3",
    "\u0007o\u0002\u0002\u03b3\u03b8\u0005L\'\u0002\u03b4\u03b5\f\u0003\u0002",
    "\u0002\u03b5\u03b6\u0007p\u0002\u0002\u03b6\u03b8\u0005L\'\u0002\u03b7",
    "\u03ab\u0003\u0002\u0002\u0002\u03b7\u03ae\u0003\u0002\u0002\u0002\u03b7",
    "\u03b1\u0003\u0002\u0002\u0002\u03b7\u03b4\u0003\u0002\u0002\u0002\u03b8",
    "\u03bb\u0003\u0002\u0002\u0002\u03b9\u03b7\u0003\u0002\u0002\u0002\u03b9",
    "\u03ba\u0003\u0002\u0002\u0002\u03baO\u0003\u0002\u0002\u0002\u03bb",
    "\u03b9\u0003\u0002\u0002\u0002\u03bc\u03bd\b)\u0001\u0002\u03bd\u03be",
    "\u0005N(\u0002\u03be\u03c7\u0003\u0002\u0002\u0002\u03bf\u03c0\f\u0004",
    "\u0002\u0002\u03c0\u03c1\u0007m\u0002\u0002\u03c1\u03c6\u0005N(\u0002",
    "\u03c2\u03c3\f\u0003\u0002\u0002\u03c3\u03c4\u0007n\u0002\u0002\u03c4",
    "\u03c6\u0005N(\u0002\u03c5\u03bf\u0003\u0002\u0002\u0002\u03c5\u03c2",
    "\u0003\u0002\u0002\u0002\u03c6\u03c9\u0003\u0002\u0002\u0002\u03c7\u03c5",
    "\u0003\u0002\u0002\u0002\u03c7\u03c8\u0003\u0002\u0002\u0002\u03c8Q",
    "\u0003\u0002\u0002\u0002\u03c9\u03c7\u0003\u0002\u0002\u0002\u03ca\u03cb",
    "\b*\u0001\u0002\u03cb\u03cc\u0005P)\u0002\u03cc\u03d2\u0003\u0002\u0002",
    "\u0002\u03cd\u03ce\f\u0003\u0002\u0002\u03ce\u03cf\u0007\\\u0002\u0002",
    "\u03cf\u03d1\u0005P)\u0002\u03d0\u03cd\u0003\u0002\u0002\u0002\u03d1",
    "\u03d4\u0003\u0002\u0002\u0002\u03d2\u03d0\u0003\u0002\u0002\u0002\u03d2",
    "\u03d3\u0003\u0002\u0002\u0002\u03d3S\u0003\u0002\u0002\u0002\u03d4",
    "\u03d2\u0003\u0002\u0002\u0002\u03d5\u03d6\b+\u0001\u0002\u03d6\u03d7",
    "\u0005R*\u0002\u03d7\u03dd\u0003\u0002\u0002\u0002\u03d8\u03d9\f\u0003",
    "\u0002\u0002\u03d9\u03da\u0007[\u0002\u0002\u03da\u03dc\u0005R*\u0002",
    "\u03db\u03d8\u0003\u0002\u0002\u0002\u03dc\u03df\u0003\u0002\u0002\u0002",
    "\u03dd\u03db\u0003\u0002\u0002\u0002\u03dd\u03de\u0003\u0002\u0002\u0002",
    "\u03deU\u0003\u0002\u0002\u0002\u03df\u03dd\u0003\u0002\u0002\u0002",
    "\u03e0\u03e1\b,\u0001\u0002\u03e1\u03e2\u0005T+\u0002\u03e2\u03e8\u0003",
    "\u0002\u0002\u0002\u03e3\u03e4\f\u0003\u0002\u0002\u03e4\u03e5\u0007",
    "]\u0002\u0002\u03e5\u03e7\u0005T+\u0002\u03e6\u03e3\u0003\u0002\u0002",
    "\u0002\u03e7\u03ea\u0003\u0002\u0002\u0002\u03e8\u03e6\u0003\u0002\u0002",
    "\u0002\u03e8\u03e9\u0003\u0002\u0002\u0002\u03e9W\u0003\u0002\u0002",
    "\u0002\u03ea\u03e8\u0003\u0002\u0002\u0002\u03eb\u03ec\b-\u0001\u0002",
    "\u03ec\u03ed\u0005V,\u0002\u03ed\u03f3\u0003\u0002\u0002\u0002\u03ee",
    "\u03ef\f\u0003\u0002\u0002\u03ef\u03f0\u0007q\u0002\u0002\u03f0\u03f2",
    "\u0005V,\u0002\u03f1\u03ee\u0003\u0002\u0002\u0002\u03f2\u03f5\u0003",
    "\u0002\u0002\u0002\u03f3\u03f1\u0003\u0002\u0002\u0002\u03f3\u03f4\u0003",
    "\u0002\u0002\u0002\u03f4Y\u0003\u0002\u0002\u0002\u03f5\u03f3\u0003",
    "\u0002\u0002\u0002\u03f6\u03f7\b.\u0001\u0002\u03f7\u03f8\u0005X-\u0002",
    "\u03f8\u03fe\u0003\u0002\u0002\u0002\u03f9\u03fa\f\u0003\u0002\u0002",
    "\u03fa\u03fb\u0007r\u0002\u0002\u03fb\u03fd\u0005X-\u0002\u03fc\u03f9",
    "\u0003\u0002\u0002\u0002\u03fd\u0400\u0003\u0002\u0002\u0002\u03fe\u03fc",
    "\u0003\u0002\u0002\u0002\u03fe\u03ff\u0003\u0002\u0002\u0002\u03ff[",
    "\u0003\u0002\u0002\u0002\u0400\u03fe\u0003\u0002\u0002\u0002\u0401\u0409",
    "\u0005Z.\u0002\u0402\u0403\u0005Z.\u0002\u0403\u0404\u0007x\u0002\u0002",
    "\u0404\u0405\u0005b2\u0002\u0405\u0406\u0007y\u0002\u0002\u0406\u0407",
    "\u0005^0\u0002\u0407\u0409\u0003\u0002\u0002\u0002\u0408\u0401\u0003",
    "\u0002\u0002\u0002\u0408\u0402\u0003\u0002\u0002\u0002\u0409]\u0003",
    "\u0002\u0002\u0002\u040a\u0411\u0005\\/\u0002\u040b\u040c\u0005Z.\u0002",
    "\u040c\u040d\u0005`1\u0002\u040d\u040e\u0005\u014a\u00a6\u0002\u040e",
    "\u0411\u0003\u0002\u0002\u0002\u040f\u0411\u0005\u01b0\u00d9\u0002\u0410",
    "\u040a\u0003\u0002\u0002\u0002\u0410\u040b\u0003\u0002\u0002\u0002\u0410",
    "\u040f\u0003\u0002\u0002\u0002\u0411_\u0003\u0002\u0002\u0002\u0412",
    "\u041e\u0007`\u0002\u0002\u0413\u041e\u0007e\u0002\u0002\u0414\u041e",
    "\u0007f\u0002\u0002\u0415\u041e\u0007g\u0002\u0002\u0416\u041e\u0007",
    "c\u0002\u0002\u0417\u041e\u0007d\u0002\u0002\u0418\u041e\u0005\u01bc",
    "\u00df\u0002\u0419\u041e\u0007l\u0002\u0002\u041a\u041e\u0007i\u0002",
    "\u0002\u041b\u041e\u0007h\u0002\u0002\u041c\u041e\u0007j\u0002\u0002",
    "\u041d\u0412\u0003\u0002\u0002\u0002\u041d\u0413\u0003\u0002\u0002\u0002",
    "\u041d\u0414\u0003\u0002\u0002\u0002\u041d\u0415\u0003\u0002\u0002\u0002",
    "\u041d\u0416\u0003\u0002\u0002\u0002\u041d\u0417\u0003\u0002\u0002\u0002",
    "\u041d\u0418\u0003\u0002\u0002\u0002\u041d\u0419\u0003\u0002\u0002\u0002",
    "\u041d\u041a\u0003\u0002\u0002\u0002\u041d\u041b\u0003\u0002\u0002\u0002",
    "\u041d\u041c\u0003\u0002\u0002\u0002\u041ea\u0003\u0002\u0002\u0002",
    "\u041f\u0420\b2\u0001\u0002\u0420\u0421\u0005^0\u0002\u0421\u0427\u0003",
    "\u0002\u0002\u0002\u0422\u0423\f\u0003\u0002\u0002\u0423\u0424\u0007",
    "u\u0002\u0002\u0424\u0426\u0005^0\u0002\u0425\u0422\u0003\u0002\u0002",
    "\u0002\u0426\u0429\u0003\u0002\u0002\u0002\u0427\u0425\u0003\u0002\u0002",
    "\u0002\u0427\u0428\u0003\u0002\u0002\u0002\u0428c\u0003\u0002\u0002",
    "\u0002\u0429\u0427\u0003\u0002\u0002\u0002\u042a\u042b\u0005\\/\u0002",
    "\u042be\u0003\u0002\u0002\u0002\u042c\u0460\u0005h5\u0002\u042d\u042f",
    "\u0005\u00fe\u0080\u0002\u042e\u042d\u0003\u0002\u0002\u0002\u042e\u042f",
    "\u0003\u0002\u0002\u0002\u042f\u0430\u0003\u0002\u0002\u0002\u0430\u0460",
    "\u0005j6\u0002\u0431\u0433\u0005\u00fe\u0080\u0002\u0432\u0431\u0003",
    "\u0002\u0002\u0002\u0432\u0433\u0003\u0002\u0002\u0002\u0433\u0434\u0003",
    "\u0002\u0002\u0002\u0434\u0460\u0005l7\u0002\u0435\u0437\u0005\u00fe",
    "\u0080\u0002\u0436\u0435\u0003\u0002\u0002\u0002\u0436\u0437\u0003\u0002",
    "\u0002\u0002\u0437\u0438\u0003\u0002\u0002\u0002\u0438\u0460\u0005p",
    "9\u0002\u0439\u043b\u0005\u00fe\u0080\u0002\u043a\u0439\u0003\u0002",
    "\u0002\u0002\u043a\u043b\u0003\u0002\u0002\u0002\u043b\u043c\u0003\u0002",
    "\u0002\u0002\u043c\u0460\u0005r:\u0002\u043d\u043f\u0005\u00fe\u0080",
    "\u0002\u043e\u043d\u0003\u0002\u0002\u0002\u043e\u043f\u0003\u0002\u0002",
    "\u0002\u043f\u0440\u0003\u0002\u0002\u0002\u0440\u0460\u0005z>\u0002",
    "\u0441\u0443\u0005\u00fe\u0080\u0002\u0442\u0441\u0003\u0002\u0002\u0002",
    "\u0442\u0443\u0003\u0002\u0002\u0002\u0443\u0444\u0003\u0002\u0002\u0002",
    "\u0444\u0460\u0005v<\u0002\u0445\u0447\u0005\u00fe\u0080\u0002\u0446",
    "\u0445\u0003\u0002\u0002\u0002\u0446\u0447\u0003\u0002\u0002\u0002\u0447",
    "\u0448\u0003\u0002\u0002\u0002\u0448\u0460\u0005x=\u0002\u0449\u044b",
    "\u0005\u00fe\u0080\u0002\u044a\u0449\u0003\u0002\u0002\u0002\u044a\u044b",
    "\u0003\u0002\u0002\u0002\u044b\u044c\u0003\u0002\u0002\u0002\u044c\u0460",
    "\u0005\u0084C\u0002\u044d\u044f\u0005\u00fe\u0080\u0002\u044e\u044d",
    "\u0003\u0002\u0002\u0002\u044e\u044f\u0003\u0002\u0002\u0002\u044f\u0450",
    "\u0003\u0002\u0002\u0002\u0450\u0460\u0005\u0086D\u0002\u0451\u0453",
    "\u0005\u00fe\u0080\u0002\u0452\u0451\u0003\u0002\u0002\u0002\u0452\u0453",
    "\u0003\u0002\u0002\u0002\u0453\u0454\u0003\u0002\u0002\u0002\u0454\u0460",
    "\u0005\u0088E\u0002\u0455\u0457\u0005\u00fe\u0080\u0002\u0456\u0455",
    "\u0003\u0002\u0002\u0002\u0456\u0457\u0003\u0002\u0002\u0002\u0457\u0458",
    "\u0003\u0002\u0002\u0002\u0458\u0460\u0005\u008aF\u0002\u0459\u0460",
    "\u0005\u009eP\u0002\u045a\u0460\u0005\u008cG\u0002\u045b\u045d\u0005",
    "\u00fe\u0080\u0002\u045c\u045b\u0003\u0002\u0002\u0002\u045c\u045d\u0003",
    "\u0002\u0002\u0002\u045d\u045e\u0003\u0002\u0002\u0002\u045e\u0460\u0005",
    "\u01a6\u00d4\u0002\u045f\u042c\u0003\u0002\u0002\u0002\u045f\u042e\u0003",
    "\u0002\u0002\u0002\u045f\u0432\u0003\u0002\u0002\u0002\u045f\u0436\u0003",
    "\u0002\u0002\u0002\u045f\u043a\u0003\u0002\u0002\u0002\u045f\u043e\u0003",
    "\u0002\u0002\u0002\u045f\u0442\u0003\u0002\u0002\u0002\u045f\u0446\u0003",
    "\u0002\u0002\u0002\u045f\u044a\u0003\u0002\u0002\u0002\u045f\u044e\u0003",
    "\u0002\u0002\u0002\u045f\u0452\u0003\u0002\u0002\u0002\u045f\u0456\u0003",
    "\u0002\u0002\u0002\u045f\u0459\u0003\u0002\u0002\u0002\u045f\u045a\u0003",
    "\u0002\u0002\u0002\u045f\u045c\u0003\u0002\u0002\u0002\u0460g\u0003",
    "\u0002\u0002\u0002\u0461\u0463\u0005\u00fe\u0080\u0002\u0462\u0461\u0003",
    "\u0002\u0002\u0002\u0462\u0463\u0003\u0002\u0002\u0002\u0463\u0464\u0003",
    "\u0002\u0002\u0002\u0464\u0465\u0007\u007f\u0002\u0002\u0465\u0466\u0007",
    "y\u0002\u0002\u0466\u0476\u0005f4\u0002\u0467\u0469\u0005\u00fe\u0080",
    "\u0002\u0468\u0467\u0003\u0002\u0002\u0002\u0468\u0469\u0003\u0002\u0002",
    "\u0002\u0469\u046a\u0003\u0002\u0002\u0002\u046a\u046b\u0007\n\u0002",
    "\u0002\u046b\u046c\u0005d3\u0002\u046c\u046d\u0007y\u0002\u0002\u046d",
    "\u046e\u0005f4\u0002\u046e\u0476\u0003\u0002\u0002\u0002\u046f\u0471",
    "\u0005\u00fe\u0080\u0002\u0470\u046f\u0003\u0002\u0002\u0002\u0470\u0471",
    "\u0003\u0002\u0002\u0002\u0471\u0472\u0003\u0002\u0002\u0002\u0472\u0473",
    "\u0007\u0015\u0002\u0002\u0473\u0474\u0007y\u0002\u0002\u0474\u0476",
    "\u0005f4\u0002\u0475\u0462\u0003\u0002\u0002\u0002\u0475\u0468\u0003",
    "\u0002\u0002\u0002\u0475\u0470\u0003\u0002\u0002\u0002\u0476i\u0003",
    "\u0002\u0002\u0002\u0477\u0479\u0005b2\u0002\u0478\u0477\u0003\u0002",
    "\u0002\u0002\u0478\u0479\u0003\u0002\u0002\u0002\u0479\u047a\u0003\u0002",
    "\u0002\u0002\u047a\u047b\u0007{\u0002\u0002\u047bk\u0003\u0002\u0002",
    "\u0002\u047c\u047e\u0007T\u0002\u0002\u047d\u047f\u0005n8\u0002\u047e",
    "\u047d\u0003\u0002\u0002\u0002\u047e\u047f\u0003\u0002\u0002\u0002\u047f",
    "\u0480\u0003\u0002\u0002\u0002\u0480\u0481\u0007U\u0002\u0002\u0481",
    "m\u0003\u0002\u0002\u0002\u0482\u0486\u0005f4\u0002\u0483\u0485\u0005",
    "f4\u0002\u0484\u0483\u0003\u0002\u0002\u0002\u0485\u0488\u0003\u0002",
    "\u0002\u0002\u0486\u0484\u0003\u0002\u0002\u0002\u0486\u0487\u0003\u0002",
    "\u0002\u0002\u0487o\u0003\u0002\u0002\u0002\u0488\u0486\u0003\u0002",
    "\u0002\u0002\u0489\u048a\u0007&\u0002\u0002\u048a\u048b\u0007P\u0002",
    "\u0002\u048b\u048c\u0005t;\u0002\u048c\u048d\u0007Q\u0002\u0002\u048d",
    "\u048e\u0005f4\u0002\u048e\u0498\u0003\u0002\u0002\u0002\u048f\u0490",
    "\u0007&\u0002\u0002\u0490\u0491\u0007P\u0002\u0002\u0491\u0492\u0005",
    "t;\u0002\u0492\u0493\u0007Q\u0002\u0002\u0493\u0494\u0005f4\u0002\u0494",
    "\u0495\u0007\u001b\u0002\u0002\u0495\u0496\u0005f4\u0002\u0496\u0498",
    "\u0003\u0002\u0002\u0002\u0497\u0489\u0003\u0002\u0002\u0002\u0497\u048f",
    "\u0003\u0002\u0002\u0002\u0498q\u0003\u0002\u0002\u0002\u0499\u049a",
    "\u0007>\u0002\u0002\u049a\u049b\u0007P\u0002\u0002\u049b\u049c\u0005",
    "t;\u0002\u049c\u049d\u0007Q\u0002\u0002\u049d\u049e\u0005f4\u0002\u049e",
    "s\u0003\u0002\u0002\u0002\u049f\u04b0\u0005b2\u0002\u04a0\u04a2\u0005",
    "\u00fe\u0080\u0002\u04a1\u04a0\u0003\u0002\u0002\u0002\u04a1\u04a2\u0003",
    "\u0002\u0002\u0002\u04a2\u04a3\u0003\u0002\u0002\u0002\u04a3\u04a4\u0005",
    "\u00b2Z\u0002\u04a4\u04a5\u0005\u0118\u008d\u0002\u04a5\u04a6\u0007",
    "`\u0002\u0002\u04a6\u04a7\u0005\u014a\u00a6\u0002\u04a7\u04b0\u0003",
    "\u0002\u0002\u0002\u04a8\u04aa\u0005\u00fe\u0080\u0002\u04a9\u04a8\u0003",
    "\u0002\u0002\u0002\u04a9\u04aa\u0003\u0002\u0002\u0002\u04aa\u04ab\u0003",
    "\u0002\u0002\u0002\u04ab\u04ac\u0005\u00b2Z\u0002\u04ac\u04ad\u0005",
    "\u0118\u008d\u0002\u04ad\u04ae\u0005\u014e\u00a8\u0002\u04ae\u04b0\u0003",
    "\u0002\u0002\u0002\u04af\u049f\u0003\u0002\u0002\u0002\u04af\u04a1\u0003",
    "\u0002\u0002\u0002\u04af\u04a9\u0003\u0002\u0002\u0002\u04b0u\u0003",
    "\u0002\u0002\u0002\u04b1\u04b2\u0007O\u0002\u0002\u04b2\u04b3\u0007",
    "P\u0002\u0002\u04b3\u04b4\u0005t;\u0002\u04b4\u04b5\u0007Q\u0002\u0002",
    "\u04b5\u04b6\u0005f4\u0002\u04b6w\u0003\u0002\u0002\u0002\u04b7\u04b8",
    "\u0007\u0017\u0002\u0002\u04b8\u04b9\u0005l7\u0002\u04b9\u04ba\u0007",
    "O\u0002\u0002\u04ba\u04bb\u0007P\u0002\u0002\u04bb\u04bc\u0005b2\u0002",
    "\u04bc\u04bd\u0007Q\u0002\u0002\u04bd\u04be\u0007{\u0002\u0002\u04be",
    "y\u0003\u0002\u0002\u0002\u04bf\u04c0\u0007#\u0002\u0002\u04c0\u04c1",
    "\u0007P\u0002\u0002\u04c1\u04c3\u0005~@\u0002\u04c2\u04c4\u0005t;\u0002",
    "\u04c3\u04c2\u0003\u0002\u0002\u0002\u04c3\u04c4\u0003\u0002\u0002\u0002",
    "\u04c4\u04c5\u0003\u0002\u0002\u0002\u04c5\u04c7\u0007{\u0002\u0002",
    "\u04c6\u04c8\u0005b2\u0002\u04c7\u04c6\u0003\u0002\u0002\u0002\u04c7",
    "\u04c8\u0003\u0002\u0002\u0002\u04c8\u04c9\u0003\u0002\u0002\u0002\u04c9",
    "\u04ca\u0007Q\u0002\u0002\u04ca\u04cb\u0005f4\u0002\u04cb{\u0003\u0002",
    "\u0002\u0002\u04cc\u04cd\u0007#\u0002\u0002\u04cd\u04ce\u0007P\u0002",
    "\u0002\u04ce\u04cf\u0005\u0080A\u0002\u04cf\u04d0\u0007y\u0002\u0002",
    "\u04d0\u04d1\u0005\u0082B\u0002\u04d1\u04d2\u0007Q\u0002\u0002\u04d2",
    "\u04d3\u0005f4\u0002\u04d3}\u0003\u0002\u0002\u0002\u04d4\u04d8\u0005",
    "j6\u0002\u04d5\u04d8\u0005\u009eP\u0002\u04d6\u04d8\u0005\u00a8U\u0002",
    "\u04d7\u04d4\u0003\u0002\u0002\u0002\u04d7\u04d5\u0003\u0002\u0002\u0002",
    "\u04d7\u04d6\u0003\u0002\u0002\u0002\u04d8\u007f\u0003\u0002\u0002\u0002",
    "\u04d9\u04db\u0005\u00fe\u0080\u0002\u04da\u04d9\u0003\u0002\u0002\u0002",
    "\u04da\u04db\u0003\u0002\u0002\u0002\u04db\u04dc\u0003\u0002\u0002\u0002",
    "\u04dc\u04dd\u0005\u00b2Z\u0002\u04dd\u04de\u0005\u0118\u008d\u0002",
    "\u04de\u0081\u0003\u0002\u0002\u0002\u04df\u04e2\u0005b2\u0002\u04e0",
    "\u04e2\u0005\u014e\u00a8\u0002\u04e1\u04df\u0003\u0002\u0002\u0002\u04e1",
    "\u04e0\u0003\u0002\u0002\u0002\u04e2\u0083\u0003\u0002\u0002\u0002\u04e3",
    "\u04e4\u0007%\u0002\u0002\u04e4\u04e5\u0007\u007f\u0002\u0002\u04e5",
    "\u04e6\u0007{\u0002\u0002\u04e6\u0085\u0003\u0002\u0002\u0002\u04e7",
    "\u04e8\u0007\t\u0002\u0002\u04e8\u04e9\u0007{\u0002\u0002\u04e9\u0087",
    "\u0003\u0002\u0002\u0002\u04ea\u04eb\u0007\u0013\u0002\u0002\u04eb\u04ec",
    "\u0007{\u0002\u0002\u04ec\u0089\u0003\u0002\u0002\u0002\u04ed\u04ef",
    "\u00076\u0002\u0002\u04ee\u04f0\u0005b2\u0002\u04ef\u04ee\u0003\u0002",
    "\u0002\u0002\u04ef\u04f0\u0003\u0002\u0002\u0002\u04f0\u04f1\u0003\u0002",
    "\u0002\u0002\u04f1\u04f7\u0007{\u0002\u0002\u04f2\u04f3\u00076\u0002",
    "\u0002\u04f3\u04f4\u0005\u014e\u00a8\u0002\u04f4\u04f5\u0007{\u0002",
    "\u0002\u04f5\u04f7\u0003\u0002\u0002\u0002\u04f6\u04ed\u0003\u0002\u0002",
    "\u0002\u04f6\u04f2\u0003\u0002\u0002\u0002\u04f7\u008b\u0003\u0002\u0002",
    "\u0002\u04f8\u04fb\u0005\u00a8U\u0002\u04f9\u04fb\u0005\u0098M\u0002",
    "\u04fa\u04f8\u0003\u0002\u0002\u0002\u04fa\u04f9\u0003\u0002\u0002\u0002",
    "\u04fb\u008d\u0003\u0002\u0002\u0002\u04fc\u04fd\bH\u0001\u0002\u04fd",
    "\u04fe\u0005\u0096L\u0002\u04fe\u0503\u0003\u0002\u0002\u0002\u04ff",
    "\u0500\f\u0003\u0002\u0002\u0500\u0502\u0005\u0096L\u0002\u0501\u04ff",
    "\u0003\u0002\u0002\u0002\u0502\u0505\u0003\u0002\u0002\u0002\u0503\u0501",
    "\u0003\u0002\u0002\u0002\u0503\u0504\u0003\u0002\u0002\u0002\u0504\u008f",
    "\u0003\u0002\u0002\u0002\u0505\u0503\u0003\u0002\u0002\u0002\u0506\u0508",
    "\u0005\u015e\u00b0\u0002\u0507\u0506\u0003\u0002\u0002\u0002\u0507\u0508",
    "\u0003\u0002\u0002\u0002\u0508\u0091\u0003\u0002\u0002\u0002\u0509\u050a",
    "\u0005\u0094K\u0002\u050a\u050b\u0007T\u0002\u0002\u050b\u050c\u0005",
    "\u0090I\u0002\u050c\u050d\u0007U\u0002\u0002\u050d\u050e\u0007{\u0002",
    "\u0002\u050e\u0093\u0003\u0002\u0002\u0002\u050f\u0511\u0005\u015c\u00af",
    "\u0002\u0510\u0512\u0005\u00fe\u0080\u0002\u0511\u0510\u0003\u0002\u0002",
    "\u0002\u0511\u0512\u0003\u0002\u0002\u0002\u0512\u0514\u0003\u0002\u0002",
    "\u0002\u0513\u0515\u0005\u000e\b\u0002\u0514\u0513\u0003\u0002\u0002",
    "\u0002\u0514\u0515\u0003\u0002\u0002\u0002\u0515\u0516\u0003\u0002\u0002",
    "\u0002\u0516\u0518\u0005\u0158\u00ad\u0002\u0517\u0519\u0005\u015a\u00ae",
    "\u0002\u0518\u0517\u0003\u0002\u0002\u0002\u0518\u0519\u0003\u0002\u0002",
    "\u0002\u0519\u051b\u0003\u0002\u0002\u0002\u051a\u051c\u0005\u0170\u00b9",
    "\u0002\u051b\u051a\u0003\u0002\u0002\u0002\u051b\u051c\u0003\u0002\u0002",
    "\u0002\u051c\u0525\u0003\u0002\u0002\u0002\u051d\u051f\u0005\u015c\u00af",
    "\u0002\u051e\u0520\u0005\u00fe\u0080\u0002\u051f\u051e\u0003\u0002\u0002",
    "\u0002\u051f\u0520\u0003\u0002\u0002\u0002\u0520\u0522\u0003\u0002\u0002",
    "\u0002\u0521\u0523\u0005\u0170\u00b9\u0002\u0522\u0521\u0003\u0002\u0002",
    "\u0002\u0522\u0523\u0003\u0002\u0002\u0002\u0523\u0525\u0003\u0002\u0002",
    "\u0002\u0524\u050f\u0003\u0002\u0002\u0002\u0524\u051d\u0003\u0002\u0002",
    "\u0002\u0525\u0095\u0003\u0002\u0002\u0002\u0526\u0532\u0005\u009eP",
    "\u0002\u0527\u0532\u0005\u009aN\u0002\u0528\u0532\u0005\u0092J\u0002",
    "\u0529\u0532\u0005\u013e\u00a0\u0002\u052a\u0532\u0005\u018e\u00c8\u0002",
    "\u052b\u0532\u0005\u01a2\u00d2\u0002\u052c\u0532\u0005\u01a4\u00d3\u0002",
    "\u052d\u0532\u0005\u00fc\u007f\u0002\u052e\u0532\u0005\u00e4s\u0002",
    "\u052f\u0532\u0005\u00acW\u0002\u0530\u0532\u0005\u00aeX\u0002\u0531",
    "\u0526\u0003\u0002\u0002\u0002\u0531\u0527\u0003\u0002\u0002\u0002\u0531",
    "\u0528\u0003\u0002\u0002\u0002\u0531\u0529\u0003\u0002\u0002\u0002\u0531",
    "\u052a\u0003\u0002\u0002\u0002\u0531\u052b\u0003\u0002\u0002\u0002\u0531",
    "\u052c\u0003\u0002\u0002\u0002\u0531\u052d\u0003\u0002\u0002\u0002\u0531",
    "\u052e\u0003\u0002\u0002\u0002\u0531\u052f\u0003\u0002\u0002\u0002\u0531",
    "\u0530\u0003\u0002\u0002\u0002\u0532\u0097\u0003\u0002\u0002\u0002\u0533",
    "\u053b\u0005\u00fa~\u0002\u0534\u053b\u0005\u00f2z\u0002\u0535\u053b",
    "\u0005\u00f6|\u0002\u0536\u053b\u0005\u00f8}\u0002\u0537\u053b\u0005",
    "\u00aaV\u0002\u0538\u053b\u0005\u009cO\u0002\u0539\u053b\u0005\u00d4",
    "k\u0002\u053a\u0533\u0003\u0002\u0002\u0002\u053a\u0534\u0003\u0002",
    "\u0002\u0002\u053a\u0535\u0003\u0002\u0002\u0002\u053a\u0536\u0003\u0002",
    "\u0002\u0002\u053a\u0537\u0003\u0002\u0002\u0002\u053a\u0538\u0003\u0002",
    "\u0002\u0002\u053a\u0539\u0003\u0002\u0002\u0002\u053b\u0099\u0003\u0002",
    "\u0002\u0002\u053c\u053f\u0005\u00a8U\u0002\u053d\u053f\u0005\u0098",
    "M\u0002\u053e\u053c\u0003\u0002\u0002\u0002\u053e\u053d\u0003\u0002",
    "\u0002\u0002\u053f\u009b\u0003\u0002\u0002\u0002\u0540\u0541\u0007J",
    "\u0002\u0002\u0541\u0543\u0007\u007f\u0002\u0002\u0542\u0544\u0005\u00fe",
    "\u0080\u0002\u0543\u0542\u0003\u0002\u0002\u0002\u0543\u0544\u0003\u0002",
    "\u0002\u0002\u0544\u0545\u0003\u0002\u0002\u0002\u0545\u0546\u0007`",
    "\u0002\u0002\u0546\u0547\u0005\u012c\u0097\u0002\u0547\u0548\u0007{",
    "\u0002\u0002\u0548\u009d\u0003\u0002\u0002\u0002\u0549\u054a\u0005\u00a0",
    "Q\u0002\u054a\u054b\u0007{\u0002\u0002\u054b\u009f\u0003\u0002\u0002",
    "\u0002\u054c\u054e\u0005\u00fe\u0080\u0002\u054d\u054c\u0003\u0002\u0002",
    "\u0002\u054d\u054e\u0003\u0002\u0002\u0002\u054e\u0550\u0003\u0002\u0002",
    "\u0002\u054f\u0551\u0005\u00b6\\\u0002\u0550\u054f\u0003\u0002\u0002",
    "\u0002\u0550\u0551\u0003\u0002\u0002\u0002\u0551\u0552\u0003\u0002\u0002",
    "\u0002\u0552\u0554\u0005\u00be`\u0002\u0553\u0555\u0005\u00a2R\u0002",
    "\u0554\u0553\u0003\u0002\u0002\u0002\u0554\u0555\u0003\u0002\u0002\u0002",
    "\u0555\u00a1\u0003\u0002\u0002\u0002\u0556\u0560\u0003\u0002\u0002\u0002",
    "\u0557\u055c\u0005\u00a4S\u0002\u0558\u0559\u0007u\u0002\u0002\u0559",
    "\u055b\u0005\u00a4S\u0002\u055a\u0558\u0003\u0002\u0002\u0002\u055b",
    "\u055e\u0003\u0002\u0002\u0002\u055c\u055a\u0003\u0002\u0002\u0002\u055c",
    "\u055d\u0003\u0002\u0002\u0002\u055d\u0560\u0003\u0002\u0002\u0002\u055e",
    "\u055c\u0003\u0002\u0002\u0002\u055f\u0556\u0003\u0002\u0002\u0002\u055f",
    "\u0557\u0003\u0002\u0002\u0002\u0560\u00a3\u0003\u0002\u0002\u0002\u0561",
    "\u0563\u0005\u0122\u0092\u0002\u0562\u0561\u0003\u0002\u0002\u0002\u0563",
    "\u0566\u0003\u0002\u0002\u0002\u0564\u0562\u0003\u0002\u0002\u0002\u0564",
    "\u0565\u0003\u0002\u0002\u0002\u0565\u0567\u0003\u0002\u0002\u0002\u0566",
    "\u0564\u0003\u0002\u0002\u0002\u0567\u056f\u0005\u012a\u0096\u0002\u0568",
    "\u056a\u0007R\u0002\u0002\u0569\u056b\u0007\u0080\u0002\u0002\u056a",
    "\u0569\u0003\u0002\u0002\u0002\u056a\u056b\u0003\u0002\u0002\u0002\u056b",
    "\u056c\u0003\u0002\u0002\u0002\u056c\u056e\u0007S\u0002\u0002\u056d",
    "\u0568\u0003\u0002\u0002\u0002\u056e\u0571\u0003\u0002\u0002\u0002\u056f",
    "\u056d\u0003\u0002\u0002\u0002\u056f\u0570\u0003\u0002\u0002\u0002\u0570",
    "\u0574\u0003\u0002\u0002\u0002\u0571\u056f\u0003\u0002\u0002\u0002\u0572",
    "\u0573\u0007`\u0002\u0002\u0573\u0575\u0005\u014a\u00a6\u0002\u0574",
    "\u0572\u0003\u0002\u0002\u0002\u0574\u0575\u0003\u0002\u0002\u0002\u0575",
    "\u00a5\u0003\u0002\u0002\u0002\u0576\u0577\u0007R\u0002\u0002\u0577",
    "\u0578\u0007S\u0002\u0002\u0578\u00a7\u0003\u0002\u0002\u0002\u0579",
    "\u057b\u0005\u00b2Z\u0002\u057a\u0579\u0003\u0002\u0002\u0002\u057a",
    "\u057b\u0003\u0002\u0002\u0002\u057b\u057d\u0003\u0002\u0002\u0002\u057c",
    "\u057e\u0005\u0114\u008b\u0002\u057d\u057c\u0003\u0002\u0002\u0002\u057d",
    "\u057e\u0003\u0002\u0002\u0002\u057e\u057f\u0003\u0002\u0002\u0002\u057f",
    "\u0588\u0007{\u0002\u0002\u0580\u0582\u0005\u00fe\u0080\u0002\u0581",
    "\u0583\u0005\u00b2Z\u0002\u0582\u0581\u0003\u0002\u0002\u0002\u0582",
    "\u0583\u0003\u0002\u0002\u0002\u0583\u0584\u0003\u0002\u0002\u0002\u0584",
    "\u0585\u0005\u0114\u008b\u0002\u0585\u0586\u0007{\u0002\u0002\u0586",
    "\u0588\u0003\u0002\u0002\u0002\u0587\u057a\u0003\u0002\u0002\u0002\u0587",
    "\u0580\u0003\u0002\u0002\u0002\u0588\u00a9\u0003\u0002\u0002\u0002\u0589",
    "\u058a\u0007;\u0002\u0002\u058a\u058b\u0007P\u0002\u0002\u058b\u058c",
    "\u0005d3\u0002\u058c\u058d\u0007u\u0002\u0002\u058d\u058e\u0007\u0088",
    "\u0002\u0002\u058e\u058f\u0007Q\u0002\u0002\u058f\u0590\u0007{\u0002",
    "\u0002\u0590\u00ab\u0003\u0002\u0002\u0002\u0591\u0592\u0007{\u0002",
    "\u0002\u0592\u00ad\u0003\u0002\u0002\u0002\u0593\u0594\u0005\u00fe\u0080",
    "\u0002\u0594\u0595\u0007{\u0002\u0002\u0595\u00af\u0003\u0002\u0002",
    "\u0002\u0596\u0599\u0005\u00b4[\u0002\u0597\u0599\u0005\u00be`\u0002",
    "\u0598\u0596\u0003\u0002\u0002\u0002\u0598\u0597\u0003\u0002\u0002\u0002",
    "\u0599\u00b1\u0003\u0002\u0002\u0002\u059a\u059c\u0005\u00b0Y\u0002",
    "\u059b\u059d\u0005\u00fe\u0080\u0002\u059c\u059b\u0003\u0002\u0002\u0002",
    "\u059c\u059d\u0003\u0002\u0002\u0002\u059d\u05a2\u0003\u0002\u0002\u0002",
    "\u059e\u059f\u0005\u00b0Y\u0002\u059f\u05a0\u0005\u00b2Z\u0002\u05a0",
    "\u05a2\u0003\u0002\u0002\u0002\u05a1\u059a\u0003\u0002\u0002\u0002\u05a1",
    "\u059e\u0003\u0002\u0002\u0002\u05a2\u00b3\u0003\u0002\u0002\u0002\u05a3",
    "\u05a9\u0005\u00b8]\u0002\u05a4\u05a9\u0005\u00ba^\u0002\u05a5\u05a9",
    "\u0007$\u0002\u0002\u05a6\u05a9\u0007E\u0002\u0002\u05a7\u05a9\u0007",
    "\u0011\u0002\u0002\u05a8\u05a3\u0003\u0002\u0002\u0002\u05a8\u05a4\u0003",
    "\u0002\u0002\u0002\u05a8\u05a5\u0003\u0002\u0002\u0002\u05a8\u05a6\u0003",
    "\u0002\u0002\u0002\u05a8\u05a7\u0003\u0002\u0002\u0002\u05a9\u00b5\u0003",
    "\u0002\u0002\u0002\u05aa\u05ac\u0005\u00b4[\u0002\u05ab\u05ad\u0005",
    "\u00fe\u0080\u0002\u05ac\u05ab\u0003\u0002\u0002\u0002\u05ac\u05ad\u0003",
    "\u0002\u0002\u0002\u05ad\u05b2\u0003\u0002\u0002\u0002\u05ae\u05af\u0005",
    "\u00b4[\u0002\u05af\u05b0\u0005\u00b2Z\u0002\u05b0\u05b2\u0003\u0002",
    "\u0002\u0002\u05b1\u05aa\u0003\u0002\u0002\u0002\u05b1\u05ae\u0003\u0002",
    "\u0002\u0002\u05b2\u00b7\u0003\u0002\u0002\u0002\u05b3\u05b4\t\u0004",
    "\u0002\u0002\u05b4\u00b9\u0003\u0002\u0002\u0002\u05b5\u05b6\t\u0005",
    "\u0002\u0002\u05b6\u00bb\u0003\u0002\u0002\u0002\u05b7\u05b8\u0007\u007f",
    "\u0002\u0002\u05b8\u00bd\u0003\u0002\u0002\u0002\u05b9\u05bd\u0005\u00c0",
    "a\u0002\u05ba\u05bd\u0005\u0092J\u0002\u05bb\u05bd\u0005\u00d0i\u0002",
    "\u05bc\u05b9\u0003\u0002\u0002\u0002\u05bc\u05ba\u0003\u0002\u0002\u0002",
    "\u05bc\u05bb\u0003\u0002\u0002\u0002\u05bd\u00bf\u0003\u0002\u0002\u0002",
    "\u05be\u05c3\u0005\u00c6d\u0002\u05bf\u05c3\u0005\u00ccg\u0002\u05c0",
    "\u05c3\u0005\u01a0\u00d1\u0002\u05c1\u05c3\u0005\u0126\u0094\u0002\u05c2",
    "\u05be\u0003\u0002\u0002\u0002\u05c2\u05bf\u0003\u0002\u0002\u0002\u05c2",
    "\u05c0\u0003\u0002\u0002\u0002\u05c2\u05c1\u0003\u0002\u0002\u0002\u05c3",
    "\u00c1\u0003\u0002\u0002\u0002\u05c4\u05c6\u0005\u00be`\u0002\u05c5",
    "\u05c7\u0005\u00fe\u0080\u0002\u05c6\u05c5\u0003\u0002\u0002\u0002\u05c6",
    "\u05c7\u0003\u0002\u0002\u0002\u05c7\u05cc\u0003\u0002\u0002\u0002\u05c8",
    "\u05c9\u0005\u00be`\u0002\u05c9\u05ca\u0005\u00c2b\u0002\u05ca\u05cc",
    "\u0003\u0002\u0002\u0002\u05cb\u05c4\u0003\u0002\u0002\u0002\u05cb\u05c8",
    "\u0003\u0002\u0002\u0002\u05cc\u00c3\u0003\u0002\u0002\u0002\u05cd\u05cf",
    "\u0005\u00c0a\u0002\u05ce\u05d0\u0005\u00fe\u0080\u0002\u05cf\u05ce",
    "\u0003\u0002\u0002\u0002\u05cf\u05d0\u0003\u0002\u0002\u0002\u05d0\u05d5",
    "\u0003\u0002\u0002\u0002\u05d1\u05d2\u0005\u00c0a\u0002\u05d2\u05d3",
    "\u0005\u00c4c\u0002\u05d3\u05d5\u0003\u0002\u0002\u0002\u05d4\u05cd",
    "\u0003\u0002\u0002\u0002\u05d4\u05d1\u0003\u0002\u0002\u0002\u05d5\u00c5",
    "\u0003\u0002\u0002\u0002\u05d6\u05d8\u0005\u000e\b\u0002\u05d7\u05d6",
    "\u0003\u0002\u0002\u0002\u05d7\u05d8\u0003\u0002\u0002\u0002\u05d8\u05d9",
    "\u0003\u0002\u0002\u0002\u05d9\u05f2\u0005\u00c8e\u0002\u05da\u05db",
    "\u0005\u000e\b\u0002\u05db\u05dc\u0007?\u0002\u0002\u05dc\u05dd\u0005",
    "\u0196\u00cc\u0002\u05dd\u05f2\u0003\u0002\u0002\u0002\u05de\u05f2\u0007",
    "\f\u0002\u0002\u05df\u05f2\u0007\r\u0002\u0002\u05e0\u05f2\u0007\u000e",
    "\u0002\u0002\u05e1\u05f2\u0007N\u0002\u0002\u05e2\u05f2\u0007\b\u0002",
    "\u0002\u05e3\u05f2\u00077\u0002\u0002\u05e4\u05f2\u0007(\u0002\u0002",
    "\u05e5\u05f2\u0007)\u0002\u0002\u05e6\u05f2\u00078\u0002\u0002\u05e7",
    "\u05e9\u0007I\u0002\u0002\u05e8\u05ea\u0005\u00c6d\u0002\u05e9\u05e8",
    "\u0003\u0002\u0002\u0002\u05e9\u05ea\u0003\u0002\u0002\u0002\u05ea\u05f2",
    "\u0003\u0002\u0002\u0002\u05eb\u05f2\u0007\"\u0002\u0002\u05ec\u05f2",
    "\u0007\u0018\u0002\u0002\u05ed\u05f2\u0007L\u0002\u0002\u05ee\u05f2",
    "\u0007\u0007\u0002\u0002\u05ef\u05f2\u0005\u00caf\u0002\u05f0\u05f2",
    "\u0007\u0019\u0002\u0002\u05f1\u05d7\u0003\u0002\u0002\u0002\u05f1\u05da",
    "\u0003\u0002\u0002\u0002\u05f1\u05de\u0003\u0002\u0002\u0002\u05f1\u05df",
    "\u0003\u0002\u0002\u0002\u05f1\u05e0\u0003\u0002\u0002\u0002\u05f1\u05e1",
    "\u0003\u0002\u0002\u0002\u05f1\u05e2\u0003\u0002\u0002\u0002\u05f1\u05e3",
    "\u0003\u0002\u0002\u0002\u05f1\u05e4\u0003\u0002\u0002\u0002\u05f1\u05e5",
    "\u0003\u0002\u0002\u0002\u05f1\u05e6\u0003\u0002\u0002\u0002\u05f1\u05e7",
    "\u0003\u0002\u0002\u0002\u05f1\u05eb\u0003\u0002\u0002\u0002\u05f1\u05ec",
    "\u0003\u0002\u0002\u0002\u05f1\u05ed\u0003\u0002\u0002\u0002\u05f1\u05ee",
    "\u0003\u0002\u0002\u0002\u05f1\u05ef\u0003\u0002\u0002\u0002\u05f1\u05f0",
    "\u0003\u0002\u0002\u0002\u05f2\u00c7\u0003\u0002\u0002\u0002\u05f3\u05f8",
    "\u0005\u0150\u00a9\u0002\u05f4\u05f8\u0005\u00ceh\u0002\u05f5\u05f8",
    "\u0005\u00bc_\u0002\u05f6\u05f8\u0005\u0196\u00cc\u0002\u05f7\u05f3",
    "\u0003\u0002\u0002\u0002\u05f7\u05f4\u0003\u0002\u0002\u0002\u05f7\u05f5",
    "\u0003\u0002\u0002\u0002\u05f7\u05f6\u0003\u0002\u0002\u0002\u05f8\u00c9",
    "\u0003\u0002\u0002\u0002\u05f9\u05fa\u0007\u0014\u0002\u0002\u05fa\u05fb",
    "\u0007P\u0002\u0002\u05fb\u05fc\u0005b2\u0002\u05fc\u05fd\u0007Q\u0002",
    "\u0002\u05fd\u0603\u0003\u0002\u0002\u0002\u05fe\u05ff\u0007\u0014\u0002",
    "\u0002\u05ff\u0600\u0007P\u0002\u0002\u0600\u0601\u0007\u0007\u0002",
    "\u0002\u0601\u0603\u0007Q\u0002\u0002\u0602\u05f9\u0003\u0002\u0002",
    "\u0002\u0602\u05fe\u0003\u0002\u0002\u0002\u0603\u00cb\u0003\u0002\u0002",
    "\u0002\u0604\u0606\u0005\u015c\u00af\u0002\u0605\u0607\u0005\u00fe\u0080",
    "\u0002\u0606\u0605\u0003\u0002\u0002\u0002\u0606\u0607\u0003\u0002\u0002",
    "\u0002\u0607\u0609\u0003\u0002\u0002\u0002\u0608\u060a\u0005\u000e\b",
    "\u0002\u0609\u0608\u0003\u0002\u0002\u0002\u0609\u060a\u0003\u0002\u0002",
    "\u0002\u060a\u060b\u0003\u0002\u0002\u0002\u060b\u060c\u0007\u007f\u0002",
    "\u0002\u060c\u061d\u0003\u0002\u0002\u0002\u060d\u060e\u0005\u015c\u00af",
    "\u0002\u060e\u060f\u0005\u0196\u00cc\u0002\u060f\u061d\u0003\u0002\u0002",
    "\u0002\u0610\u0611\u0005\u015c\u00af\u0002\u0611\u0613\u0005\u000e\b",
    "\u0002\u0612\u0614\u0007?\u0002\u0002\u0613\u0612\u0003\u0002\u0002",
    "\u0002\u0613\u0614\u0003\u0002\u0002\u0002\u0614\u0615\u0003\u0002\u0002",
    "\u0002\u0615\u0616\u0005\u0196\u00cc\u0002\u0616\u061d\u0003\u0002\u0002",
    "\u0002\u0617\u0619\u0007\u001c\u0002\u0002\u0618\u061a\u0005\u000e\b",
    "\u0002\u0619\u0618\u0003\u0002\u0002\u0002\u0619\u061a\u0003\u0002\u0002",
    "\u0002\u061a\u061b\u0003\u0002\u0002\u0002\u061b\u061d\u0007\u007f\u0002",
    "\u0002\u061c\u0604\u0003\u0002\u0002\u0002\u061c\u060d\u0003\u0002\u0002",
    "\u0002\u061c\u0610\u0003\u0002\u0002\u0002\u061c\u0617\u0003\u0002\u0002",
    "\u0002\u061d\u00cd\u0003\u0002\u0002\u0002\u061e\u061f\u0007\u007f\u0002",
    "\u0002\u061f\u00cf\u0003\u0002\u0002\u0002\u0620\u0621\u0005\u00d2j",
    "\u0002\u0621\u0623\u0007T\u0002\u0002\u0622\u0624\u0005\u00dan\u0002",
    "\u0623\u0622\u0003\u0002\u0002\u0002\u0623\u0624\u0003\u0002\u0002\u0002",
    "\u0624\u0625\u0003\u0002\u0002\u0002\u0625\u0626\u0007U\u0002\u0002",
    "\u0626\u062e\u0003\u0002\u0002\u0002\u0627\u0628\u0005\u00d2j\u0002",
    "\u0628\u0629\u0007T\u0002\u0002\u0629\u062a\u0005\u00dan\u0002\u062a",
    "\u062b\u0007u\u0002\u0002\u062b\u062c\u0007U\u0002\u0002\u062c\u062e",
    "\u0003\u0002\u0002\u0002\u062d\u0620\u0003\u0002\u0002\u0002\u062d\u0627",
    "\u0003\u0002\u0002\u0002\u062e\u00d1\u0003\u0002\u0002\u0002\u062f\u0631",
    "\u0005\u00d6l\u0002\u0630\u0632\u0005\u00fe\u0080\u0002\u0631\u0630",
    "\u0003\u0002\u0002\u0002\u0631\u0632\u0003\u0002\u0002\u0002\u0632\u0634",
    "\u0003\u0002\u0002\u0002\u0633\u0635\u0007\u007f\u0002\u0002\u0634\u0633",
    "\u0003\u0002\u0002\u0002\u0634\u0635\u0003\u0002\u0002\u0002\u0635\u0637",
    "\u0003\u0002\u0002\u0002\u0636\u0638\u0005\u00d8m\u0002\u0637\u0636",
    "\u0003\u0002\u0002\u0002\u0637\u0638\u0003\u0002\u0002\u0002\u0638\u0643",
    "\u0003\u0002\u0002\u0002\u0639\u063b\u0005\u00d6l\u0002\u063a\u063c",
    "\u0005\u00fe\u0080\u0002\u063b\u063a\u0003\u0002\u0002\u0002\u063b\u063c",
    "\u0003\u0002\u0002\u0002\u063c\u063d\u0003\u0002\u0002\u0002\u063d\u063e",
    "\u0005\u000e\b\u0002\u063e\u0640\u0007\u007f\u0002\u0002\u063f\u0641",
    "\u0005\u00d8m\u0002\u0640\u063f\u0003\u0002\u0002\u0002\u0640\u0641",
    "\u0003\u0002\u0002\u0002\u0641\u0643\u0003\u0002\u0002\u0002\u0642\u062f",
    "\u0003\u0002\u0002\u0002\u0642\u0639\u0003\u0002\u0002\u0002\u0643\u00d3",
    "\u0003\u0002\u0002\u0002\u0644\u0646\u0005\u00d6l\u0002\u0645\u0647",
    "\u0005\u00fe\u0080\u0002\u0646\u0645\u0003\u0002\u0002\u0002\u0646\u0647",
    "\u0003\u0002\u0002\u0002\u0647\u0648\u0003\u0002\u0002\u0002\u0648\u064a",
    "\u0007\u007f\u0002\u0002\u0649\u064b\u0005\u00d8m\u0002\u064a\u0649",
    "\u0003\u0002\u0002\u0002\u064a\u064b\u0003\u0002\u0002\u0002\u064b\u064c",
    "\u0003\u0002\u0002\u0002\u064c\u064d\u0007{\u0002\u0002\u064d\u00d5",
    "\u0003\u0002\u0002\u0002\u064e\u0654\u0007\u001c\u0002\u0002\u064f\u0650",
    "\u0007\u001c\u0002\u0002\u0650\u0654\u0007\u000f\u0002\u0002\u0651\u0652",
    "\u0007\u001c\u0002\u0002\u0652\u0654\u0007=\u0002\u0002\u0653\u064e",
    "\u0003\u0002\u0002\u0002\u0653\u064f\u0003\u0002\u0002\u0002\u0653\u0651",
    "\u0003\u0002\u0002\u0002\u0654\u00d7\u0003\u0002\u0002\u0002\u0655\u0656",
    "\u0007y\u0002\u0002\u0656\u0657\u0005\u00c2b\u0002\u0657\u00d9\u0003",
    "\u0002\u0002\u0002\u0658\u0659\bn\u0001\u0002\u0659\u065a\u0005\u00dc",
    "o\u0002\u065a\u0660\u0003\u0002\u0002\u0002\u065b\u065c\f\u0003\u0002",
    "\u0002\u065c\u065d\u0007u\u0002\u0002\u065d\u065f\u0005\u00dco\u0002",
    "\u065e\u065b\u0003\u0002\u0002\u0002\u065f\u0662\u0003\u0002\u0002\u0002",
    "\u0660\u065e\u0003\u0002\u0002\u0002\u0660\u0661\u0003\u0002\u0002\u0002",
    "\u0661\u00db\u0003\u0002\u0002\u0002\u0662\u0660\u0003\u0002\u0002\u0002",
    "\u0663\u0669\u0005\u00dep\u0002\u0664\u0665\u0005\u00dep\u0002\u0665",
    "\u0666\u0007`\u0002\u0002\u0666\u0667\u0005d3\u0002\u0667\u0669\u0003",
    "\u0002\u0002\u0002\u0668\u0663\u0003\u0002\u0002\u0002\u0668\u0664\u0003",
    "\u0002\u0002\u0002\u0669\u00dd\u0003\u0002\u0002\u0002\u066a\u066b\u0007",
    "\u007f\u0002\u0002\u066b\u00df\u0003\u0002\u0002\u0002\u066c\u066f\u0005",
    "\u00e2r\u0002\u066d\u066f\u0005\u00f0y\u0002\u066e\u066c\u0003\u0002",
    "\u0002\u0002\u066e\u066d\u0003\u0002\u0002\u0002\u066f\u00e1\u0003\u0002",
    "\u0002\u0002\u0670\u0671\u0007\u007f\u0002\u0002\u0671\u00e3\u0003\u0002",
    "\u0002\u0002\u0672\u0675\u0005\u00e6t\u0002\u0673\u0675\u0005\u00ec",
    "w\u0002\u0674\u0672\u0003\u0002\u0002\u0002\u0674\u0673\u0003\u0002",
    "\u0002\u0002\u0675\u00e5\u0003\u0002\u0002\u0002\u0676\u0679\u0005\u00e8",
    "u\u0002\u0677\u0679\u0005\u00eav\u0002\u0678\u0676\u0003\u0002\u0002",
    "\u0002\u0678\u0677\u0003\u0002\u0002\u0002\u0679\u00e7\u0003\u0002\u0002",
    "\u0002\u067a\u067c\u0007\'\u0002\u0002\u067b\u067a\u0003\u0002\u0002",
    "\u0002\u067b\u067c\u0003\u0002\u0002\u0002\u067c\u067d\u0003\u0002\u0002",
    "\u0002\u067d\u067e\u0007+\u0002\u0002\u067e\u067f\u0007\u007f\u0002",
    "\u0002\u067f\u0680\u0007T\u0002\u0002\u0680\u0681\u0005\u00eex\u0002",
    "\u0681\u0682\u0007U\u0002\u0002\u0682\u00e9\u0003\u0002\u0002\u0002",
    "\u0683\u0685\u0007\'\u0002\u0002\u0684\u0683\u0003\u0002\u0002\u0002",
    "\u0684\u0685\u0003\u0002\u0002\u0002\u0685\u0686\u0003\u0002\u0002\u0002",
    "\u0686\u0687\u0007+\u0002\u0002\u0687\u0688\u0005\u00e2r\u0002\u0688",
    "\u0689\u0007T\u0002\u0002\u0689\u068a\u0005\u00eex\u0002\u068a\u068b",
    "\u0007U\u0002\u0002\u068b\u00eb\u0003\u0002\u0002\u0002\u068c\u068e",
    "\u0007\'\u0002\u0002\u068d\u068c\u0003\u0002\u0002\u0002\u068d\u068e",
    "\u0003\u0002\u0002\u0002\u068e\u068f\u0003\u0002\u0002\u0002\u068f\u0690",
    "\u0007+\u0002\u0002\u0690\u0691\u0007T\u0002\u0002\u0691\u0692\u0005",
    "\u00eex\u0002\u0692\u0693\u0007U\u0002\u0002\u0693\u00ed\u0003\u0002",
    "\u0002\u0002\u0694\u0696\u0005\u008eH\u0002\u0695\u0694\u0003\u0002",
    "\u0002\u0002\u0695\u0696\u0003\u0002\u0002\u0002\u0696\u00ef\u0003\u0002",
    "\u0002\u0002\u0697\u0698\u0007\u007f\u0002\u0002\u0698\u00f1\u0003\u0002",
    "\u0002\u0002\u0699\u069a\u0007+\u0002\u0002\u069a\u069b\u0007\u007f",
    "\u0002\u0002\u069b\u069c\u0007`\u0002\u0002\u069c\u069d\u0005\u00f4",
    "{\u0002\u069d\u069e\u0007{\u0002\u0002\u069e\u00f3\u0003\u0002\u0002",
    "\u0002\u069f\u06a1\u0005\u000e\b\u0002\u06a0\u069f\u0003\u0002\u0002",
    "\u0002\u06a0\u06a1\u0003\u0002\u0002\u0002\u06a1\u06a2\u0003\u0002\u0002",
    "\u0002\u06a2\u06a3\u0005\u00e0q\u0002\u06a3\u00f5\u0003\u0002\u0002",
    "\u0002\u06a4\u06a6\u0007J\u0002\u0002\u06a5\u06a7\u0007G\u0002\u0002",
    "\u06a6\u06a5\u0003\u0002\u0002\u0002\u06a6\u06a7\u0003\u0002\u0002\u0002",
    "\u06a7\u06a8\u0003\u0002\u0002\u0002\u06a8\u06a9\u0005\u000e\b\u0002",
    "\u06a9\u06aa\u0005\n\u0006\u0002\u06aa\u06ab\u0007{\u0002\u0002\u06ab",
    "\u06b2\u0003\u0002\u0002\u0002\u06ac\u06ad\u0007J\u0002\u0002\u06ad",
    "\u06ae\u0007z\u0002\u0002\u06ae\u06af\u0005\n\u0006\u0002\u06af\u06b0",
    "\u0007{\u0002\u0002\u06b0\u06b2\u0003\u0002\u0002\u0002\u06b1\u06a4",
    "\u0003\u0002\u0002\u0002\u06b1\u06ac\u0003\u0002\u0002\u0002\u06b2\u00f7",
    "\u0003\u0002\u0002\u0002\u06b3\u06b5\u0005\u00fe\u0080\u0002\u06b4\u06b3",
    "\u0003\u0002\u0002\u0002\u06b4\u06b5\u0003\u0002\u0002\u0002\u06b5\u06b6",
    "\u0003\u0002\u0002\u0002\u06b6\u06b7\u0007J\u0002\u0002\u06b7\u06b9",
    "\u0007+\u0002\u0002\u06b8\u06ba\u0005\u000e\b\u0002\u06b9\u06b8\u0003",
    "\u0002\u0002\u0002\u06b9\u06ba\u0003\u0002\u0002\u0002\u06ba\u06bb\u0003",
    "\u0002\u0002\u0002\u06bb\u06bc\u0005\u00e0q\u0002\u06bc\u06bd\u0007",
    "{\u0002\u0002\u06bd\u00f9\u0003\u0002\u0002\u0002\u06be\u06bf\u0007",
    "\u0006\u0002\u0002\u06bf\u06c0\u0007P\u0002\u0002\u06c0\u06c1\u0007",
    "\u0088\u0002\u0002\u06c1\u06c2\u0007Q\u0002\u0002\u06c2\u06c3\u0007",
    "{\u0002\u0002\u06c3\u00fb\u0003\u0002\u0002\u0002\u06c4\u06c5\u0007",
    "\u001f\u0002\u0002\u06c5\u06c6\u0007\u0088\u0002\u0002\u06c6\u06c8\u0007",
    "T\u0002\u0002\u06c7\u06c9\u0005\u008eH\u0002\u06c8\u06c7\u0003\u0002",
    "\u0002\u0002\u06c8\u06c9\u0003\u0002\u0002\u0002\u06c9\u06ca\u0003\u0002",
    "\u0002\u0002\u06ca\u06cf\u0007U\u0002\u0002\u06cb\u06cc\u0007\u001f",
    "\u0002\u0002\u06cc\u06cd\u0007\u0088\u0002\u0002\u06cd\u06cf\u0005\u0096",
    "L\u0002\u06ce\u06c4\u0003\u0002\u0002\u0002\u06ce\u06cb\u0003\u0002",
    "\u0002\u0002\u06cf\u00fd\u0003\u0002\u0002\u0002\u06d0\u06d1\b\u0080",
    "\u0001\u0002\u06d1\u06d2\u0005\u0100\u0081\u0002\u06d2\u06d7\u0003\u0002",
    "\u0002\u0002\u06d3\u06d4\f\u0003\u0002\u0002\u06d4\u06d6\u0005\u0100",
    "\u0081\u0002\u06d5\u06d3\u0003\u0002\u0002\u0002\u06d6\u06d9\u0003\u0002",
    "\u0002\u0002\u06d7\u06d5\u0003\u0002\u0002\u0002\u06d7\u06d8\u0003\u0002",
    "\u0002\u0002\u06d8\u00ff\u0003\u0002\u0002\u0002\u06d9\u06d7\u0003\u0002",
    "\u0002\u0002\u06da\u06db\u0007R\u0002\u0002\u06db\u06dc\u0007R\u0002",
    "\u0002\u06dc\u06dd\u0005\u0104\u0083\u0002\u06dd\u06de\u0007S\u0002",
    "\u0002\u06de\u06df\u0007S\u0002\u0002\u06df\u06e2\u0003\u0002\u0002",
    "\u0002\u06e0\u06e2\u0005\u0102\u0082\u0002\u06e1\u06da\u0003\u0002\u0002",
    "\u0002\u06e1\u06e0\u0003\u0002\u0002\u0002\u06e2\u0101\u0003\u0002\u0002",
    "\u0002\u06e3\u06e4\u0007\u0004\u0002\u0002\u06e4\u06e5\u0007P\u0002",
    "\u0002\u06e5\u06e7\u0005\u012c\u0097\u0002\u06e6\u06e8\u0007~\u0002",
    "\u0002\u06e7\u06e6\u0003\u0002\u0002\u0002\u06e7\u06e8\u0003\u0002\u0002",
    "\u0002\u06e8\u06e9\u0003\u0002\u0002\u0002\u06e9\u06ea\u0007Q\u0002",
    "\u0002\u06ea\u06f4\u0003\u0002\u0002\u0002\u06eb\u06ec\u0007\u0004\u0002",
    "\u0002\u06ec\u06ed\u0007P\u0002\u0002\u06ed\u06ef\u0005d3\u0002\u06ee",
    "\u06f0\u0007~\u0002\u0002\u06ef\u06ee\u0003\u0002\u0002\u0002\u06ef",
    "\u06f0\u0003\u0002\u0002\u0002\u06f0\u06f1\u0003\u0002\u0002\u0002\u06f1",
    "\u06f2\u0007Q\u0002\u0002\u06f2\u06f4\u0003\u0002\u0002\u0002\u06f3",
    "\u06e3\u0003\u0002\u0002\u0002\u06f3\u06eb\u0003\u0002\u0002\u0002\u06f4",
    "\u0103\u0003\u0002\u0002\u0002\u06f5\u06f7\b\u0083\u0001\u0002\u06f6",
    "\u06f8\u0005\u0106\u0084\u0002\u06f7\u06f6\u0003\u0002\u0002\u0002\u06f7",
    "\u06f8\u0003\u0002\u0002\u0002\u06f8\u06fd\u0003\u0002\u0002\u0002\u06f9",
    "\u06fa\u0005\u0106\u0084\u0002\u06fa\u06fb\u0007~\u0002\u0002\u06fb",
    "\u06fd\u0003\u0002\u0002\u0002\u06fc\u06f5\u0003\u0002\u0002\u0002\u06fc",
    "\u06f9\u0003\u0002\u0002\u0002\u06fd\u070a\u0003\u0002\u0002\u0002\u06fe",
    "\u06ff\f\u0005\u0002\u0002\u06ff\u0701\u0007u\u0002\u0002\u0700\u0702",
    "\u0005\u0106\u0084\u0002\u0701\u0700\u0003\u0002\u0002\u0002\u0701\u0702",
    "\u0003\u0002\u0002\u0002\u0702\u0709\u0003\u0002\u0002\u0002\u0703\u0704",
    "\f\u0003\u0002\u0002\u0704\u0705\u0007u\u0002\u0002\u0705\u0706\u0005",
    "\u0106\u0084\u0002\u0706\u0707\u0007~\u0002\u0002\u0707\u0709\u0003",
    "\u0002\u0002\u0002\u0708\u06fe\u0003\u0002\u0002\u0002\u0708\u0703\u0003",
    "\u0002\u0002\u0002\u0709\u070c\u0003\u0002\u0002\u0002\u070a\u0708\u0003",
    "\u0002\u0002\u0002\u070a\u070b\u0003\u0002\u0002\u0002\u070b\u0105\u0003",
    "\u0002\u0002\u0002\u070c\u070a\u0003\u0002\u0002\u0002\u070d\u070f\u0005",
    "\u0108\u0085\u0002\u070e\u0710\u0005\u010e\u0088\u0002\u070f\u070e\u0003",
    "\u0002\u0002\u0002\u070f\u0710\u0003\u0002\u0002\u0002\u0710\u0107\u0003",
    "\u0002\u0002\u0002\u0711\u0714\u0007\u007f\u0002\u0002\u0712\u0714\u0005",
    "\u010a\u0086\u0002\u0713\u0711\u0003\u0002\u0002\u0002\u0713\u0712\u0003",
    "\u0002\u0002\u0002\u0714\u0109\u0003\u0002\u0002\u0002\u0715\u0716\u0005",
    "\u010c\u0087\u0002\u0716\u0717\u0007z\u0002\u0002\u0717\u0718\u0007",
    "\u007f\u0002\u0002\u0718\u010b\u0003\u0002\u0002\u0002\u0719\u071a\u0007",
    "\u007f\u0002\u0002\u071a\u010d\u0003\u0002\u0002\u0002\u071b\u071c\u0007",
    "P\u0002\u0002\u071c\u071d\u0005\u0110\u0089\u0002\u071d\u071e\u0007",
    "Q\u0002\u0002\u071e\u010f\u0003\u0002\u0002\u0002\u071f\u0721\b\u0089",
    "\u0001\u0002\u0720\u0722\u0005\u0112\u008a\u0002\u0721\u0720\u0003\u0002",
    "\u0002\u0002\u0721\u0722\u0003\u0002\u0002\u0002\u0722\u0727\u0003\u0002",
    "\u0002\u0002\u0723\u0724\f\u0003\u0002\u0002\u0724\u0726\u0005\u0112",
    "\u008a\u0002\u0725\u0723\u0003\u0002\u0002\u0002\u0726\u0729\u0003\u0002",
    "\u0002\u0002\u0727\u0725\u0003\u0002\u0002\u0002\u0727\u0728\u0003\u0002",
    "\u0002\u0002\u0728\u0111\u0003\u0002\u0002\u0002\u0729\u0727\u0003\u0002",
    "\u0002\u0002\u072a\u072b\u0007P\u0002\u0002\u072b\u072c\u0005\u0110",
    "\u0089\u0002\u072c\u072d\u0007Q\u0002\u0002\u072d\u0737\u0003\u0002",
    "\u0002\u0002\u072e\u072f\u0007R\u0002\u0002\u072f\u0730\u0005\u0110",
    "\u0089\u0002\u0730\u0731\u0007S\u0002\u0002\u0731\u0737\u0003\u0002",
    "\u0002\u0002\u0732\u0733\u0007T\u0002\u0002\u0733\u0734\u0005\u0110",
    "\u0089\u0002\u0734\u0735\u0007U\u0002\u0002\u0735\u0737\u0003\u0002",
    "\u0002\u0002\u0736\u072a\u0003\u0002\u0002\u0002\u0736\u072e\u0003\u0002",
    "\u0002\u0002\u0736\u0732\u0003\u0002\u0002\u0002\u0737\u0113\u0003\u0002",
    "\u0002\u0002\u0738\u073d\u0005\u0116\u008c\u0002\u0739\u073a\u0007u",
    "\u0002\u0002\u073a\u073c\u0005\u0116\u008c\u0002\u073b\u0739\u0003\u0002",
    "\u0002\u0002\u073c\u073f\u0003\u0002\u0002\u0002\u073d\u073b\u0003\u0002",
    "\u0002\u0002\u073d\u073e\u0003\u0002\u0002\u0002\u073e\u0115\u0003\u0002",
    "\u0002\u0002\u073f\u073d\u0003\u0002\u0002\u0002\u0740\u0742\u0005\u0118",
    "\u008d\u0002\u0741\u0743\u0005\u0146\u00a4\u0002\u0742\u0741\u0003\u0002",
    "\u0002\u0002\u0742\u0743\u0003\u0002\u0002\u0002\u0743\u0117\u0003\u0002",
    "\u0002\u0002\u0744\u074a\u0005\u011a\u008e\u0002\u0745\u0746\u0005\u011c",
    "\u008f\u0002\u0746\u0747\u0005\u011e\u0090\u0002\u0747\u0748\u0005\u0120",
    "\u0091\u0002\u0748\u074a\u0003\u0002\u0002\u0002\u0749\u0744\u0003\u0002",
    "\u0002\u0002\u0749\u0745\u0003\u0002\u0002\u0002\u074a\u0119\u0003\u0002",
    "\u0002\u0002\u074b\u074d\u0005\u0122\u0092\u0002\u074c\u074b\u0003\u0002",
    "\u0002\u0002\u074d\u0750\u0003\u0002\u0002\u0002\u074e\u074c\u0003\u0002",
    "\u0002\u0002\u074e\u074f\u0003\u0002\u0002\u0002\u074f\u0751\u0003\u0002",
    "\u0002\u0002\u0750\u074e\u0003\u0002\u0002\u0002\u0751\u0752\u0005\u011c",
    "\u008f\u0002\u0752\u011b\u0003\u0002\u0002\u0002\u0753\u0754\b\u008f",
    "\u0001\u0002\u0754\u0756\u0005\u012a\u0096\u0002\u0755\u0757\u0005\u00fe",
    "\u0080\u0002\u0756\u0755\u0003\u0002\u0002\u0002\u0756\u0757\u0003\u0002",
    "\u0002\u0002\u0757\u075d\u0003\u0002\u0002\u0002\u0758\u0759\u0007P",
    "\u0002\u0002\u0759\u075a\u0005\u011a\u008e\u0002\u075a\u075b\u0007Q",
    "\u0002\u0002\u075b\u075d\u0003\u0002\u0002\u0002\u075c\u0753\u0003\u0002",
    "\u0002\u0002\u075c\u0758\u0003\u0002\u0002\u0002\u075d\u076b\u0003\u0002",
    "\u0002\u0002\u075e\u075f\f\u0005\u0002\u0002\u075f\u076a\u0005\u011e",
    "\u0090\u0002\u0760\u0761\f\u0004\u0002\u0002\u0761\u0763\u0007R\u0002",
    "\u0002\u0762\u0764\u0005d3\u0002\u0763\u0762\u0003\u0002\u0002\u0002",
    "\u0763\u0764\u0003\u0002\u0002\u0002\u0764\u0765\u0003\u0002\u0002\u0002",
    "\u0765\u0767\u0007S\u0002\u0002\u0766\u0768\u0005\u00fe\u0080\u0002",
    "\u0767\u0766\u0003\u0002\u0002\u0002\u0767\u0768\u0003\u0002\u0002\u0002",
    "\u0768\u076a\u0003\u0002\u0002\u0002\u0769\u075e\u0003\u0002\u0002\u0002",
    "\u0769\u0760\u0003\u0002\u0002\u0002\u076a\u076d\u0003\u0002\u0002\u0002",
    "\u076b\u0769\u0003\u0002\u0002\u0002\u076b\u076c\u0003\u0002\u0002\u0002",
    "\u076c\u011d\u0003\u0002\u0002\u0002\u076d\u076b\u0003\u0002\u0002\u0002",
    "\u076e\u076f\u0007P\u0002\u0002\u076f\u0770\u0005\u0138\u009d\u0002",
    "\u0770\u0772\u0007Q\u0002\u0002\u0771\u0773\u0005\u0124\u0093\u0002",
    "\u0772\u0771\u0003\u0002\u0002\u0002\u0772\u0773\u0003\u0002\u0002\u0002",
    "\u0773\u0775\u0003\u0002\u0002\u0002\u0774\u0776\u0005\u0128\u0095\u0002",
    "\u0775\u0774\u0003\u0002\u0002\u0002\u0775\u0776\u0003\u0002\u0002\u0002",
    "\u0776\u0778\u0003\u0002\u0002\u0002\u0777\u0779\u0005\u01b2\u00da\u0002",
    "\u0778\u0777\u0003\u0002\u0002\u0002\u0778\u0779\u0003\u0002\u0002\u0002",
    "\u0779\u077b\u0003\u0002\u0002\u0002\u077a\u077c\u0005\u00fe\u0080\u0002",
    "\u077b\u077a\u0003\u0002\u0002\u0002\u077b\u077c\u0003\u0002\u0002\u0002",
    "\u077c\u011f\u0003\u0002\u0002\u0002\u077d\u077e\u0007w\u0002\u0002",
    "\u077e\u0780\u0005\u00c4c\u0002\u077f\u0781\u0005\u012e\u0098\u0002",
    "\u0780\u077f\u0003\u0002\u0002\u0002\u0780\u0781\u0003\u0002\u0002\u0002",
    "\u0781\u0121\u0003\u0002\u0002\u0002\u0782\u0784\u0007X\u0002\u0002",
    "\u0783\u0785\u0005\u00fe\u0080\u0002\u0784\u0783\u0003\u0002\u0002\u0002",
    "\u0784\u0785\u0003\u0002\u0002\u0002\u0785\u0787\u0003\u0002\u0002\u0002",
    "\u0786\u0788\u0005\u0124\u0093\u0002\u0787\u0786\u0003\u0002\u0002\u0002",
    "\u0787\u0788\u0003\u0002\u0002\u0002\u0788\u079a\u0003\u0002\u0002\u0002",
    "\u0789\u078b\u0007\\\u0002\u0002\u078a\u078c\u0005\u00fe\u0080\u0002",
    "\u078b\u078a\u0003\u0002\u0002\u0002\u078b\u078c\u0003\u0002\u0002\u0002",
    "\u078c\u079a\u0003\u0002\u0002\u0002\u078d\u078f\u0007q\u0002\u0002",
    "\u078e\u0790\u0005\u00fe\u0080\u0002\u078f\u078e\u0003\u0002\u0002\u0002",
    "\u078f\u0790\u0003\u0002\u0002\u0002\u0790\u079a\u0003\u0002\u0002\u0002",
    "\u0791\u0792\u0005\u000e\b\u0002\u0792\u0794\u0007X\u0002\u0002\u0793",
    "\u0795\u0005\u00fe\u0080\u0002\u0794\u0793\u0003\u0002\u0002\u0002\u0794",
    "\u0795\u0003\u0002\u0002\u0002\u0795\u0797\u0003\u0002\u0002\u0002\u0796",
    "\u0798\u0005\u0124\u0093\u0002\u0797\u0796\u0003\u0002\u0002\u0002\u0797",
    "\u0798\u0003\u0002\u0002\u0002\u0798\u079a\u0003\u0002\u0002\u0002\u0799",
    "\u0782\u0003\u0002\u0002\u0002\u0799\u0789\u0003\u0002\u0002\u0002\u0799",
    "\u078d\u0003\u0002\u0002\u0002\u0799\u0791\u0003\u0002\u0002\u0002\u079a",
    "\u0123\u0003\u0002\u0002\u0002\u079b\u079d\u0005\u0126\u0094\u0002\u079c",
    "\u079e\u0005\u0124\u0093\u0002\u079d\u079c\u0003\u0002\u0002\u0002\u079d",
    "\u079e\u0003\u0002\u0002\u0002\u079e\u0125\u0003\u0002\u0002\u0002\u079f",
    "\u07a0\t\u0006\u0002\u0002\u07a0\u0127\u0003\u0002\u0002\u0002\u07a1",
    "\u07a2\t\u0007\u0002\u0002\u07a2\u0129\u0003\u0002\u0002\u0002\u07a3",
    "\u07a5\u0007~\u0002\u0002\u07a4\u07a3\u0003\u0002\u0002\u0002\u07a4",
    "\u07a5\u0003\u0002\u0002\u0002\u07a5\u07a6\u0003\u0002\u0002\u0002\u07a6",
    "\u07a7\u0005\u0006\u0004\u0002\u07a7\u012b\u0003\u0002\u0002\u0002\u07a8",
    "\u07aa\u0005\u00c2b\u0002\u07a9\u07ab\u0005\u012e\u0098\u0002\u07aa",
    "\u07a9\u0003\u0002\u0002\u0002\u07aa\u07ab\u0003\u0002\u0002\u0002\u07ab",
    "\u012d\u0003\u0002\u0002\u0002\u07ac\u07b5\u0005\u0130\u0099\u0002\u07ad",
    "\u07af\u0005\u0132\u009a\u0002\u07ae\u07ad\u0003\u0002\u0002\u0002\u07ae",
    "\u07af\u0003\u0002\u0002\u0002\u07af\u07b0\u0003\u0002\u0002\u0002\u07b0",
    "\u07b1\u0005\u011e\u0090\u0002\u07b1\u07b2\u0005\u0120\u0091\u0002\u07b2",
    "\u07b5\u0003\u0002\u0002\u0002\u07b3\u07b5\u0005\u0134\u009b\u0002\u07b4",
    "\u07ac\u0003\u0002\u0002\u0002\u07b4\u07ae\u0003\u0002\u0002\u0002\u07b4",
    "\u07b3\u0003\u0002\u0002\u0002\u07b5\u012f\u0003\u0002\u0002\u0002\u07b6",
    "\u07bc\u0005\u0132\u009a\u0002\u07b7\u07b9\u0005\u0122\u0092\u0002\u07b8",
    "\u07ba\u0005\u0130\u0099\u0002\u07b9\u07b8\u0003\u0002\u0002\u0002\u07b9",
    "\u07ba\u0003\u0002\u0002\u0002\u07ba\u07bc\u0003\u0002\u0002\u0002\u07bb",
    "\u07b6\u0003\u0002\u0002\u0002\u07bb\u07b7\u0003\u0002\u0002\u0002\u07bc",
    "\u0131\u0003\u0002\u0002\u0002\u07bd\u07be\b\u009a\u0001\u0002\u07be",
    "\u07cc\u0005\u011e\u0090\u0002\u07bf\u07c1\u0007R\u0002\u0002\u07c0",
    "\u07c2\u0005d3\u0002\u07c1\u07c0\u0003\u0002\u0002\u0002\u07c1\u07c2",
    "\u0003\u0002\u0002\u0002\u07c2\u07c3\u0003\u0002\u0002\u0002\u07c3\u07c5",
    "\u0007S\u0002\u0002\u07c4\u07c6\u0005\u00fe\u0080\u0002\u07c5\u07c4",
    "\u0003\u0002\u0002\u0002\u07c5\u07c6\u0003\u0002\u0002\u0002\u07c6\u07cc",
    "\u0003\u0002\u0002\u0002\u07c7\u07c8\u0007P\u0002\u0002\u07c8\u07c9",
    "\u0005\u0130\u0099\u0002\u07c9\u07ca\u0007Q\u0002\u0002\u07ca\u07cc",
    "\u0003\u0002\u0002\u0002\u07cb\u07bd\u0003\u0002\u0002\u0002\u07cb\u07bf",
    "\u0003\u0002\u0002\u0002\u07cb\u07c7\u0003\u0002\u0002\u0002\u07cc\u07da",
    "\u0003\u0002\u0002\u0002\u07cd\u07ce\f\u0007\u0002\u0002\u07ce\u07d9",
    "\u0005\u011e\u0090\u0002\u07cf\u07d0\f\u0005\u0002\u0002\u07d0\u07d2",
    "\u0007R\u0002\u0002\u07d1\u07d3\u0005d3\u0002\u07d2\u07d1\u0003\u0002",
    "\u0002\u0002\u07d2\u07d3\u0003\u0002\u0002\u0002\u07d3\u07d4\u0003\u0002",
    "\u0002\u0002\u07d4\u07d6\u0007S\u0002\u0002\u07d5\u07d7\u0005\u00fe",
    "\u0080\u0002\u07d6\u07d5\u0003\u0002\u0002\u0002\u07d6\u07d7\u0003\u0002",
    "\u0002\u0002\u07d7\u07d9\u0003\u0002\u0002\u0002\u07d8\u07cd\u0003\u0002",
    "\u0002\u0002\u07d8\u07cf\u0003\u0002\u0002\u0002\u07d9\u07dc\u0003\u0002",
    "\u0002\u0002\u07da\u07d8\u0003\u0002\u0002\u0002\u07da\u07db\u0003\u0002",
    "\u0002\u0002\u07db\u0133\u0003\u0002\u0002\u0002\u07dc\u07da\u0003\u0002",
    "\u0002\u0002\u07dd\u07e2\u0005\u0136\u009c\u0002\u07de\u07df\u0005\u0122",
    "\u0092\u0002\u07df\u07e0\u0005\u0134\u009b\u0002\u07e0\u07e2\u0003\u0002",
    "\u0002\u0002\u07e1\u07dd\u0003\u0002\u0002\u0002\u07e1\u07de\u0003\u0002",
    "\u0002\u0002\u07e2\u0135\u0003\u0002\u0002\u0002\u07e3\u07e4\b\u009c",
    "\u0001\u0002\u07e4\u07e5\u0007~\u0002\u0002\u07e5\u07f3\u0003\u0002",
    "\u0002\u0002\u07e6\u07e7\f\u0005\u0002\u0002\u07e7\u07f2\u0005\u011e",
    "\u0090\u0002\u07e8\u07e9\f\u0004\u0002\u0002\u07e9\u07eb\u0007R\u0002",
    "\u0002\u07ea\u07ec\u0005d3\u0002\u07eb\u07ea\u0003\u0002\u0002\u0002",
    "\u07eb\u07ec\u0003\u0002\u0002\u0002\u07ec\u07ed\u0003\u0002\u0002\u0002",
    "\u07ed\u07ef\u0007S\u0002\u0002\u07ee\u07f0\u0005\u00fe\u0080\u0002",
    "\u07ef\u07ee\u0003\u0002\u0002\u0002\u07ef\u07f0\u0003\u0002\u0002\u0002",
    "\u07f0\u07f2\u0003\u0002\u0002\u0002\u07f1\u07e6\u0003\u0002\u0002\u0002",
    "\u07f1\u07e8\u0003\u0002\u0002\u0002\u07f2\u07f5\u0003\u0002\u0002\u0002",
    "\u07f3\u07f1\u0003\u0002\u0002\u0002\u07f3\u07f4\u0003\u0002\u0002\u0002",
    "\u07f4\u0137\u0003\u0002\u0002\u0002\u07f5\u07f3\u0003\u0002\u0002\u0002",
    "\u07f6\u07f8\u0005\u013a\u009e\u0002\u07f7\u07f6\u0003\u0002\u0002\u0002",
    "\u07f7\u07f8\u0003\u0002\u0002\u0002\u07f8\u07fa\u0003\u0002\u0002\u0002",
    "\u07f9\u07fb\u0007~\u0002\u0002\u07fa\u07f9\u0003\u0002\u0002\u0002",
    "\u07fa\u07fb\u0003\u0002\u0002\u0002\u07fb\u0801\u0003\u0002\u0002\u0002",
    "\u07fc\u07fd\u0005\u013a\u009e\u0002\u07fd\u07fe\u0007u\u0002\u0002",
    "\u07fe\u07ff\u0007~\u0002\u0002\u07ff\u0801\u0003\u0002\u0002\u0002",
    "\u0800\u07f7\u0003\u0002\u0002\u0002\u0800\u07fc\u0003\u0002\u0002\u0002",
    "\u0801\u0139\u0003\u0002\u0002\u0002\u0802\u0803\b\u009e\u0001\u0002",
    "\u0803\u0804\u0005\u013c\u009f\u0002\u0804\u080a\u0003\u0002\u0002\u0002",
    "\u0805\u0806\f\u0003\u0002\u0002\u0806\u0807\u0007u\u0002\u0002\u0807",
    "\u0809\u0005\u013c\u009f\u0002\u0808\u0805\u0003\u0002\u0002\u0002\u0809",
    "\u080c\u0003\u0002\u0002\u0002\u080a\u0808\u0003\u0002\u0002\u0002\u080a",
    "\u080b\u0003\u0002\u0002\u0002\u080b\u013b\u0003\u0002\u0002\u0002\u080c",
    "\u080a\u0003\u0002\u0002\u0002\u080d\u080f\u0005\u00fe\u0080\u0002\u080e",
    "\u080d\u0003\u0002\u0002\u0002\u080e\u080f\u0003\u0002\u0002\u0002\u080f",
    "\u0811\u0003\u0002\u0002\u0002\u0810\u0812\u0005\u00b6\\\u0002\u0811",
    "\u0810\u0003\u0002\u0002\u0002\u0811\u0812\u0003\u0002\u0002\u0002\u0812",
    "\u0813\u0003\u0002\u0002\u0002\u0813\u0815\u0005\u00be`\u0002\u0814",
    "\u0816\u0005\u00a2R\u0002\u0815\u0814\u0003\u0002\u0002\u0002\u0815",
    "\u0816\u0003\u0002\u0002\u0002\u0816\u013d\u0003\u0002\u0002\u0002\u0817",
    "\u0819\u0005\u00fe\u0080\u0002\u0818\u0817\u0003\u0002\u0002\u0002\u0818",
    "\u0819\u0003\u0002\u0002\u0002\u0819\u081b\u0003\u0002\u0002\u0002\u081a",
    "\u081c\u0005\u00b6\\\u0002\u081b\u081a\u0003\u0002\u0002\u0002\u081b",
    "\u081c\u0003\u0002\u0002\u0002\u081c\u081d\u0003\u0002\u0002\u0002\u081d",
    "\u081f\u0005\u0140\u00a1\u0002\u081e\u0820\u0005\u016a\u00b6\u0002\u081f",
    "\u081e\u0003\u0002\u0002\u0002\u081f\u0820\u0003\u0002\u0002\u0002\u0820",
    "\u0821\u0003\u0002\u0002\u0002\u0821\u0822\u0005\u0144\u00a3\u0002\u0822",
    "\u013f\u0003\u0002\u0002\u0002\u0823\u0825\u0005\u00be`\u0002\u0824",
    "\u0823\u0003\u0002\u0002\u0002\u0824\u0825\u0003\u0002\u0002\u0002\u0825",
    "\u0826\u0003\u0002\u0002\u0002\u0826\u0827\u0005\u0142\u00a2\u0002\u0827",
    "\u0141\u0003\u0002\u0002\u0002\u0828\u0829\u0005\u012a\u0096\u0002\u0829",
    "\u082a\u0007P\u0002\u0002\u082a\u082b\u0005\u0138\u009d\u0002\u082b",
    "\u082c\u0007Q\u0002\u0002\u082c\u0143\u0003\u0002\u0002\u0002\u082d",
    "\u082f\u0005\u0182\u00c2\u0002\u082e\u082d\u0003\u0002\u0002\u0002\u082e",
    "\u082f\u0003\u0002\u0002\u0002\u082f\u0830\u0003\u0002\u0002\u0002\u0830",
    "\u0839\u0005l7\u0002\u0831\u0839\u0005\u01a8\u00d5\u0002\u0832\u0833",
    "\u0007`\u0002\u0002\u0833\u0834\u0007\u0015\u0002\u0002\u0834\u0839",
    "\u0007{\u0002\u0002\u0835\u0836\u0007`\u0002\u0002\u0836\u0837\u0007",
    "\u0016\u0002\u0002\u0837\u0839\u0007{\u0002\u0002\u0838\u082e\u0003",
    "\u0002\u0002\u0002\u0838\u0831\u0003\u0002\u0002\u0002\u0838\u0832\u0003",
    "\u0002\u0002\u0002\u0838\u0835\u0003\u0002\u0002\u0002\u0839\u0145\u0003",
    "\u0002\u0002\u0002\u083a\u0840\u0005\u0148\u00a5\u0002\u083b\u083c\u0007",
    "P\u0002\u0002\u083c\u083d\u0005(\u0015\u0002\u083d\u083e\u0007Q\u0002",
    "\u0002\u083e\u0840\u0003\u0002\u0002\u0002\u083f\u083a\u0003\u0002\u0002",
    "\u0002\u083f\u083b\u0003\u0002\u0002\u0002\u0840\u0147\u0003\u0002\u0002",
    "\u0002\u0841\u0842\u0007`\u0002\u0002\u0842\u0845\u0005\u014a\u00a6",
    "\u0002\u0843\u0845\u0005\u014e\u00a8\u0002\u0844\u0841\u0003\u0002\u0002",
    "\u0002\u0844\u0843\u0003\u0002\u0002\u0002\u0845\u0149\u0003\u0002\u0002",
    "\u0002\u0846\u0849\u0005^0\u0002\u0847\u0849\u0005\u014e\u00a8\u0002",
    "\u0848\u0846\u0003\u0002\u0002\u0002\u0848\u0847\u0003\u0002\u0002\u0002",
    "\u0849\u014b\u0003\u0002\u0002\u0002\u084a\u084f\u0005\u014a\u00a6\u0002",
    "\u084b\u084c\u0007u\u0002\u0002\u084c\u084e\u0005\u014a\u00a6\u0002",
    "\u084d\u084b\u0003\u0002\u0002\u0002\u084e\u0851\u0003\u0002\u0002\u0002",
    "\u084f\u084d\u0003\u0002\u0002\u0002\u084f\u0850\u0003\u0002\u0002\u0002",
    "\u0850\u014d\u0003\u0002\u0002\u0002\u0851\u084f\u0003\u0002\u0002\u0002",
    "\u0852\u0853\u0007T\u0002\u0002\u0853\u0855\u0005\u014c\u00a7\u0002",
    "\u0854\u0856\u0007u\u0002\u0002\u0855\u0854\u0003\u0002\u0002\u0002",
    "\u0855\u0856\u0003\u0002\u0002\u0002\u0856\u0857\u0003\u0002\u0002\u0002",
    "\u0857\u0858\u0007U\u0002\u0002\u0858\u085c\u0003\u0002\u0002\u0002",
    "\u0859\u085a\u0007T\u0002\u0002\u085a\u085c\u0007U\u0002\u0002\u085b",
    "\u0852\u0003\u0002\u0002\u0002\u085b\u0859\u0003\u0002\u0002\u0002\u085c",
    "\u014f\u0003\u0002\u0002\u0002\u085d\u0860\u0007\u007f\u0002\u0002\u085e",
    "\u0860\u0005\u0196\u00cc\u0002\u085f\u085d\u0003\u0002\u0002\u0002\u085f",
    "\u085e\u0003\u0002\u0002\u0002\u0860\u0151\u0003\u0002\u0002\u0002\u0861",
    "\u0862\u0005\u0156\u00ac\u0002\u0862\u0863\u0005\u0154\u00ab\u0002\u0863",
    "\u0153\u0003\u0002\u0002\u0002\u0864\u0866\u0007T\u0002\u0002\u0865",
    "\u0867\u0005\u015e\u00b0\u0002\u0866\u0865\u0003\u0002\u0002\u0002\u0866",
    "\u0867\u0003\u0002\u0002\u0002\u0867\u0868\u0003\u0002\u0002\u0002\u0868",
    "\u0869\u0007U\u0002\u0002\u0869\u0155\u0003\u0002\u0002\u0002\u086a",
    "\u086c\u0005\u015c\u00af\u0002\u086b\u086d\u0005\u00fe\u0080\u0002\u086c",
    "\u086b\u0003\u0002\u0002\u0002\u086c\u086d\u0003\u0002\u0002\u0002\u086d",
    "\u086f\u0003\u0002\u0002\u0002\u086e\u0870\u0005\u000e\b\u0002\u086f",
    "\u086e\u0003\u0002\u0002\u0002\u086f\u0870\u0003\u0002\u0002\u0002\u0870",
    "\u0871\u0003\u0002\u0002\u0002\u0871\u0873\u0005\u0158\u00ad\u0002\u0872",
    "\u0874\u0005\u015a\u00ae\u0002\u0873\u0872\u0003\u0002\u0002\u0002\u0873",
    "\u0874\u0003\u0002\u0002\u0002\u0874\u0876\u0003\u0002\u0002\u0002\u0875",
    "\u0877\u0005\u0170\u00b9\u0002\u0876\u0875\u0003\u0002\u0002\u0002\u0876",
    "\u0877\u0003\u0002\u0002\u0002\u0877\u0880\u0003\u0002\u0002\u0002\u0878",
    "\u087a\u0005\u015c\u00af\u0002\u0879\u087b\u0005\u00fe\u0080\u0002\u087a",
    "\u0879\u0003\u0002\u0002\u0002\u087a\u087b\u0003\u0002\u0002\u0002\u087b",
    "\u087d\u0003\u0002\u0002\u0002\u087c\u087e\u0005\u0170\u00b9\u0002\u087d",
    "\u087c\u0003\u0002\u0002\u0002\u087d\u087e\u0003\u0002\u0002\u0002\u087e",
    "\u0880\u0003\u0002\u0002\u0002\u087f\u086a\u0003\u0002\u0002\u0002\u087f",
    "\u0878\u0003\u0002\u0002\u0002\u0880\u0157\u0003\u0002\u0002\u0002\u0881",
    "\u0883\u0005\u000e\b\u0002\u0882\u0881\u0003\u0002\u0002\u0002\u0882",
    "\u0883\u0003\u0002\u0002\u0002\u0883\u0884\u0003\u0002\u0002\u0002\u0884",
    "\u0885\u0005\u0150\u00a9\u0002\u0885\u0159\u0003\u0002\u0002\u0002\u0886",
    "\u0887\u0007!\u0002\u0002\u0887\u015b\u0003\u0002\u0002\u0002\u0888",
    "\u0889\t\b\u0002\u0002\u0889\u015d\u0003\u0002\u0002\u0002\u088a\u088c",
    "\u0005\u0160\u00b1\u0002\u088b\u088d\u0005\u015e\u00b0\u0002\u088c\u088b",
    "\u0003\u0002\u0002\u0002\u088c\u088d\u0003\u0002\u0002\u0002\u088d\u0894",
    "\u0003\u0002\u0002\u0002\u088e\u088f\u0005\u017a\u00be\u0002\u088f\u0891",
    "\u0007y\u0002\u0002\u0890\u0892\u0005\u015e\u00b0\u0002\u0891\u0890",
    "\u0003\u0002\u0002\u0002\u0891\u0892\u0003\u0002\u0002\u0002\u0892\u0894",
    "\u0003\u0002\u0002\u0002\u0893\u088a\u0003\u0002\u0002\u0002\u0893\u088e",
    "\u0003\u0002\u0002\u0002\u0894\u015f\u0003\u0002\u0002\u0002\u0895\u089d",
    "\u0005\u0162\u00b2\u0002\u0896\u089d\u0005\u013e\u00a0\u0002\u0897\u089d",
    "\u0005\u00f6|\u0002\u0898\u089d\u0005\u00aaV\u0002\u0899\u089d\u0005",
    "\u018e\u00c8\u0002\u089a\u089d\u0005\u009cO\u0002\u089b\u089d\u0005",
    "\u00acW\u0002\u089c\u0895\u0003\u0002\u0002\u0002\u089c\u0896\u0003",
    "\u0002\u0002\u0002\u089c\u0897\u0003\u0002\u0002\u0002\u089c\u0898\u0003",
    "\u0002\u0002\u0002\u089c\u0899\u0003\u0002\u0002\u0002\u089c\u089a\u0003",
    "\u0002\u0002\u0002\u089c\u089b\u0003\u0002\u0002\u0002\u089d\u0161\u0003",
    "\u0002\u0002\u0002\u089e\u089f\u0005\u0164\u00b3\u0002\u089f\u08a0\u0007",
    "{\u0002\u0002\u08a0\u0163\u0003\u0002\u0002\u0002\u08a1\u08a3\u0005",
    "\u00fe\u0080\u0002\u08a2\u08a1\u0003\u0002\u0002\u0002\u08a2\u08a3\u0003",
    "\u0002\u0002\u0002\u08a3\u08a5\u0003\u0002\u0002\u0002\u08a4\u08a6\u0005",
    "\u00b6\\\u0002\u08a5\u08a4\u0003\u0002\u0002\u0002\u08a5\u08a6\u0003",
    "\u0002\u0002\u0002\u08a6\u08a7\u0003\u0002\u0002\u0002\u08a7\u08ab\u0005",
    "\u00be`\u0002\u08a8\u08aa\u0005\u0122\u0092\u0002\u08a9\u08a8\u0003",
    "\u0002\u0002\u0002\u08aa\u08ad\u0003\u0002\u0002\u0002\u08ab\u08a9\u0003",
    "\u0002\u0002\u0002\u08ab\u08ac\u0003\u0002\u0002\u0002\u08ac\u08af\u0003",
    "\u0002\u0002\u0002\u08ad\u08ab\u0003\u0002\u0002\u0002\u08ae\u08b0\u0005",
    "\u0166\u00b4\u0002\u08af\u08ae\u0003\u0002\u0002\u0002\u08af\u08b0\u0003",
    "\u0002\u0002\u0002\u08b0\u0165\u0003\u0002\u0002\u0002\u08b1\u08b2\b",
    "\u00b4\u0001\u0002\u08b2\u08b3\u0005\u0168\u00b5\u0002\u08b3\u08b9\u0003",
    "\u0002\u0002\u0002\u08b4\u08b5\f\u0003\u0002\u0002\u08b5\u08b6\u0007",
    "u\u0002\u0002\u08b6\u08b8\u0005\u0168\u00b5\u0002\u08b7\u08b4\u0003",
    "\u0002\u0002\u0002\u08b8\u08bb\u0003\u0002\u0002\u0002\u08b9\u08b7\u0003",
    "\u0002\u0002\u0002\u08b9\u08ba\u0003\u0002\u0002\u0002\u08ba\u0167\u0003",
    "\u0002\u0002\u0002\u08bb\u08b9\u0003\u0002\u0002\u0002\u08bc\u08be\u0005",
    "\u012a\u0096\u0002\u08bd\u08bf\u0005\u016a\u00b6\u0002\u08be\u08bd\u0003",
    "\u0002\u0002\u0002\u08be\u08bf\u0003\u0002\u0002\u0002\u08bf\u08c1\u0003",
    "\u0002\u0002\u0002\u08c0\u08c2\u0005\u016e\u00b8\u0002\u08c1\u08c0\u0003",
    "\u0002\u0002\u0002\u08c1\u08c2\u0003\u0002\u0002\u0002\u08c2\u08d5\u0003",
    "\u0002\u0002\u0002\u08c3\u08c6\u0005\u012a\u0096\u0002\u08c4\u08c5\u0007",
    "`\u0002\u0002\u08c5\u08c7\u0005\u014a\u00a6\u0002\u08c6\u08c4\u0003",
    "\u0002\u0002\u0002\u08c6\u08c7\u0003\u0002\u0002\u0002\u08c7\u08d5\u0003",
    "\u0002\u0002\u0002\u08c8\u08ca\u0005\u012a\u0096\u0002\u08c9\u08cb\u0005",
    "\u014e\u00a8\u0002\u08ca\u08c9\u0003\u0002\u0002\u0002\u08ca\u08cb\u0003",
    "\u0002\u0002\u0002\u08cb\u08d5\u0003\u0002\u0002\u0002\u08cc\u08ce\u0007",
    "\u007f\u0002\u0002\u08cd\u08cc\u0003\u0002\u0002\u0002\u08cd\u08ce\u0003",
    "\u0002\u0002\u0002\u08ce\u08d0\u0003\u0002\u0002\u0002\u08cf\u08d1\u0005",
    "\u00fe\u0080\u0002\u08d0\u08cf\u0003\u0002\u0002\u0002\u08d0\u08d1\u0003",
    "\u0002\u0002\u0002\u08d1\u08d2\u0003\u0002\u0002\u0002\u08d2\u08d3\u0007",
    "y\u0002\u0002\u08d3\u08d5\u0005d3\u0002\u08d4\u08bc\u0003\u0002\u0002",
    "\u0002\u08d4\u08c3\u0003\u0002\u0002\u0002\u08d4\u08c8\u0003\u0002\u0002",
    "\u0002\u08d4\u08cd\u0003\u0002\u0002\u0002\u08d5\u0169\u0003\u0002\u0002",
    "\u0002\u08d6\u08d7\b\u00b6\u0001\u0002\u08d7\u08d8\u0005\u016c\u00b7",
    "\u0002\u08d8\u08dd\u0003\u0002\u0002\u0002\u08d9\u08da\f\u0003\u0002",
    "\u0002\u08da\u08dc\u0005\u016c\u00b7\u0002\u08db\u08d9\u0003\u0002\u0002",
    "\u0002\u08dc\u08df\u0003\u0002\u0002\u0002\u08dd\u08db\u0003\u0002\u0002",
    "\u0002\u08dd\u08de\u0003\u0002\u0002\u0002\u08de\u016b\u0003\u0002\u0002",
    "\u0002\u08df\u08dd\u0003\u0002\u0002\u0002\u08e0\u08e1\t\t\u0002\u0002",
    "\u08e1\u016d\u0003\u0002\u0002\u0002\u08e2\u08e3\u0007`\u0002\u0002",
    "\u08e3\u08e4\u0007\u0082\u0002\u0002\u08e4\u016f\u0003\u0002\u0002\u0002",
    "\u08e5\u08e6\u0007y\u0002\u0002\u08e6\u08e7\u0005\u0172\u00ba\u0002",
    "\u08e7\u0171\u0003\u0002\u0002\u0002\u08e8\u08e9\b\u00ba\u0001\u0002",
    "\u08e9\u08eb\u0005\u0174\u00bb\u0002\u08ea\u08ec\u0007~\u0002\u0002",
    "\u08eb\u08ea\u0003\u0002\u0002\u0002\u08eb\u08ec\u0003\u0002\u0002\u0002",
    "\u08ec\u08f5\u0003\u0002\u0002\u0002\u08ed\u08ee\f\u0003\u0002\u0002",
    "\u08ee\u08ef\u0007u\u0002\u0002\u08ef\u08f1\u0005\u0174\u00bb\u0002",
    "\u08f0\u08f2\u0007~\u0002\u0002\u08f1\u08f0\u0003\u0002\u0002\u0002",
    "\u08f1\u08f2\u0003\u0002\u0002\u0002\u08f2\u08f4\u0003\u0002\u0002\u0002",
    "\u08f3\u08ed\u0003\u0002\u0002\u0002\u08f4\u08f7\u0003\u0002\u0002\u0002",
    "\u08f5\u08f3\u0003\u0002\u0002\u0002\u08f5\u08f6\u0003\u0002\u0002\u0002",
    "\u08f6\u0173\u0003\u0002\u0002\u0002\u08f7\u08f5\u0003\u0002\u0002\u0002",
    "\u08f8\u08fa\u0005\u00fe\u0080\u0002\u08f9\u08f8\u0003\u0002\u0002\u0002",
    "\u08f9\u08fa\u0003\u0002\u0002\u0002\u08fa\u08fb\u0003\u0002\u0002\u0002",
    "\u08fb\u090e\u0005\u0178\u00bd\u0002\u08fc\u08fe\u0005\u00fe\u0080\u0002",
    "\u08fd\u08fc\u0003\u0002\u0002\u0002\u08fd\u08fe\u0003\u0002\u0002\u0002",
    "\u08fe\u08ff\u0003\u0002\u0002\u0002\u08ff\u0901\u0007K\u0002\u0002",
    "\u0900\u0902\u0005\u017a\u00be\u0002\u0901\u0900\u0003\u0002\u0002\u0002",
    "\u0901\u0902\u0003\u0002\u0002\u0002\u0902\u0903\u0003\u0002\u0002\u0002",
    "\u0903\u090e\u0005\u0178\u00bd\u0002\u0904\u0906\u0005\u00fe\u0080\u0002",
    "\u0905\u0904\u0003\u0002\u0002\u0002\u0905\u0906\u0003\u0002\u0002\u0002",
    "\u0906\u0907\u0003\u0002\u0002\u0002\u0907\u0909\u0005\u017a\u00be\u0002",
    "\u0908\u090a\u0007K\u0002\u0002\u0909\u0908\u0003\u0002\u0002\u0002",
    "\u0909\u090a\u0003\u0002\u0002\u0002\u090a\u090b\u0003\u0002\u0002\u0002",
    "\u090b\u090c\u0005\u0178\u00bd\u0002\u090c\u090e\u0003\u0002\u0002\u0002",
    "\u090d\u08f9\u0003\u0002\u0002\u0002\u090d\u08fd\u0003\u0002\u0002\u0002",
    "\u090d\u0905\u0003\u0002\u0002\u0002\u090e\u0175\u0003\u0002\u0002\u0002",
    "\u090f\u0911\u0005\u000e\b\u0002\u0910\u090f\u0003\u0002\u0002\u0002",
    "\u0910\u0911\u0003\u0002\u0002\u0002\u0911\u0912\u0003\u0002\u0002\u0002",
    "\u0912\u0915\u0005\u0150\u00a9\u0002\u0913\u0915\u0005\u00caf\u0002",
    "\u0914\u0910\u0003\u0002\u0002\u0002\u0914\u0913\u0003\u0002\u0002\u0002",
    "\u0915\u0177\u0003\u0002\u0002\u0002\u0916\u0917\u0005\u0176\u00bc\u0002",
    "\u0917\u0179\u0003\u0002\u0002\u0002\u0918\u0919\t\n\u0002\u0002\u0919",
    "\u017b\u0003\u0002\u0002\u0002\u091a\u091b\u0007/\u0002\u0002\u091b",
    "\u091c\u0005\u017e\u00c0\u0002\u091c\u017d\u0003\u0002\u0002\u0002\u091d",
    "\u091f\u0005\u00c2b\u0002\u091e\u0920\u0005\u0180\u00c1\u0002\u091f",
    "\u091e\u0003\u0002\u0002\u0002\u091f\u0920\u0003\u0002\u0002\u0002\u0920",
    "\u017f\u0003\u0002\u0002\u0002\u0921\u0923\u0005\u0122\u0092\u0002\u0922",
    "\u0924\u0005\u0180\u00c1\u0002\u0923\u0922\u0003\u0002\u0002\u0002\u0923",
    "\u0924\u0003\u0002\u0002\u0002\u0924\u0181\u0003\u0002\u0002\u0002\u0925",
    "\u0926\u0007y\u0002\u0002\u0926\u0927\u0005\u0184\u00c3\u0002\u0927",
    "\u0183\u0003\u0002\u0002\u0002\u0928\u092a\u0005\u0186\u00c4\u0002\u0929",
    "\u092b\u0007~\u0002\u0002\u092a\u0929\u0003\u0002\u0002\u0002\u092a",
    "\u092b\u0003\u0002\u0002\u0002\u092b\u0934\u0003\u0002\u0002\u0002\u092c",
    "\u092e\u0005\u0186\u00c4\u0002\u092d\u092f\u0007~\u0002\u0002\u092e",
    "\u092d\u0003\u0002\u0002\u0002\u092e\u092f\u0003\u0002\u0002\u0002\u092f",
    "\u0930\u0003\u0002\u0002\u0002\u0930\u0931\u0007u\u0002\u0002\u0931",
    "\u0932\u0005\u0184\u00c3\u0002\u0932\u0934\u0003\u0002\u0002\u0002\u0933",
    "\u0928\u0003\u0002\u0002\u0002\u0933\u092c\u0003\u0002\u0002\u0002\u0934",
    "\u0185\u0003\u0002\u0002\u0002\u0935\u0936\u0005\u0188\u00c5\u0002\u0936",
    "\u0938\u0007P\u0002\u0002\u0937\u0939\u0005(\u0015\u0002\u0938\u0937",
    "\u0003\u0002\u0002\u0002\u0938\u0939\u0003\u0002\u0002\u0002\u0939\u093a",
    "\u0003\u0002\u0002\u0002\u093a\u093b\u0007Q\u0002\u0002\u093b\u0940",
    "\u0003\u0002\u0002\u0002\u093c\u093d\u0005\u0188\u00c5\u0002\u093d\u093e",
    "\u0005\u014e\u00a8\u0002\u093e\u0940\u0003\u0002\u0002\u0002\u093f\u0935",
    "\u0003\u0002\u0002\u0002\u093f\u093c\u0003\u0002\u0002\u0002\u0940\u0187",
    "\u0003\u0002\u0002\u0002\u0941\u0944\u0005\u0176\u00bc\u0002\u0942\u0944",
    "\u0007\u007f\u0002\u0002\u0943\u0941\u0003\u0002\u0002\u0002\u0943\u0942",
    "\u0003\u0002\u0002\u0002\u0944\u0189\u0003\u0002\u0002\u0002\u0945\u0946",
    "\u0007/\u0002\u0002\u0946\u0947\u0005\u01be\u00e0\u0002\u0947\u018b",
    "\u0003\u0002\u0002\u0002\u0948\u0949\u0007/\u0002\u0002\u0949\u094a",
    "\u0007\u0088\u0002\u0002\u094a\u094e\u0007\u007f\u0002\u0002\u094b\u094c",
    "\u0007/\u0002\u0002\u094c\u094e\u0007\u008c\u0002\u0002\u094d\u0948",
    "\u0003\u0002\u0002\u0002\u094d\u094b\u0003\u0002\u0002\u0002\u094e\u018d",
    "\u0003\u0002\u0002\u0002\u094f\u0950\u0007?\u0002\u0002\u0950\u0951",
    "\u0007a\u0002\u0002\u0951\u0952\u0005\u0190\u00c9\u0002\u0952\u0953",
    "\u0007b\u0002\u0002\u0953\u0954\u0005\u0096L\u0002\u0954\u018f\u0003",
    "\u0002\u0002\u0002\u0955\u0956\b\u00c9\u0001\u0002\u0956\u0957\u0005",
    "\u0192\u00ca\u0002\u0957\u095d\u0003\u0002\u0002\u0002\u0958\u0959\f",
    "\u0003\u0002\u0002\u0959\u095a\u0007u\u0002\u0002\u095a\u095c\u0005",
    "\u0192\u00ca\u0002\u095b\u0958\u0003\u0002\u0002\u0002\u095c\u095f\u0003",
    "\u0002\u0002\u0002\u095d\u095b\u0003\u0002\u0002\u0002\u095d\u095e\u0003",
    "\u0002\u0002\u0002\u095e\u0191\u0003\u0002\u0002\u0002\u095f\u095d\u0003",
    "\u0002\u0002\u0002\u0960\u0963\u0005\u0194\u00cb\u0002\u0961\u0963\u0005",
    "\u013c\u009f\u0002\u0962\u0960\u0003\u0002\u0002\u0002\u0962\u0961\u0003",
    "\u0002\u0002\u0002\u0963\u0193\u0003\u0002\u0002\u0002\u0964\u0966\u0007",
    "\u000f\u0002\u0002\u0965\u0967\u0007~\u0002\u0002\u0966\u0965\u0003",
    "\u0002\u0002\u0002\u0966\u0967\u0003\u0002\u0002\u0002\u0967\u0969\u0003",
    "\u0002\u0002\u0002\u0968\u096a\u0007\u007f\u0002\u0002\u0969\u0968\u0003",
    "\u0002\u0002\u0002\u0969\u096a\u0003\u0002\u0002\u0002\u096a\u0995\u0003",
    "\u0002\u0002\u0002\u096b\u096d\u0007\u000f\u0002\u0002\u096c\u096e\u0007",
    "\u007f\u0002\u0002\u096d\u096c\u0003\u0002\u0002\u0002\u096d\u096e\u0003",
    "\u0002\u0002\u0002\u096e\u096f\u0003\u0002\u0002\u0002\u096f\u0970\u0007",
    "`\u0002\u0002\u0970\u0995\u0005\u012c\u0097\u0002\u0971\u0973\u0007",
    "G\u0002\u0002\u0972\u0974\u0007~\u0002\u0002\u0973\u0972\u0003\u0002",
    "\u0002\u0002\u0973\u0974\u0003\u0002\u0002\u0002\u0974\u0976\u0003\u0002",
    "\u0002\u0002\u0975\u0977\u0007\u007f\u0002\u0002\u0976\u0975\u0003\u0002",
    "\u0002\u0002\u0976\u0977\u0003\u0002\u0002\u0002\u0977\u0995\u0003\u0002",
    "\u0002\u0002\u0978\u097a\u0007G\u0002\u0002\u0979\u097b\u0007\u007f",
    "\u0002\u0002\u097a\u0979\u0003\u0002\u0002\u0002\u097a\u097b\u0003\u0002",
    "\u0002\u0002\u097b\u097c\u0003\u0002\u0002\u0002\u097c\u097d\u0007`",
    "\u0002\u0002\u097d\u0995\u0005\u012c\u0097\u0002\u097e\u097f\u0007?",
    "\u0002\u0002\u097f\u0980\u0007a\u0002\u0002\u0980\u0981\u0005\u0190",
    "\u00c9\u0002\u0981\u0982\u0007b\u0002\u0002\u0982\u0984\u0007\u000f",
    "\u0002\u0002\u0983\u0985\u0007~\u0002\u0002\u0984\u0983\u0003\u0002",
    "\u0002\u0002\u0984\u0985\u0003\u0002\u0002\u0002\u0985\u0987\u0003\u0002",
    "\u0002\u0002\u0986\u0988\u0007\u007f\u0002\u0002\u0987\u0986\u0003\u0002",
    "\u0002\u0002\u0987\u0988\u0003\u0002\u0002\u0002\u0988\u0995\u0003\u0002",
    "\u0002\u0002\u0989\u098a\u0007?\u0002\u0002\u098a\u098b\u0007a\u0002",
    "\u0002\u098b\u098c\u0005\u0190\u00c9\u0002\u098c\u098d\u0007b\u0002",
    "\u0002\u098d\u098f\u0007\u000f\u0002\u0002\u098e\u0990\u0007\u007f\u0002",
    "\u0002\u098f\u098e\u0003\u0002\u0002\u0002\u098f\u0990\u0003\u0002\u0002",
    "\u0002\u0990\u0991\u0003\u0002\u0002\u0002\u0991\u0992\u0007`\u0002",
    "\u0002\u0992\u0993\u0005\u0006\u0004\u0002\u0993\u0995\u0003\u0002\u0002",
    "\u0002\u0994\u0964\u0003\u0002\u0002\u0002\u0994\u096b\u0003\u0002\u0002",
    "\u0002\u0994\u0971\u0003\u0002\u0002\u0002\u0994\u0978\u0003\u0002\u0002",
    "\u0002\u0994\u097e\u0003\u0002\u0002\u0002\u0994\u0989\u0003\u0002\u0002",
    "\u0002\u0995\u0195\u0003\u0002\u0002\u0002\u0996\u0997\u0005\u019a\u00ce",
    "\u0002\u0997\u0999\u0007a\u0002\u0002\u0998\u099a\u0005\u019c\u00cf",
    "\u0002\u0999\u0998\u0003\u0002\u0002\u0002\u0999\u099a\u0003\u0002\u0002",
    "\u0002\u099a\u099b\u0003\u0002\u0002\u0002\u099b\u099c\u0007b\u0002",
    "\u0002\u099c\u0197\u0003\u0002\u0002\u0002\u099d\u09ad\u0005\u0196\u00cc",
    "\u0002\u099e\u099f\u0005\u018a\u00c6\u0002\u099f\u09a1\u0007a\u0002",
    "\u0002\u09a0\u09a2\u0005\u019c\u00cf\u0002\u09a1\u09a0\u0003\u0002\u0002",
    "\u0002\u09a1\u09a2\u0003\u0002\u0002\u0002\u09a2\u09a3\u0003\u0002\u0002",
    "\u0002\u09a3\u09a4\u0007b\u0002\u0002\u09a4\u09ad\u0003\u0002\u0002",
    "\u0002\u09a5\u09a6\u0005\u018c\u00c7\u0002\u09a6\u09a8\u0007a\u0002",
    "\u0002\u09a7\u09a9\u0005\u019c\u00cf\u0002\u09a8\u09a7\u0003\u0002\u0002",
    "\u0002\u09a8\u09a9\u0003\u0002\u0002\u0002\u09a9\u09aa\u0003\u0002\u0002",
    "\u0002\u09aa\u09ab\u0007b\u0002\u0002\u09ab\u09ad\u0003\u0002\u0002",
    "\u0002\u09ac\u099d\u0003\u0002\u0002\u0002\u09ac\u099e\u0003\u0002\u0002",
    "\u0002\u09ac\u09a5\u0003\u0002\u0002\u0002\u09ad\u0199\u0003\u0002\u0002",
    "\u0002\u09ae\u09af\u0007\u007f\u0002\u0002\u09af\u019b\u0003\u0002\u0002",
    "\u0002\u09b0\u09b1\b\u00cf\u0001\u0002\u09b1\u09b3\u0005\u019e\u00d0",
    "\u0002\u09b2\u09b4\u0007~\u0002\u0002\u09b3\u09b2\u0003\u0002\u0002",
    "\u0002\u09b3\u09b4\u0003\u0002\u0002\u0002\u09b4\u09bd\u0003\u0002\u0002",
    "\u0002\u09b5\u09b6\f\u0003\u0002\u0002\u09b6\u09b7\u0007u\u0002\u0002",
    "\u09b7\u09b9\u0005\u019e\u00d0\u0002\u09b8\u09ba\u0007~\u0002\u0002",
    "\u09b9\u09b8\u0003\u0002\u0002\u0002\u09b9\u09ba\u0003\u0002\u0002\u0002",
    "\u09ba\u09bc\u0003\u0002\u0002\u0002\u09bb\u09b5\u0003\u0002\u0002\u0002",
    "\u09bc\u09bf\u0003\u0002\u0002\u0002\u09bd\u09bb\u0003\u0002\u0002\u0002",
    "\u09bd\u09be\u0003\u0002\u0002\u0002\u09be\u019d\u0003\u0002\u0002\u0002",
    "\u09bf\u09bd\u0003\u0002\u0002\u0002\u09c0\u09c4\u0005d3\u0002\u09c1",
    "\u09c4\u0005\u012c\u0097\u0002\u09c2\u09c4\u0005\u0006\u0004\u0002\u09c3",
    "\u09c0\u0003\u0002\u0002\u0002\u09c3\u09c1\u0003\u0002\u0002\u0002\u09c3",
    "\u09c2\u0003\u0002\u0002\u0002\u09c4\u019f\u0003\u0002\u0002\u0002\u09c5",
    "\u09c6\u0007G\u0002\u0002\u09c6\u09c7\u0005\u000e\b\u0002\u09c7\u09c8",
    "\u0007\u007f\u0002\u0002\u09c8\u09d1\u0003\u0002\u0002\u0002\u09c9\u09ca",
    "\u0007G\u0002\u0002\u09ca\u09cc\u0005\u000e\b\u0002\u09cb\u09cd\u0007",
    "?\u0002\u0002\u09cc\u09cb\u0003\u0002\u0002\u0002\u09cc\u09cd\u0003",
    "\u0002\u0002\u0002\u09cd\u09ce\u0003\u0002\u0002\u0002\u09ce\u09cf\u0005",
    "\u0196\u00cc\u0002\u09cf\u09d1\u0003\u0002\u0002\u0002\u09d0\u09c5\u0003",
    "\u0002\u0002\u0002\u09d0\u09c9\u0003\u0002\u0002\u0002\u09d1\u01a1\u0003",
    "\u0002\u0002\u0002\u09d2\u09d4\u0007\u001f\u0002\u0002\u09d3\u09d2\u0003",
    "\u0002\u0002\u0002\u09d3\u09d4\u0003\u0002\u0002\u0002\u09d4\u09d5\u0003",
    "\u0002\u0002\u0002\u09d5\u09d6\u0007?\u0002\u0002\u09d6\u09d7\u0005",
    "\u0096L\u0002\u09d7\u01a3\u0003\u0002\u0002\u0002\u09d8\u09d9\u0007",
    "?\u0002\u0002\u09d9\u09da\u0007a\u0002\u0002\u09da\u09db\u0007b\u0002",
    "\u0002\u09db\u09dc\u0005\u0096L\u0002\u09dc\u01a5\u0003\u0002\u0002",
    "\u0002\u09dd\u09de\u0007D\u0002\u0002\u09de\u09df\u0005l7\u0002\u09df",
    "\u09e0\u0005\u01aa\u00d6\u0002\u09e0\u01a7\u0003\u0002\u0002\u0002\u09e1",
    "\u09e3\u0007D\u0002\u0002\u09e2\u09e4\u0005\u0182\u00c2\u0002\u09e3",
    "\u09e2\u0003\u0002\u0002\u0002\u09e3\u09e4\u0003\u0002\u0002\u0002\u09e4",
    "\u09e5\u0003\u0002\u0002\u0002\u09e5\u09e6\u0005l7\u0002\u09e6\u09e7",
    "\u0005\u01aa\u00d6\u0002\u09e7\u01a9\u0003\u0002\u0002\u0002\u09e8\u09ea",
    "\u0005\u01ac\u00d7\u0002\u09e9\u09eb\u0005\u01aa\u00d6\u0002\u09ea\u09e9",
    "\u0003\u0002\u0002\u0002\u09ea\u09eb\u0003\u0002\u0002\u0002\u09eb\u01ab",
    "\u0003\u0002\u0002\u0002\u09ec\u09ed\u0007\u000b\u0002\u0002\u09ed\u09ee",
    "\u0007P\u0002\u0002\u09ee\u09ef\u0005\u01ae\u00d8\u0002\u09ef\u09f0",
    "\u0007Q\u0002\u0002\u09f0\u09f1\u0005l7\u0002\u09f1\u01ad\u0003\u0002",
    "\u0002\u0002\u09f2\u09f4\u0005\u00fe\u0080\u0002\u09f3\u09f2\u0003\u0002",
    "\u0002\u0002\u09f3\u09f4\u0003\u0002\u0002\u0002\u09f4\u09f5\u0003\u0002",
    "\u0002\u0002\u09f5\u09f6\u0005\u00c2b\u0002\u09f6\u09f7\u0005\u0118",
    "\u008d\u0002\u09f7\u0a01\u0003\u0002\u0002\u0002\u09f8\u09fa\u0005\u00fe",
    "\u0080\u0002\u09f9\u09f8\u0003\u0002\u0002\u0002\u09f9\u09fa\u0003\u0002",
    "\u0002\u0002\u09fa\u09fb\u0003\u0002\u0002\u0002\u09fb\u09fd\u0005\u00c2",
    "b\u0002\u09fc\u09fe\u0005\u012e\u0098\u0002\u09fd\u09fc\u0003\u0002",
    "\u0002\u0002\u09fd\u09fe\u0003\u0002\u0002\u0002\u09fe\u0a01\u0003\u0002",
    "\u0002\u0002\u09ff\u0a01\u0007~\u0002\u0002\u0a00\u09f3\u0003\u0002",
    "\u0002\u0002\u0a00\u09f9\u0003\u0002\u0002\u0002\u0a00\u09ff\u0003\u0002",
    "\u0002\u0002\u0a01\u01af\u0003\u0002\u0002\u0002\u0a02\u0a04\u0007B",
    "\u0002\u0002\u0a03\u0a05\u0005^0\u0002\u0a04\u0a03\u0003\u0002\u0002",
    "\u0002\u0a04\u0a05\u0003\u0002\u0002\u0002\u0a05\u01b1\u0003\u0002\u0002",
    "\u0002\u0a06\u0a09\u0005\u01b4\u00db\u0002\u0a07\u0a09\u0005\u01b8\u00dd",
    "\u0002\u0a08\u0a06\u0003\u0002\u0002\u0002\u0a08\u0a07\u0003\u0002\u0002",
    "\u0002\u0a09\u01b3\u0003\u0002\u0002\u0002\u0a0a\u0a0b\u0007B\u0002",
    "\u0002\u0a0b\u0a0d\u0007P\u0002\u0002\u0a0c\u0a0e\u0005\u01b6\u00dc",
    "\u0002\u0a0d\u0a0c\u0003\u0002\u0002\u0002\u0a0d\u0a0e\u0003\u0002\u0002",
    "\u0002\u0a0e\u0a0f\u0003\u0002\u0002\u0002\u0a0f\u0a10\u0007Q\u0002",
    "\u0002\u0a10\u01b5\u0003\u0002\u0002\u0002\u0a11\u0a12\b\u00dc\u0001",
    "\u0002\u0a12\u0a14\u0005\u012c\u0097\u0002\u0a13\u0a15\u0007~\u0002",
    "\u0002\u0a14\u0a13\u0003\u0002\u0002\u0002\u0a14\u0a15\u0003\u0002\u0002",
    "\u0002\u0a15\u0a1e\u0003\u0002\u0002\u0002\u0a16\u0a17\f\u0003\u0002",
    "\u0002\u0a17\u0a18\u0007u\u0002\u0002\u0a18\u0a1a\u0005\u012c\u0097",
    "\u0002\u0a19\u0a1b\u0007~\u0002\u0002\u0a1a\u0a19\u0003\u0002\u0002",
    "\u0002\u0a1a\u0a1b\u0003\u0002\u0002\u0002\u0a1b\u0a1d\u0003\u0002\u0002",
    "\u0002\u0a1c\u0a16\u0003\u0002\u0002\u0002\u0a1d\u0a20\u0003\u0002\u0002",
    "\u0002\u0a1e\u0a1c\u0003\u0002\u0002\u0002\u0a1e\u0a1f\u0003\u0002\u0002",
    "\u0002\u0a1f\u01b7\u0003\u0002\u0002\u0002\u0a20\u0a1e\u0003\u0002\u0002",
    "\u0002\u0a21\u0a22\u0007-\u0002\u0002\u0a22\u0a23\u0007P\u0002\u0002",
    "\u0a23\u0a24\u0005d3\u0002\u0a24\u0a25\u0007Q\u0002\u0002\u0a25\u0a28",
    "\u0003\u0002\u0002\u0002\u0a26\u0a28\u0007-\u0002\u0002\u0a27\u0a21",
    "\u0003\u0002\u0002\u0002\u0a27\u0a26\u0003\u0002\u0002\u0002\u0a28\u01b9",
    "\u0003\u0002\u0002\u0002\u0a29\u0a2a\u0007b\u0002\u0002\u0a2a\u0a2b",
    "\u0007b\u0002\u0002\u0a2b\u01bb\u0003\u0002\u0002\u0002\u0a2c\u0a2d",
    "\u0007b\u0002\u0002\u0a2d\u0a2e\u0007b\u0002\u0002\u0a2e\u0a2f\u0007",
    "`\u0002\u0002\u0a2f\u01bd\u0003\u0002\u0002\u0002\u0a30\u0a61\u0007",
    ",\u0002\u0002\u0a31\u0a61\u0007\u0016\u0002\u0002\u0a32\u0a33\u0007",
    ",\u0002\u0002\u0a33\u0a34\u0007R\u0002\u0002\u0a34\u0a61\u0007S\u0002",
    "\u0002\u0a35\u0a36\u0007\u0016\u0002\u0002\u0a36\u0a37\u0007R\u0002",
    "\u0002\u0a37\u0a61\u0007S\u0002\u0002\u0a38\u0a61\u0007V\u0002\u0002",
    "\u0a39\u0a61\u0007W\u0002\u0002\u0a3a\u0a61\u0007X\u0002\u0002\u0a3b",
    "\u0a61\u0007Y\u0002\u0002\u0a3c\u0a61\u0007Z\u0002\u0002\u0a3d\u0a61",
    "\u0007[\u0002\u0002\u0a3e\u0a61\u0007\\\u0002\u0002\u0a3f\u0a61\u0007",
    "]\u0002\u0002\u0a40\u0a61\u0007^\u0002\u0002\u0a41\u0a61\u0007_\u0002",
    "\u0002\u0a42\u0a61\u0007`\u0002\u0002\u0a43\u0a61\u0007a\u0002\u0002",
    "\u0a44\u0a61\u0007b\u0002\u0002\u0a45\u0a61\u0007c\u0002\u0002\u0a46",
    "\u0a61\u0007d\u0002\u0002\u0a47\u0a61\u0007e\u0002\u0002\u0a48\u0a61",
    "\u0007f\u0002\u0002\u0a49\u0a61\u0007g\u0002\u0002\u0a4a\u0a61\u0007",
    "h\u0002\u0002\u0a4b\u0a61\u0007i\u0002\u0002\u0a4c\u0a61\u0007j\u0002",
    "\u0002\u0a4d\u0a61\u0007k\u0002\u0002\u0a4e\u0a61\u0005\u01ba\u00de",
    "\u0002\u0a4f\u0a61\u0005\u01bc\u00df\u0002\u0a50\u0a61\u0007l\u0002",
    "\u0002\u0a51\u0a61\u0007m\u0002\u0002\u0a52\u0a61\u0007n\u0002\u0002",
    "\u0a53\u0a61\u0007o\u0002\u0002\u0a54\u0a61\u0007p\u0002\u0002\u0a55",
    "\u0a61\u0007q\u0002\u0002\u0a56\u0a61\u0007r\u0002\u0002\u0a57\u0a61",
    "\u0007s\u0002\u0002\u0a58\u0a61\u0007t\u0002\u0002\u0a59\u0a61\u0007",
    "u\u0002\u0002\u0a5a\u0a61\u0007v\u0002\u0002\u0a5b\u0a61\u0007w\u0002",
    "\u0002\u0a5c\u0a5d\u0007P\u0002\u0002\u0a5d\u0a61\u0007Q\u0002\u0002",
    "\u0a5e\u0a5f\u0007R\u0002\u0002\u0a5f\u0a61\u0007S\u0002\u0002\u0a60",
    "\u0a30\u0003\u0002\u0002\u0002\u0a60\u0a31\u0003\u0002\u0002\u0002\u0a60",
    "\u0a32\u0003\u0002\u0002\u0002\u0a60\u0a35\u0003\u0002\u0002\u0002\u0a60",
    "\u0a38\u0003\u0002\u0002\u0002\u0a60\u0a39\u0003\u0002\u0002\u0002\u0a60",
    "\u0a3a\u0003\u0002\u0002\u0002\u0a60\u0a3b\u0003\u0002\u0002\u0002\u0a60",
    "\u0a3c\u0003\u0002\u0002\u0002\u0a60\u0a3d\u0003\u0002\u0002\u0002\u0a60",
    "\u0a3e\u0003\u0002\u0002\u0002\u0a60\u0a3f\u0003\u0002\u0002\u0002\u0a60",
    "\u0a40\u0003\u0002\u0002\u0002\u0a60\u0a41\u0003\u0002\u0002\u0002\u0a60",
    "\u0a42\u0003\u0002\u0002\u0002\u0a60\u0a43\u0003\u0002\u0002\u0002\u0a60",
    "\u0a44\u0003\u0002\u0002\u0002\u0a60\u0a45\u0003\u0002\u0002\u0002\u0a60",
    "\u0a46\u0003\u0002\u0002\u0002\u0a60\u0a47\u0003\u0002\u0002\u0002\u0a60",
    "\u0a48\u0003\u0002\u0002\u0002\u0a60\u0a49\u0003\u0002\u0002\u0002\u0a60",
    "\u0a4a\u0003\u0002\u0002\u0002\u0a60\u0a4b\u0003\u0002\u0002\u0002\u0a60",
    "\u0a4c\u0003\u0002\u0002\u0002\u0a60\u0a4d\u0003\u0002\u0002\u0002\u0a60",
    "\u0a4e\u0003\u0002\u0002\u0002\u0a60\u0a4f\u0003\u0002\u0002\u0002\u0a60",
    "\u0a50\u0003\u0002\u0002\u0002\u0a60\u0a51\u0003\u0002\u0002\u0002\u0a60",
    "\u0a52\u0003\u0002\u0002\u0002\u0a60\u0a53\u0003\u0002\u0002\u0002\u0a60",
    "\u0a54\u0003\u0002\u0002\u0002\u0a60\u0a55\u0003\u0002\u0002\u0002\u0a60",
    "\u0a56\u0003\u0002\u0002\u0002\u0a60\u0a57\u0003\u0002\u0002\u0002\u0a60",
    "\u0a58\u0003\u0002\u0002\u0002\u0a60\u0a59\u0003\u0002\u0002\u0002\u0a60",
    "\u0a5a\u0003\u0002\u0002\u0002\u0a60\u0a5b\u0003\u0002\u0002\u0002\u0a60",
    "\u0a5c\u0003\u0002\u0002\u0002\u0a60\u0a5e\u0003\u0002\u0002\u0002\u0a61",
    "\u01bf\u0003\u0002\u0002\u0002\u0a62\u0a6a\u0005\u01c2\u00e2\u0002\u0a63",
    "\u0a6a\u0005\u01c4\u00e3\u0002\u0a64\u0a6a\u0005\u01c6\u00e4\u0002\u0a65",
    "\u0a6a\u0005\u01c8\u00e5\u0002\u0a66\u0a6a\u0005\u01ca\u00e6\u0002\u0a67",
    "\u0a6a\u0005\u01cc\u00e7\u0002\u0a68\u0a6a\u0005\u01ce\u00e8\u0002\u0a69",
    "\u0a62\u0003\u0002\u0002\u0002\u0a69\u0a63\u0003\u0002\u0002\u0002\u0a69",
    "\u0a64\u0003\u0002\u0002\u0002\u0a69\u0a65\u0003\u0002\u0002\u0002\u0a69",
    "\u0a66\u0003\u0002\u0002\u0002\u0a69\u0a67\u0003\u0002\u0002\u0002\u0a69",
    "\u0a68\u0003\u0002\u0002\u0002\u0a6a\u01c1\u0003\u0002\u0002\u0002\u0a6b",
    "\u0a6c\u0007\u0080\u0002\u0002\u0a6c\u01c3\u0003\u0002\u0002\u0002\u0a6d",
    "\u0a6e\u0007\u0086\u0002\u0002\u0a6e\u01c5\u0003\u0002\u0002\u0002\u0a6f",
    "\u0a70\u0007\u0087\u0002\u0002\u0a70\u01c7\u0003\u0002\u0002\u0002\u0a71",
    "\u0a72\u0007\u0088\u0002\u0002\u0a72\u01c9\u0003\u0002\u0002\u0002\u0a73",
    "\u0a74\u0007\u0089\u0002\u0002\u0a74\u01cb\u0003\u0002\u0002\u0002\u0a75",
    "\u0a76\u0007.\u0002\u0002\u0a76\u01cd\u0003\u0002\u0002\u0002\u0a77",
    "\u0a78\t\u000b\u0002\u0002\u0a78\u01cf\u0003\u0002\u0002\u0002\u0159",
    "\u01d1\u01db\u01df\u01e3\u01ee\u01f2\u0201\u0208\u020d\u020f\u0214\u021a",
    "\u0224\u022b\u0231\u0235\u023a\u0240\u0247\u024d\u0250\u0253\u0256\u025d",
    "\u0267\u026e\u02a2\u02b1\u02b7\u02c4\u02c6\u02cc\u02db\u02e1\u02e7\u0307",
    "\u030e\u0312\u0316\u0319\u031d\u0323\u0325\u032d\u0331\u0334\u033b\u0342",
    "\u0346\u034b\u034f\u0352\u0357\u035d\u036a\u0375\u0377\u0386\u0388\u0394",
    "\u0396\u03a3\u03a5\u03b7\u03b9\u03c5\u03c7\u03d2\u03dd\u03e8\u03f3\u03fe",
    "\u0408\u0410\u041d\u0427\u042e\u0432\u0436\u043a\u043e\u0442\u0446\u044a",
    "\u044e\u0452\u0456\u045c\u045f\u0462\u0468\u0470\u0475\u0478\u047e\u0486",
    "\u0497\u04a1\u04a9\u04af\u04c3\u04c7\u04d7\u04da\u04e1\u04ef\u04f6\u04fa",
    "\u0503\u0507\u0511\u0514\u0518\u051b\u051f\u0522\u0524\u0531\u053a\u053e",
    "\u0543\u054d\u0550\u0554\u055c\u055f\u0564\u056a\u056f\u0574\u057a\u057d",
    "\u0582\u0587\u0598\u059c\u05a1\u05a8\u05ac\u05b1\u05bc\u05c2\u05c6\u05cb",
    "\u05cf\u05d4\u05d7\u05e9\u05f1\u05f7\u0602\u0606\u0609\u0613\u0619\u061c",
    "\u0623\u062d\u0631\u0634\u0637\u063b\u0640\u0642\u0646\u064a\u0653\u0660",
    "\u0668\u066e\u0674\u0678\u067b\u0684\u068d\u0695\u06a0\u06a6\u06b1\u06b4",
    "\u06b9\u06c8\u06ce\u06d7\u06e1\u06e7\u06ef\u06f3\u06f7\u06fc\u0701\u0708",
    "\u070a\u070f\u0713\u0721\u0727\u0736\u073d\u0742\u0749\u074e\u0756\u075c",
    "\u0763\u0767\u0769\u076b\u0772\u0775\u0778\u077b\u0780\u0784\u0787\u078b",
    "\u078f\u0794\u0797\u0799\u079d\u07a4\u07aa\u07ae\u07b4\u07b9\u07bb\u07c1",
    "\u07c5\u07cb\u07d2\u07d6\u07d8\u07da\u07e1\u07eb\u07ef\u07f1\u07f3\u07f7",
    "\u07fa\u0800\u080a\u080e\u0811\u0815\u0818\u081b\u081f\u0824\u082e\u0838",
    "\u083f\u0844\u0848\u084f\u0855\u085b\u085f\u0866\u086c\u086f\u0873\u0876",
    "\u087a\u087d\u087f\u0882\u088c\u0891\u0893\u089c\u08a2\u08a5\u08ab\u08af",
    "\u08b9\u08be\u08c1\u08c6\u08ca\u08cd\u08d0\u08d4\u08dd\u08eb\u08f1\u08f5",
    "\u08f9\u08fd\u0901\u0905\u0909\u090d\u0910\u0914\u091f\u0923\u092a\u092e",
    "\u0933\u0938\u093f\u0943\u094d\u095d\u0962\u0966\u0969\u096d\u0973\u0976",
    "\u097a\u0984\u0987\u098f\u0994\u0999\u09a1\u09a8\u09ac\u09b3\u09b9\u09bd",
    "\u09c3\u09cc\u09d0\u09d3\u09e3\u09ea\u09f3\u09f9\u09fd\u0a00\u0a04\u0a08",
    "\u0a0d\u0a14\u0a1a\u0a1e\u0a27\u0a60\u0a69"].join("");


var atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

var decisionsToDFA = atn.decisionToState.map( function(ds, index) { return new antlr4.dfa.DFA(ds, index); });

var sharedContextCache = new antlr4.PredictionContextCache();

var literalNames = [ null, null, "'alignas'", "'alignof'", "'asm'", "'auto'", 
                     "'bool'", "'break'", "'case'", "'catch'", "'char'", 
                     "'char16_t'", "'char32_t'", "'class'", "'const'", "'constexpr'", 
                     "'const_cast'", "'continue'", "'decltype'", "'default'", 
                     "'delete'", "'do'", "'double'", "'FILE'", "'dynamic_cast'", 
                     "'else'", "'enum'", "'explicit'", "'export'", "'extern'", 
                     "'false'", "'final'", "'float'", "'for'", "'friend'", 
                     "'goto'", "'if'", "'inline'", "'int'", "'long'", "'mutable'", 
                     "'namespace'", "'new'", "'noexcept'", "'nullptr'", 
                     "'operator'", "'override'", "'private'", "'protected'", 
                     "'public'", "'register'", "'reinterpret_cast'", "'return'", 
                     "'short'", "'signed'", "'sizeof'", "'static'", "'static_assert'", 
                     "'static_cast'", "'struct'", "'switch'", "'template'", 
                     "'this'", "'thread_local'", "'throw'", "'true'", "'try'", 
                     "'typedef'", "'typeid'", "'typename'", "'union'", "'unsigned'", 
                     "'using'", "'virtual'", "'void'", "'volatile'", "'wchar_t'", 
                     "'while'", "'('", "')'", "'['", "']'", "'{'", "'}'", 
                     "'+'", "'-'", "'*'", "'/'", "'%'", "'^'", "'&'", "'|'", 
                     "'~'", "'!'", "'='", "'<'", "'>'", "'+='", "'-='", 
                     "'*='", "'/='", "'%='", "'^='", "'&='", "'|='", "'<<'", 
                     "'<<='", "'=='", "'!='", "'<='", "'>='", "'&&'", "'||'", 
                     "'++'", "'--'", "','", "'->*'", "'->'", "'?'", "':'", 
                     "'::'", "';'", "'.'", "'.*'", "'...'" ];

var symbolicNames = [ null, "Directive", "Alignas", "Alignof", "Asm", "Auto", 
                      "Bool", "Break", "Case", "Catch", "Char", "Char16", 
                      "Char32", "Class", "Const", "Constexpr", "Const_cast", 
                      "Continue", "Decltype", "Default", "Delete", "Do", 
                      "Double", "File", "Dynamic_cast", "Else", "Enum", 
                      "Explicit", "Export", "Extern", "False", "Final", 
                      "Float", "For", "Friend", "Goto", "If", "Inline", 
                      "Int", "Long", "Mutable", "Namespace", "New", "Noexcept", 
                      "Nullptr", "Operator", "Override", "Private", "Protected", 
                      "Public", "Register", "Reinterpret_cast", "Return", 
                      "Short", "Signed", "Sizeof", "Static", "Static_assert", 
                      "Static_cast", "Struct", "Switch", "Template", "This", 
                      "Thread_local", "Throw", "True", "Try", "Typedef", 
                      "Typeid", "Typename", "Union", "Unsigned", "Using", 
                      "Virtual", "Void", "Volatile", "Wchar", "While", "LeftParen", 
                      "RightParen", "LeftBracket", "RightBracket", "LeftBrace", 
                      "RightBrace", "Plus", "Minus", "Star", "Div", "Mod", 
                      "Caret", "And", "Or", "Tilde", "Not", "Assign", "Less", 
                      "Greater", "PlusAssign", "MinusAssign", "StarAssign", 
                      "DivAssign", "ModAssign", "XorAssign", "AndAssign", 
                      "OrAssign", "LeftShift", "LeftShiftAssign", "Equal", 
                      "NotEqual", "LessEqual", "GreaterEqual", "AndAnd", 
                      "OrOr", "PlusPlus", "MinusMinus", "Comma", "ArrowStar", 
                      "Arrow", "Question", "Colon", "Doublecolon", "Semi", 
                      "Dot", "DotStar", "Ellipsis", "Identifier", "Integerliteral", 
                      "Decimalliteral", "Octalliteral", "Hexadecimalliteral", 
                      "Binaryliteral", "Integersuffix", "Characterliteral", 
                      "Floatingliteral", "Stringliteral", "Booleanliteral", 
                      "Userdefinedintegerliteral", "Userdefinedfloatingliteral", 
                      "Userdefinedstringliteral", "Userdefinedcharacterliteral", 
                      "Whitespace", "Newline", "BlockComment", "LineComment" ];

var ruleNames =  [ "translationunit", "primaryexpression", "idexpression", 
                   "identexpression", "unqualifiedid", "qualifiedid", "nestednamespecifier", 
                   "lambdaexpression", "lambdaintroducer", "lambdacapture", 
                   "capturedefault", "capturelist", "capture", "simplecapture", 
                   "initcapture", "lambdadeclarator", "idexpressionlapper", 
                   "functioncallexpression", "postfixexpression", "expressionlist", 
                   "pseudodestructorname", "binaryexpression", "unaryexpression", 
                   "typeidlapper", "unaryoperator", "newexpression", "newplacement", 
                   "newtypeid", "newdeclarator", "noptrnewdeclarator", "newinitializer", 
                   "deleteexpression", "noexceptexpression", "castexpression", 
                   "pmexpression", "multiplicativeexpression", "additiveexpression", 
                   "shiftexpression", "relationalexpression", "equalityexpression", 
                   "andexpression", "exclusiveorexpression", "inclusiveorexpression", 
                   "logicalandexpression", "logicalorexpression", "conditionalexpression", 
                   "assignmentexpression", "assignmentoperator", "expression", 
                   "constantexpression", "statement", "labeledstatement", 
                   "expressionstatement", "compoundstatement", "statementseq", 
                   "selectionstatement", "switchstatement", "condition", 
                   "whilestatement", "dowhilestatement", "iterationstatement", 
                   "enhancedForStatement", "forinitstatement", "forrangedeclaration", 
                   "forrangeinitializer", "jumpstatement", "breakStatement", 
                   "continueStatement", "returnStatement", "declarationstatement", 
                   "declarationseq", "myclassbody", "myclassspecifier", 
                   "myclasshead", "declaration", "blockdeclarationwithoutsimpledeclaration", 
                   "blockdeclaration", "aliasdeclaration", "variabledeclarationstatement", 
                   "variabledeclaration", "variableDeclaratorList", "variableDeclarator", 
                   "dims", "simpledeclaration", "static_assertdeclaration", 
                   "emptydeclaration", "attributedeclaration", "declspecifier", 
                   "declspecifierseq", "declspecifierwithouttype", "declspecifierseqwithouttype", 
                   "storageclassspecifier", "functionspecifier", "typedefname", 
                   "typespecifier", "trailingtypespecifier", "typespecifierseq", 
                   "trailingtypespecifierseq", "simpletypespecifier", "typename", 
                   "decltypespecifier", "elaboratedtypespecifier", "enumname", 
                   "enumspecifier", "enumhead", "opaqueenumdeclaration", 
                   "enumkey", "enumbase", "enumeratorlist", "enumeratordefinition", 
                   "enumerator", "namespacename", "originalnamespacename", 
                   "namespacedefinition", "namednamespacedefinition", "originalnamespacedefinition", 
                   "extensionnamespacedefinition", "unnamednamespacedefinition", 
                   "namespacebody", "namespacealias", "namespacealiasdefinition", 
                   "qualifiednamespacespecifier", "usingdeclaration", "usingdirective", 
                   "asmdefinition", "linkagespecification", "attributespecifierseq", 
                   "attributespecifier", "alignmentspecifier", "attributelist", 
                   "attribute", "attributetoken", "attributescopedtoken", 
                   "attributenamespace", "attributeargumentclause", "balancedtokenseq", 
                   "balancedtoken", "initdeclaratorlist", "initdeclarator", 
                   "declarator", "ptrdeclarator", "noptrdeclarator", "parametersandqualifiers", 
                   "trailingreturntype", "ptroperator", "cvqualifierseq", 
                   "cvqualifier", "refqualifier", "declaratorid", "typeid", 
                   "abstractdeclarator", "ptrabstractdeclarator", "noptrabstractdeclarator", 
                   "abstractpackdeclarator", "noptrabstractpackdeclarator", 
                   "parameterdeclarationclause", "parameterdeclarationlist", 
                   "parameterdeclaration", "functiondefinition", "functionheader", 
                   "functiondeclarator", "functionbody", "initializer", 
                   "braceorequalinitializer", "initializerclause", "initializerlist", 
                   "bracedinitlist", "myclassname", "classspecifier", "classbody", 
                   "classhead", "classheadname", "classvirtspecifier", "classkey", 
                   "memberspecification", "memberdeclaration", "membervariabledeclarationstatement", 
                   "membervariabledeclaration", "memberdeclaratorlist", 
                   "memberdeclarator", "virtspecifierseq", "virtspecifier", 
                   "purespecifier", "baseclause", "basespecifierlist", "basespecifier", 
                   "classordecltype", "basetypespecifier", "accessspecifier", 
                   "conversionfunctionid", "conversiontypeid", "conversiondeclarator", 
                   "ctorinitializer", "meminitializerlist", "meminitializer", 
                   "meminitializerid", "operatorfunctionid", "literaloperatorid", 
                   "templatedeclaration", "templateparameterlist", "templateparameter", 
                   "typeparameter", "simpletemplateid", "templateid", "templatename", 
                   "templateargumentlist", "templateargument", "typenamespecifier", 
                   "explicitinstantiation", "explicitspecialization", "tryblock", 
                   "functiontryblock", "handlerseq", "handler", "exceptiondeclaration", 
                   "throwexpression", "exceptionspecification", "dynamicexceptionspecification", 
                   "typeidlist", "noexceptspecification", "rightShift", 
                   "rightShiftAssign", "operator", "literal", "integerliteral", 
                   "characterliteral", "floatingliteral", "stringliteral", 
                   "booleanliteral", "pointerliteral", "userdefinedliteral" ];

function CPP14Parser (input) {
	antlr4.Parser.call(this, input);
    this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
    this.ruleNames = ruleNames;
    this.literalNames = literalNames;
    this.symbolicNames = symbolicNames;
    return this;
}

CPP14Parser.prototype = Object.create(antlr4.Parser.prototype);
CPP14Parser.prototype.constructor = CPP14Parser;

Object.defineProperty(CPP14Parser.prototype, "atn", {
	get : function() {
		return atn;
	}
});

CPP14Parser.EOF = antlr4.Token.EOF;
CPP14Parser.Directive = 1;
CPP14Parser.Alignas = 2;
CPP14Parser.Alignof = 3;
CPP14Parser.Asm = 4;
CPP14Parser.Auto = 5;
CPP14Parser.Bool = 6;
CPP14Parser.Break = 7;
CPP14Parser.Case = 8;
CPP14Parser.Catch = 9;
CPP14Parser.Char = 10;
CPP14Parser.Char16 = 11;
CPP14Parser.Char32 = 12;
CPP14Parser.Class = 13;
CPP14Parser.Const = 14;
CPP14Parser.Constexpr = 15;
CPP14Parser.Const_cast = 16;
CPP14Parser.Continue = 17;
CPP14Parser.Decltype = 18;
CPP14Parser.Default = 19;
CPP14Parser.Delete = 20;
CPP14Parser.Do = 21;
CPP14Parser.Double = 22;
CPP14Parser.File = 23;
CPP14Parser.Dynamic_cast = 24;
CPP14Parser.Else = 25;
CPP14Parser.Enum = 26;
CPP14Parser.Explicit = 27;
CPP14Parser.Export = 28;
CPP14Parser.Extern = 29;
CPP14Parser.False = 30;
CPP14Parser.Final = 31;
CPP14Parser.Float = 32;
CPP14Parser.For = 33;
CPP14Parser.Friend = 34;
CPP14Parser.Goto = 35;
CPP14Parser.If = 36;
CPP14Parser.Inline = 37;
CPP14Parser.Int = 38;
CPP14Parser.Long = 39;
CPP14Parser.Mutable = 40;
CPP14Parser.Namespace = 41;
CPP14Parser.New = 42;
CPP14Parser.Noexcept = 43;
CPP14Parser.Nullptr = 44;
CPP14Parser.Operator = 45;
CPP14Parser.Override = 46;
CPP14Parser.Private = 47;
CPP14Parser.Protected = 48;
CPP14Parser.Public = 49;
CPP14Parser.Register = 50;
CPP14Parser.Reinterpret_cast = 51;
CPP14Parser.Return = 52;
CPP14Parser.Short = 53;
CPP14Parser.Signed = 54;
CPP14Parser.Sizeof = 55;
CPP14Parser.Static = 56;
CPP14Parser.Static_assert = 57;
CPP14Parser.Static_cast = 58;
CPP14Parser.Struct = 59;
CPP14Parser.Switch = 60;
CPP14Parser.Template = 61;
CPP14Parser.This = 62;
CPP14Parser.Thread_local = 63;
CPP14Parser.Throw = 64;
CPP14Parser.True = 65;
CPP14Parser.Try = 66;
CPP14Parser.Typedef = 67;
CPP14Parser.Typeid = 68;
CPP14Parser.Typename = 69;
CPP14Parser.Union = 70;
CPP14Parser.Unsigned = 71;
CPP14Parser.Using = 72;
CPP14Parser.Virtual = 73;
CPP14Parser.Void = 74;
CPP14Parser.Volatile = 75;
CPP14Parser.Wchar = 76;
CPP14Parser.While = 77;
CPP14Parser.LeftParen = 78;
CPP14Parser.RightParen = 79;
CPP14Parser.LeftBracket = 80;
CPP14Parser.RightBracket = 81;
CPP14Parser.LeftBrace = 82;
CPP14Parser.RightBrace = 83;
CPP14Parser.Plus = 84;
CPP14Parser.Minus = 85;
CPP14Parser.Star = 86;
CPP14Parser.Div = 87;
CPP14Parser.Mod = 88;
CPP14Parser.Caret = 89;
CPP14Parser.And = 90;
CPP14Parser.Or = 91;
CPP14Parser.Tilde = 92;
CPP14Parser.Not = 93;
CPP14Parser.Assign = 94;
CPP14Parser.Less = 95;
CPP14Parser.Greater = 96;
CPP14Parser.PlusAssign = 97;
CPP14Parser.MinusAssign = 98;
CPP14Parser.StarAssign = 99;
CPP14Parser.DivAssign = 100;
CPP14Parser.ModAssign = 101;
CPP14Parser.XorAssign = 102;
CPP14Parser.AndAssign = 103;
CPP14Parser.OrAssign = 104;
CPP14Parser.LeftShift = 105;
CPP14Parser.LeftShiftAssign = 106;
CPP14Parser.Equal = 107;
CPP14Parser.NotEqual = 108;
CPP14Parser.LessEqual = 109;
CPP14Parser.GreaterEqual = 110;
CPP14Parser.AndAnd = 111;
CPP14Parser.OrOr = 112;
CPP14Parser.PlusPlus = 113;
CPP14Parser.MinusMinus = 114;
CPP14Parser.Comma = 115;
CPP14Parser.ArrowStar = 116;
CPP14Parser.Arrow = 117;
CPP14Parser.Question = 118;
CPP14Parser.Colon = 119;
CPP14Parser.Doublecolon = 120;
CPP14Parser.Semi = 121;
CPP14Parser.Dot = 122;
CPP14Parser.DotStar = 123;
CPP14Parser.Ellipsis = 124;
CPP14Parser.Identifier = 125;
CPP14Parser.Integerliteral = 126;
CPP14Parser.Decimalliteral = 127;
CPP14Parser.Octalliteral = 128;
CPP14Parser.Hexadecimalliteral = 129;
CPP14Parser.Binaryliteral = 130;
CPP14Parser.Integersuffix = 131;
CPP14Parser.Characterliteral = 132;
CPP14Parser.Floatingliteral = 133;
CPP14Parser.Stringliteral = 134;
CPP14Parser.Booleanliteral = 135;
CPP14Parser.Userdefinedintegerliteral = 136;
CPP14Parser.Userdefinedfloatingliteral = 137;
CPP14Parser.Userdefinedstringliteral = 138;
CPP14Parser.Userdefinedcharacterliteral = 139;
CPP14Parser.Whitespace = 140;
CPP14Parser.Newline = 141;
CPP14Parser.BlockComment = 142;
CPP14Parser.LineComment = 143;

CPP14Parser.RULE_translationunit = 0;
CPP14Parser.RULE_primaryexpression = 1;
CPP14Parser.RULE_idexpression = 2;
CPP14Parser.RULE_identexpression = 3;
CPP14Parser.RULE_unqualifiedid = 4;
CPP14Parser.RULE_qualifiedid = 5;
CPP14Parser.RULE_nestednamespecifier = 6;
CPP14Parser.RULE_lambdaexpression = 7;
CPP14Parser.RULE_lambdaintroducer = 8;
CPP14Parser.RULE_lambdacapture = 9;
CPP14Parser.RULE_capturedefault = 10;
CPP14Parser.RULE_capturelist = 11;
CPP14Parser.RULE_capture = 12;
CPP14Parser.RULE_simplecapture = 13;
CPP14Parser.RULE_initcapture = 14;
CPP14Parser.RULE_lambdadeclarator = 15;
CPP14Parser.RULE_idexpressionlapper = 16;
CPP14Parser.RULE_functioncallexpression = 17;
CPP14Parser.RULE_postfixexpression = 18;
CPP14Parser.RULE_expressionlist = 19;
CPP14Parser.RULE_pseudodestructorname = 20;
CPP14Parser.RULE_binaryexpression = 21;
CPP14Parser.RULE_unaryexpression = 22;
CPP14Parser.RULE_typeidlapper = 23;
CPP14Parser.RULE_unaryoperator = 24;
CPP14Parser.RULE_newexpression = 25;
CPP14Parser.RULE_newplacement = 26;
CPP14Parser.RULE_newtypeid = 27;
CPP14Parser.RULE_newdeclarator = 28;
CPP14Parser.RULE_noptrnewdeclarator = 29;
CPP14Parser.RULE_newinitializer = 30;
CPP14Parser.RULE_deleteexpression = 31;
CPP14Parser.RULE_noexceptexpression = 32;
CPP14Parser.RULE_castexpression = 33;
CPP14Parser.RULE_pmexpression = 34;
CPP14Parser.RULE_multiplicativeexpression = 35;
CPP14Parser.RULE_additiveexpression = 36;
CPP14Parser.RULE_shiftexpression = 37;
CPP14Parser.RULE_relationalexpression = 38;
CPP14Parser.RULE_equalityexpression = 39;
CPP14Parser.RULE_andexpression = 40;
CPP14Parser.RULE_exclusiveorexpression = 41;
CPP14Parser.RULE_inclusiveorexpression = 42;
CPP14Parser.RULE_logicalandexpression = 43;
CPP14Parser.RULE_logicalorexpression = 44;
CPP14Parser.RULE_conditionalexpression = 45;
CPP14Parser.RULE_assignmentexpression = 46;
CPP14Parser.RULE_assignmentoperator = 47;
CPP14Parser.RULE_expression = 48;
CPP14Parser.RULE_constantexpression = 49;
CPP14Parser.RULE_statement = 50;
CPP14Parser.RULE_labeledstatement = 51;
CPP14Parser.RULE_expressionstatement = 52;
CPP14Parser.RULE_compoundstatement = 53;
CPP14Parser.RULE_statementseq = 54;
CPP14Parser.RULE_selectionstatement = 55;
CPP14Parser.RULE_switchstatement = 56;
CPP14Parser.RULE_condition = 57;
CPP14Parser.RULE_whilestatement = 58;
CPP14Parser.RULE_dowhilestatement = 59;
CPP14Parser.RULE_iterationstatement = 60;
CPP14Parser.RULE_enhancedForStatement = 61;
CPP14Parser.RULE_forinitstatement = 62;
CPP14Parser.RULE_forrangedeclaration = 63;
CPP14Parser.RULE_forrangeinitializer = 64;
CPP14Parser.RULE_jumpstatement = 65;
CPP14Parser.RULE_breakStatement = 66;
CPP14Parser.RULE_continueStatement = 67;
CPP14Parser.RULE_returnStatement = 68;
CPP14Parser.RULE_declarationstatement = 69;
CPP14Parser.RULE_declarationseq = 70;
CPP14Parser.RULE_myclassbody = 71;
CPP14Parser.RULE_myclassspecifier = 72;
CPP14Parser.RULE_myclasshead = 73;
CPP14Parser.RULE_declaration = 74;
CPP14Parser.RULE_blockdeclarationwithoutsimpledeclaration = 75;
CPP14Parser.RULE_blockdeclaration = 76;
CPP14Parser.RULE_aliasdeclaration = 77;
CPP14Parser.RULE_variabledeclarationstatement = 78;
CPP14Parser.RULE_variabledeclaration = 79;
CPP14Parser.RULE_variableDeclaratorList = 80;
CPP14Parser.RULE_variableDeclarator = 81;
CPP14Parser.RULE_dims = 82;
CPP14Parser.RULE_simpledeclaration = 83;
CPP14Parser.RULE_static_assertdeclaration = 84;
CPP14Parser.RULE_emptydeclaration = 85;
CPP14Parser.RULE_attributedeclaration = 86;
CPP14Parser.RULE_declspecifier = 87;
CPP14Parser.RULE_declspecifierseq = 88;
CPP14Parser.RULE_declspecifierwithouttype = 89;
CPP14Parser.RULE_declspecifierseqwithouttype = 90;
CPP14Parser.RULE_storageclassspecifier = 91;
CPP14Parser.RULE_functionspecifier = 92;
CPP14Parser.RULE_typedefname = 93;
CPP14Parser.RULE_typespecifier = 94;
CPP14Parser.RULE_trailingtypespecifier = 95;
CPP14Parser.RULE_typespecifierseq = 96;
CPP14Parser.RULE_trailingtypespecifierseq = 97;
CPP14Parser.RULE_simpletypespecifier = 98;
CPP14Parser.RULE_typename = 99;
CPP14Parser.RULE_decltypespecifier = 100;
CPP14Parser.RULE_elaboratedtypespecifier = 101;
CPP14Parser.RULE_enumname = 102;
CPP14Parser.RULE_enumspecifier = 103;
CPP14Parser.RULE_enumhead = 104;
CPP14Parser.RULE_opaqueenumdeclaration = 105;
CPP14Parser.RULE_enumkey = 106;
CPP14Parser.RULE_enumbase = 107;
CPP14Parser.RULE_enumeratorlist = 108;
CPP14Parser.RULE_enumeratordefinition = 109;
CPP14Parser.RULE_enumerator = 110;
CPP14Parser.RULE_namespacename = 111;
CPP14Parser.RULE_originalnamespacename = 112;
CPP14Parser.RULE_namespacedefinition = 113;
CPP14Parser.RULE_namednamespacedefinition = 114;
CPP14Parser.RULE_originalnamespacedefinition = 115;
CPP14Parser.RULE_extensionnamespacedefinition = 116;
CPP14Parser.RULE_unnamednamespacedefinition = 117;
CPP14Parser.RULE_namespacebody = 118;
CPP14Parser.RULE_namespacealias = 119;
CPP14Parser.RULE_namespacealiasdefinition = 120;
CPP14Parser.RULE_qualifiednamespacespecifier = 121;
CPP14Parser.RULE_usingdeclaration = 122;
CPP14Parser.RULE_usingdirective = 123;
CPP14Parser.RULE_asmdefinition = 124;
CPP14Parser.RULE_linkagespecification = 125;
CPP14Parser.RULE_attributespecifierseq = 126;
CPP14Parser.RULE_attributespecifier = 127;
CPP14Parser.RULE_alignmentspecifier = 128;
CPP14Parser.RULE_attributelist = 129;
CPP14Parser.RULE_attribute = 130;
CPP14Parser.RULE_attributetoken = 131;
CPP14Parser.RULE_attributescopedtoken = 132;
CPP14Parser.RULE_attributenamespace = 133;
CPP14Parser.RULE_attributeargumentclause = 134;
CPP14Parser.RULE_balancedtokenseq = 135;
CPP14Parser.RULE_balancedtoken = 136;
CPP14Parser.RULE_initdeclaratorlist = 137;
CPP14Parser.RULE_initdeclarator = 138;
CPP14Parser.RULE_declarator = 139;
CPP14Parser.RULE_ptrdeclarator = 140;
CPP14Parser.RULE_noptrdeclarator = 141;
CPP14Parser.RULE_parametersandqualifiers = 142;
CPP14Parser.RULE_trailingreturntype = 143;
CPP14Parser.RULE_ptroperator = 144;
CPP14Parser.RULE_cvqualifierseq = 145;
CPP14Parser.RULE_cvqualifier = 146;
CPP14Parser.RULE_refqualifier = 147;
CPP14Parser.RULE_declaratorid = 148;
CPP14Parser.RULE_typeid = 149;
CPP14Parser.RULE_abstractdeclarator = 150;
CPP14Parser.RULE_ptrabstractdeclarator = 151;
CPP14Parser.RULE_noptrabstractdeclarator = 152;
CPP14Parser.RULE_abstractpackdeclarator = 153;
CPP14Parser.RULE_noptrabstractpackdeclarator = 154;
CPP14Parser.RULE_parameterdeclarationclause = 155;
CPP14Parser.RULE_parameterdeclarationlist = 156;
CPP14Parser.RULE_parameterdeclaration = 157;
CPP14Parser.RULE_functiondefinition = 158;
CPP14Parser.RULE_functionheader = 159;
CPP14Parser.RULE_functiondeclarator = 160;
CPP14Parser.RULE_functionbody = 161;
CPP14Parser.RULE_initializer = 162;
CPP14Parser.RULE_braceorequalinitializer = 163;
CPP14Parser.RULE_initializerclause = 164;
CPP14Parser.RULE_initializerlist = 165;
CPP14Parser.RULE_bracedinitlist = 166;
CPP14Parser.RULE_myclassname = 167;
CPP14Parser.RULE_classspecifier = 168;
CPP14Parser.RULE_classbody = 169;
CPP14Parser.RULE_classhead = 170;
CPP14Parser.RULE_classheadname = 171;
CPP14Parser.RULE_classvirtspecifier = 172;
CPP14Parser.RULE_classkey = 173;
CPP14Parser.RULE_memberspecification = 174;
CPP14Parser.RULE_memberdeclaration = 175;
CPP14Parser.RULE_membervariabledeclarationstatement = 176;
CPP14Parser.RULE_membervariabledeclaration = 177;
CPP14Parser.RULE_memberdeclaratorlist = 178;
CPP14Parser.RULE_memberdeclarator = 179;
CPP14Parser.RULE_virtspecifierseq = 180;
CPP14Parser.RULE_virtspecifier = 181;
CPP14Parser.RULE_purespecifier = 182;
CPP14Parser.RULE_baseclause = 183;
CPP14Parser.RULE_basespecifierlist = 184;
CPP14Parser.RULE_basespecifier = 185;
CPP14Parser.RULE_classordecltype = 186;
CPP14Parser.RULE_basetypespecifier = 187;
CPP14Parser.RULE_accessspecifier = 188;
CPP14Parser.RULE_conversionfunctionid = 189;
CPP14Parser.RULE_conversiontypeid = 190;
CPP14Parser.RULE_conversiondeclarator = 191;
CPP14Parser.RULE_ctorinitializer = 192;
CPP14Parser.RULE_meminitializerlist = 193;
CPP14Parser.RULE_meminitializer = 194;
CPP14Parser.RULE_meminitializerid = 195;
CPP14Parser.RULE_operatorfunctionid = 196;
CPP14Parser.RULE_literaloperatorid = 197;
CPP14Parser.RULE_templatedeclaration = 198;
CPP14Parser.RULE_templateparameterlist = 199;
CPP14Parser.RULE_templateparameter = 200;
CPP14Parser.RULE_typeparameter = 201;
CPP14Parser.RULE_simpletemplateid = 202;
CPP14Parser.RULE_templateid = 203;
CPP14Parser.RULE_templatename = 204;
CPP14Parser.RULE_templateargumentlist = 205;
CPP14Parser.RULE_templateargument = 206;
CPP14Parser.RULE_typenamespecifier = 207;
CPP14Parser.RULE_explicitinstantiation = 208;
CPP14Parser.RULE_explicitspecialization = 209;
CPP14Parser.RULE_tryblock = 210;
CPP14Parser.RULE_functiontryblock = 211;
CPP14Parser.RULE_handlerseq = 212;
CPP14Parser.RULE_handler = 213;
CPP14Parser.RULE_exceptiondeclaration = 214;
CPP14Parser.RULE_throwexpression = 215;
CPP14Parser.RULE_exceptionspecification = 216;
CPP14Parser.RULE_dynamicexceptionspecification = 217;
CPP14Parser.RULE_typeidlist = 218;
CPP14Parser.RULE_noexceptspecification = 219;
CPP14Parser.RULE_rightShift = 220;
CPP14Parser.RULE_rightShiftAssign = 221;
CPP14Parser.RULE_operator = 222;
CPP14Parser.RULE_literal = 223;
CPP14Parser.RULE_integerliteral = 224;
CPP14Parser.RULE_characterliteral = 225;
CPP14Parser.RULE_floatingliteral = 226;
CPP14Parser.RULE_stringliteral = 227;
CPP14Parser.RULE_booleanliteral = 228;
CPP14Parser.RULE_pointerliteral = 229;
CPP14Parser.RULE_userdefinedliteral = 230;

function TranslationunitContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_translationunit;
    return this;
}

TranslationunitContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TranslationunitContext.prototype.constructor = TranslationunitContext;

TranslationunitContext.prototype.declarationseq = function() {
    return this.getTypedRuleContext(DeclarationseqContext,0);
};

TranslationunitContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitTranslationunit(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.TranslationunitContext = TranslationunitContext;

CPP14Parser.prototype.translationunit = function() {

    var localctx = new TranslationunitContext(this, this._ctx, this.state);
    this.enterRule(localctx, 0, CPP14Parser.RULE_translationunit);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 463;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CPP14Parser.Alignas) | (1 << CPP14Parser.Asm) | (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Class) | (1 << CPP14Parser.Const) | (1 << CPP14Parser.Constexpr) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.File) | (1 << CPP14Parser.Enum) | (1 << CPP14Parser.Explicit) | (1 << CPP14Parser.Extern))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (CPP14Parser.Float - 32)) | (1 << (CPP14Parser.Friend - 32)) | (1 << (CPP14Parser.Inline - 32)) | (1 << (CPP14Parser.Int - 32)) | (1 << (CPP14Parser.Long - 32)) | (1 << (CPP14Parser.Mutable - 32)) | (1 << (CPP14Parser.Namespace - 32)) | (1 << (CPP14Parser.Operator - 32)) | (1 << (CPP14Parser.Register - 32)) | (1 << (CPP14Parser.Short - 32)) | (1 << (CPP14Parser.Signed - 32)) | (1 << (CPP14Parser.Static - 32)) | (1 << (CPP14Parser.Static_assert - 32)) | (1 << (CPP14Parser.Struct - 32)) | (1 << (CPP14Parser.Template - 32)) | (1 << (CPP14Parser.Thread_local - 32)))) !== 0) || ((((_la - 67)) & ~0x1f) == 0 && ((1 << (_la - 67)) & ((1 << (CPP14Parser.Typedef - 67)) | (1 << (CPP14Parser.Typename - 67)) | (1 << (CPP14Parser.Union - 67)) | (1 << (CPP14Parser.Unsigned - 67)) | (1 << (CPP14Parser.Using - 67)) | (1 << (CPP14Parser.Virtual - 67)) | (1 << (CPP14Parser.Void - 67)) | (1 << (CPP14Parser.Volatile - 67)) | (1 << (CPP14Parser.Wchar - 67)) | (1 << (CPP14Parser.LeftParen - 67)) | (1 << (CPP14Parser.LeftBracket - 67)) | (1 << (CPP14Parser.Star - 67)) | (1 << (CPP14Parser.And - 67)) | (1 << (CPP14Parser.Tilde - 67)))) !== 0) || ((((_la - 111)) & ~0x1f) == 0 && ((1 << (_la - 111)) & ((1 << (CPP14Parser.AndAnd - 111)) | (1 << (CPP14Parser.Doublecolon - 111)) | (1 << (CPP14Parser.Semi - 111)) | (1 << (CPP14Parser.Ellipsis - 111)) | (1 << (CPP14Parser.Identifier - 111)))) !== 0)) {
            this.state = 462;
            this.declarationseq(0);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PrimaryexpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_primaryexpression;
    return this;
}

PrimaryexpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PrimaryexpressionContext.prototype.constructor = PrimaryexpressionContext;

PrimaryexpressionContext.prototype.literal = function() {
    return this.getTypedRuleContext(LiteralContext,0);
};

PrimaryexpressionContext.prototype.This = function() {
    return this.getToken(CPP14Parser.This, 0);
};

PrimaryexpressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

PrimaryexpressionContext.prototype.identexpression = function() {
    return this.getTypedRuleContext(IdentexpressionContext,0);
};

PrimaryexpressionContext.prototype.lambdaexpression = function() {
    return this.getTypedRuleContext(LambdaexpressionContext,0);
};

PrimaryexpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitPrimaryexpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.PrimaryexpressionContext = PrimaryexpressionContext;

CPP14Parser.prototype.primaryexpression = function() {

    var localctx = new PrimaryexpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 2, CPP14Parser.RULE_primaryexpression);
    try {
        this.state = 473;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CPP14Parser.Nullptr:
        case CPP14Parser.Integerliteral:
        case CPP14Parser.Characterliteral:
        case CPP14Parser.Floatingliteral:
        case CPP14Parser.Stringliteral:
        case CPP14Parser.Booleanliteral:
        case CPP14Parser.Userdefinedintegerliteral:
        case CPP14Parser.Userdefinedfloatingliteral:
        case CPP14Parser.Userdefinedstringliteral:
        case CPP14Parser.Userdefinedcharacterliteral:
            this.enterOuterAlt(localctx, 1);
            this.state = 465;
            this.literal();
            break;
        case CPP14Parser.This:
            this.enterOuterAlt(localctx, 2);
            this.state = 466;
            this.match(CPP14Parser.This);
            break;
        case CPP14Parser.LeftParen:
            this.enterOuterAlt(localctx, 3);
            this.state = 467;
            this.match(CPP14Parser.LeftParen);
            this.state = 468;
            this.expression(0);
            this.state = 469;
            this.match(CPP14Parser.RightParen);
            break;
        case CPP14Parser.Decltype:
        case CPP14Parser.Operator:
        case CPP14Parser.Tilde:
        case CPP14Parser.Doublecolon:
        case CPP14Parser.Identifier:
            this.enterOuterAlt(localctx, 4);
            this.state = 471;
            this.identexpression();
            break;
        case CPP14Parser.LeftBracket:
            this.enterOuterAlt(localctx, 5);
            this.state = 472;
            this.lambdaexpression();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function IdexpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_idexpression;
    return this;
}

IdexpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IdexpressionContext.prototype.constructor = IdexpressionContext;

IdexpressionContext.prototype.unqualifiedid = function() {
    return this.getTypedRuleContext(UnqualifiedidContext,0);
};

IdexpressionContext.prototype.qualifiedid = function() {
    return this.getTypedRuleContext(QualifiedidContext,0);
};

IdexpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitIdexpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.IdexpressionContext = IdexpressionContext;

CPP14Parser.prototype.idexpression = function() {

    var localctx = new IdexpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 4, CPP14Parser.RULE_idexpression);
    try {
        this.state = 477;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,2,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 475;
            this.unqualifiedid();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 476;
            this.qualifiedid();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function IdentexpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_identexpression;
    return this;
}

IdentexpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IdentexpressionContext.prototype.constructor = IdentexpressionContext;

IdentexpressionContext.prototype.unqualifiedid = function() {
    return this.getTypedRuleContext(UnqualifiedidContext,0);
};

IdentexpressionContext.prototype.qualifiedid = function() {
    return this.getTypedRuleContext(QualifiedidContext,0);
};

IdentexpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitIdentexpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.IdentexpressionContext = IdentexpressionContext;

CPP14Parser.prototype.identexpression = function() {

    var localctx = new IdentexpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 6, CPP14Parser.RULE_identexpression);
    try {
        this.state = 481;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,3,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 479;
            this.unqualifiedid();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 480;
            this.qualifiedid();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function UnqualifiedidContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_unqualifiedid;
    return this;
}

UnqualifiedidContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UnqualifiedidContext.prototype.constructor = UnqualifiedidContext;

UnqualifiedidContext.prototype.Identifier = function() {
    return this.getToken(CPP14Parser.Identifier, 0);
};

UnqualifiedidContext.prototype.operatorfunctionid = function() {
    return this.getTypedRuleContext(OperatorfunctionidContext,0);
};

UnqualifiedidContext.prototype.conversionfunctionid = function() {
    return this.getTypedRuleContext(ConversionfunctionidContext,0);
};

UnqualifiedidContext.prototype.literaloperatorid = function() {
    return this.getTypedRuleContext(LiteraloperatoridContext,0);
};

UnqualifiedidContext.prototype.myclassname = function() {
    return this.getTypedRuleContext(MyclassnameContext,0);
};

UnqualifiedidContext.prototype.decltypespecifier = function() {
    return this.getTypedRuleContext(DecltypespecifierContext,0);
};

UnqualifiedidContext.prototype.templateid = function() {
    return this.getTypedRuleContext(TemplateidContext,0);
};

UnqualifiedidContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitUnqualifiedid(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.UnqualifiedidContext = UnqualifiedidContext;

CPP14Parser.prototype.unqualifiedid = function() {

    var localctx = new UnqualifiedidContext(this, this._ctx, this.state);
    this.enterRule(localctx, 8, CPP14Parser.RULE_unqualifiedid);
    try {
        this.state = 492;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,4,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 483;
            this.match(CPP14Parser.Identifier);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 484;
            this.operatorfunctionid();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 485;
            this.conversionfunctionid();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 486;
            this.literaloperatorid();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 487;
            this.match(CPP14Parser.Tilde);
            this.state = 488;
            this.myclassname();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 489;
            this.match(CPP14Parser.Tilde);
            this.state = 490;
            this.decltypespecifier();
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 491;
            this.templateid();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function QualifiedidContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_qualifiedid;
    return this;
}

QualifiedidContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
QualifiedidContext.prototype.constructor = QualifiedidContext;

QualifiedidContext.prototype.nestednamespecifier = function() {
    return this.getTypedRuleContext(NestednamespecifierContext,0);
};

QualifiedidContext.prototype.unqualifiedid = function() {
    return this.getTypedRuleContext(UnqualifiedidContext,0);
};

QualifiedidContext.prototype.Template = function() {
    return this.getToken(CPP14Parser.Template, 0);
};

QualifiedidContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitQualifiedid(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.QualifiedidContext = QualifiedidContext;

CPP14Parser.prototype.qualifiedid = function() {

    var localctx = new QualifiedidContext(this, this._ctx, this.state);
    this.enterRule(localctx, 10, CPP14Parser.RULE_qualifiedid);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 494;
        this.nestednamespecifier(0);
        this.state = 496;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CPP14Parser.Template) {
            this.state = 495;
            this.match(CPP14Parser.Template);
        }

        this.state = 498;
        this.unqualifiedid();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function NestednamespecifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_nestednamespecifier;
    return this;
}

NestednamespecifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NestednamespecifierContext.prototype.constructor = NestednamespecifierContext;

NestednamespecifierContext.prototype.typename = function() {
    return this.getTypedRuleContext(TypenameContext,0);
};

NestednamespecifierContext.prototype.namespacename = function() {
    return this.getTypedRuleContext(NamespacenameContext,0);
};

NestednamespecifierContext.prototype.decltypespecifier = function() {
    return this.getTypedRuleContext(DecltypespecifierContext,0);
};

NestednamespecifierContext.prototype.nestednamespecifier = function() {
    return this.getTypedRuleContext(NestednamespecifierContext,0);
};

NestednamespecifierContext.prototype.Identifier = function() {
    return this.getToken(CPP14Parser.Identifier, 0);
};

NestednamespecifierContext.prototype.simpletemplateid = function() {
    return this.getTypedRuleContext(SimpletemplateidContext,0);
};

NestednamespecifierContext.prototype.Template = function() {
    return this.getToken(CPP14Parser.Template, 0);
};

NestednamespecifierContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitNestednamespecifier(this);
    } else {
        return visitor.visitChildren(this);
    }
};



CPP14Parser.prototype.nestednamespecifier = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new NestednamespecifierContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 12;
    this.enterRecursionRule(localctx, 12, CPP14Parser.RULE_nestednamespecifier, _p);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 511;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,6,this._ctx);
        switch(la_) {
        case 1:
            this.state = 501;
            this.match(CPP14Parser.Doublecolon);
            break;

        case 2:
            this.state = 502;
            this.typename();
            this.state = 503;
            this.match(CPP14Parser.Doublecolon);
            break;

        case 3:
            this.state = 505;
            this.namespacename();
            this.state = 506;
            this.match(CPP14Parser.Doublecolon);
            break;

        case 4:
            this.state = 508;
            this.decltypespecifier();
            this.state = 509;
            this.match(CPP14Parser.Doublecolon);
            break;

        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 525;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,9,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 523;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,8,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new NestednamespecifierContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, CPP14Parser.RULE_nestednamespecifier);
                    this.state = 513;
                    if (!( this.precpred(this._ctx, 2))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
                    }
                    this.state = 514;
                    this.match(CPP14Parser.Identifier);
                    this.state = 515;
                    this.match(CPP14Parser.Doublecolon);
                    break;

                case 2:
                    localctx = new NestednamespecifierContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, CPP14Parser.RULE_nestednamespecifier);
                    this.state = 516;
                    if (!( this.precpred(this._ctx, 1))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                    }
                    this.state = 518;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===CPP14Parser.Template) {
                        this.state = 517;
                        this.match(CPP14Parser.Template);
                    }

                    this.state = 520;
                    this.simpletemplateid();
                    this.state = 521;
                    this.match(CPP14Parser.Doublecolon);
                    break;

                } 
            }
            this.state = 527;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,9,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function LambdaexpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_lambdaexpression;
    return this;
}

LambdaexpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LambdaexpressionContext.prototype.constructor = LambdaexpressionContext;

LambdaexpressionContext.prototype.lambdaintroducer = function() {
    return this.getTypedRuleContext(LambdaintroducerContext,0);
};

LambdaexpressionContext.prototype.compoundstatement = function() {
    return this.getTypedRuleContext(CompoundstatementContext,0);
};

LambdaexpressionContext.prototype.lambdadeclarator = function() {
    return this.getTypedRuleContext(LambdadeclaratorContext,0);
};

LambdaexpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitLambdaexpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.LambdaexpressionContext = LambdaexpressionContext;

CPP14Parser.prototype.lambdaexpression = function() {

    var localctx = new LambdaexpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 14, CPP14Parser.RULE_lambdaexpression);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 528;
        this.lambdaintroducer();
        this.state = 530;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CPP14Parser.LeftParen) {
            this.state = 529;
            this.lambdadeclarator();
        }

        this.state = 532;
        this.compoundstatement();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LambdaintroducerContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_lambdaintroducer;
    return this;
}

LambdaintroducerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LambdaintroducerContext.prototype.constructor = LambdaintroducerContext;

LambdaintroducerContext.prototype.lambdacapture = function() {
    return this.getTypedRuleContext(LambdacaptureContext,0);
};

LambdaintroducerContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitLambdaintroducer(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.LambdaintroducerContext = LambdaintroducerContext;

CPP14Parser.prototype.lambdaintroducer = function() {

    var localctx = new LambdaintroducerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 16, CPP14Parser.RULE_lambdaintroducer);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 534;
        this.match(CPP14Parser.LeftBracket);
        this.state = 536;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CPP14Parser.This || _la===CPP14Parser.And || _la===CPP14Parser.Assign || _la===CPP14Parser.Identifier) {
            this.state = 535;
            this.lambdacapture();
        }

        this.state = 538;
        this.match(CPP14Parser.RightBracket);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LambdacaptureContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_lambdacapture;
    return this;
}

LambdacaptureContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LambdacaptureContext.prototype.constructor = LambdacaptureContext;

LambdacaptureContext.prototype.capturedefault = function() {
    return this.getTypedRuleContext(CapturedefaultContext,0);
};

LambdacaptureContext.prototype.capturelist = function() {
    return this.getTypedRuleContext(CapturelistContext,0);
};

LambdacaptureContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitLambdacapture(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.LambdacaptureContext = LambdacaptureContext;

CPP14Parser.prototype.lambdacapture = function() {

    var localctx = new LambdacaptureContext(this, this._ctx, this.state);
    this.enterRule(localctx, 18, CPP14Parser.RULE_lambdacapture);
    try {
        this.state = 546;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,12,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 540;
            this.capturedefault();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 541;
            this.capturelist(0);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 542;
            this.capturedefault();
            this.state = 543;
            this.match(CPP14Parser.Comma);
            this.state = 544;
            this.capturelist(0);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CapturedefaultContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_capturedefault;
    return this;
}

CapturedefaultContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CapturedefaultContext.prototype.constructor = CapturedefaultContext;


CapturedefaultContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitCapturedefault(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.CapturedefaultContext = CapturedefaultContext;

CPP14Parser.prototype.capturedefault = function() {

    var localctx = new CapturedefaultContext(this, this._ctx, this.state);
    this.enterRule(localctx, 20, CPP14Parser.RULE_capturedefault);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 548;
        _la = this._input.LA(1);
        if(!(_la===CPP14Parser.And || _la===CPP14Parser.Assign)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CapturelistContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_capturelist;
    return this;
}

CapturelistContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CapturelistContext.prototype.constructor = CapturelistContext;

CapturelistContext.prototype.capture = function() {
    return this.getTypedRuleContext(CaptureContext,0);
};

CapturelistContext.prototype.capturelist = function() {
    return this.getTypedRuleContext(CapturelistContext,0);
};

CapturelistContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitCapturelist(this);
    } else {
        return visitor.visitChildren(this);
    }
};



CPP14Parser.prototype.capturelist = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new CapturelistContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 22;
    this.enterRecursionRule(localctx, 22, CPP14Parser.RULE_capturelist, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 551;
        this.capture();
        this.state = 553;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,13,this._ctx);
        if(la_===1) {
            this.state = 552;
            this.match(CPP14Parser.Ellipsis);

        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 563;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,15,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new CapturelistContext(this, _parentctx, _parentState);
                this.pushNewRecursionContext(localctx, _startState, CPP14Parser.RULE_capturelist);
                this.state = 555;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 556;
                this.match(CPP14Parser.Comma);
                this.state = 557;
                this.capture();
                this.state = 559;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,14,this._ctx);
                if(la_===1) {
                    this.state = 558;
                    this.match(CPP14Parser.Ellipsis);

                } 
            }
            this.state = 565;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,15,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function CaptureContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_capture;
    return this;
}

CaptureContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CaptureContext.prototype.constructor = CaptureContext;

CaptureContext.prototype.simplecapture = function() {
    return this.getTypedRuleContext(SimplecaptureContext,0);
};

CaptureContext.prototype.initcapture = function() {
    return this.getTypedRuleContext(InitcaptureContext,0);
};

CaptureContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitCapture(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.CaptureContext = CaptureContext;

CPP14Parser.prototype.capture = function() {

    var localctx = new CaptureContext(this, this._ctx, this.state);
    this.enterRule(localctx, 24, CPP14Parser.RULE_capture);
    try {
        this.state = 568;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,16,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 566;
            this.simplecapture();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 567;
            this.initcapture();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SimplecaptureContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_simplecapture;
    return this;
}

SimplecaptureContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SimplecaptureContext.prototype.constructor = SimplecaptureContext;

SimplecaptureContext.prototype.Identifier = function() {
    return this.getToken(CPP14Parser.Identifier, 0);
};

SimplecaptureContext.prototype.This = function() {
    return this.getToken(CPP14Parser.This, 0);
};

SimplecaptureContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitSimplecapture(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.SimplecaptureContext = SimplecaptureContext;

CPP14Parser.prototype.simplecapture = function() {

    var localctx = new SimplecaptureContext(this, this._ctx, this.state);
    this.enterRule(localctx, 26, CPP14Parser.RULE_simplecapture);
    try {
        this.state = 574;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CPP14Parser.Identifier:
            this.enterOuterAlt(localctx, 1);
            this.state = 570;
            this.match(CPP14Parser.Identifier);
            break;
        case CPP14Parser.And:
            this.enterOuterAlt(localctx, 2);
            this.state = 571;
            this.match(CPP14Parser.And);
            this.state = 572;
            this.match(CPP14Parser.Identifier);
            break;
        case CPP14Parser.This:
            this.enterOuterAlt(localctx, 3);
            this.state = 573;
            this.match(CPP14Parser.This);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function InitcaptureContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_initcapture;
    return this;
}

InitcaptureContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InitcaptureContext.prototype.constructor = InitcaptureContext;

InitcaptureContext.prototype.Identifier = function() {
    return this.getToken(CPP14Parser.Identifier, 0);
};

InitcaptureContext.prototype.initializer = function() {
    return this.getTypedRuleContext(InitializerContext,0);
};

InitcaptureContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitInitcapture(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.InitcaptureContext = InitcaptureContext;

CPP14Parser.prototype.initcapture = function() {

    var localctx = new InitcaptureContext(this, this._ctx, this.state);
    this.enterRule(localctx, 28, CPP14Parser.RULE_initcapture);
    try {
        this.state = 581;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CPP14Parser.Identifier:
            this.enterOuterAlt(localctx, 1);
            this.state = 576;
            this.match(CPP14Parser.Identifier);
            this.state = 577;
            this.initializer();
            break;
        case CPP14Parser.And:
            this.enterOuterAlt(localctx, 2);
            this.state = 578;
            this.match(CPP14Parser.And);
            this.state = 579;
            this.match(CPP14Parser.Identifier);
            this.state = 580;
            this.initializer();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LambdadeclaratorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_lambdadeclarator;
    return this;
}

LambdadeclaratorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LambdadeclaratorContext.prototype.constructor = LambdadeclaratorContext;

LambdadeclaratorContext.prototype.parameterdeclarationclause = function() {
    return this.getTypedRuleContext(ParameterdeclarationclauseContext,0);
};

LambdadeclaratorContext.prototype.Mutable = function() {
    return this.getToken(CPP14Parser.Mutable, 0);
};

LambdadeclaratorContext.prototype.exceptionspecification = function() {
    return this.getTypedRuleContext(ExceptionspecificationContext,0);
};

LambdadeclaratorContext.prototype.attributespecifierseq = function() {
    return this.getTypedRuleContext(AttributespecifierseqContext,0);
};

LambdadeclaratorContext.prototype.trailingreturntype = function() {
    return this.getTypedRuleContext(TrailingreturntypeContext,0);
};

LambdadeclaratorContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitLambdadeclarator(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.LambdadeclaratorContext = LambdadeclaratorContext;

CPP14Parser.prototype.lambdadeclarator = function() {

    var localctx = new LambdadeclaratorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 30, CPP14Parser.RULE_lambdadeclarator);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 583;
        this.match(CPP14Parser.LeftParen);
        this.state = 584;
        this.parameterdeclarationclause();
        this.state = 585;
        this.match(CPP14Parser.RightParen);
        this.state = 587;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CPP14Parser.Mutable) {
            this.state = 586;
            this.match(CPP14Parser.Mutable);
        }

        this.state = 590;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CPP14Parser.Noexcept || _la===CPP14Parser.Throw) {
            this.state = 589;
            this.exceptionspecification();
        }

        this.state = 593;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CPP14Parser.Alignas || _la===CPP14Parser.LeftBracket) {
            this.state = 592;
            this.attributespecifierseq(0);
        }

        this.state = 596;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CPP14Parser.Arrow) {
            this.state = 595;
            this.trailingreturntype();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function IdexpressionlapperContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_idexpressionlapper;
    return this;
}

IdexpressionlapperContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IdexpressionlapperContext.prototype.constructor = IdexpressionlapperContext;

IdexpressionlapperContext.prototype.idexpression = function() {
    return this.getTypedRuleContext(IdexpressionContext,0);
};

IdexpressionlapperContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitIdexpressionlapper(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.IdexpressionlapperContext = IdexpressionlapperContext;

CPP14Parser.prototype.idexpressionlapper = function() {

    var localctx = new IdexpressionlapperContext(this, this._ctx, this.state);
    this.enterRule(localctx, 32, CPP14Parser.RULE_idexpressionlapper);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 598;
        this.idexpression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FunctioncallexpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_functioncallexpression;
    return this;
}

FunctioncallexpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FunctioncallexpressionContext.prototype.constructor = FunctioncallexpressionContext;

FunctioncallexpressionContext.prototype.primaryexpression = function() {
    return this.getTypedRuleContext(PrimaryexpressionContext,0);
};

FunctioncallexpressionContext.prototype.LeftParen = function() {
    return this.getToken(CPP14Parser.LeftParen, 0);
};

FunctioncallexpressionContext.prototype.RightParen = function() {
    return this.getToken(CPP14Parser.RightParen, 0);
};

FunctioncallexpressionContext.prototype.initializerlist = function() {
    return this.getTypedRuleContext(InitializerlistContext,0);
};

FunctioncallexpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitFunctioncallexpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.FunctioncallexpressionContext = FunctioncallexpressionContext;

CPP14Parser.prototype.functioncallexpression = function() {

    var localctx = new FunctioncallexpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 34, CPP14Parser.RULE_functioncallexpression);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 600;
        this.primaryexpression();
        this.state = 601;
        this.match(CPP14Parser.LeftParen);
        this.state = 603;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.File) | (1 << CPP14Parser.Dynamic_cast))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (CPP14Parser.Float - 32)) | (1 << (CPP14Parser.Int - 32)) | (1 << (CPP14Parser.Long - 32)) | (1 << (CPP14Parser.New - 32)) | (1 << (CPP14Parser.Noexcept - 32)) | (1 << (CPP14Parser.Nullptr - 32)) | (1 << (CPP14Parser.Operator - 32)) | (1 << (CPP14Parser.Reinterpret_cast - 32)) | (1 << (CPP14Parser.Short - 32)) | (1 << (CPP14Parser.Signed - 32)) | (1 << (CPP14Parser.Sizeof - 32)) | (1 << (CPP14Parser.Static_cast - 32)) | (1 << (CPP14Parser.This - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (CPP14Parser.Throw - 64)) | (1 << (CPP14Parser.Typeid - 64)) | (1 << (CPP14Parser.Typename - 64)) | (1 << (CPP14Parser.Unsigned - 64)) | (1 << (CPP14Parser.Void - 64)) | (1 << (CPP14Parser.Wchar - 64)) | (1 << (CPP14Parser.LeftParen - 64)) | (1 << (CPP14Parser.LeftBracket - 64)) | (1 << (CPP14Parser.LeftBrace - 64)) | (1 << (CPP14Parser.Plus - 64)) | (1 << (CPP14Parser.Minus - 64)) | (1 << (CPP14Parser.Star - 64)) | (1 << (CPP14Parser.And - 64)) | (1 << (CPP14Parser.Or - 64)) | (1 << (CPP14Parser.Tilde - 64)) | (1 << (CPP14Parser.Not - 64)))) !== 0) || ((((_la - 113)) & ~0x1f) == 0 && ((1 << (_la - 113)) & ((1 << (CPP14Parser.PlusPlus - 113)) | (1 << (CPP14Parser.MinusMinus - 113)) | (1 << (CPP14Parser.Doublecolon - 113)) | (1 << (CPP14Parser.Identifier - 113)) | (1 << (CPP14Parser.Integerliteral - 113)) | (1 << (CPP14Parser.Characterliteral - 113)) | (1 << (CPP14Parser.Floatingliteral - 113)) | (1 << (CPP14Parser.Stringliteral - 113)) | (1 << (CPP14Parser.Booleanliteral - 113)) | (1 << (CPP14Parser.Userdefinedintegerliteral - 113)) | (1 << (CPP14Parser.Userdefinedfloatingliteral - 113)) | (1 << (CPP14Parser.Userdefinedstringliteral - 113)) | (1 << (CPP14Parser.Userdefinedcharacterliteral - 113)))) !== 0)) {
            this.state = 602;
            this.initializerlist();
        }

        this.state = 605;
        this.match(CPP14Parser.RightParen);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PostfixexpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_postfixexpression;
    return this;
}

PostfixexpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PostfixexpressionContext.prototype.constructor = PostfixexpressionContext;

PostfixexpressionContext.prototype.primaryexpression = function() {
    return this.getTypedRuleContext(PrimaryexpressionContext,0);
};

PostfixexpressionContext.prototype.functioncallexpression = function() {
    return this.getTypedRuleContext(FunctioncallexpressionContext,0);
};

PostfixexpressionContext.prototype.simpletypespecifier = function() {
    return this.getTypedRuleContext(SimpletypespecifierContext,0);
};

PostfixexpressionContext.prototype.expressionlist = function() {
    return this.getTypedRuleContext(ExpressionlistContext,0);
};

PostfixexpressionContext.prototype.typenamespecifier = function() {
    return this.getTypedRuleContext(TypenamespecifierContext,0);
};

PostfixexpressionContext.prototype.bracedinitlist = function() {
    return this.getTypedRuleContext(BracedinitlistContext,0);
};

PostfixexpressionContext.prototype.Dynamic_cast = function() {
    return this.getToken(CPP14Parser.Dynamic_cast, 0);
};

PostfixexpressionContext.prototype.typeid = function() {
    return this.getTypedRuleContext(TypeidContext,0);
};

PostfixexpressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

PostfixexpressionContext.prototype.Static_cast = function() {
    return this.getToken(CPP14Parser.Static_cast, 0);
};

PostfixexpressionContext.prototype.Reinterpret_cast = function() {
    return this.getToken(CPP14Parser.Reinterpret_cast, 0);
};

PostfixexpressionContext.prototype.Const_cast = function() {
    return this.getToken(CPP14Parser.Const_cast, 0);
};

PostfixexpressionContext.prototype.Typeid = function() {
    return this.getToken(CPP14Parser.Typeid, 0);
};

PostfixexpressionContext.prototype.postfixexpression = function() {
    return this.getTypedRuleContext(PostfixexpressionContext,0);
};

PostfixexpressionContext.prototype.LeftBracket = function() {
    return this.getToken(CPP14Parser.LeftBracket, 0);
};

PostfixexpressionContext.prototype.assignmentexpression = function() {
    return this.getTypedRuleContext(AssignmentexpressionContext,0);
};

PostfixexpressionContext.prototype.RightBracket = function() {
    return this.getToken(CPP14Parser.RightBracket, 0);
};

PostfixexpressionContext.prototype.Dot = function() {
    return this.getToken(CPP14Parser.Dot, 0);
};

PostfixexpressionContext.prototype.idexpressionlapper = function() {
    return this.getTypedRuleContext(IdexpressionlapperContext,0);
};

PostfixexpressionContext.prototype.Template = function() {
    return this.getToken(CPP14Parser.Template, 0);
};

PostfixexpressionContext.prototype.Arrow = function() {
    return this.getToken(CPP14Parser.Arrow, 0);
};

PostfixexpressionContext.prototype.pseudodestructorname = function() {
    return this.getTypedRuleContext(PseudodestructornameContext,0);
};

PostfixexpressionContext.prototype.PlusPlus = function() {
    return this.getToken(CPP14Parser.PlusPlus, 0);
};

PostfixexpressionContext.prototype.MinusMinus = function() {
    return this.getToken(CPP14Parser.MinusMinus, 0);
};

PostfixexpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitPostfixexpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};



CPP14Parser.prototype.postfixexpression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new PostfixexpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 36;
    this.enterRecursionRule(localctx, 36, CPP14Parser.RULE_postfixexpression, _p);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 672;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,26,this._ctx);
        switch(la_) {
        case 1:
            this.state = 608;
            this.primaryexpression();
            break;

        case 2:
            this.state = 609;
            this.functioncallexpression();
            break;

        case 3:
            this.state = 610;
            this.simpletypespecifier();
            this.state = 611;
            this.match(CPP14Parser.LeftParen);
            this.state = 613;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.File) | (1 << CPP14Parser.Dynamic_cast))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (CPP14Parser.Float - 32)) | (1 << (CPP14Parser.Int - 32)) | (1 << (CPP14Parser.Long - 32)) | (1 << (CPP14Parser.New - 32)) | (1 << (CPP14Parser.Noexcept - 32)) | (1 << (CPP14Parser.Nullptr - 32)) | (1 << (CPP14Parser.Operator - 32)) | (1 << (CPP14Parser.Reinterpret_cast - 32)) | (1 << (CPP14Parser.Short - 32)) | (1 << (CPP14Parser.Signed - 32)) | (1 << (CPP14Parser.Sizeof - 32)) | (1 << (CPP14Parser.Static_cast - 32)) | (1 << (CPP14Parser.This - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (CPP14Parser.Throw - 64)) | (1 << (CPP14Parser.Typeid - 64)) | (1 << (CPP14Parser.Typename - 64)) | (1 << (CPP14Parser.Unsigned - 64)) | (1 << (CPP14Parser.Void - 64)) | (1 << (CPP14Parser.Wchar - 64)) | (1 << (CPP14Parser.LeftParen - 64)) | (1 << (CPP14Parser.LeftBracket - 64)) | (1 << (CPP14Parser.LeftBrace - 64)) | (1 << (CPP14Parser.Plus - 64)) | (1 << (CPP14Parser.Minus - 64)) | (1 << (CPP14Parser.Star - 64)) | (1 << (CPP14Parser.And - 64)) | (1 << (CPP14Parser.Or - 64)) | (1 << (CPP14Parser.Tilde - 64)) | (1 << (CPP14Parser.Not - 64)))) !== 0) || ((((_la - 113)) & ~0x1f) == 0 && ((1 << (_la - 113)) & ((1 << (CPP14Parser.PlusPlus - 113)) | (1 << (CPP14Parser.MinusMinus - 113)) | (1 << (CPP14Parser.Doublecolon - 113)) | (1 << (CPP14Parser.Identifier - 113)) | (1 << (CPP14Parser.Integerliteral - 113)) | (1 << (CPP14Parser.Characterliteral - 113)) | (1 << (CPP14Parser.Floatingliteral - 113)) | (1 << (CPP14Parser.Stringliteral - 113)) | (1 << (CPP14Parser.Booleanliteral - 113)) | (1 << (CPP14Parser.Userdefinedintegerliteral - 113)) | (1 << (CPP14Parser.Userdefinedfloatingliteral - 113)) | (1 << (CPP14Parser.Userdefinedstringliteral - 113)) | (1 << (CPP14Parser.Userdefinedcharacterliteral - 113)))) !== 0)) {
                this.state = 612;
                this.expressionlist();
            }

            this.state = 615;
            this.match(CPP14Parser.RightParen);
            break;

        case 4:
            this.state = 617;
            this.typenamespecifier();
            this.state = 618;
            this.match(CPP14Parser.LeftParen);
            this.state = 620;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.File) | (1 << CPP14Parser.Dynamic_cast))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (CPP14Parser.Float - 32)) | (1 << (CPP14Parser.Int - 32)) | (1 << (CPP14Parser.Long - 32)) | (1 << (CPP14Parser.New - 32)) | (1 << (CPP14Parser.Noexcept - 32)) | (1 << (CPP14Parser.Nullptr - 32)) | (1 << (CPP14Parser.Operator - 32)) | (1 << (CPP14Parser.Reinterpret_cast - 32)) | (1 << (CPP14Parser.Short - 32)) | (1 << (CPP14Parser.Signed - 32)) | (1 << (CPP14Parser.Sizeof - 32)) | (1 << (CPP14Parser.Static_cast - 32)) | (1 << (CPP14Parser.This - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (CPP14Parser.Throw - 64)) | (1 << (CPP14Parser.Typeid - 64)) | (1 << (CPP14Parser.Typename - 64)) | (1 << (CPP14Parser.Unsigned - 64)) | (1 << (CPP14Parser.Void - 64)) | (1 << (CPP14Parser.Wchar - 64)) | (1 << (CPP14Parser.LeftParen - 64)) | (1 << (CPP14Parser.LeftBracket - 64)) | (1 << (CPP14Parser.LeftBrace - 64)) | (1 << (CPP14Parser.Plus - 64)) | (1 << (CPP14Parser.Minus - 64)) | (1 << (CPP14Parser.Star - 64)) | (1 << (CPP14Parser.And - 64)) | (1 << (CPP14Parser.Or - 64)) | (1 << (CPP14Parser.Tilde - 64)) | (1 << (CPP14Parser.Not - 64)))) !== 0) || ((((_la - 113)) & ~0x1f) == 0 && ((1 << (_la - 113)) & ((1 << (CPP14Parser.PlusPlus - 113)) | (1 << (CPP14Parser.MinusMinus - 113)) | (1 << (CPP14Parser.Doublecolon - 113)) | (1 << (CPP14Parser.Identifier - 113)) | (1 << (CPP14Parser.Integerliteral - 113)) | (1 << (CPP14Parser.Characterliteral - 113)) | (1 << (CPP14Parser.Floatingliteral - 113)) | (1 << (CPP14Parser.Stringliteral - 113)) | (1 << (CPP14Parser.Booleanliteral - 113)) | (1 << (CPP14Parser.Userdefinedintegerliteral - 113)) | (1 << (CPP14Parser.Userdefinedfloatingliteral - 113)) | (1 << (CPP14Parser.Userdefinedstringliteral - 113)) | (1 << (CPP14Parser.Userdefinedcharacterliteral - 113)))) !== 0)) {
                this.state = 619;
                this.expressionlist();
            }

            this.state = 622;
            this.match(CPP14Parser.RightParen);
            break;

        case 5:
            this.state = 624;
            this.simpletypespecifier();
            this.state = 625;
            this.bracedinitlist();
            break;

        case 6:
            this.state = 627;
            this.typenamespecifier();
            this.state = 628;
            this.bracedinitlist();
            break;

        case 7:
            this.state = 630;
            this.match(CPP14Parser.Dynamic_cast);
            this.state = 631;
            this.match(CPP14Parser.Less);
            this.state = 632;
            this.typeid();
            this.state = 633;
            this.match(CPP14Parser.Greater);
            this.state = 634;
            this.match(CPP14Parser.LeftParen);
            this.state = 635;
            this.expression(0);
            this.state = 636;
            this.match(CPP14Parser.RightParen);
            break;

        case 8:
            this.state = 638;
            this.match(CPP14Parser.Static_cast);
            this.state = 639;
            this.match(CPP14Parser.Less);
            this.state = 640;
            this.typeid();
            this.state = 641;
            this.match(CPP14Parser.Greater);
            this.state = 642;
            this.match(CPP14Parser.LeftParen);
            this.state = 643;
            this.expression(0);
            this.state = 644;
            this.match(CPP14Parser.RightParen);
            break;

        case 9:
            this.state = 646;
            this.match(CPP14Parser.Reinterpret_cast);
            this.state = 647;
            this.match(CPP14Parser.Less);
            this.state = 648;
            this.typeid();
            this.state = 649;
            this.match(CPP14Parser.Greater);
            this.state = 650;
            this.match(CPP14Parser.LeftParen);
            this.state = 651;
            this.expression(0);
            this.state = 652;
            this.match(CPP14Parser.RightParen);
            break;

        case 10:
            this.state = 654;
            this.match(CPP14Parser.Const_cast);
            this.state = 655;
            this.match(CPP14Parser.Less);
            this.state = 656;
            this.typeid();
            this.state = 657;
            this.match(CPP14Parser.Greater);
            this.state = 658;
            this.match(CPP14Parser.LeftParen);
            this.state = 659;
            this.expression(0);
            this.state = 660;
            this.match(CPP14Parser.RightParen);
            break;

        case 11:
            this.state = 662;
            this.match(CPP14Parser.Typeid);
            this.state = 663;
            this.match(CPP14Parser.LeftParen);
            this.state = 664;
            this.expression(0);
            this.state = 665;
            this.match(CPP14Parser.RightParen);
            break;

        case 12:
            this.state = 667;
            this.match(CPP14Parser.Typeid);
            this.state = 668;
            this.match(CPP14Parser.LeftParen);
            this.state = 669;
            this.typeid();
            this.state = 670;
            this.match(CPP14Parser.RightParen);
            break;

        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 708;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,30,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 706;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,29,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new PostfixexpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, CPP14Parser.RULE_postfixexpression);
                    this.state = 674;
                    if (!( this.precpred(this._ctx, 18))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 18)");
                    }
                    this.state = 675;
                    this.match(CPP14Parser.LeftBracket);
                    this.state = 676;
                    this.assignmentexpression();
                    this.state = 677;
                    this.match(CPP14Parser.RightBracket);
                    break;

                case 2:
                    localctx = new PostfixexpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, CPP14Parser.RULE_postfixexpression);
                    this.state = 679;
                    if (!( this.precpred(this._ctx, 17))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 17)");
                    }
                    this.state = 680;
                    this.match(CPP14Parser.LeftBracket);
                    this.state = 681;
                    this.bracedinitlist();
                    this.state = 682;
                    this.match(CPP14Parser.RightBracket);
                    break;

                case 3:
                    localctx = new PostfixexpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, CPP14Parser.RULE_postfixexpression);
                    this.state = 684;
                    if (!( this.precpred(this._ctx, 12))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 12)");
                    }
                    this.state = 685;
                    this.match(CPP14Parser.Dot);
                    this.state = 687;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===CPP14Parser.Template) {
                        this.state = 686;
                        this.match(CPP14Parser.Template);
                    }

                    this.state = 689;
                    this.idexpressionlapper();
                    break;

                case 4:
                    localctx = new PostfixexpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, CPP14Parser.RULE_postfixexpression);
                    this.state = 690;
                    if (!( this.precpred(this._ctx, 11))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 11)");
                    }
                    this.state = 691;
                    this.match(CPP14Parser.Arrow);
                    this.state = 693;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===CPP14Parser.Template) {
                        this.state = 692;
                        this.match(CPP14Parser.Template);
                    }

                    this.state = 695;
                    this.idexpressionlapper();
                    break;

                case 5:
                    localctx = new PostfixexpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, CPP14Parser.RULE_postfixexpression);
                    this.state = 696;
                    if (!( this.precpred(this._ctx, 10))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 10)");
                    }
                    this.state = 697;
                    this.match(CPP14Parser.Dot);
                    this.state = 698;
                    this.pseudodestructorname();
                    break;

                case 6:
                    localctx = new PostfixexpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, CPP14Parser.RULE_postfixexpression);
                    this.state = 699;
                    if (!( this.precpred(this._ctx, 9))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 9)");
                    }
                    this.state = 700;
                    this.match(CPP14Parser.Arrow);
                    this.state = 701;
                    this.pseudodestructorname();
                    break;

                case 7:
                    localctx = new PostfixexpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, CPP14Parser.RULE_postfixexpression);
                    this.state = 702;
                    if (!( this.precpred(this._ctx, 8))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 8)");
                    }
                    this.state = 703;
                    this.match(CPP14Parser.PlusPlus);
                    break;

                case 8:
                    localctx = new PostfixexpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, CPP14Parser.RULE_postfixexpression);
                    this.state = 704;
                    if (!( this.precpred(this._ctx, 7))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 7)");
                    }
                    this.state = 705;
                    this.match(CPP14Parser.MinusMinus);
                    break;

                } 
            }
            this.state = 710;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,30,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function ExpressionlistContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_expressionlist;
    return this;
}

ExpressionlistContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExpressionlistContext.prototype.constructor = ExpressionlistContext;

ExpressionlistContext.prototype.initializerlist = function() {
    return this.getTypedRuleContext(InitializerlistContext,0);
};

ExpressionlistContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitExpressionlist(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.ExpressionlistContext = ExpressionlistContext;

CPP14Parser.prototype.expressionlist = function() {

    var localctx = new ExpressionlistContext(this, this._ctx, this.state);
    this.enterRule(localctx, 38, CPP14Parser.RULE_expressionlist);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 711;
        this.initializerlist();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PseudodestructornameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_pseudodestructorname;
    return this;
}

PseudodestructornameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PseudodestructornameContext.prototype.constructor = PseudodestructornameContext;

PseudodestructornameContext.prototype.typename = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TypenameContext);
    } else {
        return this.getTypedRuleContext(TypenameContext,i);
    }
};

PseudodestructornameContext.prototype.nestednamespecifier = function() {
    return this.getTypedRuleContext(NestednamespecifierContext,0);
};

PseudodestructornameContext.prototype.Template = function() {
    return this.getToken(CPP14Parser.Template, 0);
};

PseudodestructornameContext.prototype.simpletemplateid = function() {
    return this.getTypedRuleContext(SimpletemplateidContext,0);
};

PseudodestructornameContext.prototype.decltypespecifier = function() {
    return this.getTypedRuleContext(DecltypespecifierContext,0);
};

PseudodestructornameContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitPseudodestructorname(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.PseudodestructornameContext = PseudodestructornameContext;

CPP14Parser.prototype.pseudodestructorname = function() {

    var localctx = new PseudodestructornameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 40, CPP14Parser.RULE_pseudodestructorname);
    var _la = 0; // Token type
    try {
        this.state = 735;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,33,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 714;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,31,this._ctx);
            if(la_===1) {
                this.state = 713;
                this.nestednamespecifier(0);

            }
            this.state = 716;
            this.typename();
            this.state = 717;
            this.match(CPP14Parser.Doublecolon);
            this.state = 718;
            this.match(CPP14Parser.Tilde);
            this.state = 719;
            this.typename();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 721;
            this.nestednamespecifier(0);
            this.state = 722;
            this.match(CPP14Parser.Template);
            this.state = 723;
            this.simpletemplateid();
            this.state = 724;
            this.match(CPP14Parser.Doublecolon);
            this.state = 725;
            this.match(CPP14Parser.Tilde);
            this.state = 726;
            this.typename();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 729;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CPP14Parser.Decltype || _la===CPP14Parser.Doublecolon || _la===CPP14Parser.Identifier) {
                this.state = 728;
                this.nestednamespecifier(0);
            }

            this.state = 731;
            this.match(CPP14Parser.Tilde);
            this.state = 732;
            this.typename();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 733;
            this.match(CPP14Parser.Tilde);
            this.state = 734;
            this.decltypespecifier();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BinaryexpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_binaryexpression;
    return this;
}

BinaryexpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BinaryexpressionContext.prototype.constructor = BinaryexpressionContext;

BinaryexpressionContext.prototype.postfixexpression = function() {
    return this.getTypedRuleContext(PostfixexpressionContext,0);
};

BinaryexpressionContext.prototype.unaryexpression = function() {
    return this.getTypedRuleContext(UnaryexpressionContext,0);
};

BinaryexpressionContext.prototype.newexpression = function() {
    return this.getTypedRuleContext(NewexpressionContext,0);
};

BinaryexpressionContext.prototype.deleteexpression = function() {
    return this.getTypedRuleContext(DeleteexpressionContext,0);
};

BinaryexpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitBinaryexpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.BinaryexpressionContext = BinaryexpressionContext;

CPP14Parser.prototype.binaryexpression = function() {

    var localctx = new BinaryexpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 42, CPP14Parser.RULE_binaryexpression);
    try {
        this.state = 741;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,34,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 737;
            this.postfixexpression(0);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 738;
            this.unaryexpression();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 739;
            this.newexpression();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 740;
            this.deleteexpression();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function UnaryexpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_unaryexpression;
    return this;
}

UnaryexpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UnaryexpressionContext.prototype.constructor = UnaryexpressionContext;

UnaryexpressionContext.prototype.PlusPlus = function() {
    return this.getToken(CPP14Parser.PlusPlus, 0);
};

UnaryexpressionContext.prototype.castexpression = function() {
    return this.getTypedRuleContext(CastexpressionContext,0);
};

UnaryexpressionContext.prototype.MinusMinus = function() {
    return this.getToken(CPP14Parser.MinusMinus, 0);
};

UnaryexpressionContext.prototype.unaryoperator = function() {
    return this.getTypedRuleContext(UnaryoperatorContext,0);
};

UnaryexpressionContext.prototype.Sizeof = function() {
    return this.getToken(CPP14Parser.Sizeof, 0);
};

UnaryexpressionContext.prototype.binaryexpression = function() {
    return this.getTypedRuleContext(BinaryexpressionContext,0);
};

UnaryexpressionContext.prototype.typeidlapper = function() {
    return this.getTypedRuleContext(TypeidlapperContext,0);
};

UnaryexpressionContext.prototype.typeid = function() {
    return this.getTypedRuleContext(TypeidContext,0);
};

UnaryexpressionContext.prototype.Identifier = function() {
    return this.getToken(CPP14Parser.Identifier, 0);
};

UnaryexpressionContext.prototype.Alignof = function() {
    return this.getToken(CPP14Parser.Alignof, 0);
};

UnaryexpressionContext.prototype.noexceptexpression = function() {
    return this.getTypedRuleContext(NoexceptexpressionContext,0);
};

UnaryexpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitUnaryexpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.UnaryexpressionContext = UnaryexpressionContext;

CPP14Parser.prototype.unaryexpression = function() {

    var localctx = new UnaryexpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 44, CPP14Parser.RULE_unaryexpression);
    try {
        this.state = 773;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,35,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 743;
            this.match(CPP14Parser.PlusPlus);
            this.state = 744;
            this.castexpression();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 745;
            this.match(CPP14Parser.MinusMinus);
            this.state = 746;
            this.castexpression();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 747;
            this.unaryoperator();
            this.state = 748;
            this.castexpression();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 750;
            this.match(CPP14Parser.Sizeof);
            this.state = 751;
            this.binaryexpression();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 752;
            this.match(CPP14Parser.Sizeof);
            this.state = 753;
            this.match(CPP14Parser.LeftParen);
            this.state = 754;
            this.typeidlapper();
            this.state = 755;
            this.match(CPP14Parser.RightParen);
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 757;
            this.match(CPP14Parser.Sizeof);
            this.state = 758;
            this.match(CPP14Parser.LeftParen);
            this.state = 759;
            this.typeid();
            this.state = 760;
            this.match(CPP14Parser.RightParen);
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 762;
            this.match(CPP14Parser.Sizeof);
            this.state = 763;
            this.match(CPP14Parser.Ellipsis);
            this.state = 764;
            this.match(CPP14Parser.LeftParen);
            this.state = 765;
            this.match(CPP14Parser.Identifier);
            this.state = 766;
            this.match(CPP14Parser.RightParen);
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 767;
            this.match(CPP14Parser.Alignof);
            this.state = 768;
            this.match(CPP14Parser.LeftParen);
            this.state = 769;
            this.typeid();
            this.state = 770;
            this.match(CPP14Parser.RightParen);
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 772;
            this.noexceptexpression();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TypeidlapperContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_typeidlapper;
    return this;
}

TypeidlapperContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeidlapperContext.prototype.constructor = TypeidlapperContext;

TypeidlapperContext.prototype.typeid = function() {
    return this.getTypedRuleContext(TypeidContext,0);
};

TypeidlapperContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitTypeidlapper(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.TypeidlapperContext = TypeidlapperContext;

CPP14Parser.prototype.typeidlapper = function() {

    var localctx = new TypeidlapperContext(this, this._ctx, this.state);
    this.enterRule(localctx, 46, CPP14Parser.RULE_typeidlapper);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 775;
        this.typeid();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function UnaryoperatorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_unaryoperator;
    return this;
}

UnaryoperatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UnaryoperatorContext.prototype.constructor = UnaryoperatorContext;


UnaryoperatorContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitUnaryoperator(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.UnaryoperatorContext = UnaryoperatorContext;

CPP14Parser.prototype.unaryoperator = function() {

    var localctx = new UnaryoperatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 48, CPP14Parser.RULE_unaryoperator);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 777;
        _la = this._input.LA(1);
        if(!(((((_la - 84)) & ~0x1f) == 0 && ((1 << (_la - 84)) & ((1 << (CPP14Parser.Plus - 84)) | (1 << (CPP14Parser.Minus - 84)) | (1 << (CPP14Parser.Star - 84)) | (1 << (CPP14Parser.And - 84)) | (1 << (CPP14Parser.Or - 84)) | (1 << (CPP14Parser.Tilde - 84)) | (1 << (CPP14Parser.Not - 84)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function NewexpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_newexpression;
    return this;
}

NewexpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NewexpressionContext.prototype.constructor = NewexpressionContext;

NewexpressionContext.prototype.New = function() {
    return this.getToken(CPP14Parser.New, 0);
};

NewexpressionContext.prototype.newtypeid = function() {
    return this.getTypedRuleContext(NewtypeidContext,0);
};

NewexpressionContext.prototype.newplacement = function() {
    return this.getTypedRuleContext(NewplacementContext,0);
};

NewexpressionContext.prototype.newinitializer = function() {
    return this.getTypedRuleContext(NewinitializerContext,0);
};

NewexpressionContext.prototype.typeid = function() {
    return this.getTypedRuleContext(TypeidContext,0);
};

NewexpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitNewexpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.NewexpressionContext = NewexpressionContext;

CPP14Parser.prototype.newexpression = function() {

    var localctx = new NewexpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 50, CPP14Parser.RULE_newexpression);
    var _la = 0; // Token type
    try {
        this.state = 803;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,42,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 780;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CPP14Parser.Doublecolon) {
                this.state = 779;
                this.match(CPP14Parser.Doublecolon);
            }

            this.state = 782;
            this.match(CPP14Parser.New);
            this.state = 784;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CPP14Parser.LeftParen) {
                this.state = 783;
                this.newplacement();
            }

            this.state = 786;
            this.newtypeid();
            this.state = 788;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,38,this._ctx);
            if(la_===1) {
                this.state = 787;
                this.newinitializer();

            }
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 791;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CPP14Parser.Doublecolon) {
                this.state = 790;
                this.match(CPP14Parser.Doublecolon);
            }

            this.state = 793;
            this.match(CPP14Parser.New);
            this.state = 795;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,40,this._ctx);
            if(la_===1) {
                this.state = 794;
                this.newplacement();

            }
            this.state = 797;
            this.match(CPP14Parser.LeftParen);
            this.state = 798;
            this.typeid();
            this.state = 799;
            this.match(CPP14Parser.RightParen);
            this.state = 801;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,41,this._ctx);
            if(la_===1) {
                this.state = 800;
                this.newinitializer();

            }
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function NewplacementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_newplacement;
    return this;
}

NewplacementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NewplacementContext.prototype.constructor = NewplacementContext;

NewplacementContext.prototype.expressionlist = function() {
    return this.getTypedRuleContext(ExpressionlistContext,0);
};

NewplacementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitNewplacement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.NewplacementContext = NewplacementContext;

CPP14Parser.prototype.newplacement = function() {

    var localctx = new NewplacementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 52, CPP14Parser.RULE_newplacement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 805;
        this.match(CPP14Parser.LeftParen);
        this.state = 806;
        this.expressionlist();
        this.state = 807;
        this.match(CPP14Parser.RightParen);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function NewtypeidContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_newtypeid;
    return this;
}

NewtypeidContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NewtypeidContext.prototype.constructor = NewtypeidContext;

NewtypeidContext.prototype.typespecifierseq = function() {
    return this.getTypedRuleContext(TypespecifierseqContext,0);
};

NewtypeidContext.prototype.newdeclarator = function() {
    return this.getTypedRuleContext(NewdeclaratorContext,0);
};

NewtypeidContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitNewtypeid(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.NewtypeidContext = NewtypeidContext;

CPP14Parser.prototype.newtypeid = function() {

    var localctx = new NewtypeidContext(this, this._ctx, this.state);
    this.enterRule(localctx, 54, CPP14Parser.RULE_newtypeid);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 809;
        this.typespecifierseq();
        this.state = 811;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,43,this._ctx);
        if(la_===1) {
            this.state = 810;
            this.newdeclarator();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function NewdeclaratorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_newdeclarator;
    return this;
}

NewdeclaratorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NewdeclaratorContext.prototype.constructor = NewdeclaratorContext;

NewdeclaratorContext.prototype.ptroperator = function() {
    return this.getTypedRuleContext(PtroperatorContext,0);
};

NewdeclaratorContext.prototype.newdeclarator = function() {
    return this.getTypedRuleContext(NewdeclaratorContext,0);
};

NewdeclaratorContext.prototype.noptrnewdeclarator = function() {
    return this.getTypedRuleContext(NoptrnewdeclaratorContext,0);
};

NewdeclaratorContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitNewdeclarator(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.NewdeclaratorContext = NewdeclaratorContext;

CPP14Parser.prototype.newdeclarator = function() {

    var localctx = new NewdeclaratorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 56, CPP14Parser.RULE_newdeclarator);
    try {
        this.state = 818;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CPP14Parser.Decltype:
        case CPP14Parser.Star:
        case CPP14Parser.And:
        case CPP14Parser.AndAnd:
        case CPP14Parser.Doublecolon:
        case CPP14Parser.Identifier:
            this.enterOuterAlt(localctx, 1);
            this.state = 813;
            this.ptroperator();
            this.state = 815;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,44,this._ctx);
            if(la_===1) {
                this.state = 814;
                this.newdeclarator();

            }
            break;
        case CPP14Parser.LeftBracket:
            this.enterOuterAlt(localctx, 2);
            this.state = 817;
            this.noptrnewdeclarator(0);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function NoptrnewdeclaratorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_noptrnewdeclarator;
    return this;
}

NoptrnewdeclaratorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NoptrnewdeclaratorContext.prototype.constructor = NoptrnewdeclaratorContext;

NoptrnewdeclaratorContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

NoptrnewdeclaratorContext.prototype.attributespecifierseq = function() {
    return this.getTypedRuleContext(AttributespecifierseqContext,0);
};

NoptrnewdeclaratorContext.prototype.noptrnewdeclarator = function() {
    return this.getTypedRuleContext(NoptrnewdeclaratorContext,0);
};

NoptrnewdeclaratorContext.prototype.constantexpression = function() {
    return this.getTypedRuleContext(ConstantexpressionContext,0);
};

NoptrnewdeclaratorContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitNoptrnewdeclarator(this);
    } else {
        return visitor.visitChildren(this);
    }
};



CPP14Parser.prototype.noptrnewdeclarator = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new NoptrnewdeclaratorContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 58;
    this.enterRecursionRule(localctx, 58, CPP14Parser.RULE_noptrnewdeclarator, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 821;
        this.match(CPP14Parser.LeftBracket);
        this.state = 822;
        this.expression(0);
        this.state = 823;
        this.match(CPP14Parser.RightBracket);
        this.state = 825;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,46,this._ctx);
        if(la_===1) {
            this.state = 824;
            this.attributespecifierseq(0);

        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 836;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,48,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new NoptrnewdeclaratorContext(this, _parentctx, _parentState);
                this.pushNewRecursionContext(localctx, _startState, CPP14Parser.RULE_noptrnewdeclarator);
                this.state = 827;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 828;
                this.match(CPP14Parser.LeftBracket);
                this.state = 829;
                this.constantexpression();
                this.state = 830;
                this.match(CPP14Parser.RightBracket);
                this.state = 832;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,47,this._ctx);
                if(la_===1) {
                    this.state = 831;
                    this.attributespecifierseq(0);

                } 
            }
            this.state = 838;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,48,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function NewinitializerContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_newinitializer;
    return this;
}

NewinitializerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NewinitializerContext.prototype.constructor = NewinitializerContext;

NewinitializerContext.prototype.expressionlist = function() {
    return this.getTypedRuleContext(ExpressionlistContext,0);
};

NewinitializerContext.prototype.bracedinitlist = function() {
    return this.getTypedRuleContext(BracedinitlistContext,0);
};

NewinitializerContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitNewinitializer(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.NewinitializerContext = NewinitializerContext;

CPP14Parser.prototype.newinitializer = function() {

    var localctx = new NewinitializerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 60, CPP14Parser.RULE_newinitializer);
    var _la = 0; // Token type
    try {
        this.state = 845;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CPP14Parser.LeftParen:
            this.enterOuterAlt(localctx, 1);
            this.state = 839;
            this.match(CPP14Parser.LeftParen);
            this.state = 841;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.File) | (1 << CPP14Parser.Dynamic_cast))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (CPP14Parser.Float - 32)) | (1 << (CPP14Parser.Int - 32)) | (1 << (CPP14Parser.Long - 32)) | (1 << (CPP14Parser.New - 32)) | (1 << (CPP14Parser.Noexcept - 32)) | (1 << (CPP14Parser.Nullptr - 32)) | (1 << (CPP14Parser.Operator - 32)) | (1 << (CPP14Parser.Reinterpret_cast - 32)) | (1 << (CPP14Parser.Short - 32)) | (1 << (CPP14Parser.Signed - 32)) | (1 << (CPP14Parser.Sizeof - 32)) | (1 << (CPP14Parser.Static_cast - 32)) | (1 << (CPP14Parser.This - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (CPP14Parser.Throw - 64)) | (1 << (CPP14Parser.Typeid - 64)) | (1 << (CPP14Parser.Typename - 64)) | (1 << (CPP14Parser.Unsigned - 64)) | (1 << (CPP14Parser.Void - 64)) | (1 << (CPP14Parser.Wchar - 64)) | (1 << (CPP14Parser.LeftParen - 64)) | (1 << (CPP14Parser.LeftBracket - 64)) | (1 << (CPP14Parser.LeftBrace - 64)) | (1 << (CPP14Parser.Plus - 64)) | (1 << (CPP14Parser.Minus - 64)) | (1 << (CPP14Parser.Star - 64)) | (1 << (CPP14Parser.And - 64)) | (1 << (CPP14Parser.Or - 64)) | (1 << (CPP14Parser.Tilde - 64)) | (1 << (CPP14Parser.Not - 64)))) !== 0) || ((((_la - 113)) & ~0x1f) == 0 && ((1 << (_la - 113)) & ((1 << (CPP14Parser.PlusPlus - 113)) | (1 << (CPP14Parser.MinusMinus - 113)) | (1 << (CPP14Parser.Doublecolon - 113)) | (1 << (CPP14Parser.Identifier - 113)) | (1 << (CPP14Parser.Integerliteral - 113)) | (1 << (CPP14Parser.Characterliteral - 113)) | (1 << (CPP14Parser.Floatingliteral - 113)) | (1 << (CPP14Parser.Stringliteral - 113)) | (1 << (CPP14Parser.Booleanliteral - 113)) | (1 << (CPP14Parser.Userdefinedintegerliteral - 113)) | (1 << (CPP14Parser.Userdefinedfloatingliteral - 113)) | (1 << (CPP14Parser.Userdefinedstringliteral - 113)) | (1 << (CPP14Parser.Userdefinedcharacterliteral - 113)))) !== 0)) {
                this.state = 840;
                this.expressionlist();
            }

            this.state = 843;
            this.match(CPP14Parser.RightParen);
            break;
        case CPP14Parser.LeftBrace:
            this.enterOuterAlt(localctx, 2);
            this.state = 844;
            this.bracedinitlist();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DeleteexpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_deleteexpression;
    return this;
}

DeleteexpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DeleteexpressionContext.prototype.constructor = DeleteexpressionContext;

DeleteexpressionContext.prototype.Delete = function() {
    return this.getToken(CPP14Parser.Delete, 0);
};

DeleteexpressionContext.prototype.castexpression = function() {
    return this.getTypedRuleContext(CastexpressionContext,0);
};

DeleteexpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitDeleteexpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.DeleteexpressionContext = DeleteexpressionContext;

CPP14Parser.prototype.deleteexpression = function() {

    var localctx = new DeleteexpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 62, CPP14Parser.RULE_deleteexpression);
    var _la = 0; // Token type
    try {
        this.state = 859;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,53,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 848;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CPP14Parser.Doublecolon) {
                this.state = 847;
                this.match(CPP14Parser.Doublecolon);
            }

            this.state = 850;
            this.match(CPP14Parser.Delete);
            this.state = 851;
            this.castexpression();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 853;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CPP14Parser.Doublecolon) {
                this.state = 852;
                this.match(CPP14Parser.Doublecolon);
            }

            this.state = 855;
            this.match(CPP14Parser.Delete);
            this.state = 856;
            this.match(CPP14Parser.LeftBracket);
            this.state = 857;
            this.match(CPP14Parser.RightBracket);
            this.state = 858;
            this.castexpression();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function NoexceptexpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_noexceptexpression;
    return this;
}

NoexceptexpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NoexceptexpressionContext.prototype.constructor = NoexceptexpressionContext;

NoexceptexpressionContext.prototype.Noexcept = function() {
    return this.getToken(CPP14Parser.Noexcept, 0);
};

NoexceptexpressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

NoexceptexpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitNoexceptexpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.NoexceptexpressionContext = NoexceptexpressionContext;

CPP14Parser.prototype.noexceptexpression = function() {

    var localctx = new NoexceptexpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 64, CPP14Parser.RULE_noexceptexpression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 861;
        this.match(CPP14Parser.Noexcept);
        this.state = 862;
        this.match(CPP14Parser.LeftParen);
        this.state = 863;
        this.expression(0);
        this.state = 864;
        this.match(CPP14Parser.RightParen);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CastexpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_castexpression;
    return this;
}

CastexpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CastexpressionContext.prototype.constructor = CastexpressionContext;

CastexpressionContext.prototype.binaryexpression = function() {
    return this.getTypedRuleContext(BinaryexpressionContext,0);
};

CastexpressionContext.prototype.LeftParen = function() {
    return this.getToken(CPP14Parser.LeftParen, 0);
};

CastexpressionContext.prototype.typeid = function() {
    return this.getTypedRuleContext(TypeidContext,0);
};

CastexpressionContext.prototype.RightParen = function() {
    return this.getToken(CPP14Parser.RightParen, 0);
};

CastexpressionContext.prototype.castexpression = function() {
    return this.getTypedRuleContext(CastexpressionContext,0);
};

CastexpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitCastexpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.CastexpressionContext = CastexpressionContext;

CPP14Parser.prototype.castexpression = function() {

    var localctx = new CastexpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 66, CPP14Parser.RULE_castexpression);
    try {
        this.state = 872;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,54,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 866;
            this.binaryexpression();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 867;
            this.match(CPP14Parser.LeftParen);
            this.state = 868;
            this.typeid();
            this.state = 869;
            this.match(CPP14Parser.RightParen);
            this.state = 870;
            this.castexpression();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PmexpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_pmexpression;
    return this;
}

PmexpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PmexpressionContext.prototype.constructor = PmexpressionContext;

PmexpressionContext.prototype.castexpression = function() {
    return this.getTypedRuleContext(CastexpressionContext,0);
};

PmexpressionContext.prototype.pmexpression = function() {
    return this.getTypedRuleContext(PmexpressionContext,0);
};

PmexpressionContext.prototype.DotStar = function() {
    return this.getToken(CPP14Parser.DotStar, 0);
};

PmexpressionContext.prototype.ArrowStar = function() {
    return this.getToken(CPP14Parser.ArrowStar, 0);
};

PmexpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitPmexpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};



CPP14Parser.prototype.pmexpression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new PmexpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 68;
    this.enterRecursionRule(localctx, 68, CPP14Parser.RULE_pmexpression, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 875;
        this.castexpression();
        this._ctx.stop = this._input.LT(-1);
        this.state = 885;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,56,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 883;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,55,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new PmexpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, CPP14Parser.RULE_pmexpression);
                    this.state = 877;
                    if (!( this.precpred(this._ctx, 2))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
                    }
                    this.state = 878;
                    this.match(CPP14Parser.DotStar);
                    this.state = 879;
                    this.castexpression();
                    break;

                case 2:
                    localctx = new PmexpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, CPP14Parser.RULE_pmexpression);
                    this.state = 880;
                    if (!( this.precpred(this._ctx, 1))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                    }
                    this.state = 881;
                    this.match(CPP14Parser.ArrowStar);
                    this.state = 882;
                    this.castexpression();
                    break;

                } 
            }
            this.state = 887;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,56,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function MultiplicativeexpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_multiplicativeexpression;
    return this;
}

MultiplicativeexpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MultiplicativeexpressionContext.prototype.constructor = MultiplicativeexpressionContext;

MultiplicativeexpressionContext.prototype.pmexpression = function() {
    return this.getTypedRuleContext(PmexpressionContext,0);
};

MultiplicativeexpressionContext.prototype.multiplicativeexpression = function() {
    return this.getTypedRuleContext(MultiplicativeexpressionContext,0);
};

MultiplicativeexpressionContext.prototype.Star = function() {
    return this.getToken(CPP14Parser.Star, 0);
};

MultiplicativeexpressionContext.prototype.Div = function() {
    return this.getToken(CPP14Parser.Div, 0);
};

MultiplicativeexpressionContext.prototype.Mod = function() {
    return this.getToken(CPP14Parser.Mod, 0);
};

MultiplicativeexpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitMultiplicativeexpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};



CPP14Parser.prototype.multiplicativeexpression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new MultiplicativeexpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 70;
    this.enterRecursionRule(localctx, 70, CPP14Parser.RULE_multiplicativeexpression, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 889;
        this.pmexpression(0);
        this._ctx.stop = this._input.LT(-1);
        this.state = 902;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,58,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 900;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,57,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new MultiplicativeexpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, CPP14Parser.RULE_multiplicativeexpression);
                    this.state = 891;
                    if (!( this.precpred(this._ctx, 3))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
                    }
                    this.state = 892;
                    this.match(CPP14Parser.Star);
                    this.state = 893;
                    this.pmexpression(0);
                    break;

                case 2:
                    localctx = new MultiplicativeexpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, CPP14Parser.RULE_multiplicativeexpression);
                    this.state = 894;
                    if (!( this.precpred(this._ctx, 2))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
                    }
                    this.state = 895;
                    this.match(CPP14Parser.Div);
                    this.state = 896;
                    this.pmexpression(0);
                    break;

                case 3:
                    localctx = new MultiplicativeexpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, CPP14Parser.RULE_multiplicativeexpression);
                    this.state = 897;
                    if (!( this.precpred(this._ctx, 1))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                    }
                    this.state = 898;
                    this.match(CPP14Parser.Mod);
                    this.state = 899;
                    this.pmexpression(0);
                    break;

                } 
            }
            this.state = 904;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,58,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function AdditiveexpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_additiveexpression;
    return this;
}

AdditiveexpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AdditiveexpressionContext.prototype.constructor = AdditiveexpressionContext;

AdditiveexpressionContext.prototype.multiplicativeexpression = function() {
    return this.getTypedRuleContext(MultiplicativeexpressionContext,0);
};

AdditiveexpressionContext.prototype.additiveexpression = function() {
    return this.getTypedRuleContext(AdditiveexpressionContext,0);
};

AdditiveexpressionContext.prototype.Plus = function() {
    return this.getToken(CPP14Parser.Plus, 0);
};

AdditiveexpressionContext.prototype.Minus = function() {
    return this.getToken(CPP14Parser.Minus, 0);
};

AdditiveexpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitAdditiveexpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};



CPP14Parser.prototype.additiveexpression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new AdditiveexpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 72;
    this.enterRecursionRule(localctx, 72, CPP14Parser.RULE_additiveexpression, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 906;
        this.multiplicativeexpression(0);
        this._ctx.stop = this._input.LT(-1);
        this.state = 916;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,60,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 914;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,59,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new AdditiveexpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, CPP14Parser.RULE_additiveexpression);
                    this.state = 908;
                    if (!( this.precpred(this._ctx, 2))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
                    }
                    this.state = 909;
                    this.match(CPP14Parser.Plus);
                    this.state = 910;
                    this.multiplicativeexpression(0);
                    break;

                case 2:
                    localctx = new AdditiveexpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, CPP14Parser.RULE_additiveexpression);
                    this.state = 911;
                    if (!( this.precpred(this._ctx, 1))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                    }
                    this.state = 912;
                    this.match(CPP14Parser.Minus);
                    this.state = 913;
                    this.multiplicativeexpression(0);
                    break;

                } 
            }
            this.state = 918;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,60,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function ShiftexpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_shiftexpression;
    return this;
}

ShiftexpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ShiftexpressionContext.prototype.constructor = ShiftexpressionContext;

ShiftexpressionContext.prototype.additiveexpression = function() {
    return this.getTypedRuleContext(AdditiveexpressionContext,0);
};

ShiftexpressionContext.prototype.shiftexpression = function() {
    return this.getTypedRuleContext(ShiftexpressionContext,0);
};

ShiftexpressionContext.prototype.LeftShift = function() {
    return this.getToken(CPP14Parser.LeftShift, 0);
};

ShiftexpressionContext.prototype.rightShift = function() {
    return this.getTypedRuleContext(RightShiftContext,0);
};

ShiftexpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitShiftexpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};



CPP14Parser.prototype.shiftexpression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new ShiftexpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 74;
    this.enterRecursionRule(localctx, 74, CPP14Parser.RULE_shiftexpression, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 920;
        this.additiveexpression(0);
        this._ctx.stop = this._input.LT(-1);
        this.state = 931;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,62,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 929;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,61,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new ShiftexpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, CPP14Parser.RULE_shiftexpression);
                    this.state = 922;
                    if (!( this.precpred(this._ctx, 2))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
                    }
                    this.state = 923;
                    this.match(CPP14Parser.LeftShift);
                    this.state = 924;
                    this.additiveexpression(0);
                    break;

                case 2:
                    localctx = new ShiftexpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, CPP14Parser.RULE_shiftexpression);
                    this.state = 925;
                    if (!( this.precpred(this._ctx, 1))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                    }
                    this.state = 926;
                    this.rightShift();
                    this.state = 927;
                    this.additiveexpression(0);
                    break;

                } 
            }
            this.state = 933;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,62,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function RelationalexpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_relationalexpression;
    return this;
}

RelationalexpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RelationalexpressionContext.prototype.constructor = RelationalexpressionContext;

RelationalexpressionContext.prototype.shiftexpression = function() {
    return this.getTypedRuleContext(ShiftexpressionContext,0);
};

RelationalexpressionContext.prototype.relationalexpression = function() {
    return this.getTypedRuleContext(RelationalexpressionContext,0);
};

RelationalexpressionContext.prototype.Less = function() {
    return this.getToken(CPP14Parser.Less, 0);
};

RelationalexpressionContext.prototype.Greater = function() {
    return this.getToken(CPP14Parser.Greater, 0);
};

RelationalexpressionContext.prototype.LessEqual = function() {
    return this.getToken(CPP14Parser.LessEqual, 0);
};

RelationalexpressionContext.prototype.GreaterEqual = function() {
    return this.getToken(CPP14Parser.GreaterEqual, 0);
};

RelationalexpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitRelationalexpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};



CPP14Parser.prototype.relationalexpression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new RelationalexpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 76;
    this.enterRecursionRule(localctx, 76, CPP14Parser.RULE_relationalexpression, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 935;
        this.shiftexpression(0);
        this._ctx.stop = this._input.LT(-1);
        this.state = 951;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,64,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 949;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,63,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new RelationalexpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, CPP14Parser.RULE_relationalexpression);
                    this.state = 937;
                    if (!( this.precpred(this._ctx, 4))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 4)");
                    }
                    this.state = 938;
                    this.match(CPP14Parser.Less);
                    this.state = 939;
                    this.shiftexpression(0);
                    break;

                case 2:
                    localctx = new RelationalexpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, CPP14Parser.RULE_relationalexpression);
                    this.state = 940;
                    if (!( this.precpred(this._ctx, 3))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
                    }
                    this.state = 941;
                    this.match(CPP14Parser.Greater);
                    this.state = 942;
                    this.shiftexpression(0);
                    break;

                case 3:
                    localctx = new RelationalexpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, CPP14Parser.RULE_relationalexpression);
                    this.state = 943;
                    if (!( this.precpred(this._ctx, 2))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
                    }
                    this.state = 944;
                    this.match(CPP14Parser.LessEqual);
                    this.state = 945;
                    this.shiftexpression(0);
                    break;

                case 4:
                    localctx = new RelationalexpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, CPP14Parser.RULE_relationalexpression);
                    this.state = 946;
                    if (!( this.precpred(this._ctx, 1))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                    }
                    this.state = 947;
                    this.match(CPP14Parser.GreaterEqual);
                    this.state = 948;
                    this.shiftexpression(0);
                    break;

                } 
            }
            this.state = 953;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,64,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function EqualityexpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_equalityexpression;
    return this;
}

EqualityexpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EqualityexpressionContext.prototype.constructor = EqualityexpressionContext;

EqualityexpressionContext.prototype.relationalexpression = function() {
    return this.getTypedRuleContext(RelationalexpressionContext,0);
};

EqualityexpressionContext.prototype.equalityexpression = function() {
    return this.getTypedRuleContext(EqualityexpressionContext,0);
};

EqualityexpressionContext.prototype.Equal = function() {
    return this.getToken(CPP14Parser.Equal, 0);
};

EqualityexpressionContext.prototype.NotEqual = function() {
    return this.getToken(CPP14Parser.NotEqual, 0);
};

EqualityexpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitEqualityexpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};



CPP14Parser.prototype.equalityexpression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new EqualityexpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 78;
    this.enterRecursionRule(localctx, 78, CPP14Parser.RULE_equalityexpression, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 955;
        this.relationalexpression(0);
        this._ctx.stop = this._input.LT(-1);
        this.state = 965;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,66,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 963;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,65,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new EqualityexpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, CPP14Parser.RULE_equalityexpression);
                    this.state = 957;
                    if (!( this.precpred(this._ctx, 2))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
                    }
                    this.state = 958;
                    this.match(CPP14Parser.Equal);
                    this.state = 959;
                    this.relationalexpression(0);
                    break;

                case 2:
                    localctx = new EqualityexpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, CPP14Parser.RULE_equalityexpression);
                    this.state = 960;
                    if (!( this.precpred(this._ctx, 1))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                    }
                    this.state = 961;
                    this.match(CPP14Parser.NotEqual);
                    this.state = 962;
                    this.relationalexpression(0);
                    break;

                } 
            }
            this.state = 967;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,66,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function AndexpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_andexpression;
    return this;
}

AndexpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AndexpressionContext.prototype.constructor = AndexpressionContext;

AndexpressionContext.prototype.equalityexpression = function() {
    return this.getTypedRuleContext(EqualityexpressionContext,0);
};

AndexpressionContext.prototype.andexpression = function() {
    return this.getTypedRuleContext(AndexpressionContext,0);
};

AndexpressionContext.prototype.And = function() {
    return this.getToken(CPP14Parser.And, 0);
};

AndexpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitAndexpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};



CPP14Parser.prototype.andexpression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new AndexpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 80;
    this.enterRecursionRule(localctx, 80, CPP14Parser.RULE_andexpression, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 969;
        this.equalityexpression(0);
        this._ctx.stop = this._input.LT(-1);
        this.state = 976;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,67,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new AndexpressionContext(this, _parentctx, _parentState);
                this.pushNewRecursionContext(localctx, _startState, CPP14Parser.RULE_andexpression);
                this.state = 971;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 972;
                this.match(CPP14Parser.And);
                this.state = 973;
                this.equalityexpression(0); 
            }
            this.state = 978;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,67,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function ExclusiveorexpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_exclusiveorexpression;
    return this;
}

ExclusiveorexpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExclusiveorexpressionContext.prototype.constructor = ExclusiveorexpressionContext;

ExclusiveorexpressionContext.prototype.andexpression = function() {
    return this.getTypedRuleContext(AndexpressionContext,0);
};

ExclusiveorexpressionContext.prototype.exclusiveorexpression = function() {
    return this.getTypedRuleContext(ExclusiveorexpressionContext,0);
};

ExclusiveorexpressionContext.prototype.Caret = function() {
    return this.getToken(CPP14Parser.Caret, 0);
};

ExclusiveorexpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitExclusiveorexpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};



CPP14Parser.prototype.exclusiveorexpression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new ExclusiveorexpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 82;
    this.enterRecursionRule(localctx, 82, CPP14Parser.RULE_exclusiveorexpression, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 980;
        this.andexpression(0);
        this._ctx.stop = this._input.LT(-1);
        this.state = 987;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,68,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new ExclusiveorexpressionContext(this, _parentctx, _parentState);
                this.pushNewRecursionContext(localctx, _startState, CPP14Parser.RULE_exclusiveorexpression);
                this.state = 982;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 983;
                this.match(CPP14Parser.Caret);
                this.state = 984;
                this.andexpression(0); 
            }
            this.state = 989;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,68,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function InclusiveorexpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_inclusiveorexpression;
    return this;
}

InclusiveorexpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InclusiveorexpressionContext.prototype.constructor = InclusiveorexpressionContext;

InclusiveorexpressionContext.prototype.exclusiveorexpression = function() {
    return this.getTypedRuleContext(ExclusiveorexpressionContext,0);
};

InclusiveorexpressionContext.prototype.inclusiveorexpression = function() {
    return this.getTypedRuleContext(InclusiveorexpressionContext,0);
};

InclusiveorexpressionContext.prototype.Or = function() {
    return this.getToken(CPP14Parser.Or, 0);
};

InclusiveorexpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitInclusiveorexpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};



CPP14Parser.prototype.inclusiveorexpression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new InclusiveorexpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 84;
    this.enterRecursionRule(localctx, 84, CPP14Parser.RULE_inclusiveorexpression, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 991;
        this.exclusiveorexpression(0);
        this._ctx.stop = this._input.LT(-1);
        this.state = 998;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,69,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new InclusiveorexpressionContext(this, _parentctx, _parentState);
                this.pushNewRecursionContext(localctx, _startState, CPP14Parser.RULE_inclusiveorexpression);
                this.state = 993;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 994;
                this.match(CPP14Parser.Or);
                this.state = 995;
                this.exclusiveorexpression(0); 
            }
            this.state = 1000;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,69,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function LogicalandexpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_logicalandexpression;
    return this;
}

LogicalandexpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LogicalandexpressionContext.prototype.constructor = LogicalandexpressionContext;

LogicalandexpressionContext.prototype.inclusiveorexpression = function() {
    return this.getTypedRuleContext(InclusiveorexpressionContext,0);
};

LogicalandexpressionContext.prototype.logicalandexpression = function() {
    return this.getTypedRuleContext(LogicalandexpressionContext,0);
};

LogicalandexpressionContext.prototype.AndAnd = function() {
    return this.getToken(CPP14Parser.AndAnd, 0);
};

LogicalandexpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitLogicalandexpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};



CPP14Parser.prototype.logicalandexpression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new LogicalandexpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 86;
    this.enterRecursionRule(localctx, 86, CPP14Parser.RULE_logicalandexpression, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1002;
        this.inclusiveorexpression(0);
        this._ctx.stop = this._input.LT(-1);
        this.state = 1009;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,70,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new LogicalandexpressionContext(this, _parentctx, _parentState);
                this.pushNewRecursionContext(localctx, _startState, CPP14Parser.RULE_logicalandexpression);
                this.state = 1004;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 1005;
                this.match(CPP14Parser.AndAnd);
                this.state = 1006;
                this.inclusiveorexpression(0); 
            }
            this.state = 1011;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,70,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function LogicalorexpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_logicalorexpression;
    return this;
}

LogicalorexpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LogicalorexpressionContext.prototype.constructor = LogicalorexpressionContext;

LogicalorexpressionContext.prototype.logicalandexpression = function() {
    return this.getTypedRuleContext(LogicalandexpressionContext,0);
};

LogicalorexpressionContext.prototype.logicalorexpression = function() {
    return this.getTypedRuleContext(LogicalorexpressionContext,0);
};

LogicalorexpressionContext.prototype.OrOr = function() {
    return this.getToken(CPP14Parser.OrOr, 0);
};

LogicalorexpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitLogicalorexpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};



CPP14Parser.prototype.logicalorexpression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new LogicalorexpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 88;
    this.enterRecursionRule(localctx, 88, CPP14Parser.RULE_logicalorexpression, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1013;
        this.logicalandexpression(0);
        this._ctx.stop = this._input.LT(-1);
        this.state = 1020;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,71,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new LogicalorexpressionContext(this, _parentctx, _parentState);
                this.pushNewRecursionContext(localctx, _startState, CPP14Parser.RULE_logicalorexpression);
                this.state = 1015;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 1016;
                this.match(CPP14Parser.OrOr);
                this.state = 1017;
                this.logicalandexpression(0); 
            }
            this.state = 1022;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,71,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function ConditionalexpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_conditionalexpression;
    return this;
}

ConditionalexpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConditionalexpressionContext.prototype.constructor = ConditionalexpressionContext;

ConditionalexpressionContext.prototype.logicalorexpression = function() {
    return this.getTypedRuleContext(LogicalorexpressionContext,0);
};

ConditionalexpressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

ConditionalexpressionContext.prototype.assignmentexpression = function() {
    return this.getTypedRuleContext(AssignmentexpressionContext,0);
};

ConditionalexpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitConditionalexpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.ConditionalexpressionContext = ConditionalexpressionContext;

CPP14Parser.prototype.conditionalexpression = function() {

    var localctx = new ConditionalexpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 90, CPP14Parser.RULE_conditionalexpression);
    try {
        this.state = 1030;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,72,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1023;
            this.logicalorexpression(0);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1024;
            this.logicalorexpression(0);
            this.state = 1025;
            this.match(CPP14Parser.Question);
            this.state = 1026;
            this.expression(0);
            this.state = 1027;
            this.match(CPP14Parser.Colon);
            this.state = 1028;
            this.assignmentexpression();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AssignmentexpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_assignmentexpression;
    return this;
}

AssignmentexpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AssignmentexpressionContext.prototype.constructor = AssignmentexpressionContext;

AssignmentexpressionContext.prototype.conditionalexpression = function() {
    return this.getTypedRuleContext(ConditionalexpressionContext,0);
};

AssignmentexpressionContext.prototype.logicalorexpression = function() {
    return this.getTypedRuleContext(LogicalorexpressionContext,0);
};

AssignmentexpressionContext.prototype.assignmentoperator = function() {
    return this.getTypedRuleContext(AssignmentoperatorContext,0);
};

AssignmentexpressionContext.prototype.initializerclause = function() {
    return this.getTypedRuleContext(InitializerclauseContext,0);
};

AssignmentexpressionContext.prototype.throwexpression = function() {
    return this.getTypedRuleContext(ThrowexpressionContext,0);
};

AssignmentexpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitAssignmentexpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.AssignmentexpressionContext = AssignmentexpressionContext;

CPP14Parser.prototype.assignmentexpression = function() {

    var localctx = new AssignmentexpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 92, CPP14Parser.RULE_assignmentexpression);
    try {
        this.state = 1038;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,73,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1032;
            this.conditionalexpression();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1033;
            this.logicalorexpression(0);
            this.state = 1034;
            this.assignmentoperator();
            this.state = 1035;
            this.initializerclause();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1037;
            this.throwexpression();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AssignmentoperatorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_assignmentoperator;
    return this;
}

AssignmentoperatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AssignmentoperatorContext.prototype.constructor = AssignmentoperatorContext;

AssignmentoperatorContext.prototype.rightShiftAssign = function() {
    return this.getTypedRuleContext(RightShiftAssignContext,0);
};

AssignmentoperatorContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitAssignmentoperator(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.AssignmentoperatorContext = AssignmentoperatorContext;

CPP14Parser.prototype.assignmentoperator = function() {

    var localctx = new AssignmentoperatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 94, CPP14Parser.RULE_assignmentoperator);
    try {
        this.state = 1051;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CPP14Parser.Assign:
            this.enterOuterAlt(localctx, 1);
            this.state = 1040;
            this.match(CPP14Parser.Assign);
            break;
        case CPP14Parser.StarAssign:
            this.enterOuterAlt(localctx, 2);
            this.state = 1041;
            this.match(CPP14Parser.StarAssign);
            break;
        case CPP14Parser.DivAssign:
            this.enterOuterAlt(localctx, 3);
            this.state = 1042;
            this.match(CPP14Parser.DivAssign);
            break;
        case CPP14Parser.ModAssign:
            this.enterOuterAlt(localctx, 4);
            this.state = 1043;
            this.match(CPP14Parser.ModAssign);
            break;
        case CPP14Parser.PlusAssign:
            this.enterOuterAlt(localctx, 5);
            this.state = 1044;
            this.match(CPP14Parser.PlusAssign);
            break;
        case CPP14Parser.MinusAssign:
            this.enterOuterAlt(localctx, 6);
            this.state = 1045;
            this.match(CPP14Parser.MinusAssign);
            break;
        case CPP14Parser.Greater:
            this.enterOuterAlt(localctx, 7);
            this.state = 1046;
            this.rightShiftAssign();
            break;
        case CPP14Parser.LeftShiftAssign:
            this.enterOuterAlt(localctx, 8);
            this.state = 1047;
            this.match(CPP14Parser.LeftShiftAssign);
            break;
        case CPP14Parser.AndAssign:
            this.enterOuterAlt(localctx, 9);
            this.state = 1048;
            this.match(CPP14Parser.AndAssign);
            break;
        case CPP14Parser.XorAssign:
            this.enterOuterAlt(localctx, 10);
            this.state = 1049;
            this.match(CPP14Parser.XorAssign);
            break;
        case CPP14Parser.OrAssign:
            this.enterOuterAlt(localctx, 11);
            this.state = 1050;
            this.match(CPP14Parser.OrAssign);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_expression;
    return this;
}

ExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExpressionContext.prototype.constructor = ExpressionContext;

ExpressionContext.prototype.assignmentexpression = function() {
    return this.getTypedRuleContext(AssignmentexpressionContext,0);
};

ExpressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

ExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};



CPP14Parser.prototype.expression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new ExpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 96;
    this.enterRecursionRule(localctx, 96, CPP14Parser.RULE_expression, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1054;
        this.assignmentexpression();
        this._ctx.stop = this._input.LT(-1);
        this.state = 1061;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,75,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new ExpressionContext(this, _parentctx, _parentState);
                this.pushNewRecursionContext(localctx, _startState, CPP14Parser.RULE_expression);
                this.state = 1056;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 1057;
                this.match(CPP14Parser.Comma);
                this.state = 1058;
                this.assignmentexpression(); 
            }
            this.state = 1063;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,75,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function ConstantexpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_constantexpression;
    return this;
}

ConstantexpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConstantexpressionContext.prototype.constructor = ConstantexpressionContext;

ConstantexpressionContext.prototype.conditionalexpression = function() {
    return this.getTypedRuleContext(ConditionalexpressionContext,0);
};

ConstantexpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitConstantexpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.ConstantexpressionContext = ConstantexpressionContext;

CPP14Parser.prototype.constantexpression = function() {

    var localctx = new ConstantexpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 98, CPP14Parser.RULE_constantexpression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1064;
        this.conditionalexpression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function StatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_statement;
    return this;
}

StatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StatementContext.prototype.constructor = StatementContext;

StatementContext.prototype.labeledstatement = function() {
    return this.getTypedRuleContext(LabeledstatementContext,0);
};

StatementContext.prototype.expressionstatement = function() {
    return this.getTypedRuleContext(ExpressionstatementContext,0);
};

StatementContext.prototype.attributespecifierseq = function() {
    return this.getTypedRuleContext(AttributespecifierseqContext,0);
};

StatementContext.prototype.compoundstatement = function() {
    return this.getTypedRuleContext(CompoundstatementContext,0);
};

StatementContext.prototype.selectionstatement = function() {
    return this.getTypedRuleContext(SelectionstatementContext,0);
};

StatementContext.prototype.switchstatement = function() {
    return this.getTypedRuleContext(SwitchstatementContext,0);
};

StatementContext.prototype.iterationstatement = function() {
    return this.getTypedRuleContext(IterationstatementContext,0);
};

StatementContext.prototype.whilestatement = function() {
    return this.getTypedRuleContext(WhilestatementContext,0);
};

StatementContext.prototype.dowhilestatement = function() {
    return this.getTypedRuleContext(DowhilestatementContext,0);
};

StatementContext.prototype.jumpstatement = function() {
    return this.getTypedRuleContext(JumpstatementContext,0);
};

StatementContext.prototype.breakStatement = function() {
    return this.getTypedRuleContext(BreakStatementContext,0);
};

StatementContext.prototype.continueStatement = function() {
    return this.getTypedRuleContext(ContinueStatementContext,0);
};

StatementContext.prototype.returnStatement = function() {
    return this.getTypedRuleContext(ReturnStatementContext,0);
};

StatementContext.prototype.variabledeclarationstatement = function() {
    return this.getTypedRuleContext(VariabledeclarationstatementContext,0);
};

StatementContext.prototype.declarationstatement = function() {
    return this.getTypedRuleContext(DeclarationstatementContext,0);
};

StatementContext.prototype.tryblock = function() {
    return this.getTypedRuleContext(TryblockContext,0);
};

StatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.StatementContext = StatementContext;

CPP14Parser.prototype.statement = function() {

    var localctx = new StatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 100, CPP14Parser.RULE_statement);
    var _la = 0; // Token type
    try {
        this.state = 1117;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,88,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1066;
            this.labeledstatement();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1068;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,76,this._ctx);
            if(la_===1) {
                this.state = 1067;
                this.attributespecifierseq(0);

            }
            this.state = 1070;
            this.expressionstatement();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1072;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CPP14Parser.Alignas || _la===CPP14Parser.LeftBracket) {
                this.state = 1071;
                this.attributespecifierseq(0);
            }

            this.state = 1074;
            this.compoundstatement();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 1076;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CPP14Parser.Alignas || _la===CPP14Parser.LeftBracket) {
                this.state = 1075;
                this.attributespecifierseq(0);
            }

            this.state = 1078;
            this.selectionstatement();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 1080;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CPP14Parser.Alignas || _la===CPP14Parser.LeftBracket) {
                this.state = 1079;
                this.attributespecifierseq(0);
            }

            this.state = 1082;
            this.switchstatement();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 1084;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CPP14Parser.Alignas || _la===CPP14Parser.LeftBracket) {
                this.state = 1083;
                this.attributespecifierseq(0);
            }

            this.state = 1086;
            this.iterationstatement();
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 1088;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CPP14Parser.Alignas || _la===CPP14Parser.LeftBracket) {
                this.state = 1087;
                this.attributespecifierseq(0);
            }

            this.state = 1090;
            this.whilestatement();
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 1092;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CPP14Parser.Alignas || _la===CPP14Parser.LeftBracket) {
                this.state = 1091;
                this.attributespecifierseq(0);
            }

            this.state = 1094;
            this.dowhilestatement();
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 1096;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CPP14Parser.Alignas || _la===CPP14Parser.LeftBracket) {
                this.state = 1095;
                this.attributespecifierseq(0);
            }

            this.state = 1098;
            this.jumpstatement();
            break;

        case 10:
            this.enterOuterAlt(localctx, 10);
            this.state = 1100;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CPP14Parser.Alignas || _la===CPP14Parser.LeftBracket) {
                this.state = 1099;
                this.attributespecifierseq(0);
            }

            this.state = 1102;
            this.breakStatement();
            break;

        case 11:
            this.enterOuterAlt(localctx, 11);
            this.state = 1104;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CPP14Parser.Alignas || _la===CPP14Parser.LeftBracket) {
                this.state = 1103;
                this.attributespecifierseq(0);
            }

            this.state = 1106;
            this.continueStatement();
            break;

        case 12:
            this.enterOuterAlt(localctx, 12);
            this.state = 1108;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CPP14Parser.Alignas || _la===CPP14Parser.LeftBracket) {
                this.state = 1107;
                this.attributespecifierseq(0);
            }

            this.state = 1110;
            this.returnStatement();
            break;

        case 13:
            this.enterOuterAlt(localctx, 13);
            this.state = 1111;
            this.variabledeclarationstatement();
            break;

        case 14:
            this.enterOuterAlt(localctx, 14);
            this.state = 1112;
            this.declarationstatement();
            break;

        case 15:
            this.enterOuterAlt(localctx, 15);
            this.state = 1114;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CPP14Parser.Alignas || _la===CPP14Parser.LeftBracket) {
                this.state = 1113;
                this.attributespecifierseq(0);
            }

            this.state = 1116;
            this.tryblock();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LabeledstatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_labeledstatement;
    return this;
}

LabeledstatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LabeledstatementContext.prototype.constructor = LabeledstatementContext;

LabeledstatementContext.prototype.Identifier = function() {
    return this.getToken(CPP14Parser.Identifier, 0);
};

LabeledstatementContext.prototype.statement = function() {
    return this.getTypedRuleContext(StatementContext,0);
};

LabeledstatementContext.prototype.attributespecifierseq = function() {
    return this.getTypedRuleContext(AttributespecifierseqContext,0);
};

LabeledstatementContext.prototype.Case = function() {
    return this.getToken(CPP14Parser.Case, 0);
};

LabeledstatementContext.prototype.constantexpression = function() {
    return this.getTypedRuleContext(ConstantexpressionContext,0);
};

LabeledstatementContext.prototype.Default = function() {
    return this.getToken(CPP14Parser.Default, 0);
};

LabeledstatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitLabeledstatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.LabeledstatementContext = LabeledstatementContext;

CPP14Parser.prototype.labeledstatement = function() {

    var localctx = new LabeledstatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 102, CPP14Parser.RULE_labeledstatement);
    var _la = 0; // Token type
    try {
        this.state = 1139;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,92,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1120;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CPP14Parser.Alignas || _la===CPP14Parser.LeftBracket) {
                this.state = 1119;
                this.attributespecifierseq(0);
            }

            this.state = 1122;
            this.match(CPP14Parser.Identifier);
            this.state = 1123;
            this.match(CPP14Parser.Colon);
            this.state = 1124;
            this.statement();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1126;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CPP14Parser.Alignas || _la===CPP14Parser.LeftBracket) {
                this.state = 1125;
                this.attributespecifierseq(0);
            }

            this.state = 1128;
            this.match(CPP14Parser.Case);
            this.state = 1129;
            this.constantexpression();
            this.state = 1130;
            this.match(CPP14Parser.Colon);
            this.state = 1131;
            this.statement();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1134;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CPP14Parser.Alignas || _la===CPP14Parser.LeftBracket) {
                this.state = 1133;
                this.attributespecifierseq(0);
            }

            this.state = 1136;
            this.match(CPP14Parser.Default);
            this.state = 1137;
            this.match(CPP14Parser.Colon);
            this.state = 1138;
            this.statement();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ExpressionstatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_expressionstatement;
    return this;
}

ExpressionstatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExpressionstatementContext.prototype.constructor = ExpressionstatementContext;

ExpressionstatementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

ExpressionstatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitExpressionstatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.ExpressionstatementContext = ExpressionstatementContext;

CPP14Parser.prototype.expressionstatement = function() {

    var localctx = new ExpressionstatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 104, CPP14Parser.RULE_expressionstatement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1142;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.File) | (1 << CPP14Parser.Dynamic_cast))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (CPP14Parser.Float - 32)) | (1 << (CPP14Parser.Int - 32)) | (1 << (CPP14Parser.Long - 32)) | (1 << (CPP14Parser.New - 32)) | (1 << (CPP14Parser.Noexcept - 32)) | (1 << (CPP14Parser.Nullptr - 32)) | (1 << (CPP14Parser.Operator - 32)) | (1 << (CPP14Parser.Reinterpret_cast - 32)) | (1 << (CPP14Parser.Short - 32)) | (1 << (CPP14Parser.Signed - 32)) | (1 << (CPP14Parser.Sizeof - 32)) | (1 << (CPP14Parser.Static_cast - 32)) | (1 << (CPP14Parser.This - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (CPP14Parser.Throw - 64)) | (1 << (CPP14Parser.Typeid - 64)) | (1 << (CPP14Parser.Typename - 64)) | (1 << (CPP14Parser.Unsigned - 64)) | (1 << (CPP14Parser.Void - 64)) | (1 << (CPP14Parser.Wchar - 64)) | (1 << (CPP14Parser.LeftParen - 64)) | (1 << (CPP14Parser.LeftBracket - 64)) | (1 << (CPP14Parser.Plus - 64)) | (1 << (CPP14Parser.Minus - 64)) | (1 << (CPP14Parser.Star - 64)) | (1 << (CPP14Parser.And - 64)) | (1 << (CPP14Parser.Or - 64)) | (1 << (CPP14Parser.Tilde - 64)) | (1 << (CPP14Parser.Not - 64)))) !== 0) || ((((_la - 113)) & ~0x1f) == 0 && ((1 << (_la - 113)) & ((1 << (CPP14Parser.PlusPlus - 113)) | (1 << (CPP14Parser.MinusMinus - 113)) | (1 << (CPP14Parser.Doublecolon - 113)) | (1 << (CPP14Parser.Identifier - 113)) | (1 << (CPP14Parser.Integerliteral - 113)) | (1 << (CPP14Parser.Characterliteral - 113)) | (1 << (CPP14Parser.Floatingliteral - 113)) | (1 << (CPP14Parser.Stringliteral - 113)) | (1 << (CPP14Parser.Booleanliteral - 113)) | (1 << (CPP14Parser.Userdefinedintegerliteral - 113)) | (1 << (CPP14Parser.Userdefinedfloatingliteral - 113)) | (1 << (CPP14Parser.Userdefinedstringliteral - 113)) | (1 << (CPP14Parser.Userdefinedcharacterliteral - 113)))) !== 0)) {
            this.state = 1141;
            this.expression(0);
        }

        this.state = 1144;
        this.match(CPP14Parser.Semi);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CompoundstatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_compoundstatement;
    return this;
}

CompoundstatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CompoundstatementContext.prototype.constructor = CompoundstatementContext;

CompoundstatementContext.prototype.statementseq = function() {
    return this.getTypedRuleContext(StatementseqContext,0);
};

CompoundstatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitCompoundstatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.CompoundstatementContext = CompoundstatementContext;

CPP14Parser.prototype.compoundstatement = function() {

    var localctx = new CompoundstatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 106, CPP14Parser.RULE_compoundstatement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1146;
        this.match(CPP14Parser.LeftBrace);
        this.state = 1148;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CPP14Parser.Alignas) | (1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Asm) | (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Break) | (1 << CPP14Parser.Case) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Class) | (1 << CPP14Parser.Const) | (1 << CPP14Parser.Constexpr) | (1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Continue) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Default) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.Do) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.File) | (1 << CPP14Parser.Dynamic_cast) | (1 << CPP14Parser.Enum) | (1 << CPP14Parser.Explicit) | (1 << CPP14Parser.Extern))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (CPP14Parser.Float - 32)) | (1 << (CPP14Parser.For - 32)) | (1 << (CPP14Parser.Friend - 32)) | (1 << (CPP14Parser.Goto - 32)) | (1 << (CPP14Parser.If - 32)) | (1 << (CPP14Parser.Inline - 32)) | (1 << (CPP14Parser.Int - 32)) | (1 << (CPP14Parser.Long - 32)) | (1 << (CPP14Parser.Mutable - 32)) | (1 << (CPP14Parser.Namespace - 32)) | (1 << (CPP14Parser.New - 32)) | (1 << (CPP14Parser.Noexcept - 32)) | (1 << (CPP14Parser.Nullptr - 32)) | (1 << (CPP14Parser.Operator - 32)) | (1 << (CPP14Parser.Register - 32)) | (1 << (CPP14Parser.Reinterpret_cast - 32)) | (1 << (CPP14Parser.Return - 32)) | (1 << (CPP14Parser.Short - 32)) | (1 << (CPP14Parser.Signed - 32)) | (1 << (CPP14Parser.Sizeof - 32)) | (1 << (CPP14Parser.Static - 32)) | (1 << (CPP14Parser.Static_assert - 32)) | (1 << (CPP14Parser.Static_cast - 32)) | (1 << (CPP14Parser.Struct - 32)) | (1 << (CPP14Parser.Switch - 32)) | (1 << (CPP14Parser.This - 32)) | (1 << (CPP14Parser.Thread_local - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (CPP14Parser.Throw - 64)) | (1 << (CPP14Parser.Try - 64)) | (1 << (CPP14Parser.Typedef - 64)) | (1 << (CPP14Parser.Typeid - 64)) | (1 << (CPP14Parser.Typename - 64)) | (1 << (CPP14Parser.Union - 64)) | (1 << (CPP14Parser.Unsigned - 64)) | (1 << (CPP14Parser.Using - 64)) | (1 << (CPP14Parser.Virtual - 64)) | (1 << (CPP14Parser.Void - 64)) | (1 << (CPP14Parser.Volatile - 64)) | (1 << (CPP14Parser.Wchar - 64)) | (1 << (CPP14Parser.While - 64)) | (1 << (CPP14Parser.LeftParen - 64)) | (1 << (CPP14Parser.LeftBracket - 64)) | (1 << (CPP14Parser.LeftBrace - 64)) | (1 << (CPP14Parser.Plus - 64)) | (1 << (CPP14Parser.Minus - 64)) | (1 << (CPP14Parser.Star - 64)) | (1 << (CPP14Parser.And - 64)) | (1 << (CPP14Parser.Or - 64)) | (1 << (CPP14Parser.Tilde - 64)) | (1 << (CPP14Parser.Not - 64)))) !== 0) || ((((_la - 111)) & ~0x1f) == 0 && ((1 << (_la - 111)) & ((1 << (CPP14Parser.AndAnd - 111)) | (1 << (CPP14Parser.PlusPlus - 111)) | (1 << (CPP14Parser.MinusMinus - 111)) | (1 << (CPP14Parser.Doublecolon - 111)) | (1 << (CPP14Parser.Semi - 111)) | (1 << (CPP14Parser.Ellipsis - 111)) | (1 << (CPP14Parser.Identifier - 111)) | (1 << (CPP14Parser.Integerliteral - 111)) | (1 << (CPP14Parser.Characterliteral - 111)) | (1 << (CPP14Parser.Floatingliteral - 111)) | (1 << (CPP14Parser.Stringliteral - 111)) | (1 << (CPP14Parser.Booleanliteral - 111)) | (1 << (CPP14Parser.Userdefinedintegerliteral - 111)) | (1 << (CPP14Parser.Userdefinedfloatingliteral - 111)) | (1 << (CPP14Parser.Userdefinedstringliteral - 111)) | (1 << (CPP14Parser.Userdefinedcharacterliteral - 111)))) !== 0)) {
            this.state = 1147;
            this.statementseq();
        }

        this.state = 1150;
        this.match(CPP14Parser.RightBrace);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function StatementseqContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_statementseq;
    return this;
}

StatementseqContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StatementseqContext.prototype.constructor = StatementseqContext;

StatementseqContext.prototype.statement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(StatementContext);
    } else {
        return this.getTypedRuleContext(StatementContext,i);
    }
};

StatementseqContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitStatementseq(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.StatementseqContext = StatementseqContext;

CPP14Parser.prototype.statementseq = function() {

    var localctx = new StatementseqContext(this, this._ctx, this.state);
    this.enterRule(localctx, 108, CPP14Parser.RULE_statementseq);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1152;
        this.statement();
        this.state = 1156;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CPP14Parser.Alignas) | (1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Asm) | (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Break) | (1 << CPP14Parser.Case) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Class) | (1 << CPP14Parser.Const) | (1 << CPP14Parser.Constexpr) | (1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Continue) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Default) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.Do) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.File) | (1 << CPP14Parser.Dynamic_cast) | (1 << CPP14Parser.Enum) | (1 << CPP14Parser.Explicit) | (1 << CPP14Parser.Extern))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (CPP14Parser.Float - 32)) | (1 << (CPP14Parser.For - 32)) | (1 << (CPP14Parser.Friend - 32)) | (1 << (CPP14Parser.Goto - 32)) | (1 << (CPP14Parser.If - 32)) | (1 << (CPP14Parser.Inline - 32)) | (1 << (CPP14Parser.Int - 32)) | (1 << (CPP14Parser.Long - 32)) | (1 << (CPP14Parser.Mutable - 32)) | (1 << (CPP14Parser.Namespace - 32)) | (1 << (CPP14Parser.New - 32)) | (1 << (CPP14Parser.Noexcept - 32)) | (1 << (CPP14Parser.Nullptr - 32)) | (1 << (CPP14Parser.Operator - 32)) | (1 << (CPP14Parser.Register - 32)) | (1 << (CPP14Parser.Reinterpret_cast - 32)) | (1 << (CPP14Parser.Return - 32)) | (1 << (CPP14Parser.Short - 32)) | (1 << (CPP14Parser.Signed - 32)) | (1 << (CPP14Parser.Sizeof - 32)) | (1 << (CPP14Parser.Static - 32)) | (1 << (CPP14Parser.Static_assert - 32)) | (1 << (CPP14Parser.Static_cast - 32)) | (1 << (CPP14Parser.Struct - 32)) | (1 << (CPP14Parser.Switch - 32)) | (1 << (CPP14Parser.This - 32)) | (1 << (CPP14Parser.Thread_local - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (CPP14Parser.Throw - 64)) | (1 << (CPP14Parser.Try - 64)) | (1 << (CPP14Parser.Typedef - 64)) | (1 << (CPP14Parser.Typeid - 64)) | (1 << (CPP14Parser.Typename - 64)) | (1 << (CPP14Parser.Union - 64)) | (1 << (CPP14Parser.Unsigned - 64)) | (1 << (CPP14Parser.Using - 64)) | (1 << (CPP14Parser.Virtual - 64)) | (1 << (CPP14Parser.Void - 64)) | (1 << (CPP14Parser.Volatile - 64)) | (1 << (CPP14Parser.Wchar - 64)) | (1 << (CPP14Parser.While - 64)) | (1 << (CPP14Parser.LeftParen - 64)) | (1 << (CPP14Parser.LeftBracket - 64)) | (1 << (CPP14Parser.LeftBrace - 64)) | (1 << (CPP14Parser.Plus - 64)) | (1 << (CPP14Parser.Minus - 64)) | (1 << (CPP14Parser.Star - 64)) | (1 << (CPP14Parser.And - 64)) | (1 << (CPP14Parser.Or - 64)) | (1 << (CPP14Parser.Tilde - 64)) | (1 << (CPP14Parser.Not - 64)))) !== 0) || ((((_la - 111)) & ~0x1f) == 0 && ((1 << (_la - 111)) & ((1 << (CPP14Parser.AndAnd - 111)) | (1 << (CPP14Parser.PlusPlus - 111)) | (1 << (CPP14Parser.MinusMinus - 111)) | (1 << (CPP14Parser.Doublecolon - 111)) | (1 << (CPP14Parser.Semi - 111)) | (1 << (CPP14Parser.Ellipsis - 111)) | (1 << (CPP14Parser.Identifier - 111)) | (1 << (CPP14Parser.Integerliteral - 111)) | (1 << (CPP14Parser.Characterliteral - 111)) | (1 << (CPP14Parser.Floatingliteral - 111)) | (1 << (CPP14Parser.Stringliteral - 111)) | (1 << (CPP14Parser.Booleanliteral - 111)) | (1 << (CPP14Parser.Userdefinedintegerliteral - 111)) | (1 << (CPP14Parser.Userdefinedfloatingliteral - 111)) | (1 << (CPP14Parser.Userdefinedstringliteral - 111)) | (1 << (CPP14Parser.Userdefinedcharacterliteral - 111)))) !== 0)) {
            this.state = 1153;
            this.statement();
            this.state = 1158;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SelectionstatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_selectionstatement;
    return this;
}

SelectionstatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SelectionstatementContext.prototype.constructor = SelectionstatementContext;

SelectionstatementContext.prototype.If = function() {
    return this.getToken(CPP14Parser.If, 0);
};

SelectionstatementContext.prototype.condition = function() {
    return this.getTypedRuleContext(ConditionContext,0);
};

SelectionstatementContext.prototype.statement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(StatementContext);
    } else {
        return this.getTypedRuleContext(StatementContext,i);
    }
};

SelectionstatementContext.prototype.Else = function() {
    return this.getToken(CPP14Parser.Else, 0);
};

SelectionstatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitSelectionstatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.SelectionstatementContext = SelectionstatementContext;

CPP14Parser.prototype.selectionstatement = function() {

    var localctx = new SelectionstatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 110, CPP14Parser.RULE_selectionstatement);
    try {
        this.state = 1173;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,96,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1159;
            this.match(CPP14Parser.If);
            this.state = 1160;
            this.match(CPP14Parser.LeftParen);
            this.state = 1161;
            this.condition();
            this.state = 1162;
            this.match(CPP14Parser.RightParen);
            this.state = 1163;
            this.statement();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1165;
            this.match(CPP14Parser.If);
            this.state = 1166;
            this.match(CPP14Parser.LeftParen);
            this.state = 1167;
            this.condition();
            this.state = 1168;
            this.match(CPP14Parser.RightParen);
            this.state = 1169;
            this.statement();
            this.state = 1170;
            this.match(CPP14Parser.Else);
            this.state = 1171;
            this.statement();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SwitchstatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_switchstatement;
    return this;
}

SwitchstatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SwitchstatementContext.prototype.constructor = SwitchstatementContext;

SwitchstatementContext.prototype.Switch = function() {
    return this.getToken(CPP14Parser.Switch, 0);
};

SwitchstatementContext.prototype.condition = function() {
    return this.getTypedRuleContext(ConditionContext,0);
};

SwitchstatementContext.prototype.statement = function() {
    return this.getTypedRuleContext(StatementContext,0);
};

SwitchstatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitSwitchstatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.SwitchstatementContext = SwitchstatementContext;

CPP14Parser.prototype.switchstatement = function() {

    var localctx = new SwitchstatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 112, CPP14Parser.RULE_switchstatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1175;
        this.match(CPP14Parser.Switch);
        this.state = 1176;
        this.match(CPP14Parser.LeftParen);
        this.state = 1177;
        this.condition();
        this.state = 1178;
        this.match(CPP14Parser.RightParen);
        this.state = 1179;
        this.statement();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ConditionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_condition;
    return this;
}

ConditionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConditionContext.prototype.constructor = ConditionContext;

ConditionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

ConditionContext.prototype.declspecifierseq = function() {
    return this.getTypedRuleContext(DeclspecifierseqContext,0);
};

ConditionContext.prototype.declarator = function() {
    return this.getTypedRuleContext(DeclaratorContext,0);
};

ConditionContext.prototype.initializerclause = function() {
    return this.getTypedRuleContext(InitializerclauseContext,0);
};

ConditionContext.prototype.attributespecifierseq = function() {
    return this.getTypedRuleContext(AttributespecifierseqContext,0);
};

ConditionContext.prototype.bracedinitlist = function() {
    return this.getTypedRuleContext(BracedinitlistContext,0);
};

ConditionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitCondition(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.ConditionContext = ConditionContext;

CPP14Parser.prototype.condition = function() {

    var localctx = new ConditionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 114, CPP14Parser.RULE_condition);
    var _la = 0; // Token type
    try {
        this.state = 1197;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,99,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1181;
            this.expression(0);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1183;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CPP14Parser.Alignas || _la===CPP14Parser.LeftBracket) {
                this.state = 1182;
                this.attributespecifierseq(0);
            }

            this.state = 1185;
            this.declspecifierseq();
            this.state = 1186;
            this.declarator();
            this.state = 1187;
            this.match(CPP14Parser.Assign);
            this.state = 1188;
            this.initializerclause();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1191;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CPP14Parser.Alignas || _la===CPP14Parser.LeftBracket) {
                this.state = 1190;
                this.attributespecifierseq(0);
            }

            this.state = 1193;
            this.declspecifierseq();
            this.state = 1194;
            this.declarator();
            this.state = 1195;
            this.bracedinitlist();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function WhilestatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_whilestatement;
    return this;
}

WhilestatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
WhilestatementContext.prototype.constructor = WhilestatementContext;

WhilestatementContext.prototype.While = function() {
    return this.getToken(CPP14Parser.While, 0);
};

WhilestatementContext.prototype.condition = function() {
    return this.getTypedRuleContext(ConditionContext,0);
};

WhilestatementContext.prototype.statement = function() {
    return this.getTypedRuleContext(StatementContext,0);
};

WhilestatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitWhilestatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.WhilestatementContext = WhilestatementContext;

CPP14Parser.prototype.whilestatement = function() {

    var localctx = new WhilestatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 116, CPP14Parser.RULE_whilestatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1199;
        this.match(CPP14Parser.While);
        this.state = 1200;
        this.match(CPP14Parser.LeftParen);
        this.state = 1201;
        this.condition();
        this.state = 1202;
        this.match(CPP14Parser.RightParen);
        this.state = 1203;
        this.statement();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DowhilestatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_dowhilestatement;
    return this;
}

DowhilestatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DowhilestatementContext.prototype.constructor = DowhilestatementContext;

DowhilestatementContext.prototype.Do = function() {
    return this.getToken(CPP14Parser.Do, 0);
};

DowhilestatementContext.prototype.compoundstatement = function() {
    return this.getTypedRuleContext(CompoundstatementContext,0);
};

DowhilestatementContext.prototype.While = function() {
    return this.getToken(CPP14Parser.While, 0);
};

DowhilestatementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

DowhilestatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitDowhilestatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.DowhilestatementContext = DowhilestatementContext;

CPP14Parser.prototype.dowhilestatement = function() {

    var localctx = new DowhilestatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 118, CPP14Parser.RULE_dowhilestatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1205;
        this.match(CPP14Parser.Do);
        this.state = 1206;
        this.compoundstatement();
        this.state = 1207;
        this.match(CPP14Parser.While);
        this.state = 1208;
        this.match(CPP14Parser.LeftParen);
        this.state = 1209;
        this.expression(0);
        this.state = 1210;
        this.match(CPP14Parser.RightParen);
        this.state = 1211;
        this.match(CPP14Parser.Semi);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function IterationstatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_iterationstatement;
    return this;
}

IterationstatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IterationstatementContext.prototype.constructor = IterationstatementContext;

IterationstatementContext.prototype.For = function() {
    return this.getToken(CPP14Parser.For, 0);
};

IterationstatementContext.prototype.forinitstatement = function() {
    return this.getTypedRuleContext(ForinitstatementContext,0);
};

IterationstatementContext.prototype.statement = function() {
    return this.getTypedRuleContext(StatementContext,0);
};

IterationstatementContext.prototype.condition = function() {
    return this.getTypedRuleContext(ConditionContext,0);
};

IterationstatementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

IterationstatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitIterationstatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.IterationstatementContext = IterationstatementContext;

CPP14Parser.prototype.iterationstatement = function() {

    var localctx = new IterationstatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 120, CPP14Parser.RULE_iterationstatement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1213;
        this.match(CPP14Parser.For);
        this.state = 1214;
        this.match(CPP14Parser.LeftParen);
        this.state = 1215;
        this.forinitstatement();
        this.state = 1217;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CPP14Parser.Alignas) | (1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Class) | (1 << CPP14Parser.Const) | (1 << CPP14Parser.Constexpr) | (1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.File) | (1 << CPP14Parser.Dynamic_cast) | (1 << CPP14Parser.Enum) | (1 << CPP14Parser.Explicit) | (1 << CPP14Parser.Extern))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (CPP14Parser.Float - 32)) | (1 << (CPP14Parser.Friend - 32)) | (1 << (CPP14Parser.Inline - 32)) | (1 << (CPP14Parser.Int - 32)) | (1 << (CPP14Parser.Long - 32)) | (1 << (CPP14Parser.Mutable - 32)) | (1 << (CPP14Parser.New - 32)) | (1 << (CPP14Parser.Noexcept - 32)) | (1 << (CPP14Parser.Nullptr - 32)) | (1 << (CPP14Parser.Operator - 32)) | (1 << (CPP14Parser.Register - 32)) | (1 << (CPP14Parser.Reinterpret_cast - 32)) | (1 << (CPP14Parser.Short - 32)) | (1 << (CPP14Parser.Signed - 32)) | (1 << (CPP14Parser.Sizeof - 32)) | (1 << (CPP14Parser.Static - 32)) | (1 << (CPP14Parser.Static_cast - 32)) | (1 << (CPP14Parser.Struct - 32)) | (1 << (CPP14Parser.This - 32)) | (1 << (CPP14Parser.Thread_local - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (CPP14Parser.Throw - 64)) | (1 << (CPP14Parser.Typedef - 64)) | (1 << (CPP14Parser.Typeid - 64)) | (1 << (CPP14Parser.Typename - 64)) | (1 << (CPP14Parser.Union - 64)) | (1 << (CPP14Parser.Unsigned - 64)) | (1 << (CPP14Parser.Virtual - 64)) | (1 << (CPP14Parser.Void - 64)) | (1 << (CPP14Parser.Volatile - 64)) | (1 << (CPP14Parser.Wchar - 64)) | (1 << (CPP14Parser.LeftParen - 64)) | (1 << (CPP14Parser.LeftBracket - 64)) | (1 << (CPP14Parser.Plus - 64)) | (1 << (CPP14Parser.Minus - 64)) | (1 << (CPP14Parser.Star - 64)) | (1 << (CPP14Parser.And - 64)) | (1 << (CPP14Parser.Or - 64)) | (1 << (CPP14Parser.Tilde - 64)) | (1 << (CPP14Parser.Not - 64)))) !== 0) || ((((_la - 113)) & ~0x1f) == 0 && ((1 << (_la - 113)) & ((1 << (CPP14Parser.PlusPlus - 113)) | (1 << (CPP14Parser.MinusMinus - 113)) | (1 << (CPP14Parser.Doublecolon - 113)) | (1 << (CPP14Parser.Identifier - 113)) | (1 << (CPP14Parser.Integerliteral - 113)) | (1 << (CPP14Parser.Characterliteral - 113)) | (1 << (CPP14Parser.Floatingliteral - 113)) | (1 << (CPP14Parser.Stringliteral - 113)) | (1 << (CPP14Parser.Booleanliteral - 113)) | (1 << (CPP14Parser.Userdefinedintegerliteral - 113)) | (1 << (CPP14Parser.Userdefinedfloatingliteral - 113)) | (1 << (CPP14Parser.Userdefinedstringliteral - 113)) | (1 << (CPP14Parser.Userdefinedcharacterliteral - 113)))) !== 0)) {
            this.state = 1216;
            this.condition();
        }

        this.state = 1219;
        this.match(CPP14Parser.Semi);
        this.state = 1221;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.File) | (1 << CPP14Parser.Dynamic_cast))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (CPP14Parser.Float - 32)) | (1 << (CPP14Parser.Int - 32)) | (1 << (CPP14Parser.Long - 32)) | (1 << (CPP14Parser.New - 32)) | (1 << (CPP14Parser.Noexcept - 32)) | (1 << (CPP14Parser.Nullptr - 32)) | (1 << (CPP14Parser.Operator - 32)) | (1 << (CPP14Parser.Reinterpret_cast - 32)) | (1 << (CPP14Parser.Short - 32)) | (1 << (CPP14Parser.Signed - 32)) | (1 << (CPP14Parser.Sizeof - 32)) | (1 << (CPP14Parser.Static_cast - 32)) | (1 << (CPP14Parser.This - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (CPP14Parser.Throw - 64)) | (1 << (CPP14Parser.Typeid - 64)) | (1 << (CPP14Parser.Typename - 64)) | (1 << (CPP14Parser.Unsigned - 64)) | (1 << (CPP14Parser.Void - 64)) | (1 << (CPP14Parser.Wchar - 64)) | (1 << (CPP14Parser.LeftParen - 64)) | (1 << (CPP14Parser.LeftBracket - 64)) | (1 << (CPP14Parser.Plus - 64)) | (1 << (CPP14Parser.Minus - 64)) | (1 << (CPP14Parser.Star - 64)) | (1 << (CPP14Parser.And - 64)) | (1 << (CPP14Parser.Or - 64)) | (1 << (CPP14Parser.Tilde - 64)) | (1 << (CPP14Parser.Not - 64)))) !== 0) || ((((_la - 113)) & ~0x1f) == 0 && ((1 << (_la - 113)) & ((1 << (CPP14Parser.PlusPlus - 113)) | (1 << (CPP14Parser.MinusMinus - 113)) | (1 << (CPP14Parser.Doublecolon - 113)) | (1 << (CPP14Parser.Identifier - 113)) | (1 << (CPP14Parser.Integerliteral - 113)) | (1 << (CPP14Parser.Characterliteral - 113)) | (1 << (CPP14Parser.Floatingliteral - 113)) | (1 << (CPP14Parser.Stringliteral - 113)) | (1 << (CPP14Parser.Booleanliteral - 113)) | (1 << (CPP14Parser.Userdefinedintegerliteral - 113)) | (1 << (CPP14Parser.Userdefinedfloatingliteral - 113)) | (1 << (CPP14Parser.Userdefinedstringliteral - 113)) | (1 << (CPP14Parser.Userdefinedcharacterliteral - 113)))) !== 0)) {
            this.state = 1220;
            this.expression(0);
        }

        this.state = 1223;
        this.match(CPP14Parser.RightParen);
        this.state = 1224;
        this.statement();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function EnhancedForStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_enhancedForStatement;
    return this;
}

EnhancedForStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EnhancedForStatementContext.prototype.constructor = EnhancedForStatementContext;

EnhancedForStatementContext.prototype.For = function() {
    return this.getToken(CPP14Parser.For, 0);
};

EnhancedForStatementContext.prototype.forrangedeclaration = function() {
    return this.getTypedRuleContext(ForrangedeclarationContext,0);
};

EnhancedForStatementContext.prototype.forrangeinitializer = function() {
    return this.getTypedRuleContext(ForrangeinitializerContext,0);
};

EnhancedForStatementContext.prototype.statement = function() {
    return this.getTypedRuleContext(StatementContext,0);
};

EnhancedForStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitEnhancedForStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.EnhancedForStatementContext = EnhancedForStatementContext;

CPP14Parser.prototype.enhancedForStatement = function() {

    var localctx = new EnhancedForStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 122, CPP14Parser.RULE_enhancedForStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1226;
        this.match(CPP14Parser.For);
        this.state = 1227;
        this.match(CPP14Parser.LeftParen);
        this.state = 1228;
        this.forrangedeclaration();
        this.state = 1229;
        this.match(CPP14Parser.Colon);
        this.state = 1230;
        this.forrangeinitializer();
        this.state = 1231;
        this.match(CPP14Parser.RightParen);
        this.state = 1232;
        this.statement();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ForinitstatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_forinitstatement;
    return this;
}

ForinitstatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ForinitstatementContext.prototype.constructor = ForinitstatementContext;

ForinitstatementContext.prototype.expressionstatement = function() {
    return this.getTypedRuleContext(ExpressionstatementContext,0);
};

ForinitstatementContext.prototype.variabledeclarationstatement = function() {
    return this.getTypedRuleContext(VariabledeclarationstatementContext,0);
};

ForinitstatementContext.prototype.simpledeclaration = function() {
    return this.getTypedRuleContext(SimpledeclarationContext,0);
};

ForinitstatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitForinitstatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.ForinitstatementContext = ForinitstatementContext;

CPP14Parser.prototype.forinitstatement = function() {

    var localctx = new ForinitstatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 124, CPP14Parser.RULE_forinitstatement);
    try {
        this.state = 1237;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,102,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1234;
            this.expressionstatement();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1235;
            this.variabledeclarationstatement();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1236;
            this.simpledeclaration();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ForrangedeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_forrangedeclaration;
    return this;
}

ForrangedeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ForrangedeclarationContext.prototype.constructor = ForrangedeclarationContext;

ForrangedeclarationContext.prototype.declspecifierseq = function() {
    return this.getTypedRuleContext(DeclspecifierseqContext,0);
};

ForrangedeclarationContext.prototype.declarator = function() {
    return this.getTypedRuleContext(DeclaratorContext,0);
};

ForrangedeclarationContext.prototype.attributespecifierseq = function() {
    return this.getTypedRuleContext(AttributespecifierseqContext,0);
};

ForrangedeclarationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitForrangedeclaration(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.ForrangedeclarationContext = ForrangedeclarationContext;

CPP14Parser.prototype.forrangedeclaration = function() {

    var localctx = new ForrangedeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 126, CPP14Parser.RULE_forrangedeclaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1240;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CPP14Parser.Alignas || _la===CPP14Parser.LeftBracket) {
            this.state = 1239;
            this.attributespecifierseq(0);
        }

        this.state = 1242;
        this.declspecifierseq();
        this.state = 1243;
        this.declarator();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ForrangeinitializerContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_forrangeinitializer;
    return this;
}

ForrangeinitializerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ForrangeinitializerContext.prototype.constructor = ForrangeinitializerContext;

ForrangeinitializerContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

ForrangeinitializerContext.prototype.bracedinitlist = function() {
    return this.getTypedRuleContext(BracedinitlistContext,0);
};

ForrangeinitializerContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitForrangeinitializer(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.ForrangeinitializerContext = ForrangeinitializerContext;

CPP14Parser.prototype.forrangeinitializer = function() {

    var localctx = new ForrangeinitializerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 128, CPP14Parser.RULE_forrangeinitializer);
    try {
        this.state = 1247;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CPP14Parser.Alignof:
        case CPP14Parser.Auto:
        case CPP14Parser.Bool:
        case CPP14Parser.Char:
        case CPP14Parser.Char16:
        case CPP14Parser.Char32:
        case CPP14Parser.Const_cast:
        case CPP14Parser.Decltype:
        case CPP14Parser.Delete:
        case CPP14Parser.Double:
        case CPP14Parser.File:
        case CPP14Parser.Dynamic_cast:
        case CPP14Parser.Float:
        case CPP14Parser.Int:
        case CPP14Parser.Long:
        case CPP14Parser.New:
        case CPP14Parser.Noexcept:
        case CPP14Parser.Nullptr:
        case CPP14Parser.Operator:
        case CPP14Parser.Reinterpret_cast:
        case CPP14Parser.Short:
        case CPP14Parser.Signed:
        case CPP14Parser.Sizeof:
        case CPP14Parser.Static_cast:
        case CPP14Parser.This:
        case CPP14Parser.Throw:
        case CPP14Parser.Typeid:
        case CPP14Parser.Typename:
        case CPP14Parser.Unsigned:
        case CPP14Parser.Void:
        case CPP14Parser.Wchar:
        case CPP14Parser.LeftParen:
        case CPP14Parser.LeftBracket:
        case CPP14Parser.Plus:
        case CPP14Parser.Minus:
        case CPP14Parser.Star:
        case CPP14Parser.And:
        case CPP14Parser.Or:
        case CPP14Parser.Tilde:
        case CPP14Parser.Not:
        case CPP14Parser.PlusPlus:
        case CPP14Parser.MinusMinus:
        case CPP14Parser.Doublecolon:
        case CPP14Parser.Identifier:
        case CPP14Parser.Integerliteral:
        case CPP14Parser.Characterliteral:
        case CPP14Parser.Floatingliteral:
        case CPP14Parser.Stringliteral:
        case CPP14Parser.Booleanliteral:
        case CPP14Parser.Userdefinedintegerliteral:
        case CPP14Parser.Userdefinedfloatingliteral:
        case CPP14Parser.Userdefinedstringliteral:
        case CPP14Parser.Userdefinedcharacterliteral:
            this.enterOuterAlt(localctx, 1);
            this.state = 1245;
            this.expression(0);
            break;
        case CPP14Parser.LeftBrace:
            this.enterOuterAlt(localctx, 2);
            this.state = 1246;
            this.bracedinitlist();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function JumpstatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_jumpstatement;
    return this;
}

JumpstatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
JumpstatementContext.prototype.constructor = JumpstatementContext;

JumpstatementContext.prototype.Goto = function() {
    return this.getToken(CPP14Parser.Goto, 0);
};

JumpstatementContext.prototype.Identifier = function() {
    return this.getToken(CPP14Parser.Identifier, 0);
};

JumpstatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitJumpstatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.JumpstatementContext = JumpstatementContext;

CPP14Parser.prototype.jumpstatement = function() {

    var localctx = new JumpstatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 130, CPP14Parser.RULE_jumpstatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1249;
        this.match(CPP14Parser.Goto);
        this.state = 1250;
        this.match(CPP14Parser.Identifier);
        this.state = 1251;
        this.match(CPP14Parser.Semi);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BreakStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_breakStatement;
    return this;
}

BreakStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BreakStatementContext.prototype.constructor = BreakStatementContext;

BreakStatementContext.prototype.Break = function() {
    return this.getToken(CPP14Parser.Break, 0);
};

BreakStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitBreakStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.BreakStatementContext = BreakStatementContext;

CPP14Parser.prototype.breakStatement = function() {

    var localctx = new BreakStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 132, CPP14Parser.RULE_breakStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1253;
        this.match(CPP14Parser.Break);
        this.state = 1254;
        this.match(CPP14Parser.Semi);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ContinueStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_continueStatement;
    return this;
}

ContinueStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ContinueStatementContext.prototype.constructor = ContinueStatementContext;

ContinueStatementContext.prototype.Continue = function() {
    return this.getToken(CPP14Parser.Continue, 0);
};

ContinueStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitContinueStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.ContinueStatementContext = ContinueStatementContext;

CPP14Parser.prototype.continueStatement = function() {

    var localctx = new ContinueStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 134, CPP14Parser.RULE_continueStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1256;
        this.match(CPP14Parser.Continue);
        this.state = 1257;
        this.match(CPP14Parser.Semi);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ReturnStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_returnStatement;
    return this;
}

ReturnStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ReturnStatementContext.prototype.constructor = ReturnStatementContext;

ReturnStatementContext.prototype.Return = function() {
    return this.getToken(CPP14Parser.Return, 0);
};

ReturnStatementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

ReturnStatementContext.prototype.bracedinitlist = function() {
    return this.getTypedRuleContext(BracedinitlistContext,0);
};

ReturnStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitReturnStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.ReturnStatementContext = ReturnStatementContext;

CPP14Parser.prototype.returnStatement = function() {

    var localctx = new ReturnStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 136, CPP14Parser.RULE_returnStatement);
    var _la = 0; // Token type
    try {
        this.state = 1268;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,106,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1259;
            this.match(CPP14Parser.Return);
            this.state = 1261;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.File) | (1 << CPP14Parser.Dynamic_cast))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (CPP14Parser.Float - 32)) | (1 << (CPP14Parser.Int - 32)) | (1 << (CPP14Parser.Long - 32)) | (1 << (CPP14Parser.New - 32)) | (1 << (CPP14Parser.Noexcept - 32)) | (1 << (CPP14Parser.Nullptr - 32)) | (1 << (CPP14Parser.Operator - 32)) | (1 << (CPP14Parser.Reinterpret_cast - 32)) | (1 << (CPP14Parser.Short - 32)) | (1 << (CPP14Parser.Signed - 32)) | (1 << (CPP14Parser.Sizeof - 32)) | (1 << (CPP14Parser.Static_cast - 32)) | (1 << (CPP14Parser.This - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (CPP14Parser.Throw - 64)) | (1 << (CPP14Parser.Typeid - 64)) | (1 << (CPP14Parser.Typename - 64)) | (1 << (CPP14Parser.Unsigned - 64)) | (1 << (CPP14Parser.Void - 64)) | (1 << (CPP14Parser.Wchar - 64)) | (1 << (CPP14Parser.LeftParen - 64)) | (1 << (CPP14Parser.LeftBracket - 64)) | (1 << (CPP14Parser.Plus - 64)) | (1 << (CPP14Parser.Minus - 64)) | (1 << (CPP14Parser.Star - 64)) | (1 << (CPP14Parser.And - 64)) | (1 << (CPP14Parser.Or - 64)) | (1 << (CPP14Parser.Tilde - 64)) | (1 << (CPP14Parser.Not - 64)))) !== 0) || ((((_la - 113)) & ~0x1f) == 0 && ((1 << (_la - 113)) & ((1 << (CPP14Parser.PlusPlus - 113)) | (1 << (CPP14Parser.MinusMinus - 113)) | (1 << (CPP14Parser.Doublecolon - 113)) | (1 << (CPP14Parser.Identifier - 113)) | (1 << (CPP14Parser.Integerliteral - 113)) | (1 << (CPP14Parser.Characterliteral - 113)) | (1 << (CPP14Parser.Floatingliteral - 113)) | (1 << (CPP14Parser.Stringliteral - 113)) | (1 << (CPP14Parser.Booleanliteral - 113)) | (1 << (CPP14Parser.Userdefinedintegerliteral - 113)) | (1 << (CPP14Parser.Userdefinedfloatingliteral - 113)) | (1 << (CPP14Parser.Userdefinedstringliteral - 113)) | (1 << (CPP14Parser.Userdefinedcharacterliteral - 113)))) !== 0)) {
                this.state = 1260;
                this.expression(0);
            }

            this.state = 1263;
            this.match(CPP14Parser.Semi);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1264;
            this.match(CPP14Parser.Return);
            this.state = 1265;
            this.bracedinitlist();
            this.state = 1266;
            this.match(CPP14Parser.Semi);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DeclarationstatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_declarationstatement;
    return this;
}

DeclarationstatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DeclarationstatementContext.prototype.constructor = DeclarationstatementContext;

DeclarationstatementContext.prototype.simpledeclaration = function() {
    return this.getTypedRuleContext(SimpledeclarationContext,0);
};

DeclarationstatementContext.prototype.blockdeclarationwithoutsimpledeclaration = function() {
    return this.getTypedRuleContext(BlockdeclarationwithoutsimpledeclarationContext,0);
};

DeclarationstatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitDeclarationstatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.DeclarationstatementContext = DeclarationstatementContext;

CPP14Parser.prototype.declarationstatement = function() {

    var localctx = new DeclarationstatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 138, CPP14Parser.RULE_declarationstatement);
    try {
        this.state = 1272;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,107,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1270;
            this.simpledeclaration();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1271;
            this.blockdeclarationwithoutsimpledeclaration();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DeclarationseqContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_declarationseq;
    return this;
}

DeclarationseqContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DeclarationseqContext.prototype.constructor = DeclarationseqContext;

DeclarationseqContext.prototype.declaration = function() {
    return this.getTypedRuleContext(DeclarationContext,0);
};

DeclarationseqContext.prototype.declarationseq = function() {
    return this.getTypedRuleContext(DeclarationseqContext,0);
};

DeclarationseqContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitDeclarationseq(this);
    } else {
        return visitor.visitChildren(this);
    }
};



CPP14Parser.prototype.declarationseq = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new DeclarationseqContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 140;
    this.enterRecursionRule(localctx, 140, CPP14Parser.RULE_declarationseq, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1275;
        this.declaration();
        this._ctx.stop = this._input.LT(-1);
        this.state = 1281;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,108,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new DeclarationseqContext(this, _parentctx, _parentState);
                this.pushNewRecursionContext(localctx, _startState, CPP14Parser.RULE_declarationseq);
                this.state = 1277;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 1278;
                this.declaration(); 
            }
            this.state = 1283;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,108,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function MyclassbodyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_myclassbody;
    return this;
}

MyclassbodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MyclassbodyContext.prototype.constructor = MyclassbodyContext;

MyclassbodyContext.prototype.memberspecification = function() {
    return this.getTypedRuleContext(MemberspecificationContext,0);
};

MyclassbodyContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitMyclassbody(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.MyclassbodyContext = MyclassbodyContext;

CPP14Parser.prototype.myclassbody = function() {

    var localctx = new MyclassbodyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 142, CPP14Parser.RULE_myclassbody);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1285;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CPP14Parser.Alignas) | (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Class) | (1 << CPP14Parser.Const) | (1 << CPP14Parser.Constexpr) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.File) | (1 << CPP14Parser.Enum) | (1 << CPP14Parser.Explicit) | (1 << CPP14Parser.Extern))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (CPP14Parser.Float - 32)) | (1 << (CPP14Parser.Friend - 32)) | (1 << (CPP14Parser.Inline - 32)) | (1 << (CPP14Parser.Int - 32)) | (1 << (CPP14Parser.Long - 32)) | (1 << (CPP14Parser.Mutable - 32)) | (1 << (CPP14Parser.Operator - 32)) | (1 << (CPP14Parser.Private - 32)) | (1 << (CPP14Parser.Protected - 32)) | (1 << (CPP14Parser.Public - 32)) | (1 << (CPP14Parser.Register - 32)) | (1 << (CPP14Parser.Short - 32)) | (1 << (CPP14Parser.Signed - 32)) | (1 << (CPP14Parser.Static - 32)) | (1 << (CPP14Parser.Static_assert - 32)) | (1 << (CPP14Parser.Struct - 32)) | (1 << (CPP14Parser.Template - 32)) | (1 << (CPP14Parser.Thread_local - 32)))) !== 0) || ((((_la - 67)) & ~0x1f) == 0 && ((1 << (_la - 67)) & ((1 << (CPP14Parser.Typedef - 67)) | (1 << (CPP14Parser.Typename - 67)) | (1 << (CPP14Parser.Union - 67)) | (1 << (CPP14Parser.Unsigned - 67)) | (1 << (CPP14Parser.Using - 67)) | (1 << (CPP14Parser.Virtual - 67)) | (1 << (CPP14Parser.Void - 67)) | (1 << (CPP14Parser.Volatile - 67)) | (1 << (CPP14Parser.Wchar - 67)) | (1 << (CPP14Parser.LeftBracket - 67)) | (1 << (CPP14Parser.Tilde - 67)))) !== 0) || ((((_la - 120)) & ~0x1f) == 0 && ((1 << (_la - 120)) & ((1 << (CPP14Parser.Doublecolon - 120)) | (1 << (CPP14Parser.Semi - 120)) | (1 << (CPP14Parser.Ellipsis - 120)) | (1 << (CPP14Parser.Identifier - 120)))) !== 0)) {
            this.state = 1284;
            this.memberspecification();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function MyclassspecifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_myclassspecifier;
    return this;
}

MyclassspecifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MyclassspecifierContext.prototype.constructor = MyclassspecifierContext;

MyclassspecifierContext.prototype.myclasshead = function() {
    return this.getTypedRuleContext(MyclassheadContext,0);
};

MyclassspecifierContext.prototype.myclassbody = function() {
    return this.getTypedRuleContext(MyclassbodyContext,0);
};

MyclassspecifierContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitMyclassspecifier(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.MyclassspecifierContext = MyclassspecifierContext;

CPP14Parser.prototype.myclassspecifier = function() {

    var localctx = new MyclassspecifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 144, CPP14Parser.RULE_myclassspecifier);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1287;
        this.myclasshead();
        this.state = 1288;
        this.match(CPP14Parser.LeftBrace);
        this.state = 1289;
        this.myclassbody();
        this.state = 1290;
        this.match(CPP14Parser.RightBrace);
        this.state = 1291;
        this.match(CPP14Parser.Semi);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function MyclassheadContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_myclasshead;
    return this;
}

MyclassheadContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MyclassheadContext.prototype.constructor = MyclassheadContext;

MyclassheadContext.prototype.classkey = function() {
    return this.getTypedRuleContext(ClasskeyContext,0);
};

MyclassheadContext.prototype.classheadname = function() {
    return this.getTypedRuleContext(ClassheadnameContext,0);
};

MyclassheadContext.prototype.attributespecifierseq = function() {
    return this.getTypedRuleContext(AttributespecifierseqContext,0);
};

MyclassheadContext.prototype.nestednamespecifier = function() {
    return this.getTypedRuleContext(NestednamespecifierContext,0);
};

MyclassheadContext.prototype.classvirtspecifier = function() {
    return this.getTypedRuleContext(ClassvirtspecifierContext,0);
};

MyclassheadContext.prototype.baseclause = function() {
    return this.getTypedRuleContext(BaseclauseContext,0);
};

MyclassheadContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitMyclasshead(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.MyclassheadContext = MyclassheadContext;

CPP14Parser.prototype.myclasshead = function() {

    var localctx = new MyclassheadContext(this, this._ctx, this.state);
    this.enterRule(localctx, 146, CPP14Parser.RULE_myclasshead);
    var _la = 0; // Token type
    try {
        this.state = 1314;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,116,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1293;
            this.classkey();
            this.state = 1295;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CPP14Parser.Alignas || _la===CPP14Parser.LeftBracket) {
                this.state = 1294;
                this.attributespecifierseq(0);
            }

            this.state = 1298;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,111,this._ctx);
            if(la_===1) {
                this.state = 1297;
                this.nestednamespecifier(0);

            }
            this.state = 1300;
            this.classheadname();
            this.state = 1302;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CPP14Parser.Final) {
                this.state = 1301;
                this.classvirtspecifier();
            }

            this.state = 1305;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CPP14Parser.Colon) {
                this.state = 1304;
                this.baseclause();
            }

            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1307;
            this.classkey();
            this.state = 1309;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CPP14Parser.Alignas || _la===CPP14Parser.LeftBracket) {
                this.state = 1308;
                this.attributespecifierseq(0);
            }

            this.state = 1312;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CPP14Parser.Colon) {
                this.state = 1311;
                this.baseclause();
            }

            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_declaration;
    return this;
}

DeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DeclarationContext.prototype.constructor = DeclarationContext;

DeclarationContext.prototype.variabledeclarationstatement = function() {
    return this.getTypedRuleContext(VariabledeclarationstatementContext,0);
};

DeclarationContext.prototype.blockdeclaration = function() {
    return this.getTypedRuleContext(BlockdeclarationContext,0);
};

DeclarationContext.prototype.myclassspecifier = function() {
    return this.getTypedRuleContext(MyclassspecifierContext,0);
};

DeclarationContext.prototype.functiondefinition = function() {
    return this.getTypedRuleContext(FunctiondefinitionContext,0);
};

DeclarationContext.prototype.templatedeclaration = function() {
    return this.getTypedRuleContext(TemplatedeclarationContext,0);
};

DeclarationContext.prototype.explicitinstantiation = function() {
    return this.getTypedRuleContext(ExplicitinstantiationContext,0);
};

DeclarationContext.prototype.explicitspecialization = function() {
    return this.getTypedRuleContext(ExplicitspecializationContext,0);
};

DeclarationContext.prototype.linkagespecification = function() {
    return this.getTypedRuleContext(LinkagespecificationContext,0);
};

DeclarationContext.prototype.namespacedefinition = function() {
    return this.getTypedRuleContext(NamespacedefinitionContext,0);
};

DeclarationContext.prototype.emptydeclaration = function() {
    return this.getTypedRuleContext(EmptydeclarationContext,0);
};

DeclarationContext.prototype.attributedeclaration = function() {
    return this.getTypedRuleContext(AttributedeclarationContext,0);
};

DeclarationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitDeclaration(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.DeclarationContext = DeclarationContext;

CPP14Parser.prototype.declaration = function() {

    var localctx = new DeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 148, CPP14Parser.RULE_declaration);
    try {
        this.state = 1327;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,117,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1316;
            this.variabledeclarationstatement();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1317;
            this.blockdeclaration();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1318;
            this.myclassspecifier();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 1319;
            this.functiondefinition();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 1320;
            this.templatedeclaration();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 1321;
            this.explicitinstantiation();
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 1322;
            this.explicitspecialization();
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 1323;
            this.linkagespecification();
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 1324;
            this.namespacedefinition();
            break;

        case 10:
            this.enterOuterAlt(localctx, 10);
            this.state = 1325;
            this.emptydeclaration();
            break;

        case 11:
            this.enterOuterAlt(localctx, 11);
            this.state = 1326;
            this.attributedeclaration();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BlockdeclarationwithoutsimpledeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_blockdeclarationwithoutsimpledeclaration;
    return this;
}

BlockdeclarationwithoutsimpledeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BlockdeclarationwithoutsimpledeclarationContext.prototype.constructor = BlockdeclarationwithoutsimpledeclarationContext;

BlockdeclarationwithoutsimpledeclarationContext.prototype.asmdefinition = function() {
    return this.getTypedRuleContext(AsmdefinitionContext,0);
};

BlockdeclarationwithoutsimpledeclarationContext.prototype.namespacealiasdefinition = function() {
    return this.getTypedRuleContext(NamespacealiasdefinitionContext,0);
};

BlockdeclarationwithoutsimpledeclarationContext.prototype.usingdeclaration = function() {
    return this.getTypedRuleContext(UsingdeclarationContext,0);
};

BlockdeclarationwithoutsimpledeclarationContext.prototype.usingdirective = function() {
    return this.getTypedRuleContext(UsingdirectiveContext,0);
};

BlockdeclarationwithoutsimpledeclarationContext.prototype.static_assertdeclaration = function() {
    return this.getTypedRuleContext(Static_assertdeclarationContext,0);
};

BlockdeclarationwithoutsimpledeclarationContext.prototype.aliasdeclaration = function() {
    return this.getTypedRuleContext(AliasdeclarationContext,0);
};

BlockdeclarationwithoutsimpledeclarationContext.prototype.opaqueenumdeclaration = function() {
    return this.getTypedRuleContext(OpaqueenumdeclarationContext,0);
};

BlockdeclarationwithoutsimpledeclarationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitBlockdeclarationwithoutsimpledeclaration(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.BlockdeclarationwithoutsimpledeclarationContext = BlockdeclarationwithoutsimpledeclarationContext;

CPP14Parser.prototype.blockdeclarationwithoutsimpledeclaration = function() {

    var localctx = new BlockdeclarationwithoutsimpledeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 150, CPP14Parser.RULE_blockdeclarationwithoutsimpledeclaration);
    try {
        this.state = 1336;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,118,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1329;
            this.asmdefinition();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1330;
            this.namespacealiasdefinition();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1331;
            this.usingdeclaration();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 1332;
            this.usingdirective();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 1333;
            this.static_assertdeclaration();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 1334;
            this.aliasdeclaration();
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 1335;
            this.opaqueenumdeclaration();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BlockdeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_blockdeclaration;
    return this;
}

BlockdeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BlockdeclarationContext.prototype.constructor = BlockdeclarationContext;

BlockdeclarationContext.prototype.simpledeclaration = function() {
    return this.getTypedRuleContext(SimpledeclarationContext,0);
};

BlockdeclarationContext.prototype.blockdeclarationwithoutsimpledeclaration = function() {
    return this.getTypedRuleContext(BlockdeclarationwithoutsimpledeclarationContext,0);
};

BlockdeclarationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitBlockdeclaration(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.BlockdeclarationContext = BlockdeclarationContext;

CPP14Parser.prototype.blockdeclaration = function() {

    var localctx = new BlockdeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 152, CPP14Parser.RULE_blockdeclaration);
    try {
        this.state = 1340;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,119,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1338;
            this.simpledeclaration();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1339;
            this.blockdeclarationwithoutsimpledeclaration();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AliasdeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_aliasdeclaration;
    return this;
}

AliasdeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AliasdeclarationContext.prototype.constructor = AliasdeclarationContext;

AliasdeclarationContext.prototype.Using = function() {
    return this.getToken(CPP14Parser.Using, 0);
};

AliasdeclarationContext.prototype.Identifier = function() {
    return this.getToken(CPP14Parser.Identifier, 0);
};

AliasdeclarationContext.prototype.typeid = function() {
    return this.getTypedRuleContext(TypeidContext,0);
};

AliasdeclarationContext.prototype.attributespecifierseq = function() {
    return this.getTypedRuleContext(AttributespecifierseqContext,0);
};

AliasdeclarationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitAliasdeclaration(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.AliasdeclarationContext = AliasdeclarationContext;

CPP14Parser.prototype.aliasdeclaration = function() {

    var localctx = new AliasdeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 154, CPP14Parser.RULE_aliasdeclaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1342;
        this.match(CPP14Parser.Using);
        this.state = 1343;
        this.match(CPP14Parser.Identifier);
        this.state = 1345;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CPP14Parser.Alignas || _la===CPP14Parser.LeftBracket) {
            this.state = 1344;
            this.attributespecifierseq(0);
        }

        this.state = 1347;
        this.match(CPP14Parser.Assign);
        this.state = 1348;
        this.typeid();
        this.state = 1349;
        this.match(CPP14Parser.Semi);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function VariabledeclarationstatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_variabledeclarationstatement;
    return this;
}

VariabledeclarationstatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VariabledeclarationstatementContext.prototype.constructor = VariabledeclarationstatementContext;

VariabledeclarationstatementContext.prototype.variabledeclaration = function() {
    return this.getTypedRuleContext(VariabledeclarationContext,0);
};

VariabledeclarationstatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitVariabledeclarationstatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.VariabledeclarationstatementContext = VariabledeclarationstatementContext;

CPP14Parser.prototype.variabledeclarationstatement = function() {

    var localctx = new VariabledeclarationstatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 156, CPP14Parser.RULE_variabledeclarationstatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1351;
        this.variabledeclaration();
        this.state = 1352;
        this.match(CPP14Parser.Semi);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function VariabledeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_variabledeclaration;
    return this;
}

VariabledeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VariabledeclarationContext.prototype.constructor = VariabledeclarationContext;

VariabledeclarationContext.prototype.typespecifier = function() {
    return this.getTypedRuleContext(TypespecifierContext,0);
};

VariabledeclarationContext.prototype.attributespecifierseq = function() {
    return this.getTypedRuleContext(AttributespecifierseqContext,0);
};

VariabledeclarationContext.prototype.declspecifierseqwithouttype = function() {
    return this.getTypedRuleContext(DeclspecifierseqwithouttypeContext,0);
};

VariabledeclarationContext.prototype.variableDeclaratorList = function() {
    return this.getTypedRuleContext(VariableDeclaratorListContext,0);
};

VariabledeclarationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitVariabledeclaration(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.VariabledeclarationContext = VariabledeclarationContext;

CPP14Parser.prototype.variabledeclaration = function() {

    var localctx = new VariabledeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 158, CPP14Parser.RULE_variabledeclaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1355;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CPP14Parser.Alignas || _la===CPP14Parser.LeftBracket) {
            this.state = 1354;
            this.attributespecifierseq(0);
        }

        this.state = 1358;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(((((_la - 15)) & ~0x1f) == 0 && ((1 << (_la - 15)) & ((1 << (CPP14Parser.Constexpr - 15)) | (1 << (CPP14Parser.Explicit - 15)) | (1 << (CPP14Parser.Extern - 15)) | (1 << (CPP14Parser.Friend - 15)) | (1 << (CPP14Parser.Inline - 15)) | (1 << (CPP14Parser.Mutable - 15)))) !== 0) || ((((_la - 50)) & ~0x1f) == 0 && ((1 << (_la - 50)) & ((1 << (CPP14Parser.Register - 50)) | (1 << (CPP14Parser.Static - 50)) | (1 << (CPP14Parser.Thread_local - 50)) | (1 << (CPP14Parser.Typedef - 50)) | (1 << (CPP14Parser.Virtual - 50)))) !== 0)) {
            this.state = 1357;
            this.declspecifierseqwithouttype();
        }

        this.state = 1360;
        this.typespecifier();
        this.state = 1362;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,123,this._ctx);
        if(la_===1) {
            this.state = 1361;
            this.variableDeclaratorList();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function VariableDeclaratorListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_variableDeclaratorList;
    return this;
}

VariableDeclaratorListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VariableDeclaratorListContext.prototype.constructor = VariableDeclaratorListContext;

VariableDeclaratorListContext.prototype.variableDeclarator = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(VariableDeclaratorContext);
    } else {
        return this.getTypedRuleContext(VariableDeclaratorContext,i);
    }
};

VariableDeclaratorListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitVariableDeclaratorList(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.VariableDeclaratorListContext = VariableDeclaratorListContext;

CPP14Parser.prototype.variableDeclaratorList = function() {

    var localctx = new VariableDeclaratorListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 160, CPP14Parser.RULE_variableDeclaratorList);
    try {
        this.state = 1373;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,125,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);

            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1365;
            this.variableDeclarator();
            this.state = 1370;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,124,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 1366;
                    this.match(CPP14Parser.Comma);
                    this.state = 1367;
                    this.variableDeclarator(); 
                }
                this.state = 1372;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,124,this._ctx);
            }

            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function VariableDeclaratorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_variableDeclarator;
    return this;
}

VariableDeclaratorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VariableDeclaratorContext.prototype.constructor = VariableDeclaratorContext;

VariableDeclaratorContext.prototype.declaratorid = function() {
    return this.getTypedRuleContext(DeclaratoridContext,0);
};

VariableDeclaratorContext.prototype.ptroperator = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PtroperatorContext);
    } else {
        return this.getTypedRuleContext(PtroperatorContext,i);
    }
};

VariableDeclaratorContext.prototype.LeftBracket = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CPP14Parser.LeftBracket);
    } else {
        return this.getToken(CPP14Parser.LeftBracket, i);
    }
};


VariableDeclaratorContext.prototype.RightBracket = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CPP14Parser.RightBracket);
    } else {
        return this.getToken(CPP14Parser.RightBracket, i);
    }
};


VariableDeclaratorContext.prototype.initializerclause = function() {
    return this.getTypedRuleContext(InitializerclauseContext,0);
};

VariableDeclaratorContext.prototype.Integerliteral = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CPP14Parser.Integerliteral);
    } else {
        return this.getToken(CPP14Parser.Integerliteral, i);
    }
};


VariableDeclaratorContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitVariableDeclarator(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.VariableDeclaratorContext = VariableDeclaratorContext;

CPP14Parser.prototype.variableDeclarator = function() {

    var localctx = new VariableDeclaratorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 162, CPP14Parser.RULE_variableDeclarator);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1378;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,126,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1375;
                this.ptroperator(); 
            }
            this.state = 1380;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,126,this._ctx);
        }

        this.state = 1381;
        this.declaratorid();
        this.state = 1389;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,128,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1382;
                this.match(CPP14Parser.LeftBracket);
                this.state = 1384;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===CPP14Parser.Integerliteral) {
                    this.state = 1383;
                    this.match(CPP14Parser.Integerliteral);
                }

                this.state = 1386;
                this.match(CPP14Parser.RightBracket); 
            }
            this.state = 1391;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,128,this._ctx);
        }

        this.state = 1394;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,129,this._ctx);
        if(la_===1) {
            this.state = 1392;
            this.match(CPP14Parser.Assign);
            this.state = 1393;
            this.initializerclause();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DimsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_dims;
    return this;
}

DimsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DimsContext.prototype.constructor = DimsContext;

DimsContext.prototype.LeftBracket = function() {
    return this.getToken(CPP14Parser.LeftBracket, 0);
};

DimsContext.prototype.RightBracket = function() {
    return this.getToken(CPP14Parser.RightBracket, 0);
};

DimsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitDims(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.DimsContext = DimsContext;

CPP14Parser.prototype.dims = function() {

    var localctx = new DimsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 164, CPP14Parser.RULE_dims);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1396;
        this.match(CPP14Parser.LeftBracket);
        this.state = 1397;
        this.match(CPP14Parser.RightBracket);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SimpledeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_simpledeclaration;
    return this;
}

SimpledeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SimpledeclarationContext.prototype.constructor = SimpledeclarationContext;

SimpledeclarationContext.prototype.declspecifierseq = function() {
    return this.getTypedRuleContext(DeclspecifierseqContext,0);
};

SimpledeclarationContext.prototype.initdeclaratorlist = function() {
    return this.getTypedRuleContext(InitdeclaratorlistContext,0);
};

SimpledeclarationContext.prototype.attributespecifierseq = function() {
    return this.getTypedRuleContext(AttributespecifierseqContext,0);
};

SimpledeclarationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitSimpledeclaration(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.SimpledeclarationContext = SimpledeclarationContext;

CPP14Parser.prototype.simpledeclaration = function() {

    var localctx = new SimpledeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 166, CPP14Parser.RULE_simpledeclaration);
    var _la = 0; // Token type
    try {
        this.state = 1413;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CPP14Parser.Auto:
        case CPP14Parser.Bool:
        case CPP14Parser.Char:
        case CPP14Parser.Char16:
        case CPP14Parser.Char32:
        case CPP14Parser.Class:
        case CPP14Parser.Const:
        case CPP14Parser.Constexpr:
        case CPP14Parser.Decltype:
        case CPP14Parser.Double:
        case CPP14Parser.File:
        case CPP14Parser.Enum:
        case CPP14Parser.Explicit:
        case CPP14Parser.Extern:
        case CPP14Parser.Float:
        case CPP14Parser.Friend:
        case CPP14Parser.Inline:
        case CPP14Parser.Int:
        case CPP14Parser.Long:
        case CPP14Parser.Mutable:
        case CPP14Parser.Operator:
        case CPP14Parser.Register:
        case CPP14Parser.Short:
        case CPP14Parser.Signed:
        case CPP14Parser.Static:
        case CPP14Parser.Struct:
        case CPP14Parser.Thread_local:
        case CPP14Parser.Typedef:
        case CPP14Parser.Typename:
        case CPP14Parser.Union:
        case CPP14Parser.Unsigned:
        case CPP14Parser.Virtual:
        case CPP14Parser.Void:
        case CPP14Parser.Volatile:
        case CPP14Parser.Wchar:
        case CPP14Parser.LeftParen:
        case CPP14Parser.Star:
        case CPP14Parser.And:
        case CPP14Parser.Tilde:
        case CPP14Parser.AndAnd:
        case CPP14Parser.Doublecolon:
        case CPP14Parser.Semi:
        case CPP14Parser.Ellipsis:
        case CPP14Parser.Identifier:
            this.enterOuterAlt(localctx, 1);
            this.state = 1400;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,130,this._ctx);
            if(la_===1) {
                this.state = 1399;
                this.declspecifierseq();

            }
            this.state = 1403;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CPP14Parser.Decltype || _la===CPP14Parser.Operator || ((((_la - 78)) & ~0x1f) == 0 && ((1 << (_la - 78)) & ((1 << (CPP14Parser.LeftParen - 78)) | (1 << (CPP14Parser.Star - 78)) | (1 << (CPP14Parser.And - 78)) | (1 << (CPP14Parser.Tilde - 78)))) !== 0) || ((((_la - 111)) & ~0x1f) == 0 && ((1 << (_la - 111)) & ((1 << (CPP14Parser.AndAnd - 111)) | (1 << (CPP14Parser.Doublecolon - 111)) | (1 << (CPP14Parser.Ellipsis - 111)) | (1 << (CPP14Parser.Identifier - 111)))) !== 0)) {
                this.state = 1402;
                this.initdeclaratorlist();
            }

            this.state = 1405;
            this.match(CPP14Parser.Semi);
            break;
        case CPP14Parser.Alignas:
        case CPP14Parser.LeftBracket:
            this.enterOuterAlt(localctx, 2);
            this.state = 1406;
            this.attributespecifierseq(0);
            this.state = 1408;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,132,this._ctx);
            if(la_===1) {
                this.state = 1407;
                this.declspecifierseq();

            }
            this.state = 1410;
            this.initdeclaratorlist();
            this.state = 1411;
            this.match(CPP14Parser.Semi);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Static_assertdeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_static_assertdeclaration;
    return this;
}

Static_assertdeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Static_assertdeclarationContext.prototype.constructor = Static_assertdeclarationContext;

Static_assertdeclarationContext.prototype.Static_assert = function() {
    return this.getToken(CPP14Parser.Static_assert, 0);
};

Static_assertdeclarationContext.prototype.constantexpression = function() {
    return this.getTypedRuleContext(ConstantexpressionContext,0);
};

Static_assertdeclarationContext.prototype.Stringliteral = function() {
    return this.getToken(CPP14Parser.Stringliteral, 0);
};

Static_assertdeclarationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitStatic_assertdeclaration(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.Static_assertdeclarationContext = Static_assertdeclarationContext;

CPP14Parser.prototype.static_assertdeclaration = function() {

    var localctx = new Static_assertdeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 168, CPP14Parser.RULE_static_assertdeclaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1415;
        this.match(CPP14Parser.Static_assert);
        this.state = 1416;
        this.match(CPP14Parser.LeftParen);
        this.state = 1417;
        this.constantexpression();
        this.state = 1418;
        this.match(CPP14Parser.Comma);
        this.state = 1419;
        this.match(CPP14Parser.Stringliteral);
        this.state = 1420;
        this.match(CPP14Parser.RightParen);
        this.state = 1421;
        this.match(CPP14Parser.Semi);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function EmptydeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_emptydeclaration;
    return this;
}

EmptydeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EmptydeclarationContext.prototype.constructor = EmptydeclarationContext;


EmptydeclarationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitEmptydeclaration(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.EmptydeclarationContext = EmptydeclarationContext;

CPP14Parser.prototype.emptydeclaration = function() {

    var localctx = new EmptydeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 170, CPP14Parser.RULE_emptydeclaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1423;
        this.match(CPP14Parser.Semi);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AttributedeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_attributedeclaration;
    return this;
}

AttributedeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AttributedeclarationContext.prototype.constructor = AttributedeclarationContext;

AttributedeclarationContext.prototype.attributespecifierseq = function() {
    return this.getTypedRuleContext(AttributespecifierseqContext,0);
};

AttributedeclarationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitAttributedeclaration(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.AttributedeclarationContext = AttributedeclarationContext;

CPP14Parser.prototype.attributedeclaration = function() {

    var localctx = new AttributedeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 172, CPP14Parser.RULE_attributedeclaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1425;
        this.attributespecifierseq(0);
        this.state = 1426;
        this.match(CPP14Parser.Semi);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DeclspecifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_declspecifier;
    return this;
}

DeclspecifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DeclspecifierContext.prototype.constructor = DeclspecifierContext;

DeclspecifierContext.prototype.declspecifierwithouttype = function() {
    return this.getTypedRuleContext(DeclspecifierwithouttypeContext,0);
};

DeclspecifierContext.prototype.typespecifier = function() {
    return this.getTypedRuleContext(TypespecifierContext,0);
};

DeclspecifierContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitDeclspecifier(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.DeclspecifierContext = DeclspecifierContext;

CPP14Parser.prototype.declspecifier = function() {

    var localctx = new DeclspecifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 174, CPP14Parser.RULE_declspecifier);
    try {
        this.state = 1430;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CPP14Parser.Constexpr:
        case CPP14Parser.Explicit:
        case CPP14Parser.Extern:
        case CPP14Parser.Friend:
        case CPP14Parser.Inline:
        case CPP14Parser.Mutable:
        case CPP14Parser.Register:
        case CPP14Parser.Static:
        case CPP14Parser.Thread_local:
        case CPP14Parser.Typedef:
        case CPP14Parser.Virtual:
            this.enterOuterAlt(localctx, 1);
            this.state = 1428;
            this.declspecifierwithouttype();
            break;
        case CPP14Parser.Auto:
        case CPP14Parser.Bool:
        case CPP14Parser.Char:
        case CPP14Parser.Char16:
        case CPP14Parser.Char32:
        case CPP14Parser.Class:
        case CPP14Parser.Const:
        case CPP14Parser.Decltype:
        case CPP14Parser.Double:
        case CPP14Parser.File:
        case CPP14Parser.Enum:
        case CPP14Parser.Float:
        case CPP14Parser.Int:
        case CPP14Parser.Long:
        case CPP14Parser.Short:
        case CPP14Parser.Signed:
        case CPP14Parser.Struct:
        case CPP14Parser.Typename:
        case CPP14Parser.Union:
        case CPP14Parser.Unsigned:
        case CPP14Parser.Void:
        case CPP14Parser.Volatile:
        case CPP14Parser.Wchar:
        case CPP14Parser.Doublecolon:
        case CPP14Parser.Identifier:
            this.enterOuterAlt(localctx, 2);
            this.state = 1429;
            this.typespecifier();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DeclspecifierseqContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_declspecifierseq;
    return this;
}

DeclspecifierseqContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DeclspecifierseqContext.prototype.constructor = DeclspecifierseqContext;

DeclspecifierseqContext.prototype.declspecifier = function() {
    return this.getTypedRuleContext(DeclspecifierContext,0);
};

DeclspecifierseqContext.prototype.attributespecifierseq = function() {
    return this.getTypedRuleContext(AttributespecifierseqContext,0);
};

DeclspecifierseqContext.prototype.declspecifierseq = function() {
    return this.getTypedRuleContext(DeclspecifierseqContext,0);
};

DeclspecifierseqContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitDeclspecifierseq(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.DeclspecifierseqContext = DeclspecifierseqContext;

CPP14Parser.prototype.declspecifierseq = function() {

    var localctx = new DeclspecifierseqContext(this, this._ctx, this.state);
    this.enterRule(localctx, 176, CPP14Parser.RULE_declspecifierseq);
    var _la = 0; // Token type
    try {
        this.state = 1439;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,136,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1432;
            this.declspecifier();
            this.state = 1434;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CPP14Parser.Alignas || _la===CPP14Parser.LeftBracket) {
                this.state = 1433;
                this.attributespecifierseq(0);
            }

            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1436;
            this.declspecifier();
            this.state = 1437;
            this.declspecifierseq();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DeclspecifierwithouttypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_declspecifierwithouttype;
    return this;
}

DeclspecifierwithouttypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DeclspecifierwithouttypeContext.prototype.constructor = DeclspecifierwithouttypeContext;

DeclspecifierwithouttypeContext.prototype.storageclassspecifier = function() {
    return this.getTypedRuleContext(StorageclassspecifierContext,0);
};

DeclspecifierwithouttypeContext.prototype.functionspecifier = function() {
    return this.getTypedRuleContext(FunctionspecifierContext,0);
};

DeclspecifierwithouttypeContext.prototype.Friend = function() {
    return this.getToken(CPP14Parser.Friend, 0);
};

DeclspecifierwithouttypeContext.prototype.Typedef = function() {
    return this.getToken(CPP14Parser.Typedef, 0);
};

DeclspecifierwithouttypeContext.prototype.Constexpr = function() {
    return this.getToken(CPP14Parser.Constexpr, 0);
};

DeclspecifierwithouttypeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitDeclspecifierwithouttype(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.DeclspecifierwithouttypeContext = DeclspecifierwithouttypeContext;

CPP14Parser.prototype.declspecifierwithouttype = function() {

    var localctx = new DeclspecifierwithouttypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 178, CPP14Parser.RULE_declspecifierwithouttype);
    try {
        this.state = 1446;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CPP14Parser.Extern:
        case CPP14Parser.Mutable:
        case CPP14Parser.Register:
        case CPP14Parser.Static:
        case CPP14Parser.Thread_local:
            this.enterOuterAlt(localctx, 1);
            this.state = 1441;
            this.storageclassspecifier();
            break;
        case CPP14Parser.Explicit:
        case CPP14Parser.Inline:
        case CPP14Parser.Virtual:
            this.enterOuterAlt(localctx, 2);
            this.state = 1442;
            this.functionspecifier();
            break;
        case CPP14Parser.Friend:
            this.enterOuterAlt(localctx, 3);
            this.state = 1443;
            this.match(CPP14Parser.Friend);
            break;
        case CPP14Parser.Typedef:
            this.enterOuterAlt(localctx, 4);
            this.state = 1444;
            this.match(CPP14Parser.Typedef);
            break;
        case CPP14Parser.Constexpr:
            this.enterOuterAlt(localctx, 5);
            this.state = 1445;
            this.match(CPP14Parser.Constexpr);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DeclspecifierseqwithouttypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_declspecifierseqwithouttype;
    return this;
}

DeclspecifierseqwithouttypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DeclspecifierseqwithouttypeContext.prototype.constructor = DeclspecifierseqwithouttypeContext;

DeclspecifierseqwithouttypeContext.prototype.declspecifierwithouttype = function() {
    return this.getTypedRuleContext(DeclspecifierwithouttypeContext,0);
};

DeclspecifierseqwithouttypeContext.prototype.attributespecifierseq = function() {
    return this.getTypedRuleContext(AttributespecifierseqContext,0);
};

DeclspecifierseqwithouttypeContext.prototype.declspecifierseq = function() {
    return this.getTypedRuleContext(DeclspecifierseqContext,0);
};

DeclspecifierseqwithouttypeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitDeclspecifierseqwithouttype(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.DeclspecifierseqwithouttypeContext = DeclspecifierseqwithouttypeContext;

CPP14Parser.prototype.declspecifierseqwithouttype = function() {

    var localctx = new DeclspecifierseqwithouttypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 180, CPP14Parser.RULE_declspecifierseqwithouttype);
    var _la = 0; // Token type
    try {
        this.state = 1455;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,139,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1448;
            this.declspecifierwithouttype();
            this.state = 1450;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CPP14Parser.Alignas || _la===CPP14Parser.LeftBracket) {
                this.state = 1449;
                this.attributespecifierseq(0);
            }

            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1452;
            this.declspecifierwithouttype();
            this.state = 1453;
            this.declspecifierseq();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function StorageclassspecifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_storageclassspecifier;
    return this;
}

StorageclassspecifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StorageclassspecifierContext.prototype.constructor = StorageclassspecifierContext;

StorageclassspecifierContext.prototype.Register = function() {
    return this.getToken(CPP14Parser.Register, 0);
};

StorageclassspecifierContext.prototype.Static = function() {
    return this.getToken(CPP14Parser.Static, 0);
};

StorageclassspecifierContext.prototype.Thread_local = function() {
    return this.getToken(CPP14Parser.Thread_local, 0);
};

StorageclassspecifierContext.prototype.Extern = function() {
    return this.getToken(CPP14Parser.Extern, 0);
};

StorageclassspecifierContext.prototype.Mutable = function() {
    return this.getToken(CPP14Parser.Mutable, 0);
};

StorageclassspecifierContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitStorageclassspecifier(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.StorageclassspecifierContext = StorageclassspecifierContext;

CPP14Parser.prototype.storageclassspecifier = function() {

    var localctx = new StorageclassspecifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 182, CPP14Parser.RULE_storageclassspecifier);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1457;
        _la = this._input.LA(1);
        if(!(_la===CPP14Parser.Extern || ((((_la - 40)) & ~0x1f) == 0 && ((1 << (_la - 40)) & ((1 << (CPP14Parser.Mutable - 40)) | (1 << (CPP14Parser.Register - 40)) | (1 << (CPP14Parser.Static - 40)) | (1 << (CPP14Parser.Thread_local - 40)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FunctionspecifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_functionspecifier;
    return this;
}

FunctionspecifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FunctionspecifierContext.prototype.constructor = FunctionspecifierContext;

FunctionspecifierContext.prototype.Inline = function() {
    return this.getToken(CPP14Parser.Inline, 0);
};

FunctionspecifierContext.prototype.Virtual = function() {
    return this.getToken(CPP14Parser.Virtual, 0);
};

FunctionspecifierContext.prototype.Explicit = function() {
    return this.getToken(CPP14Parser.Explicit, 0);
};

FunctionspecifierContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitFunctionspecifier(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.FunctionspecifierContext = FunctionspecifierContext;

CPP14Parser.prototype.functionspecifier = function() {

    var localctx = new FunctionspecifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 184, CPP14Parser.RULE_functionspecifier);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1459;
        _la = this._input.LA(1);
        if(!(_la===CPP14Parser.Explicit || _la===CPP14Parser.Inline || _la===CPP14Parser.Virtual)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TypedefnameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_typedefname;
    return this;
}

TypedefnameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypedefnameContext.prototype.constructor = TypedefnameContext;

TypedefnameContext.prototype.Identifier = function() {
    return this.getToken(CPP14Parser.Identifier, 0);
};

TypedefnameContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitTypedefname(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.TypedefnameContext = TypedefnameContext;

CPP14Parser.prototype.typedefname = function() {

    var localctx = new TypedefnameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 186, CPP14Parser.RULE_typedefname);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1461;
        this.match(CPP14Parser.Identifier);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TypespecifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_typespecifier;
    return this;
}

TypespecifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypespecifierContext.prototype.constructor = TypespecifierContext;

TypespecifierContext.prototype.trailingtypespecifier = function() {
    return this.getTypedRuleContext(TrailingtypespecifierContext,0);
};

TypespecifierContext.prototype.myclassspecifier = function() {
    return this.getTypedRuleContext(MyclassspecifierContext,0);
};

TypespecifierContext.prototype.enumspecifier = function() {
    return this.getTypedRuleContext(EnumspecifierContext,0);
};

TypespecifierContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitTypespecifier(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.TypespecifierContext = TypespecifierContext;

CPP14Parser.prototype.typespecifier = function() {

    var localctx = new TypespecifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 188, CPP14Parser.RULE_typespecifier);
    try {
        this.state = 1466;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,140,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1463;
            this.trailingtypespecifier();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1464;
            this.myclassspecifier();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1465;
            this.enumspecifier();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TrailingtypespecifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_trailingtypespecifier;
    return this;
}

TrailingtypespecifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TrailingtypespecifierContext.prototype.constructor = TrailingtypespecifierContext;

TrailingtypespecifierContext.prototype.simpletypespecifier = function() {
    return this.getTypedRuleContext(SimpletypespecifierContext,0);
};

TrailingtypespecifierContext.prototype.elaboratedtypespecifier = function() {
    return this.getTypedRuleContext(ElaboratedtypespecifierContext,0);
};

TrailingtypespecifierContext.prototype.typenamespecifier = function() {
    return this.getTypedRuleContext(TypenamespecifierContext,0);
};

TrailingtypespecifierContext.prototype.cvqualifier = function() {
    return this.getTypedRuleContext(CvqualifierContext,0);
};

TrailingtypespecifierContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitTrailingtypespecifier(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.TrailingtypespecifierContext = TrailingtypespecifierContext;

CPP14Parser.prototype.trailingtypespecifier = function() {

    var localctx = new TrailingtypespecifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 190, CPP14Parser.RULE_trailingtypespecifier);
    try {
        this.state = 1472;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CPP14Parser.Auto:
        case CPP14Parser.Bool:
        case CPP14Parser.Char:
        case CPP14Parser.Char16:
        case CPP14Parser.Char32:
        case CPP14Parser.Decltype:
        case CPP14Parser.Double:
        case CPP14Parser.File:
        case CPP14Parser.Float:
        case CPP14Parser.Int:
        case CPP14Parser.Long:
        case CPP14Parser.Short:
        case CPP14Parser.Signed:
        case CPP14Parser.Unsigned:
        case CPP14Parser.Void:
        case CPP14Parser.Wchar:
        case CPP14Parser.Doublecolon:
        case CPP14Parser.Identifier:
            this.enterOuterAlt(localctx, 1);
            this.state = 1468;
            this.simpletypespecifier();
            break;
        case CPP14Parser.Class:
        case CPP14Parser.Enum:
        case CPP14Parser.Struct:
        case CPP14Parser.Union:
            this.enterOuterAlt(localctx, 2);
            this.state = 1469;
            this.elaboratedtypespecifier();
            break;
        case CPP14Parser.Typename:
            this.enterOuterAlt(localctx, 3);
            this.state = 1470;
            this.typenamespecifier();
            break;
        case CPP14Parser.Const:
        case CPP14Parser.Volatile:
            this.enterOuterAlt(localctx, 4);
            this.state = 1471;
            this.cvqualifier();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TypespecifierseqContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_typespecifierseq;
    return this;
}

TypespecifierseqContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypespecifierseqContext.prototype.constructor = TypespecifierseqContext;

TypespecifierseqContext.prototype.typespecifier = function() {
    return this.getTypedRuleContext(TypespecifierContext,0);
};

TypespecifierseqContext.prototype.attributespecifierseq = function() {
    return this.getTypedRuleContext(AttributespecifierseqContext,0);
};

TypespecifierseqContext.prototype.typespecifierseq = function() {
    return this.getTypedRuleContext(TypespecifierseqContext,0);
};

TypespecifierseqContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitTypespecifierseq(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.TypespecifierseqContext = TypespecifierseqContext;

CPP14Parser.prototype.typespecifierseq = function() {

    var localctx = new TypespecifierseqContext(this, this._ctx, this.state);
    this.enterRule(localctx, 192, CPP14Parser.RULE_typespecifierseq);
    try {
        this.state = 1481;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,143,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1474;
            this.typespecifier();
            this.state = 1476;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,142,this._ctx);
            if(la_===1) {
                this.state = 1475;
                this.attributespecifierseq(0);

            }
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1478;
            this.typespecifier();
            this.state = 1479;
            this.typespecifierseq();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TrailingtypespecifierseqContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_trailingtypespecifierseq;
    return this;
}

TrailingtypespecifierseqContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TrailingtypespecifierseqContext.prototype.constructor = TrailingtypespecifierseqContext;

TrailingtypespecifierseqContext.prototype.trailingtypespecifier = function() {
    return this.getTypedRuleContext(TrailingtypespecifierContext,0);
};

TrailingtypespecifierseqContext.prototype.attributespecifierseq = function() {
    return this.getTypedRuleContext(AttributespecifierseqContext,0);
};

TrailingtypespecifierseqContext.prototype.trailingtypespecifierseq = function() {
    return this.getTypedRuleContext(TrailingtypespecifierseqContext,0);
};

TrailingtypespecifierseqContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitTrailingtypespecifierseq(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.TrailingtypespecifierseqContext = TrailingtypespecifierseqContext;

CPP14Parser.prototype.trailingtypespecifierseq = function() {

    var localctx = new TrailingtypespecifierseqContext(this, this._ctx, this.state);
    this.enterRule(localctx, 194, CPP14Parser.RULE_trailingtypespecifierseq);
    try {
        this.state = 1490;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,145,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1483;
            this.trailingtypespecifier();
            this.state = 1485;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,144,this._ctx);
            if(la_===1) {
                this.state = 1484;
                this.attributespecifierseq(0);

            }
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1487;
            this.trailingtypespecifier();
            this.state = 1488;
            this.trailingtypespecifierseq();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SimpletypespecifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_simpletypespecifier;
    return this;
}

SimpletypespecifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SimpletypespecifierContext.prototype.constructor = SimpletypespecifierContext;

SimpletypespecifierContext.prototype.typename = function() {
    return this.getTypedRuleContext(TypenameContext,0);
};

SimpletypespecifierContext.prototype.nestednamespecifier = function() {
    return this.getTypedRuleContext(NestednamespecifierContext,0);
};

SimpletypespecifierContext.prototype.Template = function() {
    return this.getToken(CPP14Parser.Template, 0);
};

SimpletypespecifierContext.prototype.simpletemplateid = function() {
    return this.getTypedRuleContext(SimpletemplateidContext,0);
};

SimpletypespecifierContext.prototype.Char = function() {
    return this.getToken(CPP14Parser.Char, 0);
};

SimpletypespecifierContext.prototype.Char16 = function() {
    return this.getToken(CPP14Parser.Char16, 0);
};

SimpletypespecifierContext.prototype.Char32 = function() {
    return this.getToken(CPP14Parser.Char32, 0);
};

SimpletypespecifierContext.prototype.Wchar = function() {
    return this.getToken(CPP14Parser.Wchar, 0);
};

SimpletypespecifierContext.prototype.Bool = function() {
    return this.getToken(CPP14Parser.Bool, 0);
};

SimpletypespecifierContext.prototype.Short = function() {
    return this.getToken(CPP14Parser.Short, 0);
};

SimpletypespecifierContext.prototype.Int = function() {
    return this.getToken(CPP14Parser.Int, 0);
};

SimpletypespecifierContext.prototype.Long = function() {
    return this.getToken(CPP14Parser.Long, 0);
};

SimpletypespecifierContext.prototype.Signed = function() {
    return this.getToken(CPP14Parser.Signed, 0);
};

SimpletypespecifierContext.prototype.Unsigned = function() {
    return this.getToken(CPP14Parser.Unsigned, 0);
};

SimpletypespecifierContext.prototype.simpletypespecifier = function() {
    return this.getTypedRuleContext(SimpletypespecifierContext,0);
};

SimpletypespecifierContext.prototype.Float = function() {
    return this.getToken(CPP14Parser.Float, 0);
};

SimpletypespecifierContext.prototype.Double = function() {
    return this.getToken(CPP14Parser.Double, 0);
};

SimpletypespecifierContext.prototype.Void = function() {
    return this.getToken(CPP14Parser.Void, 0);
};

SimpletypespecifierContext.prototype.Auto = function() {
    return this.getToken(CPP14Parser.Auto, 0);
};

SimpletypespecifierContext.prototype.decltypespecifier = function() {
    return this.getTypedRuleContext(DecltypespecifierContext,0);
};

SimpletypespecifierContext.prototype.File = function() {
    return this.getToken(CPP14Parser.File, 0);
};

SimpletypespecifierContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitSimpletypespecifier(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.SimpletypespecifierContext = SimpletypespecifierContext;

CPP14Parser.prototype.simpletypespecifier = function() {

    var localctx = new SimpletypespecifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 196, CPP14Parser.RULE_simpletypespecifier);
    try {
        this.state = 1519;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,148,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1493;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,146,this._ctx);
            if(la_===1) {
                this.state = 1492;
                this.nestednamespecifier(0);

            }
            this.state = 1495;
            this.typename();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1496;
            this.nestednamespecifier(0);
            this.state = 1497;
            this.match(CPP14Parser.Template);
            this.state = 1498;
            this.simpletemplateid();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1500;
            this.match(CPP14Parser.Char);
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 1501;
            this.match(CPP14Parser.Char16);
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 1502;
            this.match(CPP14Parser.Char32);
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 1503;
            this.match(CPP14Parser.Wchar);
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 1504;
            this.match(CPP14Parser.Bool);
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 1505;
            this.match(CPP14Parser.Short);
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 1506;
            this.match(CPP14Parser.Int);
            break;

        case 10:
            this.enterOuterAlt(localctx, 10);
            this.state = 1507;
            this.match(CPP14Parser.Long);
            break;

        case 11:
            this.enterOuterAlt(localctx, 11);
            this.state = 1508;
            this.match(CPP14Parser.Signed);
            break;

        case 12:
            this.enterOuterAlt(localctx, 12);
            this.state = 1509;
            this.match(CPP14Parser.Unsigned);
            this.state = 1511;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,147,this._ctx);
            if(la_===1) {
                this.state = 1510;
                this.simpletypespecifier();

            }
            break;

        case 13:
            this.enterOuterAlt(localctx, 13);
            this.state = 1513;
            this.match(CPP14Parser.Float);
            break;

        case 14:
            this.enterOuterAlt(localctx, 14);
            this.state = 1514;
            this.match(CPP14Parser.Double);
            break;

        case 15:
            this.enterOuterAlt(localctx, 15);
            this.state = 1515;
            this.match(CPP14Parser.Void);
            break;

        case 16:
            this.enterOuterAlt(localctx, 16);
            this.state = 1516;
            this.match(CPP14Parser.Auto);
            break;

        case 17:
            this.enterOuterAlt(localctx, 17);
            this.state = 1517;
            this.decltypespecifier();
            break;

        case 18:
            this.enterOuterAlt(localctx, 18);
            this.state = 1518;
            this.match(CPP14Parser.File);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TypenameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_typename;
    return this;
}

TypenameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypenameContext.prototype.constructor = TypenameContext;

TypenameContext.prototype.myclassname = function() {
    return this.getTypedRuleContext(MyclassnameContext,0);
};

TypenameContext.prototype.enumname = function() {
    return this.getTypedRuleContext(EnumnameContext,0);
};

TypenameContext.prototype.typedefname = function() {
    return this.getTypedRuleContext(TypedefnameContext,0);
};

TypenameContext.prototype.simpletemplateid = function() {
    return this.getTypedRuleContext(SimpletemplateidContext,0);
};

TypenameContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitTypename(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.TypenameContext = TypenameContext;

CPP14Parser.prototype.typename = function() {

    var localctx = new TypenameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 198, CPP14Parser.RULE_typename);
    try {
        this.state = 1525;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,149,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1521;
            this.myclassname();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1522;
            this.enumname();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1523;
            this.typedefname();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 1524;
            this.simpletemplateid();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DecltypespecifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_decltypespecifier;
    return this;
}

DecltypespecifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DecltypespecifierContext.prototype.constructor = DecltypespecifierContext;

DecltypespecifierContext.prototype.Decltype = function() {
    return this.getToken(CPP14Parser.Decltype, 0);
};

DecltypespecifierContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

DecltypespecifierContext.prototype.Auto = function() {
    return this.getToken(CPP14Parser.Auto, 0);
};

DecltypespecifierContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitDecltypespecifier(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.DecltypespecifierContext = DecltypespecifierContext;

CPP14Parser.prototype.decltypespecifier = function() {

    var localctx = new DecltypespecifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 200, CPP14Parser.RULE_decltypespecifier);
    try {
        this.state = 1536;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,150,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1527;
            this.match(CPP14Parser.Decltype);
            this.state = 1528;
            this.match(CPP14Parser.LeftParen);
            this.state = 1529;
            this.expression(0);
            this.state = 1530;
            this.match(CPP14Parser.RightParen);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1532;
            this.match(CPP14Parser.Decltype);
            this.state = 1533;
            this.match(CPP14Parser.LeftParen);
            this.state = 1534;
            this.match(CPP14Parser.Auto);
            this.state = 1535;
            this.match(CPP14Parser.RightParen);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ElaboratedtypespecifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_elaboratedtypespecifier;
    return this;
}

ElaboratedtypespecifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ElaboratedtypespecifierContext.prototype.constructor = ElaboratedtypespecifierContext;

ElaboratedtypespecifierContext.prototype.classkey = function() {
    return this.getTypedRuleContext(ClasskeyContext,0);
};

ElaboratedtypespecifierContext.prototype.Identifier = function() {
    return this.getToken(CPP14Parser.Identifier, 0);
};

ElaboratedtypespecifierContext.prototype.attributespecifierseq = function() {
    return this.getTypedRuleContext(AttributespecifierseqContext,0);
};

ElaboratedtypespecifierContext.prototype.nestednamespecifier = function() {
    return this.getTypedRuleContext(NestednamespecifierContext,0);
};

ElaboratedtypespecifierContext.prototype.simpletemplateid = function() {
    return this.getTypedRuleContext(SimpletemplateidContext,0);
};

ElaboratedtypespecifierContext.prototype.Template = function() {
    return this.getToken(CPP14Parser.Template, 0);
};

ElaboratedtypespecifierContext.prototype.Enum = function() {
    return this.getToken(CPP14Parser.Enum, 0);
};

ElaboratedtypespecifierContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitElaboratedtypespecifier(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.ElaboratedtypespecifierContext = ElaboratedtypespecifierContext;

CPP14Parser.prototype.elaboratedtypespecifier = function() {

    var localctx = new ElaboratedtypespecifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 202, CPP14Parser.RULE_elaboratedtypespecifier);
    var _la = 0; // Token type
    try {
        this.state = 1562;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,155,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1538;
            this.classkey();
            this.state = 1540;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CPP14Parser.Alignas || _la===CPP14Parser.LeftBracket) {
                this.state = 1539;
                this.attributespecifierseq(0);
            }

            this.state = 1543;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,152,this._ctx);
            if(la_===1) {
                this.state = 1542;
                this.nestednamespecifier(0);

            }
            this.state = 1545;
            this.match(CPP14Parser.Identifier);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1547;
            this.classkey();
            this.state = 1548;
            this.simpletemplateid();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1550;
            this.classkey();
            this.state = 1551;
            this.nestednamespecifier(0);
            this.state = 1553;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CPP14Parser.Template) {
                this.state = 1552;
                this.match(CPP14Parser.Template);
            }

            this.state = 1555;
            this.simpletemplateid();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 1557;
            this.match(CPP14Parser.Enum);
            this.state = 1559;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,154,this._ctx);
            if(la_===1) {
                this.state = 1558;
                this.nestednamespecifier(0);

            }
            this.state = 1561;
            this.match(CPP14Parser.Identifier);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function EnumnameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_enumname;
    return this;
}

EnumnameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EnumnameContext.prototype.constructor = EnumnameContext;

EnumnameContext.prototype.Identifier = function() {
    return this.getToken(CPP14Parser.Identifier, 0);
};

EnumnameContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitEnumname(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.EnumnameContext = EnumnameContext;

CPP14Parser.prototype.enumname = function() {

    var localctx = new EnumnameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 204, CPP14Parser.RULE_enumname);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1564;
        this.match(CPP14Parser.Identifier);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function EnumspecifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_enumspecifier;
    return this;
}

EnumspecifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EnumspecifierContext.prototype.constructor = EnumspecifierContext;

EnumspecifierContext.prototype.enumhead = function() {
    return this.getTypedRuleContext(EnumheadContext,0);
};

EnumspecifierContext.prototype.enumeratorlist = function() {
    return this.getTypedRuleContext(EnumeratorlistContext,0);
};

EnumspecifierContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitEnumspecifier(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.EnumspecifierContext = EnumspecifierContext;

CPP14Parser.prototype.enumspecifier = function() {

    var localctx = new EnumspecifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 206, CPP14Parser.RULE_enumspecifier);
    var _la = 0; // Token type
    try {
        this.state = 1579;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,157,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1566;
            this.enumhead();
            this.state = 1567;
            this.match(CPP14Parser.LeftBrace);
            this.state = 1569;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CPP14Parser.Identifier) {
                this.state = 1568;
                this.enumeratorlist(0);
            }

            this.state = 1571;
            this.match(CPP14Parser.RightBrace);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1573;
            this.enumhead();
            this.state = 1574;
            this.match(CPP14Parser.LeftBrace);
            this.state = 1575;
            this.enumeratorlist(0);
            this.state = 1576;
            this.match(CPP14Parser.Comma);
            this.state = 1577;
            this.match(CPP14Parser.RightBrace);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function EnumheadContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_enumhead;
    return this;
}

EnumheadContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EnumheadContext.prototype.constructor = EnumheadContext;

EnumheadContext.prototype.enumkey = function() {
    return this.getTypedRuleContext(EnumkeyContext,0);
};

EnumheadContext.prototype.attributespecifierseq = function() {
    return this.getTypedRuleContext(AttributespecifierseqContext,0);
};

EnumheadContext.prototype.Identifier = function() {
    return this.getToken(CPP14Parser.Identifier, 0);
};

EnumheadContext.prototype.enumbase = function() {
    return this.getTypedRuleContext(EnumbaseContext,0);
};

EnumheadContext.prototype.nestednamespecifier = function() {
    return this.getTypedRuleContext(NestednamespecifierContext,0);
};

EnumheadContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitEnumhead(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.EnumheadContext = EnumheadContext;

CPP14Parser.prototype.enumhead = function() {

    var localctx = new EnumheadContext(this, this._ctx, this.state);
    this.enterRule(localctx, 208, CPP14Parser.RULE_enumhead);
    var _la = 0; // Token type
    try {
        this.state = 1600;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,163,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1581;
            this.enumkey();
            this.state = 1583;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CPP14Parser.Alignas || _la===CPP14Parser.LeftBracket) {
                this.state = 1582;
                this.attributespecifierseq(0);
            }

            this.state = 1586;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CPP14Parser.Identifier) {
                this.state = 1585;
                this.match(CPP14Parser.Identifier);
            }

            this.state = 1589;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CPP14Parser.Colon) {
                this.state = 1588;
                this.enumbase();
            }

            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1591;
            this.enumkey();
            this.state = 1593;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CPP14Parser.Alignas || _la===CPP14Parser.LeftBracket) {
                this.state = 1592;
                this.attributespecifierseq(0);
            }

            this.state = 1595;
            this.nestednamespecifier(0);
            this.state = 1596;
            this.match(CPP14Parser.Identifier);
            this.state = 1598;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CPP14Parser.Colon) {
                this.state = 1597;
                this.enumbase();
            }

            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OpaqueenumdeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_opaqueenumdeclaration;
    return this;
}

OpaqueenumdeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OpaqueenumdeclarationContext.prototype.constructor = OpaqueenumdeclarationContext;

OpaqueenumdeclarationContext.prototype.enumkey = function() {
    return this.getTypedRuleContext(EnumkeyContext,0);
};

OpaqueenumdeclarationContext.prototype.Identifier = function() {
    return this.getToken(CPP14Parser.Identifier, 0);
};

OpaqueenumdeclarationContext.prototype.attributespecifierseq = function() {
    return this.getTypedRuleContext(AttributespecifierseqContext,0);
};

OpaqueenumdeclarationContext.prototype.enumbase = function() {
    return this.getTypedRuleContext(EnumbaseContext,0);
};

OpaqueenumdeclarationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitOpaqueenumdeclaration(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.OpaqueenumdeclarationContext = OpaqueenumdeclarationContext;

CPP14Parser.prototype.opaqueenumdeclaration = function() {

    var localctx = new OpaqueenumdeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 210, CPP14Parser.RULE_opaqueenumdeclaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1602;
        this.enumkey();
        this.state = 1604;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CPP14Parser.Alignas || _la===CPP14Parser.LeftBracket) {
            this.state = 1603;
            this.attributespecifierseq(0);
        }

        this.state = 1606;
        this.match(CPP14Parser.Identifier);
        this.state = 1608;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CPP14Parser.Colon) {
            this.state = 1607;
            this.enumbase();
        }

        this.state = 1610;
        this.match(CPP14Parser.Semi);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function EnumkeyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_enumkey;
    return this;
}

EnumkeyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EnumkeyContext.prototype.constructor = EnumkeyContext;

EnumkeyContext.prototype.Enum = function() {
    return this.getToken(CPP14Parser.Enum, 0);
};

EnumkeyContext.prototype.Class = function() {
    return this.getToken(CPP14Parser.Class, 0);
};

EnumkeyContext.prototype.Struct = function() {
    return this.getToken(CPP14Parser.Struct, 0);
};

EnumkeyContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitEnumkey(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.EnumkeyContext = EnumkeyContext;

CPP14Parser.prototype.enumkey = function() {

    var localctx = new EnumkeyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 212, CPP14Parser.RULE_enumkey);
    try {
        this.state = 1617;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,166,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1612;
            this.match(CPP14Parser.Enum);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1613;
            this.match(CPP14Parser.Enum);
            this.state = 1614;
            this.match(CPP14Parser.Class);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1615;
            this.match(CPP14Parser.Enum);
            this.state = 1616;
            this.match(CPP14Parser.Struct);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function EnumbaseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_enumbase;
    return this;
}

EnumbaseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EnumbaseContext.prototype.constructor = EnumbaseContext;

EnumbaseContext.prototype.typespecifierseq = function() {
    return this.getTypedRuleContext(TypespecifierseqContext,0);
};

EnumbaseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitEnumbase(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.EnumbaseContext = EnumbaseContext;

CPP14Parser.prototype.enumbase = function() {

    var localctx = new EnumbaseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 214, CPP14Parser.RULE_enumbase);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1619;
        this.match(CPP14Parser.Colon);
        this.state = 1620;
        this.typespecifierseq();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function EnumeratorlistContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_enumeratorlist;
    return this;
}

EnumeratorlistContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EnumeratorlistContext.prototype.constructor = EnumeratorlistContext;

EnumeratorlistContext.prototype.enumeratordefinition = function() {
    return this.getTypedRuleContext(EnumeratordefinitionContext,0);
};

EnumeratorlistContext.prototype.enumeratorlist = function() {
    return this.getTypedRuleContext(EnumeratorlistContext,0);
};

EnumeratorlistContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitEnumeratorlist(this);
    } else {
        return visitor.visitChildren(this);
    }
};



CPP14Parser.prototype.enumeratorlist = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new EnumeratorlistContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 216;
    this.enterRecursionRule(localctx, 216, CPP14Parser.RULE_enumeratorlist, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1623;
        this.enumeratordefinition();
        this._ctx.stop = this._input.LT(-1);
        this.state = 1630;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,167,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new EnumeratorlistContext(this, _parentctx, _parentState);
                this.pushNewRecursionContext(localctx, _startState, CPP14Parser.RULE_enumeratorlist);
                this.state = 1625;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 1626;
                this.match(CPP14Parser.Comma);
                this.state = 1627;
                this.enumeratordefinition(); 
            }
            this.state = 1632;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,167,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function EnumeratordefinitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_enumeratordefinition;
    return this;
}

EnumeratordefinitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EnumeratordefinitionContext.prototype.constructor = EnumeratordefinitionContext;

EnumeratordefinitionContext.prototype.enumerator = function() {
    return this.getTypedRuleContext(EnumeratorContext,0);
};

EnumeratordefinitionContext.prototype.constantexpression = function() {
    return this.getTypedRuleContext(ConstantexpressionContext,0);
};

EnumeratordefinitionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitEnumeratordefinition(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.EnumeratordefinitionContext = EnumeratordefinitionContext;

CPP14Parser.prototype.enumeratordefinition = function() {

    var localctx = new EnumeratordefinitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 218, CPP14Parser.RULE_enumeratordefinition);
    try {
        this.state = 1638;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,168,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1633;
            this.enumerator();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1634;
            this.enumerator();
            this.state = 1635;
            this.match(CPP14Parser.Assign);
            this.state = 1636;
            this.constantexpression();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function EnumeratorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_enumerator;
    return this;
}

EnumeratorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EnumeratorContext.prototype.constructor = EnumeratorContext;

EnumeratorContext.prototype.Identifier = function() {
    return this.getToken(CPP14Parser.Identifier, 0);
};

EnumeratorContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitEnumerator(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.EnumeratorContext = EnumeratorContext;

CPP14Parser.prototype.enumerator = function() {

    var localctx = new EnumeratorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 220, CPP14Parser.RULE_enumerator);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1640;
        this.match(CPP14Parser.Identifier);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function NamespacenameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_namespacename;
    return this;
}

NamespacenameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NamespacenameContext.prototype.constructor = NamespacenameContext;

NamespacenameContext.prototype.originalnamespacename = function() {
    return this.getTypedRuleContext(OriginalnamespacenameContext,0);
};

NamespacenameContext.prototype.namespacealias = function() {
    return this.getTypedRuleContext(NamespacealiasContext,0);
};

NamespacenameContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitNamespacename(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.NamespacenameContext = NamespacenameContext;

CPP14Parser.prototype.namespacename = function() {

    var localctx = new NamespacenameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 222, CPP14Parser.RULE_namespacename);
    try {
        this.state = 1644;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,169,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1642;
            this.originalnamespacename();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1643;
            this.namespacealias();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OriginalnamespacenameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_originalnamespacename;
    return this;
}

OriginalnamespacenameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OriginalnamespacenameContext.prototype.constructor = OriginalnamespacenameContext;

OriginalnamespacenameContext.prototype.Identifier = function() {
    return this.getToken(CPP14Parser.Identifier, 0);
};

OriginalnamespacenameContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitOriginalnamespacename(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.OriginalnamespacenameContext = OriginalnamespacenameContext;

CPP14Parser.prototype.originalnamespacename = function() {

    var localctx = new OriginalnamespacenameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 224, CPP14Parser.RULE_originalnamespacename);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1646;
        this.match(CPP14Parser.Identifier);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function NamespacedefinitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_namespacedefinition;
    return this;
}

NamespacedefinitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NamespacedefinitionContext.prototype.constructor = NamespacedefinitionContext;

NamespacedefinitionContext.prototype.namednamespacedefinition = function() {
    return this.getTypedRuleContext(NamednamespacedefinitionContext,0);
};

NamespacedefinitionContext.prototype.unnamednamespacedefinition = function() {
    return this.getTypedRuleContext(UnnamednamespacedefinitionContext,0);
};

NamespacedefinitionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitNamespacedefinition(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.NamespacedefinitionContext = NamespacedefinitionContext;

CPP14Parser.prototype.namespacedefinition = function() {

    var localctx = new NamespacedefinitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 226, CPP14Parser.RULE_namespacedefinition);
    try {
        this.state = 1650;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,170,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1648;
            this.namednamespacedefinition();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1649;
            this.unnamednamespacedefinition();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function NamednamespacedefinitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_namednamespacedefinition;
    return this;
}

NamednamespacedefinitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NamednamespacedefinitionContext.prototype.constructor = NamednamespacedefinitionContext;

NamednamespacedefinitionContext.prototype.originalnamespacedefinition = function() {
    return this.getTypedRuleContext(OriginalnamespacedefinitionContext,0);
};

NamednamespacedefinitionContext.prototype.extensionnamespacedefinition = function() {
    return this.getTypedRuleContext(ExtensionnamespacedefinitionContext,0);
};

NamednamespacedefinitionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitNamednamespacedefinition(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.NamednamespacedefinitionContext = NamednamespacedefinitionContext;

CPP14Parser.prototype.namednamespacedefinition = function() {

    var localctx = new NamednamespacedefinitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 228, CPP14Parser.RULE_namednamespacedefinition);
    try {
        this.state = 1654;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,171,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1652;
            this.originalnamespacedefinition();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1653;
            this.extensionnamespacedefinition();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OriginalnamespacedefinitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_originalnamespacedefinition;
    return this;
}

OriginalnamespacedefinitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OriginalnamespacedefinitionContext.prototype.constructor = OriginalnamespacedefinitionContext;

OriginalnamespacedefinitionContext.prototype.Namespace = function() {
    return this.getToken(CPP14Parser.Namespace, 0);
};

OriginalnamespacedefinitionContext.prototype.Identifier = function() {
    return this.getToken(CPP14Parser.Identifier, 0);
};

OriginalnamespacedefinitionContext.prototype.namespacebody = function() {
    return this.getTypedRuleContext(NamespacebodyContext,0);
};

OriginalnamespacedefinitionContext.prototype.Inline = function() {
    return this.getToken(CPP14Parser.Inline, 0);
};

OriginalnamespacedefinitionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitOriginalnamespacedefinition(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.OriginalnamespacedefinitionContext = OriginalnamespacedefinitionContext;

CPP14Parser.prototype.originalnamespacedefinition = function() {

    var localctx = new OriginalnamespacedefinitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 230, CPP14Parser.RULE_originalnamespacedefinition);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1657;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CPP14Parser.Inline) {
            this.state = 1656;
            this.match(CPP14Parser.Inline);
        }

        this.state = 1659;
        this.match(CPP14Parser.Namespace);
        this.state = 1660;
        this.match(CPP14Parser.Identifier);
        this.state = 1661;
        this.match(CPP14Parser.LeftBrace);
        this.state = 1662;
        this.namespacebody();
        this.state = 1663;
        this.match(CPP14Parser.RightBrace);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ExtensionnamespacedefinitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_extensionnamespacedefinition;
    return this;
}

ExtensionnamespacedefinitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExtensionnamespacedefinitionContext.prototype.constructor = ExtensionnamespacedefinitionContext;

ExtensionnamespacedefinitionContext.prototype.Namespace = function() {
    return this.getToken(CPP14Parser.Namespace, 0);
};

ExtensionnamespacedefinitionContext.prototype.originalnamespacename = function() {
    return this.getTypedRuleContext(OriginalnamespacenameContext,0);
};

ExtensionnamespacedefinitionContext.prototype.namespacebody = function() {
    return this.getTypedRuleContext(NamespacebodyContext,0);
};

ExtensionnamespacedefinitionContext.prototype.Inline = function() {
    return this.getToken(CPP14Parser.Inline, 0);
};

ExtensionnamespacedefinitionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitExtensionnamespacedefinition(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.ExtensionnamespacedefinitionContext = ExtensionnamespacedefinitionContext;

CPP14Parser.prototype.extensionnamespacedefinition = function() {

    var localctx = new ExtensionnamespacedefinitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 232, CPP14Parser.RULE_extensionnamespacedefinition);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1666;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CPP14Parser.Inline) {
            this.state = 1665;
            this.match(CPP14Parser.Inline);
        }

        this.state = 1668;
        this.match(CPP14Parser.Namespace);
        this.state = 1669;
        this.originalnamespacename();
        this.state = 1670;
        this.match(CPP14Parser.LeftBrace);
        this.state = 1671;
        this.namespacebody();
        this.state = 1672;
        this.match(CPP14Parser.RightBrace);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function UnnamednamespacedefinitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_unnamednamespacedefinition;
    return this;
}

UnnamednamespacedefinitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UnnamednamespacedefinitionContext.prototype.constructor = UnnamednamespacedefinitionContext;

UnnamednamespacedefinitionContext.prototype.Namespace = function() {
    return this.getToken(CPP14Parser.Namespace, 0);
};

UnnamednamespacedefinitionContext.prototype.namespacebody = function() {
    return this.getTypedRuleContext(NamespacebodyContext,0);
};

UnnamednamespacedefinitionContext.prototype.Inline = function() {
    return this.getToken(CPP14Parser.Inline, 0);
};

UnnamednamespacedefinitionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitUnnamednamespacedefinition(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.UnnamednamespacedefinitionContext = UnnamednamespacedefinitionContext;

CPP14Parser.prototype.unnamednamespacedefinition = function() {

    var localctx = new UnnamednamespacedefinitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 234, CPP14Parser.RULE_unnamednamespacedefinition);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1675;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CPP14Parser.Inline) {
            this.state = 1674;
            this.match(CPP14Parser.Inline);
        }

        this.state = 1677;
        this.match(CPP14Parser.Namespace);
        this.state = 1678;
        this.match(CPP14Parser.LeftBrace);
        this.state = 1679;
        this.namespacebody();
        this.state = 1680;
        this.match(CPP14Parser.RightBrace);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function NamespacebodyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_namespacebody;
    return this;
}

NamespacebodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NamespacebodyContext.prototype.constructor = NamespacebodyContext;

NamespacebodyContext.prototype.declarationseq = function() {
    return this.getTypedRuleContext(DeclarationseqContext,0);
};

NamespacebodyContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitNamespacebody(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.NamespacebodyContext = NamespacebodyContext;

CPP14Parser.prototype.namespacebody = function() {

    var localctx = new NamespacebodyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 236, CPP14Parser.RULE_namespacebody);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1683;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CPP14Parser.Alignas) | (1 << CPP14Parser.Asm) | (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Class) | (1 << CPP14Parser.Const) | (1 << CPP14Parser.Constexpr) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.File) | (1 << CPP14Parser.Enum) | (1 << CPP14Parser.Explicit) | (1 << CPP14Parser.Extern))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (CPP14Parser.Float - 32)) | (1 << (CPP14Parser.Friend - 32)) | (1 << (CPP14Parser.Inline - 32)) | (1 << (CPP14Parser.Int - 32)) | (1 << (CPP14Parser.Long - 32)) | (1 << (CPP14Parser.Mutable - 32)) | (1 << (CPP14Parser.Namespace - 32)) | (1 << (CPP14Parser.Operator - 32)) | (1 << (CPP14Parser.Register - 32)) | (1 << (CPP14Parser.Short - 32)) | (1 << (CPP14Parser.Signed - 32)) | (1 << (CPP14Parser.Static - 32)) | (1 << (CPP14Parser.Static_assert - 32)) | (1 << (CPP14Parser.Struct - 32)) | (1 << (CPP14Parser.Template - 32)) | (1 << (CPP14Parser.Thread_local - 32)))) !== 0) || ((((_la - 67)) & ~0x1f) == 0 && ((1 << (_la - 67)) & ((1 << (CPP14Parser.Typedef - 67)) | (1 << (CPP14Parser.Typename - 67)) | (1 << (CPP14Parser.Union - 67)) | (1 << (CPP14Parser.Unsigned - 67)) | (1 << (CPP14Parser.Using - 67)) | (1 << (CPP14Parser.Virtual - 67)) | (1 << (CPP14Parser.Void - 67)) | (1 << (CPP14Parser.Volatile - 67)) | (1 << (CPP14Parser.Wchar - 67)) | (1 << (CPP14Parser.LeftParen - 67)) | (1 << (CPP14Parser.LeftBracket - 67)) | (1 << (CPP14Parser.Star - 67)) | (1 << (CPP14Parser.And - 67)) | (1 << (CPP14Parser.Tilde - 67)))) !== 0) || ((((_la - 111)) & ~0x1f) == 0 && ((1 << (_la - 111)) & ((1 << (CPP14Parser.AndAnd - 111)) | (1 << (CPP14Parser.Doublecolon - 111)) | (1 << (CPP14Parser.Semi - 111)) | (1 << (CPP14Parser.Ellipsis - 111)) | (1 << (CPP14Parser.Identifier - 111)))) !== 0)) {
            this.state = 1682;
            this.declarationseq(0);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function NamespacealiasContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_namespacealias;
    return this;
}

NamespacealiasContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NamespacealiasContext.prototype.constructor = NamespacealiasContext;

NamespacealiasContext.prototype.Identifier = function() {
    return this.getToken(CPP14Parser.Identifier, 0);
};

NamespacealiasContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitNamespacealias(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.NamespacealiasContext = NamespacealiasContext;

CPP14Parser.prototype.namespacealias = function() {

    var localctx = new NamespacealiasContext(this, this._ctx, this.state);
    this.enterRule(localctx, 238, CPP14Parser.RULE_namespacealias);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1685;
        this.match(CPP14Parser.Identifier);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function NamespacealiasdefinitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_namespacealiasdefinition;
    return this;
}

NamespacealiasdefinitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NamespacealiasdefinitionContext.prototype.constructor = NamespacealiasdefinitionContext;

NamespacealiasdefinitionContext.prototype.Namespace = function() {
    return this.getToken(CPP14Parser.Namespace, 0);
};

NamespacealiasdefinitionContext.prototype.Identifier = function() {
    return this.getToken(CPP14Parser.Identifier, 0);
};

NamespacealiasdefinitionContext.prototype.qualifiednamespacespecifier = function() {
    return this.getTypedRuleContext(QualifiednamespacespecifierContext,0);
};

NamespacealiasdefinitionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitNamespacealiasdefinition(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.NamespacealiasdefinitionContext = NamespacealiasdefinitionContext;

CPP14Parser.prototype.namespacealiasdefinition = function() {

    var localctx = new NamespacealiasdefinitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 240, CPP14Parser.RULE_namespacealiasdefinition);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1687;
        this.match(CPP14Parser.Namespace);
        this.state = 1688;
        this.match(CPP14Parser.Identifier);
        this.state = 1689;
        this.match(CPP14Parser.Assign);
        this.state = 1690;
        this.qualifiednamespacespecifier();
        this.state = 1691;
        this.match(CPP14Parser.Semi);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function QualifiednamespacespecifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_qualifiednamespacespecifier;
    return this;
}

QualifiednamespacespecifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
QualifiednamespacespecifierContext.prototype.constructor = QualifiednamespacespecifierContext;

QualifiednamespacespecifierContext.prototype.namespacename = function() {
    return this.getTypedRuleContext(NamespacenameContext,0);
};

QualifiednamespacespecifierContext.prototype.nestednamespecifier = function() {
    return this.getTypedRuleContext(NestednamespecifierContext,0);
};

QualifiednamespacespecifierContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitQualifiednamespacespecifier(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.QualifiednamespacespecifierContext = QualifiednamespacespecifierContext;

CPP14Parser.prototype.qualifiednamespacespecifier = function() {

    var localctx = new QualifiednamespacespecifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 242, CPP14Parser.RULE_qualifiednamespacespecifier);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1694;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,176,this._ctx);
        if(la_===1) {
            this.state = 1693;
            this.nestednamespecifier(0);

        }
        this.state = 1696;
        this.namespacename();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function UsingdeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_usingdeclaration;
    return this;
}

UsingdeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UsingdeclarationContext.prototype.constructor = UsingdeclarationContext;

UsingdeclarationContext.prototype.Using = function() {
    return this.getToken(CPP14Parser.Using, 0);
};

UsingdeclarationContext.prototype.nestednamespecifier = function() {
    return this.getTypedRuleContext(NestednamespecifierContext,0);
};

UsingdeclarationContext.prototype.unqualifiedid = function() {
    return this.getTypedRuleContext(UnqualifiedidContext,0);
};

UsingdeclarationContext.prototype.Typename = function() {
    return this.getToken(CPP14Parser.Typename, 0);
};

UsingdeclarationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitUsingdeclaration(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.UsingdeclarationContext = UsingdeclarationContext;

CPP14Parser.prototype.usingdeclaration = function() {

    var localctx = new UsingdeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 244, CPP14Parser.RULE_usingdeclaration);
    var _la = 0; // Token type
    try {
        this.state = 1711;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,178,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1698;
            this.match(CPP14Parser.Using);
            this.state = 1700;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CPP14Parser.Typename) {
                this.state = 1699;
                this.match(CPP14Parser.Typename);
            }

            this.state = 1702;
            this.nestednamespecifier(0);
            this.state = 1703;
            this.unqualifiedid();
            this.state = 1704;
            this.match(CPP14Parser.Semi);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1706;
            this.match(CPP14Parser.Using);
            this.state = 1707;
            this.match(CPP14Parser.Doublecolon);
            this.state = 1708;
            this.unqualifiedid();
            this.state = 1709;
            this.match(CPP14Parser.Semi);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function UsingdirectiveContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_usingdirective;
    return this;
}

UsingdirectiveContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UsingdirectiveContext.prototype.constructor = UsingdirectiveContext;

UsingdirectiveContext.prototype.Using = function() {
    return this.getToken(CPP14Parser.Using, 0);
};

UsingdirectiveContext.prototype.Namespace = function() {
    return this.getToken(CPP14Parser.Namespace, 0);
};

UsingdirectiveContext.prototype.namespacename = function() {
    return this.getTypedRuleContext(NamespacenameContext,0);
};

UsingdirectiveContext.prototype.attributespecifierseq = function() {
    return this.getTypedRuleContext(AttributespecifierseqContext,0);
};

UsingdirectiveContext.prototype.nestednamespecifier = function() {
    return this.getTypedRuleContext(NestednamespecifierContext,0);
};

UsingdirectiveContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitUsingdirective(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.UsingdirectiveContext = UsingdirectiveContext;

CPP14Parser.prototype.usingdirective = function() {

    var localctx = new UsingdirectiveContext(this, this._ctx, this.state);
    this.enterRule(localctx, 246, CPP14Parser.RULE_usingdirective);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1714;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CPP14Parser.Alignas || _la===CPP14Parser.LeftBracket) {
            this.state = 1713;
            this.attributespecifierseq(0);
        }

        this.state = 1716;
        this.match(CPP14Parser.Using);
        this.state = 1717;
        this.match(CPP14Parser.Namespace);
        this.state = 1719;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,180,this._ctx);
        if(la_===1) {
            this.state = 1718;
            this.nestednamespecifier(0);

        }
        this.state = 1721;
        this.namespacename();
        this.state = 1722;
        this.match(CPP14Parser.Semi);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AsmdefinitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_asmdefinition;
    return this;
}

AsmdefinitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AsmdefinitionContext.prototype.constructor = AsmdefinitionContext;

AsmdefinitionContext.prototype.Asm = function() {
    return this.getToken(CPP14Parser.Asm, 0);
};

AsmdefinitionContext.prototype.Stringliteral = function() {
    return this.getToken(CPP14Parser.Stringliteral, 0);
};

AsmdefinitionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitAsmdefinition(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.AsmdefinitionContext = AsmdefinitionContext;

CPP14Parser.prototype.asmdefinition = function() {

    var localctx = new AsmdefinitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 248, CPP14Parser.RULE_asmdefinition);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1724;
        this.match(CPP14Parser.Asm);
        this.state = 1725;
        this.match(CPP14Parser.LeftParen);
        this.state = 1726;
        this.match(CPP14Parser.Stringliteral);
        this.state = 1727;
        this.match(CPP14Parser.RightParen);
        this.state = 1728;
        this.match(CPP14Parser.Semi);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LinkagespecificationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_linkagespecification;
    return this;
}

LinkagespecificationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LinkagespecificationContext.prototype.constructor = LinkagespecificationContext;

LinkagespecificationContext.prototype.Extern = function() {
    return this.getToken(CPP14Parser.Extern, 0);
};

LinkagespecificationContext.prototype.Stringliteral = function() {
    return this.getToken(CPP14Parser.Stringliteral, 0);
};

LinkagespecificationContext.prototype.declarationseq = function() {
    return this.getTypedRuleContext(DeclarationseqContext,0);
};

LinkagespecificationContext.prototype.declaration = function() {
    return this.getTypedRuleContext(DeclarationContext,0);
};

LinkagespecificationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitLinkagespecification(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.LinkagespecificationContext = LinkagespecificationContext;

CPP14Parser.prototype.linkagespecification = function() {

    var localctx = new LinkagespecificationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 250, CPP14Parser.RULE_linkagespecification);
    var _la = 0; // Token type
    try {
        this.state = 1740;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,182,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1730;
            this.match(CPP14Parser.Extern);
            this.state = 1731;
            this.match(CPP14Parser.Stringliteral);
            this.state = 1732;
            this.match(CPP14Parser.LeftBrace);
            this.state = 1734;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CPP14Parser.Alignas) | (1 << CPP14Parser.Asm) | (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Class) | (1 << CPP14Parser.Const) | (1 << CPP14Parser.Constexpr) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.File) | (1 << CPP14Parser.Enum) | (1 << CPP14Parser.Explicit) | (1 << CPP14Parser.Extern))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (CPP14Parser.Float - 32)) | (1 << (CPP14Parser.Friend - 32)) | (1 << (CPP14Parser.Inline - 32)) | (1 << (CPP14Parser.Int - 32)) | (1 << (CPP14Parser.Long - 32)) | (1 << (CPP14Parser.Mutable - 32)) | (1 << (CPP14Parser.Namespace - 32)) | (1 << (CPP14Parser.Operator - 32)) | (1 << (CPP14Parser.Register - 32)) | (1 << (CPP14Parser.Short - 32)) | (1 << (CPP14Parser.Signed - 32)) | (1 << (CPP14Parser.Static - 32)) | (1 << (CPP14Parser.Static_assert - 32)) | (1 << (CPP14Parser.Struct - 32)) | (1 << (CPP14Parser.Template - 32)) | (1 << (CPP14Parser.Thread_local - 32)))) !== 0) || ((((_la - 67)) & ~0x1f) == 0 && ((1 << (_la - 67)) & ((1 << (CPP14Parser.Typedef - 67)) | (1 << (CPP14Parser.Typename - 67)) | (1 << (CPP14Parser.Union - 67)) | (1 << (CPP14Parser.Unsigned - 67)) | (1 << (CPP14Parser.Using - 67)) | (1 << (CPP14Parser.Virtual - 67)) | (1 << (CPP14Parser.Void - 67)) | (1 << (CPP14Parser.Volatile - 67)) | (1 << (CPP14Parser.Wchar - 67)) | (1 << (CPP14Parser.LeftParen - 67)) | (1 << (CPP14Parser.LeftBracket - 67)) | (1 << (CPP14Parser.Star - 67)) | (1 << (CPP14Parser.And - 67)) | (1 << (CPP14Parser.Tilde - 67)))) !== 0) || ((((_la - 111)) & ~0x1f) == 0 && ((1 << (_la - 111)) & ((1 << (CPP14Parser.AndAnd - 111)) | (1 << (CPP14Parser.Doublecolon - 111)) | (1 << (CPP14Parser.Semi - 111)) | (1 << (CPP14Parser.Ellipsis - 111)) | (1 << (CPP14Parser.Identifier - 111)))) !== 0)) {
                this.state = 1733;
                this.declarationseq(0);
            }

            this.state = 1736;
            this.match(CPP14Parser.RightBrace);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1737;
            this.match(CPP14Parser.Extern);
            this.state = 1738;
            this.match(CPP14Parser.Stringliteral);
            this.state = 1739;
            this.declaration();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AttributespecifierseqContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_attributespecifierseq;
    return this;
}

AttributespecifierseqContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AttributespecifierseqContext.prototype.constructor = AttributespecifierseqContext;

AttributespecifierseqContext.prototype.attributespecifier = function() {
    return this.getTypedRuleContext(AttributespecifierContext,0);
};

AttributespecifierseqContext.prototype.attributespecifierseq = function() {
    return this.getTypedRuleContext(AttributespecifierseqContext,0);
};

AttributespecifierseqContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitAttributespecifierseq(this);
    } else {
        return visitor.visitChildren(this);
    }
};



CPP14Parser.prototype.attributespecifierseq = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new AttributespecifierseqContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 252;
    this.enterRecursionRule(localctx, 252, CPP14Parser.RULE_attributespecifierseq, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1743;
        this.attributespecifier();
        this._ctx.stop = this._input.LT(-1);
        this.state = 1749;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,183,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new AttributespecifierseqContext(this, _parentctx, _parentState);
                this.pushNewRecursionContext(localctx, _startState, CPP14Parser.RULE_attributespecifierseq);
                this.state = 1745;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 1746;
                this.attributespecifier(); 
            }
            this.state = 1751;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,183,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function AttributespecifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_attributespecifier;
    return this;
}

AttributespecifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AttributespecifierContext.prototype.constructor = AttributespecifierContext;

AttributespecifierContext.prototype.attributelist = function() {
    return this.getTypedRuleContext(AttributelistContext,0);
};

AttributespecifierContext.prototype.alignmentspecifier = function() {
    return this.getTypedRuleContext(AlignmentspecifierContext,0);
};

AttributespecifierContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitAttributespecifier(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.AttributespecifierContext = AttributespecifierContext;

CPP14Parser.prototype.attributespecifier = function() {

    var localctx = new AttributespecifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 254, CPP14Parser.RULE_attributespecifier);
    try {
        this.state = 1759;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CPP14Parser.LeftBracket:
            this.enterOuterAlt(localctx, 1);
            this.state = 1752;
            this.match(CPP14Parser.LeftBracket);
            this.state = 1753;
            this.match(CPP14Parser.LeftBracket);
            this.state = 1754;
            this.attributelist(0);
            this.state = 1755;
            this.match(CPP14Parser.RightBracket);
            this.state = 1756;
            this.match(CPP14Parser.RightBracket);
            break;
        case CPP14Parser.Alignas:
            this.enterOuterAlt(localctx, 2);
            this.state = 1758;
            this.alignmentspecifier();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AlignmentspecifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_alignmentspecifier;
    return this;
}

AlignmentspecifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AlignmentspecifierContext.prototype.constructor = AlignmentspecifierContext;

AlignmentspecifierContext.prototype.Alignas = function() {
    return this.getToken(CPP14Parser.Alignas, 0);
};

AlignmentspecifierContext.prototype.typeid = function() {
    return this.getTypedRuleContext(TypeidContext,0);
};

AlignmentspecifierContext.prototype.constantexpression = function() {
    return this.getTypedRuleContext(ConstantexpressionContext,0);
};

AlignmentspecifierContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitAlignmentspecifier(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.AlignmentspecifierContext = AlignmentspecifierContext;

CPP14Parser.prototype.alignmentspecifier = function() {

    var localctx = new AlignmentspecifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 256, CPP14Parser.RULE_alignmentspecifier);
    var _la = 0; // Token type
    try {
        this.state = 1777;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,187,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1761;
            this.match(CPP14Parser.Alignas);
            this.state = 1762;
            this.match(CPP14Parser.LeftParen);
            this.state = 1763;
            this.typeid();
            this.state = 1765;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CPP14Parser.Ellipsis) {
                this.state = 1764;
                this.match(CPP14Parser.Ellipsis);
            }

            this.state = 1767;
            this.match(CPP14Parser.RightParen);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1769;
            this.match(CPP14Parser.Alignas);
            this.state = 1770;
            this.match(CPP14Parser.LeftParen);
            this.state = 1771;
            this.constantexpression();
            this.state = 1773;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CPP14Parser.Ellipsis) {
                this.state = 1772;
                this.match(CPP14Parser.Ellipsis);
            }

            this.state = 1775;
            this.match(CPP14Parser.RightParen);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AttributelistContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_attributelist;
    return this;
}

AttributelistContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AttributelistContext.prototype.constructor = AttributelistContext;

AttributelistContext.prototype.attribute = function() {
    return this.getTypedRuleContext(AttributeContext,0);
};

AttributelistContext.prototype.attributelist = function() {
    return this.getTypedRuleContext(AttributelistContext,0);
};

AttributelistContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitAttributelist(this);
    } else {
        return visitor.visitChildren(this);
    }
};



CPP14Parser.prototype.attributelist = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new AttributelistContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 258;
    this.enterRecursionRule(localctx, 258, CPP14Parser.RULE_attributelist, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1786;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,189,this._ctx);
        switch(la_) {
        case 1:
            this.state = 1781;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,188,this._ctx);
            if(la_===1) {
                this.state = 1780;
                this.attribute();

            }
            break;

        case 2:
            this.state = 1783;
            this.attribute();
            this.state = 1784;
            this.match(CPP14Parser.Ellipsis);
            break;

        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 1800;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,192,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 1798;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,191,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new AttributelistContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, CPP14Parser.RULE_attributelist);
                    this.state = 1788;
                    if (!( this.precpred(this._ctx, 3))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
                    }
                    this.state = 1789;
                    this.match(CPP14Parser.Comma);
                    this.state = 1791;
                    this._errHandler.sync(this);
                    var la_ = this._interp.adaptivePredict(this._input,190,this._ctx);
                    if(la_===1) {
                        this.state = 1790;
                        this.attribute();

                    }
                    break;

                case 2:
                    localctx = new AttributelistContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, CPP14Parser.RULE_attributelist);
                    this.state = 1793;
                    if (!( this.precpred(this._ctx, 1))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                    }
                    this.state = 1794;
                    this.match(CPP14Parser.Comma);
                    this.state = 1795;
                    this.attribute();
                    this.state = 1796;
                    this.match(CPP14Parser.Ellipsis);
                    break;

                } 
            }
            this.state = 1802;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,192,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function AttributeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_attribute;
    return this;
}

AttributeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AttributeContext.prototype.constructor = AttributeContext;

AttributeContext.prototype.attributetoken = function() {
    return this.getTypedRuleContext(AttributetokenContext,0);
};

AttributeContext.prototype.attributeargumentclause = function() {
    return this.getTypedRuleContext(AttributeargumentclauseContext,0);
};

AttributeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitAttribute(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.AttributeContext = AttributeContext;

CPP14Parser.prototype.attribute = function() {

    var localctx = new AttributeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 260, CPP14Parser.RULE_attribute);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1803;
        this.attributetoken();
        this.state = 1805;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,193,this._ctx);
        if(la_===1) {
            this.state = 1804;
            this.attributeargumentclause();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AttributetokenContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_attributetoken;
    return this;
}

AttributetokenContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AttributetokenContext.prototype.constructor = AttributetokenContext;

AttributetokenContext.prototype.Identifier = function() {
    return this.getToken(CPP14Parser.Identifier, 0);
};

AttributetokenContext.prototype.attributescopedtoken = function() {
    return this.getTypedRuleContext(AttributescopedtokenContext,0);
};

AttributetokenContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitAttributetoken(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.AttributetokenContext = AttributetokenContext;

CPP14Parser.prototype.attributetoken = function() {

    var localctx = new AttributetokenContext(this, this._ctx, this.state);
    this.enterRule(localctx, 262, CPP14Parser.RULE_attributetoken);
    try {
        this.state = 1809;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,194,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1807;
            this.match(CPP14Parser.Identifier);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1808;
            this.attributescopedtoken();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AttributescopedtokenContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_attributescopedtoken;
    return this;
}

AttributescopedtokenContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AttributescopedtokenContext.prototype.constructor = AttributescopedtokenContext;

AttributescopedtokenContext.prototype.attributenamespace = function() {
    return this.getTypedRuleContext(AttributenamespaceContext,0);
};

AttributescopedtokenContext.prototype.Identifier = function() {
    return this.getToken(CPP14Parser.Identifier, 0);
};

AttributescopedtokenContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitAttributescopedtoken(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.AttributescopedtokenContext = AttributescopedtokenContext;

CPP14Parser.prototype.attributescopedtoken = function() {

    var localctx = new AttributescopedtokenContext(this, this._ctx, this.state);
    this.enterRule(localctx, 264, CPP14Parser.RULE_attributescopedtoken);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1811;
        this.attributenamespace();
        this.state = 1812;
        this.match(CPP14Parser.Doublecolon);
        this.state = 1813;
        this.match(CPP14Parser.Identifier);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AttributenamespaceContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_attributenamespace;
    return this;
}

AttributenamespaceContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AttributenamespaceContext.prototype.constructor = AttributenamespaceContext;

AttributenamespaceContext.prototype.Identifier = function() {
    return this.getToken(CPP14Parser.Identifier, 0);
};

AttributenamespaceContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitAttributenamespace(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.AttributenamespaceContext = AttributenamespaceContext;

CPP14Parser.prototype.attributenamespace = function() {

    var localctx = new AttributenamespaceContext(this, this._ctx, this.state);
    this.enterRule(localctx, 266, CPP14Parser.RULE_attributenamespace);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1815;
        this.match(CPP14Parser.Identifier);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AttributeargumentclauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_attributeargumentclause;
    return this;
}

AttributeargumentclauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AttributeargumentclauseContext.prototype.constructor = AttributeargumentclauseContext;

AttributeargumentclauseContext.prototype.balancedtokenseq = function() {
    return this.getTypedRuleContext(BalancedtokenseqContext,0);
};

AttributeargumentclauseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitAttributeargumentclause(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.AttributeargumentclauseContext = AttributeargumentclauseContext;

CPP14Parser.prototype.attributeargumentclause = function() {

    var localctx = new AttributeargumentclauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 268, CPP14Parser.RULE_attributeargumentclause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1817;
        this.match(CPP14Parser.LeftParen);
        this.state = 1818;
        this.balancedtokenseq(0);
        this.state = 1819;
        this.match(CPP14Parser.RightParen);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BalancedtokenseqContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_balancedtokenseq;
    return this;
}

BalancedtokenseqContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BalancedtokenseqContext.prototype.constructor = BalancedtokenseqContext;

BalancedtokenseqContext.prototype.balancedtoken = function() {
    return this.getTypedRuleContext(BalancedtokenContext,0);
};

BalancedtokenseqContext.prototype.balancedtokenseq = function() {
    return this.getTypedRuleContext(BalancedtokenseqContext,0);
};

BalancedtokenseqContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitBalancedtokenseq(this);
    } else {
        return visitor.visitChildren(this);
    }
};



CPP14Parser.prototype.balancedtokenseq = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new BalancedtokenseqContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 270;
    this.enterRecursionRule(localctx, 270, CPP14Parser.RULE_balancedtokenseq, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1823;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,195,this._ctx);
        if(la_===1) {
            this.state = 1822;
            this.balancedtoken();

        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 1829;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,196,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new BalancedtokenseqContext(this, _parentctx, _parentState);
                this.pushNewRecursionContext(localctx, _startState, CPP14Parser.RULE_balancedtokenseq);
                this.state = 1825;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 1826;
                this.balancedtoken(); 
            }
            this.state = 1831;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,196,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function BalancedtokenContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_balancedtoken;
    return this;
}

BalancedtokenContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BalancedtokenContext.prototype.constructor = BalancedtokenContext;

BalancedtokenContext.prototype.balancedtokenseq = function() {
    return this.getTypedRuleContext(BalancedtokenseqContext,0);
};

BalancedtokenContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitBalancedtoken(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.BalancedtokenContext = BalancedtokenContext;

CPP14Parser.prototype.balancedtoken = function() {

    var localctx = new BalancedtokenContext(this, this._ctx, this.state);
    this.enterRule(localctx, 272, CPP14Parser.RULE_balancedtoken);
    try {
        this.state = 1844;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CPP14Parser.LeftParen:
            this.enterOuterAlt(localctx, 1);
            this.state = 1832;
            this.match(CPP14Parser.LeftParen);
            this.state = 1833;
            this.balancedtokenseq(0);
            this.state = 1834;
            this.match(CPP14Parser.RightParen);
            break;
        case CPP14Parser.LeftBracket:
            this.enterOuterAlt(localctx, 2);
            this.state = 1836;
            this.match(CPP14Parser.LeftBracket);
            this.state = 1837;
            this.balancedtokenseq(0);
            this.state = 1838;
            this.match(CPP14Parser.RightBracket);
            break;
        case CPP14Parser.LeftBrace:
            this.enterOuterAlt(localctx, 3);
            this.state = 1840;
            this.match(CPP14Parser.LeftBrace);
            this.state = 1841;
            this.balancedtokenseq(0);
            this.state = 1842;
            this.match(CPP14Parser.RightBrace);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function InitdeclaratorlistContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_initdeclaratorlist;
    return this;
}

InitdeclaratorlistContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InitdeclaratorlistContext.prototype.constructor = InitdeclaratorlistContext;

InitdeclaratorlistContext.prototype.initdeclarator = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(InitdeclaratorContext);
    } else {
        return this.getTypedRuleContext(InitdeclaratorContext,i);
    }
};

InitdeclaratorlistContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitInitdeclaratorlist(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.InitdeclaratorlistContext = InitdeclaratorlistContext;

CPP14Parser.prototype.initdeclaratorlist = function() {

    var localctx = new InitdeclaratorlistContext(this, this._ctx, this.state);
    this.enterRule(localctx, 274, CPP14Parser.RULE_initdeclaratorlist);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1846;
        this.initdeclarator();
        this.state = 1851;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===CPP14Parser.Comma) {
            this.state = 1847;
            this.match(CPP14Parser.Comma);
            this.state = 1848;
            this.initdeclarator();
            this.state = 1853;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function InitdeclaratorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_initdeclarator;
    return this;
}

InitdeclaratorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InitdeclaratorContext.prototype.constructor = InitdeclaratorContext;

InitdeclaratorContext.prototype.declarator = function() {
    return this.getTypedRuleContext(DeclaratorContext,0);
};

InitdeclaratorContext.prototype.initializer = function() {
    return this.getTypedRuleContext(InitializerContext,0);
};

InitdeclaratorContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitInitdeclarator(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.InitdeclaratorContext = InitdeclaratorContext;

CPP14Parser.prototype.initdeclarator = function() {

    var localctx = new InitdeclaratorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 276, CPP14Parser.RULE_initdeclarator);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1854;
        this.declarator();
        this.state = 1856;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(((((_la - 78)) & ~0x1f) == 0 && ((1 << (_la - 78)) & ((1 << (CPP14Parser.LeftParen - 78)) | (1 << (CPP14Parser.LeftBrace - 78)) | (1 << (CPP14Parser.Assign - 78)))) !== 0)) {
            this.state = 1855;
            this.initializer();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DeclaratorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_declarator;
    return this;
}

DeclaratorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DeclaratorContext.prototype.constructor = DeclaratorContext;

DeclaratorContext.prototype.ptrdeclarator = function() {
    return this.getTypedRuleContext(PtrdeclaratorContext,0);
};

DeclaratorContext.prototype.noptrdeclarator = function() {
    return this.getTypedRuleContext(NoptrdeclaratorContext,0);
};

DeclaratorContext.prototype.parametersandqualifiers = function() {
    return this.getTypedRuleContext(ParametersandqualifiersContext,0);
};

DeclaratorContext.prototype.trailingreturntype = function() {
    return this.getTypedRuleContext(TrailingreturntypeContext,0);
};

DeclaratorContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitDeclarator(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.DeclaratorContext = DeclaratorContext;

CPP14Parser.prototype.declarator = function() {

    var localctx = new DeclaratorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 278, CPP14Parser.RULE_declarator);
    try {
        this.state = 1863;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,200,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1858;
            this.ptrdeclarator();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1859;
            this.noptrdeclarator(0);
            this.state = 1860;
            this.parametersandqualifiers();
            this.state = 1861;
            this.trailingreturntype();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PtrdeclaratorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_ptrdeclarator;
    return this;
}

PtrdeclaratorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PtrdeclaratorContext.prototype.constructor = PtrdeclaratorContext;

PtrdeclaratorContext.prototype.noptrdeclarator = function() {
    return this.getTypedRuleContext(NoptrdeclaratorContext,0);
};

PtrdeclaratorContext.prototype.ptroperator = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PtroperatorContext);
    } else {
        return this.getTypedRuleContext(PtroperatorContext,i);
    }
};

PtrdeclaratorContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitPtrdeclarator(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.PtrdeclaratorContext = PtrdeclaratorContext;

CPP14Parser.prototype.ptrdeclarator = function() {

    var localctx = new PtrdeclaratorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 280, CPP14Parser.RULE_ptrdeclarator);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1868;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,201,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1865;
                this.ptroperator(); 
            }
            this.state = 1870;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,201,this._ctx);
        }

        this.state = 1871;
        this.noptrdeclarator(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function NoptrdeclaratorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_noptrdeclarator;
    return this;
}

NoptrdeclaratorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NoptrdeclaratorContext.prototype.constructor = NoptrdeclaratorContext;

NoptrdeclaratorContext.prototype.declaratorid = function() {
    return this.getTypedRuleContext(DeclaratoridContext,0);
};

NoptrdeclaratorContext.prototype.attributespecifierseq = function() {
    return this.getTypedRuleContext(AttributespecifierseqContext,0);
};

NoptrdeclaratorContext.prototype.ptrdeclarator = function() {
    return this.getTypedRuleContext(PtrdeclaratorContext,0);
};

NoptrdeclaratorContext.prototype.noptrdeclarator = function() {
    return this.getTypedRuleContext(NoptrdeclaratorContext,0);
};

NoptrdeclaratorContext.prototype.parametersandqualifiers = function() {
    return this.getTypedRuleContext(ParametersandqualifiersContext,0);
};

NoptrdeclaratorContext.prototype.constantexpression = function() {
    return this.getTypedRuleContext(ConstantexpressionContext,0);
};

NoptrdeclaratorContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitNoptrdeclarator(this);
    } else {
        return visitor.visitChildren(this);
    }
};



CPP14Parser.prototype.noptrdeclarator = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new NoptrdeclaratorContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 282;
    this.enterRecursionRule(localctx, 282, CPP14Parser.RULE_noptrdeclarator, _p);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1882;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CPP14Parser.Decltype:
        case CPP14Parser.Operator:
        case CPP14Parser.Tilde:
        case CPP14Parser.Doublecolon:
        case CPP14Parser.Ellipsis:
        case CPP14Parser.Identifier:
            this.state = 1874;
            this.declaratorid();
            this.state = 1876;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,202,this._ctx);
            if(la_===1) {
                this.state = 1875;
                this.attributespecifierseq(0);

            }
            break;
        case CPP14Parser.LeftParen:
            this.state = 1878;
            this.match(CPP14Parser.LeftParen);
            this.state = 1879;
            this.ptrdeclarator();
            this.state = 1880;
            this.match(CPP14Parser.RightParen);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 1897;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,207,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 1895;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,206,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new NoptrdeclaratorContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, CPP14Parser.RULE_noptrdeclarator);
                    this.state = 1884;
                    if (!( this.precpred(this._ctx, 3))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
                    }
                    this.state = 1885;
                    this.parametersandqualifiers();
                    break;

                case 2:
                    localctx = new NoptrdeclaratorContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, CPP14Parser.RULE_noptrdeclarator);
                    this.state = 1886;
                    if (!( this.precpred(this._ctx, 2))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
                    }
                    this.state = 1887;
                    this.match(CPP14Parser.LeftBracket);
                    this.state = 1889;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.File) | (1 << CPP14Parser.Dynamic_cast))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (CPP14Parser.Float - 32)) | (1 << (CPP14Parser.Int - 32)) | (1 << (CPP14Parser.Long - 32)) | (1 << (CPP14Parser.New - 32)) | (1 << (CPP14Parser.Noexcept - 32)) | (1 << (CPP14Parser.Nullptr - 32)) | (1 << (CPP14Parser.Operator - 32)) | (1 << (CPP14Parser.Reinterpret_cast - 32)) | (1 << (CPP14Parser.Short - 32)) | (1 << (CPP14Parser.Signed - 32)) | (1 << (CPP14Parser.Sizeof - 32)) | (1 << (CPP14Parser.Static_cast - 32)) | (1 << (CPP14Parser.This - 32)))) !== 0) || ((((_la - 68)) & ~0x1f) == 0 && ((1 << (_la - 68)) & ((1 << (CPP14Parser.Typeid - 68)) | (1 << (CPP14Parser.Typename - 68)) | (1 << (CPP14Parser.Unsigned - 68)) | (1 << (CPP14Parser.Void - 68)) | (1 << (CPP14Parser.Wchar - 68)) | (1 << (CPP14Parser.LeftParen - 68)) | (1 << (CPP14Parser.LeftBracket - 68)) | (1 << (CPP14Parser.Plus - 68)) | (1 << (CPP14Parser.Minus - 68)) | (1 << (CPP14Parser.Star - 68)) | (1 << (CPP14Parser.And - 68)) | (1 << (CPP14Parser.Or - 68)) | (1 << (CPP14Parser.Tilde - 68)) | (1 << (CPP14Parser.Not - 68)))) !== 0) || ((((_la - 113)) & ~0x1f) == 0 && ((1 << (_la - 113)) & ((1 << (CPP14Parser.PlusPlus - 113)) | (1 << (CPP14Parser.MinusMinus - 113)) | (1 << (CPP14Parser.Doublecolon - 113)) | (1 << (CPP14Parser.Identifier - 113)) | (1 << (CPP14Parser.Integerliteral - 113)) | (1 << (CPP14Parser.Characterliteral - 113)) | (1 << (CPP14Parser.Floatingliteral - 113)) | (1 << (CPP14Parser.Stringliteral - 113)) | (1 << (CPP14Parser.Booleanliteral - 113)) | (1 << (CPP14Parser.Userdefinedintegerliteral - 113)) | (1 << (CPP14Parser.Userdefinedfloatingliteral - 113)) | (1 << (CPP14Parser.Userdefinedstringliteral - 113)) | (1 << (CPP14Parser.Userdefinedcharacterliteral - 113)))) !== 0)) {
                        this.state = 1888;
                        this.constantexpression();
                    }

                    this.state = 1891;
                    this.match(CPP14Parser.RightBracket);
                    this.state = 1893;
                    this._errHandler.sync(this);
                    var la_ = this._interp.adaptivePredict(this._input,205,this._ctx);
                    if(la_===1) {
                        this.state = 1892;
                        this.attributespecifierseq(0);

                    }
                    break;

                } 
            }
            this.state = 1899;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,207,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function ParametersandqualifiersContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_parametersandqualifiers;
    return this;
}

ParametersandqualifiersContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ParametersandqualifiersContext.prototype.constructor = ParametersandqualifiersContext;

ParametersandqualifiersContext.prototype.parameterdeclarationclause = function() {
    return this.getTypedRuleContext(ParameterdeclarationclauseContext,0);
};

ParametersandqualifiersContext.prototype.cvqualifierseq = function() {
    return this.getTypedRuleContext(CvqualifierseqContext,0);
};

ParametersandqualifiersContext.prototype.refqualifier = function() {
    return this.getTypedRuleContext(RefqualifierContext,0);
};

ParametersandqualifiersContext.prototype.exceptionspecification = function() {
    return this.getTypedRuleContext(ExceptionspecificationContext,0);
};

ParametersandqualifiersContext.prototype.attributespecifierseq = function() {
    return this.getTypedRuleContext(AttributespecifierseqContext,0);
};

ParametersandqualifiersContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitParametersandqualifiers(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.ParametersandqualifiersContext = ParametersandqualifiersContext;

CPP14Parser.prototype.parametersandqualifiers = function() {

    var localctx = new ParametersandqualifiersContext(this, this._ctx, this.state);
    this.enterRule(localctx, 284, CPP14Parser.RULE_parametersandqualifiers);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1900;
        this.match(CPP14Parser.LeftParen);
        this.state = 1901;
        this.parameterdeclarationclause();
        this.state = 1902;
        this.match(CPP14Parser.RightParen);
        this.state = 1904;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,208,this._ctx);
        if(la_===1) {
            this.state = 1903;
            this.cvqualifierseq();

        }
        this.state = 1907;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,209,this._ctx);
        if(la_===1) {
            this.state = 1906;
            this.refqualifier();

        }
        this.state = 1910;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,210,this._ctx);
        if(la_===1) {
            this.state = 1909;
            this.exceptionspecification();

        }
        this.state = 1913;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,211,this._ctx);
        if(la_===1) {
            this.state = 1912;
            this.attributespecifierseq(0);

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TrailingreturntypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_trailingreturntype;
    return this;
}

TrailingreturntypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TrailingreturntypeContext.prototype.constructor = TrailingreturntypeContext;

TrailingreturntypeContext.prototype.trailingtypespecifierseq = function() {
    return this.getTypedRuleContext(TrailingtypespecifierseqContext,0);
};

TrailingreturntypeContext.prototype.abstractdeclarator = function() {
    return this.getTypedRuleContext(AbstractdeclaratorContext,0);
};

TrailingreturntypeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitTrailingreturntype(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.TrailingreturntypeContext = TrailingreturntypeContext;

CPP14Parser.prototype.trailingreturntype = function() {

    var localctx = new TrailingreturntypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 286, CPP14Parser.RULE_trailingreturntype);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1915;
        this.match(CPP14Parser.Arrow);
        this.state = 1916;
        this.trailingtypespecifierseq();
        this.state = 1918;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,212,this._ctx);
        if(la_===1) {
            this.state = 1917;
            this.abstractdeclarator();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PtroperatorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_ptroperator;
    return this;
}

PtroperatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PtroperatorContext.prototype.constructor = PtroperatorContext;

PtroperatorContext.prototype.attributespecifierseq = function() {
    return this.getTypedRuleContext(AttributespecifierseqContext,0);
};

PtroperatorContext.prototype.cvqualifierseq = function() {
    return this.getTypedRuleContext(CvqualifierseqContext,0);
};

PtroperatorContext.prototype.nestednamespecifier = function() {
    return this.getTypedRuleContext(NestednamespecifierContext,0);
};

PtroperatorContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitPtroperator(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.PtroperatorContext = PtroperatorContext;

CPP14Parser.prototype.ptroperator = function() {

    var localctx = new PtroperatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 288, CPP14Parser.RULE_ptroperator);
    try {
        this.state = 1943;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CPP14Parser.Star:
            this.enterOuterAlt(localctx, 1);
            this.state = 1920;
            this.match(CPP14Parser.Star);
            this.state = 1922;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,213,this._ctx);
            if(la_===1) {
                this.state = 1921;
                this.attributespecifierseq(0);

            }
            this.state = 1925;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,214,this._ctx);
            if(la_===1) {
                this.state = 1924;
                this.cvqualifierseq();

            }
            break;
        case CPP14Parser.And:
            this.enterOuterAlt(localctx, 2);
            this.state = 1927;
            this.match(CPP14Parser.And);
            this.state = 1929;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,215,this._ctx);
            if(la_===1) {
                this.state = 1928;
                this.attributespecifierseq(0);

            }
            break;
        case CPP14Parser.AndAnd:
            this.enterOuterAlt(localctx, 3);
            this.state = 1931;
            this.match(CPP14Parser.AndAnd);
            this.state = 1933;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,216,this._ctx);
            if(la_===1) {
                this.state = 1932;
                this.attributespecifierseq(0);

            }
            break;
        case CPP14Parser.Decltype:
        case CPP14Parser.Doublecolon:
        case CPP14Parser.Identifier:
            this.enterOuterAlt(localctx, 4);
            this.state = 1935;
            this.nestednamespecifier(0);
            this.state = 1936;
            this.match(CPP14Parser.Star);
            this.state = 1938;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,217,this._ctx);
            if(la_===1) {
                this.state = 1937;
                this.attributespecifierseq(0);

            }
            this.state = 1941;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,218,this._ctx);
            if(la_===1) {
                this.state = 1940;
                this.cvqualifierseq();

            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CvqualifierseqContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_cvqualifierseq;
    return this;
}

CvqualifierseqContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CvqualifierseqContext.prototype.constructor = CvqualifierseqContext;

CvqualifierseqContext.prototype.cvqualifier = function() {
    return this.getTypedRuleContext(CvqualifierContext,0);
};

CvqualifierseqContext.prototype.cvqualifierseq = function() {
    return this.getTypedRuleContext(CvqualifierseqContext,0);
};

CvqualifierseqContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitCvqualifierseq(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.CvqualifierseqContext = CvqualifierseqContext;

CPP14Parser.prototype.cvqualifierseq = function() {

    var localctx = new CvqualifierseqContext(this, this._ctx, this.state);
    this.enterRule(localctx, 290, CPP14Parser.RULE_cvqualifierseq);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1945;
        this.cvqualifier();
        this.state = 1947;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,220,this._ctx);
        if(la_===1) {
            this.state = 1946;
            this.cvqualifierseq();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CvqualifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_cvqualifier;
    return this;
}

CvqualifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CvqualifierContext.prototype.constructor = CvqualifierContext;

CvqualifierContext.prototype.Const = function() {
    return this.getToken(CPP14Parser.Const, 0);
};

CvqualifierContext.prototype.Volatile = function() {
    return this.getToken(CPP14Parser.Volatile, 0);
};

CvqualifierContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitCvqualifier(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.CvqualifierContext = CvqualifierContext;

CPP14Parser.prototype.cvqualifier = function() {

    var localctx = new CvqualifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 292, CPP14Parser.RULE_cvqualifier);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1949;
        _la = this._input.LA(1);
        if(!(_la===CPP14Parser.Const || _la===CPP14Parser.Volatile)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function RefqualifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_refqualifier;
    return this;
}

RefqualifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RefqualifierContext.prototype.constructor = RefqualifierContext;


RefqualifierContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitRefqualifier(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.RefqualifierContext = RefqualifierContext;

CPP14Parser.prototype.refqualifier = function() {

    var localctx = new RefqualifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 294, CPP14Parser.RULE_refqualifier);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1951;
        _la = this._input.LA(1);
        if(!(_la===CPP14Parser.And || _la===CPP14Parser.AndAnd)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DeclaratoridContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_declaratorid;
    return this;
}

DeclaratoridContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DeclaratoridContext.prototype.constructor = DeclaratoridContext;

DeclaratoridContext.prototype.idexpression = function() {
    return this.getTypedRuleContext(IdexpressionContext,0);
};

DeclaratoridContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitDeclaratorid(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.DeclaratoridContext = DeclaratoridContext;

CPP14Parser.prototype.declaratorid = function() {

    var localctx = new DeclaratoridContext(this, this._ctx, this.state);
    this.enterRule(localctx, 296, CPP14Parser.RULE_declaratorid);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1954;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CPP14Parser.Ellipsis) {
            this.state = 1953;
            this.match(CPP14Parser.Ellipsis);
        }

        this.state = 1956;
        this.idexpression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TypeidContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_typeid;
    return this;
}

TypeidContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeidContext.prototype.constructor = TypeidContext;

TypeidContext.prototype.typespecifierseq = function() {
    return this.getTypedRuleContext(TypespecifierseqContext,0);
};

TypeidContext.prototype.abstractdeclarator = function() {
    return this.getTypedRuleContext(AbstractdeclaratorContext,0);
};

TypeidContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitTypeid(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.TypeidContext = TypeidContext;

CPP14Parser.prototype.typeid = function() {

    var localctx = new TypeidContext(this, this._ctx, this.state);
    this.enterRule(localctx, 298, CPP14Parser.RULE_typeid);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1958;
        this.typespecifierseq();
        this.state = 1960;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,222,this._ctx);
        if(la_===1) {
            this.state = 1959;
            this.abstractdeclarator();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AbstractdeclaratorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_abstractdeclarator;
    return this;
}

AbstractdeclaratorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AbstractdeclaratorContext.prototype.constructor = AbstractdeclaratorContext;

AbstractdeclaratorContext.prototype.ptrabstractdeclarator = function() {
    return this.getTypedRuleContext(PtrabstractdeclaratorContext,0);
};

AbstractdeclaratorContext.prototype.parametersandqualifiers = function() {
    return this.getTypedRuleContext(ParametersandqualifiersContext,0);
};

AbstractdeclaratorContext.prototype.trailingreturntype = function() {
    return this.getTypedRuleContext(TrailingreturntypeContext,0);
};

AbstractdeclaratorContext.prototype.noptrabstractdeclarator = function() {
    return this.getTypedRuleContext(NoptrabstractdeclaratorContext,0);
};

AbstractdeclaratorContext.prototype.abstractpackdeclarator = function() {
    return this.getTypedRuleContext(AbstractpackdeclaratorContext,0);
};

AbstractdeclaratorContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitAbstractdeclarator(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.AbstractdeclaratorContext = AbstractdeclaratorContext;

CPP14Parser.prototype.abstractdeclarator = function() {

    var localctx = new AbstractdeclaratorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 300, CPP14Parser.RULE_abstractdeclarator);
    try {
        this.state = 1970;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,224,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1962;
            this.ptrabstractdeclarator();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1964;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,223,this._ctx);
            if(la_===1) {
                this.state = 1963;
                this.noptrabstractdeclarator(0);

            }
            this.state = 1966;
            this.parametersandqualifiers();
            this.state = 1967;
            this.trailingreturntype();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1969;
            this.abstractpackdeclarator();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PtrabstractdeclaratorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_ptrabstractdeclarator;
    return this;
}

PtrabstractdeclaratorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PtrabstractdeclaratorContext.prototype.constructor = PtrabstractdeclaratorContext;

PtrabstractdeclaratorContext.prototype.noptrabstractdeclarator = function() {
    return this.getTypedRuleContext(NoptrabstractdeclaratorContext,0);
};

PtrabstractdeclaratorContext.prototype.ptroperator = function() {
    return this.getTypedRuleContext(PtroperatorContext,0);
};

PtrabstractdeclaratorContext.prototype.ptrabstractdeclarator = function() {
    return this.getTypedRuleContext(PtrabstractdeclaratorContext,0);
};

PtrabstractdeclaratorContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitPtrabstractdeclarator(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.PtrabstractdeclaratorContext = PtrabstractdeclaratorContext;

CPP14Parser.prototype.ptrabstractdeclarator = function() {

    var localctx = new PtrabstractdeclaratorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 302, CPP14Parser.RULE_ptrabstractdeclarator);
    try {
        this.state = 1977;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CPP14Parser.LeftParen:
        case CPP14Parser.LeftBracket:
            this.enterOuterAlt(localctx, 1);
            this.state = 1972;
            this.noptrabstractdeclarator(0);
            break;
        case CPP14Parser.Decltype:
        case CPP14Parser.Star:
        case CPP14Parser.And:
        case CPP14Parser.AndAnd:
        case CPP14Parser.Doublecolon:
        case CPP14Parser.Identifier:
            this.enterOuterAlt(localctx, 2);
            this.state = 1973;
            this.ptroperator();
            this.state = 1975;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,225,this._ctx);
            if(la_===1) {
                this.state = 1974;
                this.ptrabstractdeclarator();

            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function NoptrabstractdeclaratorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_noptrabstractdeclarator;
    return this;
}

NoptrabstractdeclaratorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NoptrabstractdeclaratorContext.prototype.constructor = NoptrabstractdeclaratorContext;

NoptrabstractdeclaratorContext.prototype.parametersandqualifiers = function() {
    return this.getTypedRuleContext(ParametersandqualifiersContext,0);
};

NoptrabstractdeclaratorContext.prototype.constantexpression = function() {
    return this.getTypedRuleContext(ConstantexpressionContext,0);
};

NoptrabstractdeclaratorContext.prototype.attributespecifierseq = function() {
    return this.getTypedRuleContext(AttributespecifierseqContext,0);
};

NoptrabstractdeclaratorContext.prototype.ptrabstractdeclarator = function() {
    return this.getTypedRuleContext(PtrabstractdeclaratorContext,0);
};

NoptrabstractdeclaratorContext.prototype.noptrabstractdeclarator = function() {
    return this.getTypedRuleContext(NoptrabstractdeclaratorContext,0);
};

NoptrabstractdeclaratorContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitNoptrabstractdeclarator(this);
    } else {
        return visitor.visitChildren(this);
    }
};



CPP14Parser.prototype.noptrabstractdeclarator = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new NoptrabstractdeclaratorContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 304;
    this.enterRecursionRule(localctx, 304, CPP14Parser.RULE_noptrabstractdeclarator, _p);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1993;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,229,this._ctx);
        switch(la_) {
        case 1:
            this.state = 1980;
            this.parametersandqualifiers();
            break;

        case 2:
            this.state = 1981;
            this.match(CPP14Parser.LeftBracket);
            this.state = 1983;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.File) | (1 << CPP14Parser.Dynamic_cast))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (CPP14Parser.Float - 32)) | (1 << (CPP14Parser.Int - 32)) | (1 << (CPP14Parser.Long - 32)) | (1 << (CPP14Parser.New - 32)) | (1 << (CPP14Parser.Noexcept - 32)) | (1 << (CPP14Parser.Nullptr - 32)) | (1 << (CPP14Parser.Operator - 32)) | (1 << (CPP14Parser.Reinterpret_cast - 32)) | (1 << (CPP14Parser.Short - 32)) | (1 << (CPP14Parser.Signed - 32)) | (1 << (CPP14Parser.Sizeof - 32)) | (1 << (CPP14Parser.Static_cast - 32)) | (1 << (CPP14Parser.This - 32)))) !== 0) || ((((_la - 68)) & ~0x1f) == 0 && ((1 << (_la - 68)) & ((1 << (CPP14Parser.Typeid - 68)) | (1 << (CPP14Parser.Typename - 68)) | (1 << (CPP14Parser.Unsigned - 68)) | (1 << (CPP14Parser.Void - 68)) | (1 << (CPP14Parser.Wchar - 68)) | (1 << (CPP14Parser.LeftParen - 68)) | (1 << (CPP14Parser.LeftBracket - 68)) | (1 << (CPP14Parser.Plus - 68)) | (1 << (CPP14Parser.Minus - 68)) | (1 << (CPP14Parser.Star - 68)) | (1 << (CPP14Parser.And - 68)) | (1 << (CPP14Parser.Or - 68)) | (1 << (CPP14Parser.Tilde - 68)) | (1 << (CPP14Parser.Not - 68)))) !== 0) || ((((_la - 113)) & ~0x1f) == 0 && ((1 << (_la - 113)) & ((1 << (CPP14Parser.PlusPlus - 113)) | (1 << (CPP14Parser.MinusMinus - 113)) | (1 << (CPP14Parser.Doublecolon - 113)) | (1 << (CPP14Parser.Identifier - 113)) | (1 << (CPP14Parser.Integerliteral - 113)) | (1 << (CPP14Parser.Characterliteral - 113)) | (1 << (CPP14Parser.Floatingliteral - 113)) | (1 << (CPP14Parser.Stringliteral - 113)) | (1 << (CPP14Parser.Booleanliteral - 113)) | (1 << (CPP14Parser.Userdefinedintegerliteral - 113)) | (1 << (CPP14Parser.Userdefinedfloatingliteral - 113)) | (1 << (CPP14Parser.Userdefinedstringliteral - 113)) | (1 << (CPP14Parser.Userdefinedcharacterliteral - 113)))) !== 0)) {
                this.state = 1982;
                this.constantexpression();
            }

            this.state = 1985;
            this.match(CPP14Parser.RightBracket);
            this.state = 1987;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,228,this._ctx);
            if(la_===1) {
                this.state = 1986;
                this.attributespecifierseq(0);

            }
            break;

        case 3:
            this.state = 1989;
            this.match(CPP14Parser.LeftParen);
            this.state = 1990;
            this.ptrabstractdeclarator();
            this.state = 1991;
            this.match(CPP14Parser.RightParen);
            break;

        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 2008;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,233,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 2006;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,232,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new NoptrabstractdeclaratorContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, CPP14Parser.RULE_noptrabstractdeclarator);
                    this.state = 1995;
                    if (!( this.precpred(this._ctx, 5))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 5)");
                    }
                    this.state = 1996;
                    this.parametersandqualifiers();
                    break;

                case 2:
                    localctx = new NoptrabstractdeclaratorContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, CPP14Parser.RULE_noptrabstractdeclarator);
                    this.state = 1997;
                    if (!( this.precpred(this._ctx, 3))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
                    }
                    this.state = 1998;
                    this.match(CPP14Parser.LeftBracket);
                    this.state = 2000;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.File) | (1 << CPP14Parser.Dynamic_cast))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (CPP14Parser.Float - 32)) | (1 << (CPP14Parser.Int - 32)) | (1 << (CPP14Parser.Long - 32)) | (1 << (CPP14Parser.New - 32)) | (1 << (CPP14Parser.Noexcept - 32)) | (1 << (CPP14Parser.Nullptr - 32)) | (1 << (CPP14Parser.Operator - 32)) | (1 << (CPP14Parser.Reinterpret_cast - 32)) | (1 << (CPP14Parser.Short - 32)) | (1 << (CPP14Parser.Signed - 32)) | (1 << (CPP14Parser.Sizeof - 32)) | (1 << (CPP14Parser.Static_cast - 32)) | (1 << (CPP14Parser.This - 32)))) !== 0) || ((((_la - 68)) & ~0x1f) == 0 && ((1 << (_la - 68)) & ((1 << (CPP14Parser.Typeid - 68)) | (1 << (CPP14Parser.Typename - 68)) | (1 << (CPP14Parser.Unsigned - 68)) | (1 << (CPP14Parser.Void - 68)) | (1 << (CPP14Parser.Wchar - 68)) | (1 << (CPP14Parser.LeftParen - 68)) | (1 << (CPP14Parser.LeftBracket - 68)) | (1 << (CPP14Parser.Plus - 68)) | (1 << (CPP14Parser.Minus - 68)) | (1 << (CPP14Parser.Star - 68)) | (1 << (CPP14Parser.And - 68)) | (1 << (CPP14Parser.Or - 68)) | (1 << (CPP14Parser.Tilde - 68)) | (1 << (CPP14Parser.Not - 68)))) !== 0) || ((((_la - 113)) & ~0x1f) == 0 && ((1 << (_la - 113)) & ((1 << (CPP14Parser.PlusPlus - 113)) | (1 << (CPP14Parser.MinusMinus - 113)) | (1 << (CPP14Parser.Doublecolon - 113)) | (1 << (CPP14Parser.Identifier - 113)) | (1 << (CPP14Parser.Integerliteral - 113)) | (1 << (CPP14Parser.Characterliteral - 113)) | (1 << (CPP14Parser.Floatingliteral - 113)) | (1 << (CPP14Parser.Stringliteral - 113)) | (1 << (CPP14Parser.Booleanliteral - 113)) | (1 << (CPP14Parser.Userdefinedintegerliteral - 113)) | (1 << (CPP14Parser.Userdefinedfloatingliteral - 113)) | (1 << (CPP14Parser.Userdefinedstringliteral - 113)) | (1 << (CPP14Parser.Userdefinedcharacterliteral - 113)))) !== 0)) {
                        this.state = 1999;
                        this.constantexpression();
                    }

                    this.state = 2002;
                    this.match(CPP14Parser.RightBracket);
                    this.state = 2004;
                    this._errHandler.sync(this);
                    var la_ = this._interp.adaptivePredict(this._input,231,this._ctx);
                    if(la_===1) {
                        this.state = 2003;
                        this.attributespecifierseq(0);

                    }
                    break;

                } 
            }
            this.state = 2010;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,233,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function AbstractpackdeclaratorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_abstractpackdeclarator;
    return this;
}

AbstractpackdeclaratorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AbstractpackdeclaratorContext.prototype.constructor = AbstractpackdeclaratorContext;

AbstractpackdeclaratorContext.prototype.noptrabstractpackdeclarator = function() {
    return this.getTypedRuleContext(NoptrabstractpackdeclaratorContext,0);
};

AbstractpackdeclaratorContext.prototype.ptroperator = function() {
    return this.getTypedRuleContext(PtroperatorContext,0);
};

AbstractpackdeclaratorContext.prototype.abstractpackdeclarator = function() {
    return this.getTypedRuleContext(AbstractpackdeclaratorContext,0);
};

AbstractpackdeclaratorContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitAbstractpackdeclarator(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.AbstractpackdeclaratorContext = AbstractpackdeclaratorContext;

CPP14Parser.prototype.abstractpackdeclarator = function() {

    var localctx = new AbstractpackdeclaratorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 306, CPP14Parser.RULE_abstractpackdeclarator);
    try {
        this.state = 2015;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CPP14Parser.Ellipsis:
            this.enterOuterAlt(localctx, 1);
            this.state = 2011;
            this.noptrabstractpackdeclarator(0);
            break;
        case CPP14Parser.Decltype:
        case CPP14Parser.Star:
        case CPP14Parser.And:
        case CPP14Parser.AndAnd:
        case CPP14Parser.Doublecolon:
        case CPP14Parser.Identifier:
            this.enterOuterAlt(localctx, 2);
            this.state = 2012;
            this.ptroperator();
            this.state = 2013;
            this.abstractpackdeclarator();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function NoptrabstractpackdeclaratorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_noptrabstractpackdeclarator;
    return this;
}

NoptrabstractpackdeclaratorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NoptrabstractpackdeclaratorContext.prototype.constructor = NoptrabstractpackdeclaratorContext;

NoptrabstractpackdeclaratorContext.prototype.noptrabstractpackdeclarator = function() {
    return this.getTypedRuleContext(NoptrabstractpackdeclaratorContext,0);
};

NoptrabstractpackdeclaratorContext.prototype.parametersandqualifiers = function() {
    return this.getTypedRuleContext(ParametersandqualifiersContext,0);
};

NoptrabstractpackdeclaratorContext.prototype.constantexpression = function() {
    return this.getTypedRuleContext(ConstantexpressionContext,0);
};

NoptrabstractpackdeclaratorContext.prototype.attributespecifierseq = function() {
    return this.getTypedRuleContext(AttributespecifierseqContext,0);
};

NoptrabstractpackdeclaratorContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitNoptrabstractpackdeclarator(this);
    } else {
        return visitor.visitChildren(this);
    }
};



CPP14Parser.prototype.noptrabstractpackdeclarator = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new NoptrabstractpackdeclaratorContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 308;
    this.enterRecursionRule(localctx, 308, CPP14Parser.RULE_noptrabstractpackdeclarator, _p);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2018;
        this.match(CPP14Parser.Ellipsis);
        this._ctx.stop = this._input.LT(-1);
        this.state = 2033;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,238,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 2031;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,237,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new NoptrabstractpackdeclaratorContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, CPP14Parser.RULE_noptrabstractpackdeclarator);
                    this.state = 2020;
                    if (!( this.precpred(this._ctx, 3))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
                    }
                    this.state = 2021;
                    this.parametersandqualifiers();
                    break;

                case 2:
                    localctx = new NoptrabstractpackdeclaratorContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, CPP14Parser.RULE_noptrabstractpackdeclarator);
                    this.state = 2022;
                    if (!( this.precpred(this._ctx, 2))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
                    }
                    this.state = 2023;
                    this.match(CPP14Parser.LeftBracket);
                    this.state = 2025;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.File) | (1 << CPP14Parser.Dynamic_cast))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (CPP14Parser.Float - 32)) | (1 << (CPP14Parser.Int - 32)) | (1 << (CPP14Parser.Long - 32)) | (1 << (CPP14Parser.New - 32)) | (1 << (CPP14Parser.Noexcept - 32)) | (1 << (CPP14Parser.Nullptr - 32)) | (1 << (CPP14Parser.Operator - 32)) | (1 << (CPP14Parser.Reinterpret_cast - 32)) | (1 << (CPP14Parser.Short - 32)) | (1 << (CPP14Parser.Signed - 32)) | (1 << (CPP14Parser.Sizeof - 32)) | (1 << (CPP14Parser.Static_cast - 32)) | (1 << (CPP14Parser.This - 32)))) !== 0) || ((((_la - 68)) & ~0x1f) == 0 && ((1 << (_la - 68)) & ((1 << (CPP14Parser.Typeid - 68)) | (1 << (CPP14Parser.Typename - 68)) | (1 << (CPP14Parser.Unsigned - 68)) | (1 << (CPP14Parser.Void - 68)) | (1 << (CPP14Parser.Wchar - 68)) | (1 << (CPP14Parser.LeftParen - 68)) | (1 << (CPP14Parser.LeftBracket - 68)) | (1 << (CPP14Parser.Plus - 68)) | (1 << (CPP14Parser.Minus - 68)) | (1 << (CPP14Parser.Star - 68)) | (1 << (CPP14Parser.And - 68)) | (1 << (CPP14Parser.Or - 68)) | (1 << (CPP14Parser.Tilde - 68)) | (1 << (CPP14Parser.Not - 68)))) !== 0) || ((((_la - 113)) & ~0x1f) == 0 && ((1 << (_la - 113)) & ((1 << (CPP14Parser.PlusPlus - 113)) | (1 << (CPP14Parser.MinusMinus - 113)) | (1 << (CPP14Parser.Doublecolon - 113)) | (1 << (CPP14Parser.Identifier - 113)) | (1 << (CPP14Parser.Integerliteral - 113)) | (1 << (CPP14Parser.Characterliteral - 113)) | (1 << (CPP14Parser.Floatingliteral - 113)) | (1 << (CPP14Parser.Stringliteral - 113)) | (1 << (CPP14Parser.Booleanliteral - 113)) | (1 << (CPP14Parser.Userdefinedintegerliteral - 113)) | (1 << (CPP14Parser.Userdefinedfloatingliteral - 113)) | (1 << (CPP14Parser.Userdefinedstringliteral - 113)) | (1 << (CPP14Parser.Userdefinedcharacterliteral - 113)))) !== 0)) {
                        this.state = 2024;
                        this.constantexpression();
                    }

                    this.state = 2027;
                    this.match(CPP14Parser.RightBracket);
                    this.state = 2029;
                    this._errHandler.sync(this);
                    var la_ = this._interp.adaptivePredict(this._input,236,this._ctx);
                    if(la_===1) {
                        this.state = 2028;
                        this.attributespecifierseq(0);

                    }
                    break;

                } 
            }
            this.state = 2035;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,238,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function ParameterdeclarationclauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_parameterdeclarationclause;
    return this;
}

ParameterdeclarationclauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ParameterdeclarationclauseContext.prototype.constructor = ParameterdeclarationclauseContext;

ParameterdeclarationclauseContext.prototype.parameterdeclarationlist = function() {
    return this.getTypedRuleContext(ParameterdeclarationlistContext,0);
};

ParameterdeclarationclauseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitParameterdeclarationclause(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.ParameterdeclarationclauseContext = ParameterdeclarationclauseContext;

CPP14Parser.prototype.parameterdeclarationclause = function() {

    var localctx = new ParameterdeclarationclauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 310, CPP14Parser.RULE_parameterdeclarationclause);
    var _la = 0; // Token type
    try {
        this.state = 2046;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,241,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2037;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CPP14Parser.Alignas) | (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Class) | (1 << CPP14Parser.Const) | (1 << CPP14Parser.Constexpr) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.File) | (1 << CPP14Parser.Enum) | (1 << CPP14Parser.Explicit) | (1 << CPP14Parser.Extern))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (CPP14Parser.Float - 32)) | (1 << (CPP14Parser.Friend - 32)) | (1 << (CPP14Parser.Inline - 32)) | (1 << (CPP14Parser.Int - 32)) | (1 << (CPP14Parser.Long - 32)) | (1 << (CPP14Parser.Mutable - 32)) | (1 << (CPP14Parser.Register - 32)) | (1 << (CPP14Parser.Short - 32)) | (1 << (CPP14Parser.Signed - 32)) | (1 << (CPP14Parser.Static - 32)) | (1 << (CPP14Parser.Struct - 32)) | (1 << (CPP14Parser.Thread_local - 32)))) !== 0) || ((((_la - 67)) & ~0x1f) == 0 && ((1 << (_la - 67)) & ((1 << (CPP14Parser.Typedef - 67)) | (1 << (CPP14Parser.Typename - 67)) | (1 << (CPP14Parser.Union - 67)) | (1 << (CPP14Parser.Unsigned - 67)) | (1 << (CPP14Parser.Virtual - 67)) | (1 << (CPP14Parser.Void - 67)) | (1 << (CPP14Parser.Volatile - 67)) | (1 << (CPP14Parser.Wchar - 67)) | (1 << (CPP14Parser.LeftBracket - 67)))) !== 0) || _la===CPP14Parser.Doublecolon || _la===CPP14Parser.Identifier) {
                this.state = 2036;
                this.parameterdeclarationlist(0);
            }

            this.state = 2040;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CPP14Parser.Ellipsis) {
                this.state = 2039;
                this.match(CPP14Parser.Ellipsis);
            }

            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2042;
            this.parameterdeclarationlist(0);
            this.state = 2043;
            this.match(CPP14Parser.Comma);
            this.state = 2044;
            this.match(CPP14Parser.Ellipsis);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ParameterdeclarationlistContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_parameterdeclarationlist;
    return this;
}

ParameterdeclarationlistContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ParameterdeclarationlistContext.prototype.constructor = ParameterdeclarationlistContext;

ParameterdeclarationlistContext.prototype.parameterdeclaration = function() {
    return this.getTypedRuleContext(ParameterdeclarationContext,0);
};

ParameterdeclarationlistContext.prototype.parameterdeclarationlist = function() {
    return this.getTypedRuleContext(ParameterdeclarationlistContext,0);
};

ParameterdeclarationlistContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitParameterdeclarationlist(this);
    } else {
        return visitor.visitChildren(this);
    }
};



CPP14Parser.prototype.parameterdeclarationlist = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new ParameterdeclarationlistContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 312;
    this.enterRecursionRule(localctx, 312, CPP14Parser.RULE_parameterdeclarationlist, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2049;
        this.parameterdeclaration();
        this._ctx.stop = this._input.LT(-1);
        this.state = 2056;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,242,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new ParameterdeclarationlistContext(this, _parentctx, _parentState);
                this.pushNewRecursionContext(localctx, _startState, CPP14Parser.RULE_parameterdeclarationlist);
                this.state = 2051;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 2052;
                this.match(CPP14Parser.Comma);
                this.state = 2053;
                this.parameterdeclaration(); 
            }
            this.state = 2058;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,242,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function ParameterdeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_parameterdeclaration;
    return this;
}

ParameterdeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ParameterdeclarationContext.prototype.constructor = ParameterdeclarationContext;

ParameterdeclarationContext.prototype.typespecifier = function() {
    return this.getTypedRuleContext(TypespecifierContext,0);
};

ParameterdeclarationContext.prototype.attributespecifierseq = function() {
    return this.getTypedRuleContext(AttributespecifierseqContext,0);
};

ParameterdeclarationContext.prototype.declspecifierseqwithouttype = function() {
    return this.getTypedRuleContext(DeclspecifierseqwithouttypeContext,0);
};

ParameterdeclarationContext.prototype.variableDeclaratorList = function() {
    return this.getTypedRuleContext(VariableDeclaratorListContext,0);
};

ParameterdeclarationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitParameterdeclaration(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.ParameterdeclarationContext = ParameterdeclarationContext;

CPP14Parser.prototype.parameterdeclaration = function() {

    var localctx = new ParameterdeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 314, CPP14Parser.RULE_parameterdeclaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2060;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CPP14Parser.Alignas || _la===CPP14Parser.LeftBracket) {
            this.state = 2059;
            this.attributespecifierseq(0);
        }

        this.state = 2063;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(((((_la - 15)) & ~0x1f) == 0 && ((1 << (_la - 15)) & ((1 << (CPP14Parser.Constexpr - 15)) | (1 << (CPP14Parser.Explicit - 15)) | (1 << (CPP14Parser.Extern - 15)) | (1 << (CPP14Parser.Friend - 15)) | (1 << (CPP14Parser.Inline - 15)) | (1 << (CPP14Parser.Mutable - 15)))) !== 0) || ((((_la - 50)) & ~0x1f) == 0 && ((1 << (_la - 50)) & ((1 << (CPP14Parser.Register - 50)) | (1 << (CPP14Parser.Static - 50)) | (1 << (CPP14Parser.Thread_local - 50)) | (1 << (CPP14Parser.Typedef - 50)) | (1 << (CPP14Parser.Virtual - 50)))) !== 0)) {
            this.state = 2062;
            this.declspecifierseqwithouttype();
        }

        this.state = 2065;
        this.typespecifier();
        this.state = 2067;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,245,this._ctx);
        if(la_===1) {
            this.state = 2066;
            this.variableDeclaratorList();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FunctiondefinitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_functiondefinition;
    return this;
}

FunctiondefinitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FunctiondefinitionContext.prototype.constructor = FunctiondefinitionContext;

FunctiondefinitionContext.prototype.functionheader = function() {
    return this.getTypedRuleContext(FunctionheaderContext,0);
};

FunctiondefinitionContext.prototype.functionbody = function() {
    return this.getTypedRuleContext(FunctionbodyContext,0);
};

FunctiondefinitionContext.prototype.attributespecifierseq = function() {
    return this.getTypedRuleContext(AttributespecifierseqContext,0);
};

FunctiondefinitionContext.prototype.declspecifierseqwithouttype = function() {
    return this.getTypedRuleContext(DeclspecifierseqwithouttypeContext,0);
};

FunctiondefinitionContext.prototype.virtspecifierseq = function() {
    return this.getTypedRuleContext(VirtspecifierseqContext,0);
};

FunctiondefinitionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitFunctiondefinition(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.FunctiondefinitionContext = FunctiondefinitionContext;

CPP14Parser.prototype.functiondefinition = function() {

    var localctx = new FunctiondefinitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 316, CPP14Parser.RULE_functiondefinition);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2070;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CPP14Parser.Alignas || _la===CPP14Parser.LeftBracket) {
            this.state = 2069;
            this.attributespecifierseq(0);
        }

        this.state = 2073;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(((((_la - 15)) & ~0x1f) == 0 && ((1 << (_la - 15)) & ((1 << (CPP14Parser.Constexpr - 15)) | (1 << (CPP14Parser.Explicit - 15)) | (1 << (CPP14Parser.Extern - 15)) | (1 << (CPP14Parser.Friend - 15)) | (1 << (CPP14Parser.Inline - 15)) | (1 << (CPP14Parser.Mutable - 15)))) !== 0) || ((((_la - 50)) & ~0x1f) == 0 && ((1 << (_la - 50)) & ((1 << (CPP14Parser.Register - 50)) | (1 << (CPP14Parser.Static - 50)) | (1 << (CPP14Parser.Thread_local - 50)) | (1 << (CPP14Parser.Typedef - 50)) | (1 << (CPP14Parser.Virtual - 50)))) !== 0)) {
            this.state = 2072;
            this.declspecifierseqwithouttype();
        }

        this.state = 2075;
        this.functionheader();
        this.state = 2077;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CPP14Parser.Final || _la===CPP14Parser.Override) {
            this.state = 2076;
            this.virtspecifierseq(0);
        }

        this.state = 2079;
        this.functionbody();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FunctionheaderContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_functionheader;
    return this;
}

FunctionheaderContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FunctionheaderContext.prototype.constructor = FunctionheaderContext;

FunctionheaderContext.prototype.functiondeclarator = function() {
    return this.getTypedRuleContext(FunctiondeclaratorContext,0);
};

FunctionheaderContext.prototype.typespecifier = function() {
    return this.getTypedRuleContext(TypespecifierContext,0);
};

FunctionheaderContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitFunctionheader(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.FunctionheaderContext = FunctionheaderContext;

CPP14Parser.prototype.functionheader = function() {

    var localctx = new FunctionheaderContext(this, this._ctx, this.state);
    this.enterRule(localctx, 318, CPP14Parser.RULE_functionheader);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2082;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,249,this._ctx);
        if(la_===1) {
            this.state = 2081;
            this.typespecifier();

        }
        this.state = 2084;
        this.functiondeclarator();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FunctiondeclaratorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_functiondeclarator;
    return this;
}

FunctiondeclaratorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FunctiondeclaratorContext.prototype.constructor = FunctiondeclaratorContext;

FunctiondeclaratorContext.prototype.declaratorid = function() {
    return this.getTypedRuleContext(DeclaratoridContext,0);
};

FunctiondeclaratorContext.prototype.parameterdeclarationclause = function() {
    return this.getTypedRuleContext(ParameterdeclarationclauseContext,0);
};

FunctiondeclaratorContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitFunctiondeclarator(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.FunctiondeclaratorContext = FunctiondeclaratorContext;

CPP14Parser.prototype.functiondeclarator = function() {

    var localctx = new FunctiondeclaratorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 320, CPP14Parser.RULE_functiondeclarator);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2086;
        this.declaratorid();
        this.state = 2087;
        this.match(CPP14Parser.LeftParen);
        this.state = 2088;
        this.parameterdeclarationclause();
        this.state = 2089;
        this.match(CPP14Parser.RightParen);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FunctionbodyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_functionbody;
    return this;
}

FunctionbodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FunctionbodyContext.prototype.constructor = FunctionbodyContext;

FunctionbodyContext.prototype.compoundstatement = function() {
    return this.getTypedRuleContext(CompoundstatementContext,0);
};

FunctionbodyContext.prototype.ctorinitializer = function() {
    return this.getTypedRuleContext(CtorinitializerContext,0);
};

FunctionbodyContext.prototype.functiontryblock = function() {
    return this.getTypedRuleContext(FunctiontryblockContext,0);
};

FunctionbodyContext.prototype.Default = function() {
    return this.getToken(CPP14Parser.Default, 0);
};

FunctionbodyContext.prototype.Delete = function() {
    return this.getToken(CPP14Parser.Delete, 0);
};

FunctionbodyContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitFunctionbody(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.FunctionbodyContext = FunctionbodyContext;

CPP14Parser.prototype.functionbody = function() {

    var localctx = new FunctionbodyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 322, CPP14Parser.RULE_functionbody);
    var _la = 0; // Token type
    try {
        this.state = 2102;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,251,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2092;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CPP14Parser.Colon) {
                this.state = 2091;
                this.ctorinitializer();
            }

            this.state = 2094;
            this.compoundstatement();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2095;
            this.functiontryblock();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 2096;
            this.match(CPP14Parser.Assign);
            this.state = 2097;
            this.match(CPP14Parser.Default);
            this.state = 2098;
            this.match(CPP14Parser.Semi);
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 2099;
            this.match(CPP14Parser.Assign);
            this.state = 2100;
            this.match(CPP14Parser.Delete);
            this.state = 2101;
            this.match(CPP14Parser.Semi);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function InitializerContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_initializer;
    return this;
}

InitializerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InitializerContext.prototype.constructor = InitializerContext;

InitializerContext.prototype.braceorequalinitializer = function() {
    return this.getTypedRuleContext(BraceorequalinitializerContext,0);
};

InitializerContext.prototype.expressionlist = function() {
    return this.getTypedRuleContext(ExpressionlistContext,0);
};

InitializerContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitInitializer(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.InitializerContext = InitializerContext;

CPP14Parser.prototype.initializer = function() {

    var localctx = new InitializerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 324, CPP14Parser.RULE_initializer);
    try {
        this.state = 2109;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CPP14Parser.LeftBrace:
        case CPP14Parser.Assign:
            this.enterOuterAlt(localctx, 1);
            this.state = 2104;
            this.braceorequalinitializer();
            break;
        case CPP14Parser.LeftParen:
            this.enterOuterAlt(localctx, 2);
            this.state = 2105;
            this.match(CPP14Parser.LeftParen);
            this.state = 2106;
            this.expressionlist();
            this.state = 2107;
            this.match(CPP14Parser.RightParen);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BraceorequalinitializerContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_braceorequalinitializer;
    return this;
}

BraceorequalinitializerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BraceorequalinitializerContext.prototype.constructor = BraceorequalinitializerContext;

BraceorequalinitializerContext.prototype.initializerclause = function() {
    return this.getTypedRuleContext(InitializerclauseContext,0);
};

BraceorequalinitializerContext.prototype.bracedinitlist = function() {
    return this.getTypedRuleContext(BracedinitlistContext,0);
};

BraceorequalinitializerContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitBraceorequalinitializer(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.BraceorequalinitializerContext = BraceorequalinitializerContext;

CPP14Parser.prototype.braceorequalinitializer = function() {

    var localctx = new BraceorequalinitializerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 326, CPP14Parser.RULE_braceorequalinitializer);
    try {
        this.state = 2114;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CPP14Parser.Assign:
            this.enterOuterAlt(localctx, 1);
            this.state = 2111;
            this.match(CPP14Parser.Assign);
            this.state = 2112;
            this.initializerclause();
            break;
        case CPP14Parser.LeftBrace:
            this.enterOuterAlt(localctx, 2);
            this.state = 2113;
            this.bracedinitlist();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function InitializerclauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_initializerclause;
    return this;
}

InitializerclauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InitializerclauseContext.prototype.constructor = InitializerclauseContext;

InitializerclauseContext.prototype.assignmentexpression = function() {
    return this.getTypedRuleContext(AssignmentexpressionContext,0);
};

InitializerclauseContext.prototype.bracedinitlist = function() {
    return this.getTypedRuleContext(BracedinitlistContext,0);
};

InitializerclauseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitInitializerclause(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.InitializerclauseContext = InitializerclauseContext;

CPP14Parser.prototype.initializerclause = function() {

    var localctx = new InitializerclauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 328, CPP14Parser.RULE_initializerclause);
    try {
        this.state = 2118;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CPP14Parser.Alignof:
        case CPP14Parser.Auto:
        case CPP14Parser.Bool:
        case CPP14Parser.Char:
        case CPP14Parser.Char16:
        case CPP14Parser.Char32:
        case CPP14Parser.Const_cast:
        case CPP14Parser.Decltype:
        case CPP14Parser.Delete:
        case CPP14Parser.Double:
        case CPP14Parser.File:
        case CPP14Parser.Dynamic_cast:
        case CPP14Parser.Float:
        case CPP14Parser.Int:
        case CPP14Parser.Long:
        case CPP14Parser.New:
        case CPP14Parser.Noexcept:
        case CPP14Parser.Nullptr:
        case CPP14Parser.Operator:
        case CPP14Parser.Reinterpret_cast:
        case CPP14Parser.Short:
        case CPP14Parser.Signed:
        case CPP14Parser.Sizeof:
        case CPP14Parser.Static_cast:
        case CPP14Parser.This:
        case CPP14Parser.Throw:
        case CPP14Parser.Typeid:
        case CPP14Parser.Typename:
        case CPP14Parser.Unsigned:
        case CPP14Parser.Void:
        case CPP14Parser.Wchar:
        case CPP14Parser.LeftParen:
        case CPP14Parser.LeftBracket:
        case CPP14Parser.Plus:
        case CPP14Parser.Minus:
        case CPP14Parser.Star:
        case CPP14Parser.And:
        case CPP14Parser.Or:
        case CPP14Parser.Tilde:
        case CPP14Parser.Not:
        case CPP14Parser.PlusPlus:
        case CPP14Parser.MinusMinus:
        case CPP14Parser.Doublecolon:
        case CPP14Parser.Identifier:
        case CPP14Parser.Integerliteral:
        case CPP14Parser.Characterliteral:
        case CPP14Parser.Floatingliteral:
        case CPP14Parser.Stringliteral:
        case CPP14Parser.Booleanliteral:
        case CPP14Parser.Userdefinedintegerliteral:
        case CPP14Parser.Userdefinedfloatingliteral:
        case CPP14Parser.Userdefinedstringliteral:
        case CPP14Parser.Userdefinedcharacterliteral:
            this.enterOuterAlt(localctx, 1);
            this.state = 2116;
            this.assignmentexpression();
            break;
        case CPP14Parser.LeftBrace:
            this.enterOuterAlt(localctx, 2);
            this.state = 2117;
            this.bracedinitlist();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function InitializerlistContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_initializerlist;
    return this;
}

InitializerlistContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InitializerlistContext.prototype.constructor = InitializerlistContext;

InitializerlistContext.prototype.initializerclause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(InitializerclauseContext);
    } else {
        return this.getTypedRuleContext(InitializerclauseContext,i);
    }
};

InitializerlistContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitInitializerlist(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.InitializerlistContext = InitializerlistContext;

CPP14Parser.prototype.initializerlist = function() {

    var localctx = new InitializerlistContext(this, this._ctx, this.state);
    this.enterRule(localctx, 330, CPP14Parser.RULE_initializerlist);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2120;
        this.initializerclause();
        this.state = 2125;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,255,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 2121;
                this.match(CPP14Parser.Comma);
                this.state = 2122;
                this.initializerclause(); 
            }
            this.state = 2127;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,255,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BracedinitlistContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_bracedinitlist;
    return this;
}

BracedinitlistContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BracedinitlistContext.prototype.constructor = BracedinitlistContext;

BracedinitlistContext.prototype.initializerlist = function() {
    return this.getTypedRuleContext(InitializerlistContext,0);
};

BracedinitlistContext.prototype.Comma = function() {
    return this.getToken(CPP14Parser.Comma, 0);
};

BracedinitlistContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitBracedinitlist(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.BracedinitlistContext = BracedinitlistContext;

CPP14Parser.prototype.bracedinitlist = function() {

    var localctx = new BracedinitlistContext(this, this._ctx, this.state);
    this.enterRule(localctx, 332, CPP14Parser.RULE_bracedinitlist);
    var _la = 0; // Token type
    try {
        this.state = 2137;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,257,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2128;
            this.match(CPP14Parser.LeftBrace);
            this.state = 2129;
            this.initializerlist();
            this.state = 2131;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CPP14Parser.Comma) {
                this.state = 2130;
                this.match(CPP14Parser.Comma);
            }

            this.state = 2133;
            this.match(CPP14Parser.RightBrace);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2135;
            this.match(CPP14Parser.LeftBrace);
            this.state = 2136;
            this.match(CPP14Parser.RightBrace);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function MyclassnameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_myclassname;
    return this;
}

MyclassnameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MyclassnameContext.prototype.constructor = MyclassnameContext;

MyclassnameContext.prototype.Identifier = function() {
    return this.getToken(CPP14Parser.Identifier, 0);
};

MyclassnameContext.prototype.simpletemplateid = function() {
    return this.getTypedRuleContext(SimpletemplateidContext,0);
};

MyclassnameContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitMyclassname(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.MyclassnameContext = MyclassnameContext;

CPP14Parser.prototype.myclassname = function() {

    var localctx = new MyclassnameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 334, CPP14Parser.RULE_myclassname);
    try {
        this.state = 2141;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,258,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2139;
            this.match(CPP14Parser.Identifier);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2140;
            this.simpletemplateid();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ClassspecifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_classspecifier;
    return this;
}

ClassspecifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ClassspecifierContext.prototype.constructor = ClassspecifierContext;

ClassspecifierContext.prototype.classhead = function() {
    return this.getTypedRuleContext(ClassheadContext,0);
};

ClassspecifierContext.prototype.classbody = function() {
    return this.getTypedRuleContext(ClassbodyContext,0);
};

ClassspecifierContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitClassspecifier(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.ClassspecifierContext = ClassspecifierContext;

CPP14Parser.prototype.classspecifier = function() {

    var localctx = new ClassspecifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 336, CPP14Parser.RULE_classspecifier);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2143;
        this.classhead();
        this.state = 2144;
        this.classbody();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ClassbodyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_classbody;
    return this;
}

ClassbodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ClassbodyContext.prototype.constructor = ClassbodyContext;

ClassbodyContext.prototype.memberspecification = function() {
    return this.getTypedRuleContext(MemberspecificationContext,0);
};

ClassbodyContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitClassbody(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.ClassbodyContext = ClassbodyContext;

CPP14Parser.prototype.classbody = function() {

    var localctx = new ClassbodyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 338, CPP14Parser.RULE_classbody);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2146;
        this.match(CPP14Parser.LeftBrace);
        this.state = 2148;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CPP14Parser.Alignas) | (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Class) | (1 << CPP14Parser.Const) | (1 << CPP14Parser.Constexpr) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.File) | (1 << CPP14Parser.Enum) | (1 << CPP14Parser.Explicit) | (1 << CPP14Parser.Extern))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (CPP14Parser.Float - 32)) | (1 << (CPP14Parser.Friend - 32)) | (1 << (CPP14Parser.Inline - 32)) | (1 << (CPP14Parser.Int - 32)) | (1 << (CPP14Parser.Long - 32)) | (1 << (CPP14Parser.Mutable - 32)) | (1 << (CPP14Parser.Operator - 32)) | (1 << (CPP14Parser.Private - 32)) | (1 << (CPP14Parser.Protected - 32)) | (1 << (CPP14Parser.Public - 32)) | (1 << (CPP14Parser.Register - 32)) | (1 << (CPP14Parser.Short - 32)) | (1 << (CPP14Parser.Signed - 32)) | (1 << (CPP14Parser.Static - 32)) | (1 << (CPP14Parser.Static_assert - 32)) | (1 << (CPP14Parser.Struct - 32)) | (1 << (CPP14Parser.Template - 32)) | (1 << (CPP14Parser.Thread_local - 32)))) !== 0) || ((((_la - 67)) & ~0x1f) == 0 && ((1 << (_la - 67)) & ((1 << (CPP14Parser.Typedef - 67)) | (1 << (CPP14Parser.Typename - 67)) | (1 << (CPP14Parser.Union - 67)) | (1 << (CPP14Parser.Unsigned - 67)) | (1 << (CPP14Parser.Using - 67)) | (1 << (CPP14Parser.Virtual - 67)) | (1 << (CPP14Parser.Void - 67)) | (1 << (CPP14Parser.Volatile - 67)) | (1 << (CPP14Parser.Wchar - 67)) | (1 << (CPP14Parser.LeftBracket - 67)) | (1 << (CPP14Parser.Tilde - 67)))) !== 0) || ((((_la - 120)) & ~0x1f) == 0 && ((1 << (_la - 120)) & ((1 << (CPP14Parser.Doublecolon - 120)) | (1 << (CPP14Parser.Semi - 120)) | (1 << (CPP14Parser.Ellipsis - 120)) | (1 << (CPP14Parser.Identifier - 120)))) !== 0)) {
            this.state = 2147;
            this.memberspecification();
        }

        this.state = 2150;
        this.match(CPP14Parser.RightBrace);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ClassheadContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_classhead;
    return this;
}

ClassheadContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ClassheadContext.prototype.constructor = ClassheadContext;

ClassheadContext.prototype.classkey = function() {
    return this.getTypedRuleContext(ClasskeyContext,0);
};

ClassheadContext.prototype.classheadname = function() {
    return this.getTypedRuleContext(ClassheadnameContext,0);
};

ClassheadContext.prototype.attributespecifierseq = function() {
    return this.getTypedRuleContext(AttributespecifierseqContext,0);
};

ClassheadContext.prototype.nestednamespecifier = function() {
    return this.getTypedRuleContext(NestednamespecifierContext,0);
};

ClassheadContext.prototype.classvirtspecifier = function() {
    return this.getTypedRuleContext(ClassvirtspecifierContext,0);
};

ClassheadContext.prototype.baseclause = function() {
    return this.getTypedRuleContext(BaseclauseContext,0);
};

ClassheadContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitClasshead(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.ClassheadContext = ClassheadContext;

CPP14Parser.prototype.classhead = function() {

    var localctx = new ClassheadContext(this, this._ctx, this.state);
    this.enterRule(localctx, 340, CPP14Parser.RULE_classhead);
    var _la = 0; // Token type
    try {
        this.state = 2173;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,266,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2152;
            this.classkey();
            this.state = 2154;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CPP14Parser.Alignas || _la===CPP14Parser.LeftBracket) {
                this.state = 2153;
                this.attributespecifierseq(0);
            }

            this.state = 2157;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,261,this._ctx);
            if(la_===1) {
                this.state = 2156;
                this.nestednamespecifier(0);

            }
            this.state = 2159;
            this.classheadname();
            this.state = 2161;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CPP14Parser.Final) {
                this.state = 2160;
                this.classvirtspecifier();
            }

            this.state = 2164;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CPP14Parser.Colon) {
                this.state = 2163;
                this.baseclause();
            }

            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2166;
            this.classkey();
            this.state = 2168;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CPP14Parser.Alignas || _la===CPP14Parser.LeftBracket) {
                this.state = 2167;
                this.attributespecifierseq(0);
            }

            this.state = 2171;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CPP14Parser.Colon) {
                this.state = 2170;
                this.baseclause();
            }

            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ClassheadnameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_classheadname;
    return this;
}

ClassheadnameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ClassheadnameContext.prototype.constructor = ClassheadnameContext;

ClassheadnameContext.prototype.myclassname = function() {
    return this.getTypedRuleContext(MyclassnameContext,0);
};

ClassheadnameContext.prototype.nestednamespecifier = function() {
    return this.getTypedRuleContext(NestednamespecifierContext,0);
};

ClassheadnameContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitClassheadname(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.ClassheadnameContext = ClassheadnameContext;

CPP14Parser.prototype.classheadname = function() {

    var localctx = new ClassheadnameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 342, CPP14Parser.RULE_classheadname);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2176;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,267,this._ctx);
        if(la_===1) {
            this.state = 2175;
            this.nestednamespecifier(0);

        }
        this.state = 2178;
        this.myclassname();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ClassvirtspecifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_classvirtspecifier;
    return this;
}

ClassvirtspecifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ClassvirtspecifierContext.prototype.constructor = ClassvirtspecifierContext;

ClassvirtspecifierContext.prototype.Final = function() {
    return this.getToken(CPP14Parser.Final, 0);
};

ClassvirtspecifierContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitClassvirtspecifier(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.ClassvirtspecifierContext = ClassvirtspecifierContext;

CPP14Parser.prototype.classvirtspecifier = function() {

    var localctx = new ClassvirtspecifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 344, CPP14Parser.RULE_classvirtspecifier);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2180;
        this.match(CPP14Parser.Final);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ClasskeyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_classkey;
    return this;
}

ClasskeyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ClasskeyContext.prototype.constructor = ClasskeyContext;

ClasskeyContext.prototype.Class = function() {
    return this.getToken(CPP14Parser.Class, 0);
};

ClasskeyContext.prototype.Struct = function() {
    return this.getToken(CPP14Parser.Struct, 0);
};

ClasskeyContext.prototype.Union = function() {
    return this.getToken(CPP14Parser.Union, 0);
};

ClasskeyContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitClasskey(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.ClasskeyContext = ClasskeyContext;

CPP14Parser.prototype.classkey = function() {

    var localctx = new ClasskeyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 346, CPP14Parser.RULE_classkey);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2182;
        _la = this._input.LA(1);
        if(!(_la===CPP14Parser.Class || _la===CPP14Parser.Struct || _la===CPP14Parser.Union)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function MemberspecificationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_memberspecification;
    return this;
}

MemberspecificationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MemberspecificationContext.prototype.constructor = MemberspecificationContext;

MemberspecificationContext.prototype.memberdeclaration = function() {
    return this.getTypedRuleContext(MemberdeclarationContext,0);
};

MemberspecificationContext.prototype.memberspecification = function() {
    return this.getTypedRuleContext(MemberspecificationContext,0);
};

MemberspecificationContext.prototype.accessspecifier = function() {
    return this.getTypedRuleContext(AccessspecifierContext,0);
};

MemberspecificationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitMemberspecification(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.MemberspecificationContext = MemberspecificationContext;

CPP14Parser.prototype.memberspecification = function() {

    var localctx = new MemberspecificationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 348, CPP14Parser.RULE_memberspecification);
    var _la = 0; // Token type
    try {
        this.state = 2193;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CPP14Parser.Alignas:
        case CPP14Parser.Auto:
        case CPP14Parser.Bool:
        case CPP14Parser.Char:
        case CPP14Parser.Char16:
        case CPP14Parser.Char32:
        case CPP14Parser.Class:
        case CPP14Parser.Const:
        case CPP14Parser.Constexpr:
        case CPP14Parser.Decltype:
        case CPP14Parser.Double:
        case CPP14Parser.File:
        case CPP14Parser.Enum:
        case CPP14Parser.Explicit:
        case CPP14Parser.Extern:
        case CPP14Parser.Float:
        case CPP14Parser.Friend:
        case CPP14Parser.Inline:
        case CPP14Parser.Int:
        case CPP14Parser.Long:
        case CPP14Parser.Mutable:
        case CPP14Parser.Operator:
        case CPP14Parser.Register:
        case CPP14Parser.Short:
        case CPP14Parser.Signed:
        case CPP14Parser.Static:
        case CPP14Parser.Static_assert:
        case CPP14Parser.Struct:
        case CPP14Parser.Template:
        case CPP14Parser.Thread_local:
        case CPP14Parser.Typedef:
        case CPP14Parser.Typename:
        case CPP14Parser.Union:
        case CPP14Parser.Unsigned:
        case CPP14Parser.Using:
        case CPP14Parser.Virtual:
        case CPP14Parser.Void:
        case CPP14Parser.Volatile:
        case CPP14Parser.Wchar:
        case CPP14Parser.LeftBracket:
        case CPP14Parser.Tilde:
        case CPP14Parser.Doublecolon:
        case CPP14Parser.Semi:
        case CPP14Parser.Ellipsis:
        case CPP14Parser.Identifier:
            this.enterOuterAlt(localctx, 1);
            this.state = 2184;
            this.memberdeclaration();
            this.state = 2186;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CPP14Parser.Alignas) | (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Class) | (1 << CPP14Parser.Const) | (1 << CPP14Parser.Constexpr) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.File) | (1 << CPP14Parser.Enum) | (1 << CPP14Parser.Explicit) | (1 << CPP14Parser.Extern))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (CPP14Parser.Float - 32)) | (1 << (CPP14Parser.Friend - 32)) | (1 << (CPP14Parser.Inline - 32)) | (1 << (CPP14Parser.Int - 32)) | (1 << (CPP14Parser.Long - 32)) | (1 << (CPP14Parser.Mutable - 32)) | (1 << (CPP14Parser.Operator - 32)) | (1 << (CPP14Parser.Private - 32)) | (1 << (CPP14Parser.Protected - 32)) | (1 << (CPP14Parser.Public - 32)) | (1 << (CPP14Parser.Register - 32)) | (1 << (CPP14Parser.Short - 32)) | (1 << (CPP14Parser.Signed - 32)) | (1 << (CPP14Parser.Static - 32)) | (1 << (CPP14Parser.Static_assert - 32)) | (1 << (CPP14Parser.Struct - 32)) | (1 << (CPP14Parser.Template - 32)) | (1 << (CPP14Parser.Thread_local - 32)))) !== 0) || ((((_la - 67)) & ~0x1f) == 0 && ((1 << (_la - 67)) & ((1 << (CPP14Parser.Typedef - 67)) | (1 << (CPP14Parser.Typename - 67)) | (1 << (CPP14Parser.Union - 67)) | (1 << (CPP14Parser.Unsigned - 67)) | (1 << (CPP14Parser.Using - 67)) | (1 << (CPP14Parser.Virtual - 67)) | (1 << (CPP14Parser.Void - 67)) | (1 << (CPP14Parser.Volatile - 67)) | (1 << (CPP14Parser.Wchar - 67)) | (1 << (CPP14Parser.LeftBracket - 67)) | (1 << (CPP14Parser.Tilde - 67)))) !== 0) || ((((_la - 120)) & ~0x1f) == 0 && ((1 << (_la - 120)) & ((1 << (CPP14Parser.Doublecolon - 120)) | (1 << (CPP14Parser.Semi - 120)) | (1 << (CPP14Parser.Ellipsis - 120)) | (1 << (CPP14Parser.Identifier - 120)))) !== 0)) {
                this.state = 2185;
                this.memberspecification();
            }

            break;
        case CPP14Parser.Private:
        case CPP14Parser.Protected:
        case CPP14Parser.Public:
            this.enterOuterAlt(localctx, 2);
            this.state = 2188;
            this.accessspecifier();
            this.state = 2189;
            this.match(CPP14Parser.Colon);
            this.state = 2191;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CPP14Parser.Alignas) | (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Class) | (1 << CPP14Parser.Const) | (1 << CPP14Parser.Constexpr) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.File) | (1 << CPP14Parser.Enum) | (1 << CPP14Parser.Explicit) | (1 << CPP14Parser.Extern))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (CPP14Parser.Float - 32)) | (1 << (CPP14Parser.Friend - 32)) | (1 << (CPP14Parser.Inline - 32)) | (1 << (CPP14Parser.Int - 32)) | (1 << (CPP14Parser.Long - 32)) | (1 << (CPP14Parser.Mutable - 32)) | (1 << (CPP14Parser.Operator - 32)) | (1 << (CPP14Parser.Private - 32)) | (1 << (CPP14Parser.Protected - 32)) | (1 << (CPP14Parser.Public - 32)) | (1 << (CPP14Parser.Register - 32)) | (1 << (CPP14Parser.Short - 32)) | (1 << (CPP14Parser.Signed - 32)) | (1 << (CPP14Parser.Static - 32)) | (1 << (CPP14Parser.Static_assert - 32)) | (1 << (CPP14Parser.Struct - 32)) | (1 << (CPP14Parser.Template - 32)) | (1 << (CPP14Parser.Thread_local - 32)))) !== 0) || ((((_la - 67)) & ~0x1f) == 0 && ((1 << (_la - 67)) & ((1 << (CPP14Parser.Typedef - 67)) | (1 << (CPP14Parser.Typename - 67)) | (1 << (CPP14Parser.Union - 67)) | (1 << (CPP14Parser.Unsigned - 67)) | (1 << (CPP14Parser.Using - 67)) | (1 << (CPP14Parser.Virtual - 67)) | (1 << (CPP14Parser.Void - 67)) | (1 << (CPP14Parser.Volatile - 67)) | (1 << (CPP14Parser.Wchar - 67)) | (1 << (CPP14Parser.LeftBracket - 67)) | (1 << (CPP14Parser.Tilde - 67)))) !== 0) || ((((_la - 120)) & ~0x1f) == 0 && ((1 << (_la - 120)) & ((1 << (CPP14Parser.Doublecolon - 120)) | (1 << (CPP14Parser.Semi - 120)) | (1 << (CPP14Parser.Ellipsis - 120)) | (1 << (CPP14Parser.Identifier - 120)))) !== 0)) {
                this.state = 2190;
                this.memberspecification();
            }

            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function MemberdeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_memberdeclaration;
    return this;
}

MemberdeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MemberdeclarationContext.prototype.constructor = MemberdeclarationContext;

MemberdeclarationContext.prototype.membervariabledeclarationstatement = function() {
    return this.getTypedRuleContext(MembervariabledeclarationstatementContext,0);
};

MemberdeclarationContext.prototype.functiondefinition = function() {
    return this.getTypedRuleContext(FunctiondefinitionContext,0);
};

MemberdeclarationContext.prototype.usingdeclaration = function() {
    return this.getTypedRuleContext(UsingdeclarationContext,0);
};

MemberdeclarationContext.prototype.static_assertdeclaration = function() {
    return this.getTypedRuleContext(Static_assertdeclarationContext,0);
};

MemberdeclarationContext.prototype.templatedeclaration = function() {
    return this.getTypedRuleContext(TemplatedeclarationContext,0);
};

MemberdeclarationContext.prototype.aliasdeclaration = function() {
    return this.getTypedRuleContext(AliasdeclarationContext,0);
};

MemberdeclarationContext.prototype.emptydeclaration = function() {
    return this.getTypedRuleContext(EmptydeclarationContext,0);
};

MemberdeclarationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitMemberdeclaration(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.MemberdeclarationContext = MemberdeclarationContext;

CPP14Parser.prototype.memberdeclaration = function() {

    var localctx = new MemberdeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 350, CPP14Parser.RULE_memberdeclaration);
    try {
        this.state = 2202;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,271,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2195;
            this.membervariabledeclarationstatement();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2196;
            this.functiondefinition();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 2197;
            this.usingdeclaration();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 2198;
            this.static_assertdeclaration();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 2199;
            this.templatedeclaration();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 2200;
            this.aliasdeclaration();
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 2201;
            this.emptydeclaration();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function MembervariabledeclarationstatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_membervariabledeclarationstatement;
    return this;
}

MembervariabledeclarationstatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MembervariabledeclarationstatementContext.prototype.constructor = MembervariabledeclarationstatementContext;

MembervariabledeclarationstatementContext.prototype.membervariabledeclaration = function() {
    return this.getTypedRuleContext(MembervariabledeclarationContext,0);
};

MembervariabledeclarationstatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitMembervariabledeclarationstatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.MembervariabledeclarationstatementContext = MembervariabledeclarationstatementContext;

CPP14Parser.prototype.membervariabledeclarationstatement = function() {

    var localctx = new MembervariabledeclarationstatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 352, CPP14Parser.RULE_membervariabledeclarationstatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2204;
        this.membervariabledeclaration();
        this.state = 2205;
        this.match(CPP14Parser.Semi);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function MembervariabledeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_membervariabledeclaration;
    return this;
}

MembervariabledeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MembervariabledeclarationContext.prototype.constructor = MembervariabledeclarationContext;

MembervariabledeclarationContext.prototype.typespecifier = function() {
    return this.getTypedRuleContext(TypespecifierContext,0);
};

MembervariabledeclarationContext.prototype.attributespecifierseq = function() {
    return this.getTypedRuleContext(AttributespecifierseqContext,0);
};

MembervariabledeclarationContext.prototype.declspecifierseqwithouttype = function() {
    return this.getTypedRuleContext(DeclspecifierseqwithouttypeContext,0);
};

MembervariabledeclarationContext.prototype.ptroperator = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PtroperatorContext);
    } else {
        return this.getTypedRuleContext(PtroperatorContext,i);
    }
};

MembervariabledeclarationContext.prototype.memberdeclaratorlist = function() {
    return this.getTypedRuleContext(MemberdeclaratorlistContext,0);
};

MembervariabledeclarationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitMembervariabledeclaration(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.MembervariabledeclarationContext = MembervariabledeclarationContext;

CPP14Parser.prototype.membervariabledeclaration = function() {

    var localctx = new MembervariabledeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 354, CPP14Parser.RULE_membervariabledeclaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2208;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CPP14Parser.Alignas || _la===CPP14Parser.LeftBracket) {
            this.state = 2207;
            this.attributespecifierseq(0);
        }

        this.state = 2211;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(((((_la - 15)) & ~0x1f) == 0 && ((1 << (_la - 15)) & ((1 << (CPP14Parser.Constexpr - 15)) | (1 << (CPP14Parser.Explicit - 15)) | (1 << (CPP14Parser.Extern - 15)) | (1 << (CPP14Parser.Friend - 15)) | (1 << (CPP14Parser.Inline - 15)) | (1 << (CPP14Parser.Mutable - 15)))) !== 0) || ((((_la - 50)) & ~0x1f) == 0 && ((1 << (_la - 50)) & ((1 << (CPP14Parser.Register - 50)) | (1 << (CPP14Parser.Static - 50)) | (1 << (CPP14Parser.Thread_local - 50)) | (1 << (CPP14Parser.Typedef - 50)) | (1 << (CPP14Parser.Virtual - 50)))) !== 0)) {
            this.state = 2210;
            this.declspecifierseqwithouttype();
        }

        this.state = 2213;
        this.typespecifier();
        this.state = 2217;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,274,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 2214;
                this.ptroperator(); 
            }
            this.state = 2219;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,274,this._ctx);
        }

        this.state = 2221;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CPP14Parser.Alignas || _la===CPP14Parser.Decltype || _la===CPP14Parser.Operator || _la===CPP14Parser.LeftBracket || _la===CPP14Parser.Tilde || ((((_la - 119)) & ~0x1f) == 0 && ((1 << (_la - 119)) & ((1 << (CPP14Parser.Colon - 119)) | (1 << (CPP14Parser.Doublecolon - 119)) | (1 << (CPP14Parser.Ellipsis - 119)) | (1 << (CPP14Parser.Identifier - 119)))) !== 0)) {
            this.state = 2220;
            this.memberdeclaratorlist(0);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function MemberdeclaratorlistContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_memberdeclaratorlist;
    return this;
}

MemberdeclaratorlistContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MemberdeclaratorlistContext.prototype.constructor = MemberdeclaratorlistContext;

MemberdeclaratorlistContext.prototype.memberdeclarator = function() {
    return this.getTypedRuleContext(MemberdeclaratorContext,0);
};

MemberdeclaratorlistContext.prototype.memberdeclaratorlist = function() {
    return this.getTypedRuleContext(MemberdeclaratorlistContext,0);
};

MemberdeclaratorlistContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitMemberdeclaratorlist(this);
    } else {
        return visitor.visitChildren(this);
    }
};



CPP14Parser.prototype.memberdeclaratorlist = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new MemberdeclaratorlistContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 356;
    this.enterRecursionRule(localctx, 356, CPP14Parser.RULE_memberdeclaratorlist, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2224;
        this.memberdeclarator();
        this._ctx.stop = this._input.LT(-1);
        this.state = 2231;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,276,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new MemberdeclaratorlistContext(this, _parentctx, _parentState);
                this.pushNewRecursionContext(localctx, _startState, CPP14Parser.RULE_memberdeclaratorlist);
                this.state = 2226;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 2227;
                this.match(CPP14Parser.Comma);
                this.state = 2228;
                this.memberdeclarator(); 
            }
            this.state = 2233;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,276,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function MemberdeclaratorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_memberdeclarator;
    return this;
}

MemberdeclaratorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MemberdeclaratorContext.prototype.constructor = MemberdeclaratorContext;

MemberdeclaratorContext.prototype.declaratorid = function() {
    return this.getTypedRuleContext(DeclaratoridContext,0);
};

MemberdeclaratorContext.prototype.virtspecifierseq = function() {
    return this.getTypedRuleContext(VirtspecifierseqContext,0);
};

MemberdeclaratorContext.prototype.purespecifier = function() {
    return this.getTypedRuleContext(PurespecifierContext,0);
};

MemberdeclaratorContext.prototype.initializerclause = function() {
    return this.getTypedRuleContext(InitializerclauseContext,0);
};

MemberdeclaratorContext.prototype.bracedinitlist = function() {
    return this.getTypedRuleContext(BracedinitlistContext,0);
};

MemberdeclaratorContext.prototype.constantexpression = function() {
    return this.getTypedRuleContext(ConstantexpressionContext,0);
};

MemberdeclaratorContext.prototype.Identifier = function() {
    return this.getToken(CPP14Parser.Identifier, 0);
};

MemberdeclaratorContext.prototype.attributespecifierseq = function() {
    return this.getTypedRuleContext(AttributespecifierseqContext,0);
};

MemberdeclaratorContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitMemberdeclarator(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.MemberdeclaratorContext = MemberdeclaratorContext;

CPP14Parser.prototype.memberdeclarator = function() {

    var localctx = new MemberdeclaratorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 358, CPP14Parser.RULE_memberdeclarator);
    var _la = 0; // Token type
    try {
        this.state = 2258;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,283,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2234;
            this.declaratorid();
            this.state = 2236;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,277,this._ctx);
            if(la_===1) {
                this.state = 2235;
                this.virtspecifierseq(0);

            }
            this.state = 2239;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,278,this._ctx);
            if(la_===1) {
                this.state = 2238;
                this.purespecifier();

            }
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2241;
            this.declaratorid();
            this.state = 2244;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,279,this._ctx);
            if(la_===1) {
                this.state = 2242;
                this.match(CPP14Parser.Assign);
                this.state = 2243;
                this.initializerclause();

            }
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 2246;
            this.declaratorid();
            this.state = 2248;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,280,this._ctx);
            if(la_===1) {
                this.state = 2247;
                this.bracedinitlist();

            }
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 2251;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CPP14Parser.Identifier) {
                this.state = 2250;
                this.match(CPP14Parser.Identifier);
            }

            this.state = 2254;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CPP14Parser.Alignas || _la===CPP14Parser.LeftBracket) {
                this.state = 2253;
                this.attributespecifierseq(0);
            }

            this.state = 2256;
            this.match(CPP14Parser.Colon);
            this.state = 2257;
            this.constantexpression();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function VirtspecifierseqContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_virtspecifierseq;
    return this;
}

VirtspecifierseqContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VirtspecifierseqContext.prototype.constructor = VirtspecifierseqContext;

VirtspecifierseqContext.prototype.virtspecifier = function() {
    return this.getTypedRuleContext(VirtspecifierContext,0);
};

VirtspecifierseqContext.prototype.virtspecifierseq = function() {
    return this.getTypedRuleContext(VirtspecifierseqContext,0);
};

VirtspecifierseqContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitVirtspecifierseq(this);
    } else {
        return visitor.visitChildren(this);
    }
};



CPP14Parser.prototype.virtspecifierseq = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new VirtspecifierseqContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 360;
    this.enterRecursionRule(localctx, 360, CPP14Parser.RULE_virtspecifierseq, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2261;
        this.virtspecifier();
        this._ctx.stop = this._input.LT(-1);
        this.state = 2267;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,284,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new VirtspecifierseqContext(this, _parentctx, _parentState);
                this.pushNewRecursionContext(localctx, _startState, CPP14Parser.RULE_virtspecifierseq);
                this.state = 2263;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 2264;
                this.virtspecifier(); 
            }
            this.state = 2269;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,284,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function VirtspecifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_virtspecifier;
    return this;
}

VirtspecifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VirtspecifierContext.prototype.constructor = VirtspecifierContext;

VirtspecifierContext.prototype.Override = function() {
    return this.getToken(CPP14Parser.Override, 0);
};

VirtspecifierContext.prototype.Final = function() {
    return this.getToken(CPP14Parser.Final, 0);
};

VirtspecifierContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitVirtspecifier(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.VirtspecifierContext = VirtspecifierContext;

CPP14Parser.prototype.virtspecifier = function() {

    var localctx = new VirtspecifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 362, CPP14Parser.RULE_virtspecifier);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2270;
        _la = this._input.LA(1);
        if(!(_la===CPP14Parser.Final || _la===CPP14Parser.Override)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PurespecifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_purespecifier;
    this.val = null; // Token
    return this;
}

PurespecifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PurespecifierContext.prototype.constructor = PurespecifierContext;

PurespecifierContext.prototype.Assign = function() {
    return this.getToken(CPP14Parser.Assign, 0);
};

PurespecifierContext.prototype.Octalliteral = function() {
    return this.getToken(CPP14Parser.Octalliteral, 0);
};

PurespecifierContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitPurespecifier(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.PurespecifierContext = PurespecifierContext;

CPP14Parser.prototype.purespecifier = function() {

    var localctx = new PurespecifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 364, CPP14Parser.RULE_purespecifier);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2272;
        this.match(CPP14Parser.Assign);
        this.state = 2273;
        localctx.val = this.match(CPP14Parser.Octalliteral);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BaseclauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_baseclause;
    return this;
}

BaseclauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BaseclauseContext.prototype.constructor = BaseclauseContext;

BaseclauseContext.prototype.basespecifierlist = function() {
    return this.getTypedRuleContext(BasespecifierlistContext,0);
};

BaseclauseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitBaseclause(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.BaseclauseContext = BaseclauseContext;

CPP14Parser.prototype.baseclause = function() {

    var localctx = new BaseclauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 366, CPP14Parser.RULE_baseclause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2275;
        this.match(CPP14Parser.Colon);
        this.state = 2276;
        this.basespecifierlist(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BasespecifierlistContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_basespecifierlist;
    return this;
}

BasespecifierlistContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BasespecifierlistContext.prototype.constructor = BasespecifierlistContext;

BasespecifierlistContext.prototype.basespecifier = function() {
    return this.getTypedRuleContext(BasespecifierContext,0);
};

BasespecifierlistContext.prototype.basespecifierlist = function() {
    return this.getTypedRuleContext(BasespecifierlistContext,0);
};

BasespecifierlistContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitBasespecifierlist(this);
    } else {
        return visitor.visitChildren(this);
    }
};



CPP14Parser.prototype.basespecifierlist = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new BasespecifierlistContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 368;
    this.enterRecursionRule(localctx, 368, CPP14Parser.RULE_basespecifierlist, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2279;
        this.basespecifier();
        this.state = 2281;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,285,this._ctx);
        if(la_===1) {
            this.state = 2280;
            this.match(CPP14Parser.Ellipsis);

        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 2291;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,287,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new BasespecifierlistContext(this, _parentctx, _parentState);
                this.pushNewRecursionContext(localctx, _startState, CPP14Parser.RULE_basespecifierlist);
                this.state = 2283;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 2284;
                this.match(CPP14Parser.Comma);
                this.state = 2285;
                this.basespecifier();
                this.state = 2287;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,286,this._ctx);
                if(la_===1) {
                    this.state = 2286;
                    this.match(CPP14Parser.Ellipsis);

                } 
            }
            this.state = 2293;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,287,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function BasespecifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_basespecifier;
    return this;
}

BasespecifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BasespecifierContext.prototype.constructor = BasespecifierContext;

BasespecifierContext.prototype.basetypespecifier = function() {
    return this.getTypedRuleContext(BasetypespecifierContext,0);
};

BasespecifierContext.prototype.attributespecifierseq = function() {
    return this.getTypedRuleContext(AttributespecifierseqContext,0);
};

BasespecifierContext.prototype.Virtual = function() {
    return this.getToken(CPP14Parser.Virtual, 0);
};

BasespecifierContext.prototype.accessspecifier = function() {
    return this.getTypedRuleContext(AccessspecifierContext,0);
};

BasespecifierContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitBasespecifier(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.BasespecifierContext = BasespecifierContext;

CPP14Parser.prototype.basespecifier = function() {

    var localctx = new BasespecifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 370, CPP14Parser.RULE_basespecifier);
    var _la = 0; // Token type
    try {
        this.state = 2315;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,293,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2295;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CPP14Parser.Alignas || _la===CPP14Parser.LeftBracket) {
                this.state = 2294;
                this.attributespecifierseq(0);
            }

            this.state = 2297;
            this.basetypespecifier();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2299;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CPP14Parser.Alignas || _la===CPP14Parser.LeftBracket) {
                this.state = 2298;
                this.attributespecifierseq(0);
            }

            this.state = 2301;
            this.match(CPP14Parser.Virtual);
            this.state = 2303;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(((((_la - 47)) & ~0x1f) == 0 && ((1 << (_la - 47)) & ((1 << (CPP14Parser.Private - 47)) | (1 << (CPP14Parser.Protected - 47)) | (1 << (CPP14Parser.Public - 47)))) !== 0)) {
                this.state = 2302;
                this.accessspecifier();
            }

            this.state = 2305;
            this.basetypespecifier();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 2307;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CPP14Parser.Alignas || _la===CPP14Parser.LeftBracket) {
                this.state = 2306;
                this.attributespecifierseq(0);
            }

            this.state = 2309;
            this.accessspecifier();
            this.state = 2311;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CPP14Parser.Virtual) {
                this.state = 2310;
                this.match(CPP14Parser.Virtual);
            }

            this.state = 2313;
            this.basetypespecifier();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ClassordecltypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_classordecltype;
    return this;
}

ClassordecltypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ClassordecltypeContext.prototype.constructor = ClassordecltypeContext;

ClassordecltypeContext.prototype.myclassname = function() {
    return this.getTypedRuleContext(MyclassnameContext,0);
};

ClassordecltypeContext.prototype.nestednamespecifier = function() {
    return this.getTypedRuleContext(NestednamespecifierContext,0);
};

ClassordecltypeContext.prototype.decltypespecifier = function() {
    return this.getTypedRuleContext(DecltypespecifierContext,0);
};

ClassordecltypeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitClassordecltype(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.ClassordecltypeContext = ClassordecltypeContext;

CPP14Parser.prototype.classordecltype = function() {

    var localctx = new ClassordecltypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 372, CPP14Parser.RULE_classordecltype);
    try {
        this.state = 2322;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,295,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2318;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,294,this._ctx);
            if(la_===1) {
                this.state = 2317;
                this.nestednamespecifier(0);

            }
            this.state = 2320;
            this.myclassname();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2321;
            this.decltypespecifier();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BasetypespecifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_basetypespecifier;
    return this;
}

BasetypespecifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BasetypespecifierContext.prototype.constructor = BasetypespecifierContext;

BasetypespecifierContext.prototype.classordecltype = function() {
    return this.getTypedRuleContext(ClassordecltypeContext,0);
};

BasetypespecifierContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitBasetypespecifier(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.BasetypespecifierContext = BasetypespecifierContext;

CPP14Parser.prototype.basetypespecifier = function() {

    var localctx = new BasetypespecifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 374, CPP14Parser.RULE_basetypespecifier);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2324;
        this.classordecltype();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AccessspecifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_accessspecifier;
    return this;
}

AccessspecifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AccessspecifierContext.prototype.constructor = AccessspecifierContext;

AccessspecifierContext.prototype.Private = function() {
    return this.getToken(CPP14Parser.Private, 0);
};

AccessspecifierContext.prototype.Protected = function() {
    return this.getToken(CPP14Parser.Protected, 0);
};

AccessspecifierContext.prototype.Public = function() {
    return this.getToken(CPP14Parser.Public, 0);
};

AccessspecifierContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitAccessspecifier(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.AccessspecifierContext = AccessspecifierContext;

CPP14Parser.prototype.accessspecifier = function() {

    var localctx = new AccessspecifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 376, CPP14Parser.RULE_accessspecifier);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2326;
        _la = this._input.LA(1);
        if(!(((((_la - 47)) & ~0x1f) == 0 && ((1 << (_la - 47)) & ((1 << (CPP14Parser.Private - 47)) | (1 << (CPP14Parser.Protected - 47)) | (1 << (CPP14Parser.Public - 47)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ConversionfunctionidContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_conversionfunctionid;
    return this;
}

ConversionfunctionidContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConversionfunctionidContext.prototype.constructor = ConversionfunctionidContext;

ConversionfunctionidContext.prototype.Operator = function() {
    return this.getToken(CPP14Parser.Operator, 0);
};

ConversionfunctionidContext.prototype.conversiontypeid = function() {
    return this.getTypedRuleContext(ConversiontypeidContext,0);
};

ConversionfunctionidContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitConversionfunctionid(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.ConversionfunctionidContext = ConversionfunctionidContext;

CPP14Parser.prototype.conversionfunctionid = function() {

    var localctx = new ConversionfunctionidContext(this, this._ctx, this.state);
    this.enterRule(localctx, 378, CPP14Parser.RULE_conversionfunctionid);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2328;
        this.match(CPP14Parser.Operator);
        this.state = 2329;
        this.conversiontypeid();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ConversiontypeidContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_conversiontypeid;
    return this;
}

ConversiontypeidContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConversiontypeidContext.prototype.constructor = ConversiontypeidContext;

ConversiontypeidContext.prototype.typespecifierseq = function() {
    return this.getTypedRuleContext(TypespecifierseqContext,0);
};

ConversiontypeidContext.prototype.conversiondeclarator = function() {
    return this.getTypedRuleContext(ConversiondeclaratorContext,0);
};

ConversiontypeidContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitConversiontypeid(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.ConversiontypeidContext = ConversiontypeidContext;

CPP14Parser.prototype.conversiontypeid = function() {

    var localctx = new ConversiontypeidContext(this, this._ctx, this.state);
    this.enterRule(localctx, 380, CPP14Parser.RULE_conversiontypeid);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2331;
        this.typespecifierseq();
        this.state = 2333;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,296,this._ctx);
        if(la_===1) {
            this.state = 2332;
            this.conversiondeclarator();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ConversiondeclaratorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_conversiondeclarator;
    return this;
}

ConversiondeclaratorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConversiondeclaratorContext.prototype.constructor = ConversiondeclaratorContext;

ConversiondeclaratorContext.prototype.ptroperator = function() {
    return this.getTypedRuleContext(PtroperatorContext,0);
};

ConversiondeclaratorContext.prototype.conversiondeclarator = function() {
    return this.getTypedRuleContext(ConversiondeclaratorContext,0);
};

ConversiondeclaratorContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitConversiondeclarator(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.ConversiondeclaratorContext = ConversiondeclaratorContext;

CPP14Parser.prototype.conversiondeclarator = function() {

    var localctx = new ConversiondeclaratorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 382, CPP14Parser.RULE_conversiondeclarator);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2335;
        this.ptroperator();
        this.state = 2337;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,297,this._ctx);
        if(la_===1) {
            this.state = 2336;
            this.conversiondeclarator();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CtorinitializerContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_ctorinitializer;
    return this;
}

CtorinitializerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CtorinitializerContext.prototype.constructor = CtorinitializerContext;

CtorinitializerContext.prototype.meminitializerlist = function() {
    return this.getTypedRuleContext(MeminitializerlistContext,0);
};

CtorinitializerContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitCtorinitializer(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.CtorinitializerContext = CtorinitializerContext;

CPP14Parser.prototype.ctorinitializer = function() {

    var localctx = new CtorinitializerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 384, CPP14Parser.RULE_ctorinitializer);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2339;
        this.match(CPP14Parser.Colon);
        this.state = 2340;
        this.meminitializerlist();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function MeminitializerlistContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_meminitializerlist;
    return this;
}

MeminitializerlistContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MeminitializerlistContext.prototype.constructor = MeminitializerlistContext;

MeminitializerlistContext.prototype.meminitializer = function() {
    return this.getTypedRuleContext(MeminitializerContext,0);
};

MeminitializerlistContext.prototype.meminitializerlist = function() {
    return this.getTypedRuleContext(MeminitializerlistContext,0);
};

MeminitializerlistContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitMeminitializerlist(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.MeminitializerlistContext = MeminitializerlistContext;

CPP14Parser.prototype.meminitializerlist = function() {

    var localctx = new MeminitializerlistContext(this, this._ctx, this.state);
    this.enterRule(localctx, 386, CPP14Parser.RULE_meminitializerlist);
    var _la = 0; // Token type
    try {
        this.state = 2353;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,300,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2342;
            this.meminitializer();
            this.state = 2344;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CPP14Parser.Ellipsis) {
                this.state = 2343;
                this.match(CPP14Parser.Ellipsis);
            }

            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2346;
            this.meminitializer();
            this.state = 2348;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CPP14Parser.Ellipsis) {
                this.state = 2347;
                this.match(CPP14Parser.Ellipsis);
            }

            this.state = 2350;
            this.match(CPP14Parser.Comma);
            this.state = 2351;
            this.meminitializerlist();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function MeminitializerContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_meminitializer;
    return this;
}

MeminitializerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MeminitializerContext.prototype.constructor = MeminitializerContext;

MeminitializerContext.prototype.meminitializerid = function() {
    return this.getTypedRuleContext(MeminitializeridContext,0);
};

MeminitializerContext.prototype.expressionlist = function() {
    return this.getTypedRuleContext(ExpressionlistContext,0);
};

MeminitializerContext.prototype.bracedinitlist = function() {
    return this.getTypedRuleContext(BracedinitlistContext,0);
};

MeminitializerContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitMeminitializer(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.MeminitializerContext = MeminitializerContext;

CPP14Parser.prototype.meminitializer = function() {

    var localctx = new MeminitializerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 388, CPP14Parser.RULE_meminitializer);
    var _la = 0; // Token type
    try {
        this.state = 2365;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,302,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2355;
            this.meminitializerid();
            this.state = 2356;
            this.match(CPP14Parser.LeftParen);
            this.state = 2358;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.File) | (1 << CPP14Parser.Dynamic_cast))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (CPP14Parser.Float - 32)) | (1 << (CPP14Parser.Int - 32)) | (1 << (CPP14Parser.Long - 32)) | (1 << (CPP14Parser.New - 32)) | (1 << (CPP14Parser.Noexcept - 32)) | (1 << (CPP14Parser.Nullptr - 32)) | (1 << (CPP14Parser.Operator - 32)) | (1 << (CPP14Parser.Reinterpret_cast - 32)) | (1 << (CPP14Parser.Short - 32)) | (1 << (CPP14Parser.Signed - 32)) | (1 << (CPP14Parser.Sizeof - 32)) | (1 << (CPP14Parser.Static_cast - 32)) | (1 << (CPP14Parser.This - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (CPP14Parser.Throw - 64)) | (1 << (CPP14Parser.Typeid - 64)) | (1 << (CPP14Parser.Typename - 64)) | (1 << (CPP14Parser.Unsigned - 64)) | (1 << (CPP14Parser.Void - 64)) | (1 << (CPP14Parser.Wchar - 64)) | (1 << (CPP14Parser.LeftParen - 64)) | (1 << (CPP14Parser.LeftBracket - 64)) | (1 << (CPP14Parser.LeftBrace - 64)) | (1 << (CPP14Parser.Plus - 64)) | (1 << (CPP14Parser.Minus - 64)) | (1 << (CPP14Parser.Star - 64)) | (1 << (CPP14Parser.And - 64)) | (1 << (CPP14Parser.Or - 64)) | (1 << (CPP14Parser.Tilde - 64)) | (1 << (CPP14Parser.Not - 64)))) !== 0) || ((((_la - 113)) & ~0x1f) == 0 && ((1 << (_la - 113)) & ((1 << (CPP14Parser.PlusPlus - 113)) | (1 << (CPP14Parser.MinusMinus - 113)) | (1 << (CPP14Parser.Doublecolon - 113)) | (1 << (CPP14Parser.Identifier - 113)) | (1 << (CPP14Parser.Integerliteral - 113)) | (1 << (CPP14Parser.Characterliteral - 113)) | (1 << (CPP14Parser.Floatingliteral - 113)) | (1 << (CPP14Parser.Stringliteral - 113)) | (1 << (CPP14Parser.Booleanliteral - 113)) | (1 << (CPP14Parser.Userdefinedintegerliteral - 113)) | (1 << (CPP14Parser.Userdefinedfloatingliteral - 113)) | (1 << (CPP14Parser.Userdefinedstringliteral - 113)) | (1 << (CPP14Parser.Userdefinedcharacterliteral - 113)))) !== 0)) {
                this.state = 2357;
                this.expressionlist();
            }

            this.state = 2360;
            this.match(CPP14Parser.RightParen);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2362;
            this.meminitializerid();
            this.state = 2363;
            this.bracedinitlist();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function MeminitializeridContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_meminitializerid;
    return this;
}

MeminitializeridContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MeminitializeridContext.prototype.constructor = MeminitializeridContext;

MeminitializeridContext.prototype.classordecltype = function() {
    return this.getTypedRuleContext(ClassordecltypeContext,0);
};

MeminitializeridContext.prototype.Identifier = function() {
    return this.getToken(CPP14Parser.Identifier, 0);
};

MeminitializeridContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitMeminitializerid(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.MeminitializeridContext = MeminitializeridContext;

CPP14Parser.prototype.meminitializerid = function() {

    var localctx = new MeminitializeridContext(this, this._ctx, this.state);
    this.enterRule(localctx, 390, CPP14Parser.RULE_meminitializerid);
    try {
        this.state = 2369;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,303,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2367;
            this.classordecltype();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2368;
            this.match(CPP14Parser.Identifier);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OperatorfunctionidContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_operatorfunctionid;
    return this;
}

OperatorfunctionidContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OperatorfunctionidContext.prototype.constructor = OperatorfunctionidContext;

OperatorfunctionidContext.prototype.Operator = function() {
    return this.getToken(CPP14Parser.Operator, 0);
};

OperatorfunctionidContext.prototype.operator = function() {
    return this.getTypedRuleContext(OperatorContext,0);
};

OperatorfunctionidContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitOperatorfunctionid(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.OperatorfunctionidContext = OperatorfunctionidContext;

CPP14Parser.prototype.operatorfunctionid = function() {

    var localctx = new OperatorfunctionidContext(this, this._ctx, this.state);
    this.enterRule(localctx, 392, CPP14Parser.RULE_operatorfunctionid);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2371;
        this.match(CPP14Parser.Operator);
        this.state = 2372;
        this.operator();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LiteraloperatoridContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_literaloperatorid;
    return this;
}

LiteraloperatoridContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LiteraloperatoridContext.prototype.constructor = LiteraloperatoridContext;

LiteraloperatoridContext.prototype.Operator = function() {
    return this.getToken(CPP14Parser.Operator, 0);
};

LiteraloperatoridContext.prototype.Stringliteral = function() {
    return this.getToken(CPP14Parser.Stringliteral, 0);
};

LiteraloperatoridContext.prototype.Identifier = function() {
    return this.getToken(CPP14Parser.Identifier, 0);
};

LiteraloperatoridContext.prototype.Userdefinedstringliteral = function() {
    return this.getToken(CPP14Parser.Userdefinedstringliteral, 0);
};

LiteraloperatoridContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitLiteraloperatorid(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.LiteraloperatoridContext = LiteraloperatoridContext;

CPP14Parser.prototype.literaloperatorid = function() {

    var localctx = new LiteraloperatoridContext(this, this._ctx, this.state);
    this.enterRule(localctx, 394, CPP14Parser.RULE_literaloperatorid);
    try {
        this.state = 2379;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,304,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2374;
            this.match(CPP14Parser.Operator);
            this.state = 2375;
            this.match(CPP14Parser.Stringliteral);
            this.state = 2376;
            this.match(CPP14Parser.Identifier);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2377;
            this.match(CPP14Parser.Operator);
            this.state = 2378;
            this.match(CPP14Parser.Userdefinedstringliteral);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TemplatedeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_templatedeclaration;
    return this;
}

TemplatedeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TemplatedeclarationContext.prototype.constructor = TemplatedeclarationContext;

TemplatedeclarationContext.prototype.Template = function() {
    return this.getToken(CPP14Parser.Template, 0);
};

TemplatedeclarationContext.prototype.templateparameterlist = function() {
    return this.getTypedRuleContext(TemplateparameterlistContext,0);
};

TemplatedeclarationContext.prototype.declaration = function() {
    return this.getTypedRuleContext(DeclarationContext,0);
};

TemplatedeclarationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitTemplatedeclaration(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.TemplatedeclarationContext = TemplatedeclarationContext;

CPP14Parser.prototype.templatedeclaration = function() {

    var localctx = new TemplatedeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 396, CPP14Parser.RULE_templatedeclaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2381;
        this.match(CPP14Parser.Template);
        this.state = 2382;
        this.match(CPP14Parser.Less);
        this.state = 2383;
        this.templateparameterlist(0);
        this.state = 2384;
        this.match(CPP14Parser.Greater);
        this.state = 2385;
        this.declaration();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TemplateparameterlistContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_templateparameterlist;
    return this;
}

TemplateparameterlistContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TemplateparameterlistContext.prototype.constructor = TemplateparameterlistContext;

TemplateparameterlistContext.prototype.templateparameter = function() {
    return this.getTypedRuleContext(TemplateparameterContext,0);
};

TemplateparameterlistContext.prototype.templateparameterlist = function() {
    return this.getTypedRuleContext(TemplateparameterlistContext,0);
};

TemplateparameterlistContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitTemplateparameterlist(this);
    } else {
        return visitor.visitChildren(this);
    }
};



CPP14Parser.prototype.templateparameterlist = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new TemplateparameterlistContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 398;
    this.enterRecursionRule(localctx, 398, CPP14Parser.RULE_templateparameterlist, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2388;
        this.templateparameter();
        this._ctx.stop = this._input.LT(-1);
        this.state = 2395;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,305,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new TemplateparameterlistContext(this, _parentctx, _parentState);
                this.pushNewRecursionContext(localctx, _startState, CPP14Parser.RULE_templateparameterlist);
                this.state = 2390;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 2391;
                this.match(CPP14Parser.Comma);
                this.state = 2392;
                this.templateparameter(); 
            }
            this.state = 2397;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,305,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function TemplateparameterContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_templateparameter;
    return this;
}

TemplateparameterContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TemplateparameterContext.prototype.constructor = TemplateparameterContext;

TemplateparameterContext.prototype.typeparameter = function() {
    return this.getTypedRuleContext(TypeparameterContext,0);
};

TemplateparameterContext.prototype.parameterdeclaration = function() {
    return this.getTypedRuleContext(ParameterdeclarationContext,0);
};

TemplateparameterContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitTemplateparameter(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.TemplateparameterContext = TemplateparameterContext;

CPP14Parser.prototype.templateparameter = function() {

    var localctx = new TemplateparameterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 400, CPP14Parser.RULE_templateparameter);
    try {
        this.state = 2400;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,306,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2398;
            this.typeparameter();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2399;
            this.parameterdeclaration();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TypeparameterContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_typeparameter;
    return this;
}

TypeparameterContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeparameterContext.prototype.constructor = TypeparameterContext;

TypeparameterContext.prototype.Class = function() {
    return this.getToken(CPP14Parser.Class, 0);
};

TypeparameterContext.prototype.Identifier = function() {
    return this.getToken(CPP14Parser.Identifier, 0);
};

TypeparameterContext.prototype.typeid = function() {
    return this.getTypedRuleContext(TypeidContext,0);
};

TypeparameterContext.prototype.Typename = function() {
    return this.getToken(CPP14Parser.Typename, 0);
};

TypeparameterContext.prototype.Template = function() {
    return this.getToken(CPP14Parser.Template, 0);
};

TypeparameterContext.prototype.templateparameterlist = function() {
    return this.getTypedRuleContext(TemplateparameterlistContext,0);
};

TypeparameterContext.prototype.idexpression = function() {
    return this.getTypedRuleContext(IdexpressionContext,0);
};

TypeparameterContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitTypeparameter(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.TypeparameterContext = TypeparameterContext;

CPP14Parser.prototype.typeparameter = function() {

    var localctx = new TypeparameterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 402, CPP14Parser.RULE_typeparameter);
    var _la = 0; // Token type
    try {
        this.state = 2450;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,316,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2402;
            this.match(CPP14Parser.Class);
            this.state = 2404;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,307,this._ctx);
            if(la_===1) {
                this.state = 2403;
                this.match(CPP14Parser.Ellipsis);

            }
            this.state = 2407;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,308,this._ctx);
            if(la_===1) {
                this.state = 2406;
                this.match(CPP14Parser.Identifier);

            }
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2409;
            this.match(CPP14Parser.Class);
            this.state = 2411;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CPP14Parser.Identifier) {
                this.state = 2410;
                this.match(CPP14Parser.Identifier);
            }

            this.state = 2413;
            this.match(CPP14Parser.Assign);
            this.state = 2414;
            this.typeid();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 2415;
            this.match(CPP14Parser.Typename);
            this.state = 2417;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,310,this._ctx);
            if(la_===1) {
                this.state = 2416;
                this.match(CPP14Parser.Ellipsis);

            }
            this.state = 2420;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,311,this._ctx);
            if(la_===1) {
                this.state = 2419;
                this.match(CPP14Parser.Identifier);

            }
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 2422;
            this.match(CPP14Parser.Typename);
            this.state = 2424;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CPP14Parser.Identifier) {
                this.state = 2423;
                this.match(CPP14Parser.Identifier);
            }

            this.state = 2426;
            this.match(CPP14Parser.Assign);
            this.state = 2427;
            this.typeid();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 2428;
            this.match(CPP14Parser.Template);
            this.state = 2429;
            this.match(CPP14Parser.Less);
            this.state = 2430;
            this.templateparameterlist(0);
            this.state = 2431;
            this.match(CPP14Parser.Greater);
            this.state = 2432;
            this.match(CPP14Parser.Class);
            this.state = 2434;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,313,this._ctx);
            if(la_===1) {
                this.state = 2433;
                this.match(CPP14Parser.Ellipsis);

            }
            this.state = 2437;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,314,this._ctx);
            if(la_===1) {
                this.state = 2436;
                this.match(CPP14Parser.Identifier);

            }
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 2439;
            this.match(CPP14Parser.Template);
            this.state = 2440;
            this.match(CPP14Parser.Less);
            this.state = 2441;
            this.templateparameterlist(0);
            this.state = 2442;
            this.match(CPP14Parser.Greater);
            this.state = 2443;
            this.match(CPP14Parser.Class);
            this.state = 2445;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CPP14Parser.Identifier) {
                this.state = 2444;
                this.match(CPP14Parser.Identifier);
            }

            this.state = 2447;
            this.match(CPP14Parser.Assign);
            this.state = 2448;
            this.idexpression();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SimpletemplateidContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_simpletemplateid;
    return this;
}

SimpletemplateidContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SimpletemplateidContext.prototype.constructor = SimpletemplateidContext;

SimpletemplateidContext.prototype.templatename = function() {
    return this.getTypedRuleContext(TemplatenameContext,0);
};

SimpletemplateidContext.prototype.templateargumentlist = function() {
    return this.getTypedRuleContext(TemplateargumentlistContext,0);
};

SimpletemplateidContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitSimpletemplateid(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.SimpletemplateidContext = SimpletemplateidContext;

CPP14Parser.prototype.simpletemplateid = function() {

    var localctx = new SimpletemplateidContext(this, this._ctx, this.state);
    this.enterRule(localctx, 404, CPP14Parser.RULE_simpletemplateid);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2452;
        this.templatename();
        this.state = 2453;
        this.match(CPP14Parser.Less);
        this.state = 2455;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Class) | (1 << CPP14Parser.Const) | (1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.File) | (1 << CPP14Parser.Dynamic_cast) | (1 << CPP14Parser.Enum))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (CPP14Parser.Float - 32)) | (1 << (CPP14Parser.Int - 32)) | (1 << (CPP14Parser.Long - 32)) | (1 << (CPP14Parser.New - 32)) | (1 << (CPP14Parser.Noexcept - 32)) | (1 << (CPP14Parser.Nullptr - 32)) | (1 << (CPP14Parser.Operator - 32)) | (1 << (CPP14Parser.Reinterpret_cast - 32)) | (1 << (CPP14Parser.Short - 32)) | (1 << (CPP14Parser.Signed - 32)) | (1 << (CPP14Parser.Sizeof - 32)) | (1 << (CPP14Parser.Static_cast - 32)) | (1 << (CPP14Parser.Struct - 32)) | (1 << (CPP14Parser.This - 32)))) !== 0) || ((((_la - 68)) & ~0x1f) == 0 && ((1 << (_la - 68)) & ((1 << (CPP14Parser.Typeid - 68)) | (1 << (CPP14Parser.Typename - 68)) | (1 << (CPP14Parser.Union - 68)) | (1 << (CPP14Parser.Unsigned - 68)) | (1 << (CPP14Parser.Void - 68)) | (1 << (CPP14Parser.Volatile - 68)) | (1 << (CPP14Parser.Wchar - 68)) | (1 << (CPP14Parser.LeftParen - 68)) | (1 << (CPP14Parser.LeftBracket - 68)) | (1 << (CPP14Parser.Plus - 68)) | (1 << (CPP14Parser.Minus - 68)) | (1 << (CPP14Parser.Star - 68)) | (1 << (CPP14Parser.And - 68)) | (1 << (CPP14Parser.Or - 68)) | (1 << (CPP14Parser.Tilde - 68)) | (1 << (CPP14Parser.Not - 68)))) !== 0) || ((((_la - 113)) & ~0x1f) == 0 && ((1 << (_la - 113)) & ((1 << (CPP14Parser.PlusPlus - 113)) | (1 << (CPP14Parser.MinusMinus - 113)) | (1 << (CPP14Parser.Doublecolon - 113)) | (1 << (CPP14Parser.Identifier - 113)) | (1 << (CPP14Parser.Integerliteral - 113)) | (1 << (CPP14Parser.Characterliteral - 113)) | (1 << (CPP14Parser.Floatingliteral - 113)) | (1 << (CPP14Parser.Stringliteral - 113)) | (1 << (CPP14Parser.Booleanliteral - 113)) | (1 << (CPP14Parser.Userdefinedintegerliteral - 113)) | (1 << (CPP14Parser.Userdefinedfloatingliteral - 113)) | (1 << (CPP14Parser.Userdefinedstringliteral - 113)) | (1 << (CPP14Parser.Userdefinedcharacterliteral - 113)))) !== 0)) {
            this.state = 2454;
            this.templateargumentlist(0);
        }

        this.state = 2457;
        this.match(CPP14Parser.Greater);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TemplateidContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_templateid;
    return this;
}

TemplateidContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TemplateidContext.prototype.constructor = TemplateidContext;

TemplateidContext.prototype.simpletemplateid = function() {
    return this.getTypedRuleContext(SimpletemplateidContext,0);
};

TemplateidContext.prototype.operatorfunctionid = function() {
    return this.getTypedRuleContext(OperatorfunctionidContext,0);
};

TemplateidContext.prototype.templateargumentlist = function() {
    return this.getTypedRuleContext(TemplateargumentlistContext,0);
};

TemplateidContext.prototype.literaloperatorid = function() {
    return this.getTypedRuleContext(LiteraloperatoridContext,0);
};

TemplateidContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitTemplateid(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.TemplateidContext = TemplateidContext;

CPP14Parser.prototype.templateid = function() {

    var localctx = new TemplateidContext(this, this._ctx, this.state);
    this.enterRule(localctx, 406, CPP14Parser.RULE_templateid);
    var _la = 0; // Token type
    try {
        this.state = 2474;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,320,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2459;
            this.simpletemplateid();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2460;
            this.operatorfunctionid();
            this.state = 2461;
            this.match(CPP14Parser.Less);
            this.state = 2463;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Class) | (1 << CPP14Parser.Const) | (1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.File) | (1 << CPP14Parser.Dynamic_cast) | (1 << CPP14Parser.Enum))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (CPP14Parser.Float - 32)) | (1 << (CPP14Parser.Int - 32)) | (1 << (CPP14Parser.Long - 32)) | (1 << (CPP14Parser.New - 32)) | (1 << (CPP14Parser.Noexcept - 32)) | (1 << (CPP14Parser.Nullptr - 32)) | (1 << (CPP14Parser.Operator - 32)) | (1 << (CPP14Parser.Reinterpret_cast - 32)) | (1 << (CPP14Parser.Short - 32)) | (1 << (CPP14Parser.Signed - 32)) | (1 << (CPP14Parser.Sizeof - 32)) | (1 << (CPP14Parser.Static_cast - 32)) | (1 << (CPP14Parser.Struct - 32)) | (1 << (CPP14Parser.This - 32)))) !== 0) || ((((_la - 68)) & ~0x1f) == 0 && ((1 << (_la - 68)) & ((1 << (CPP14Parser.Typeid - 68)) | (1 << (CPP14Parser.Typename - 68)) | (1 << (CPP14Parser.Union - 68)) | (1 << (CPP14Parser.Unsigned - 68)) | (1 << (CPP14Parser.Void - 68)) | (1 << (CPP14Parser.Volatile - 68)) | (1 << (CPP14Parser.Wchar - 68)) | (1 << (CPP14Parser.LeftParen - 68)) | (1 << (CPP14Parser.LeftBracket - 68)) | (1 << (CPP14Parser.Plus - 68)) | (1 << (CPP14Parser.Minus - 68)) | (1 << (CPP14Parser.Star - 68)) | (1 << (CPP14Parser.And - 68)) | (1 << (CPP14Parser.Or - 68)) | (1 << (CPP14Parser.Tilde - 68)) | (1 << (CPP14Parser.Not - 68)))) !== 0) || ((((_la - 113)) & ~0x1f) == 0 && ((1 << (_la - 113)) & ((1 << (CPP14Parser.PlusPlus - 113)) | (1 << (CPP14Parser.MinusMinus - 113)) | (1 << (CPP14Parser.Doublecolon - 113)) | (1 << (CPP14Parser.Identifier - 113)) | (1 << (CPP14Parser.Integerliteral - 113)) | (1 << (CPP14Parser.Characterliteral - 113)) | (1 << (CPP14Parser.Floatingliteral - 113)) | (1 << (CPP14Parser.Stringliteral - 113)) | (1 << (CPP14Parser.Booleanliteral - 113)) | (1 << (CPP14Parser.Userdefinedintegerliteral - 113)) | (1 << (CPP14Parser.Userdefinedfloatingliteral - 113)) | (1 << (CPP14Parser.Userdefinedstringliteral - 113)) | (1 << (CPP14Parser.Userdefinedcharacterliteral - 113)))) !== 0)) {
                this.state = 2462;
                this.templateargumentlist(0);
            }

            this.state = 2465;
            this.match(CPP14Parser.Greater);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 2467;
            this.literaloperatorid();
            this.state = 2468;
            this.match(CPP14Parser.Less);
            this.state = 2470;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Class) | (1 << CPP14Parser.Const) | (1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.File) | (1 << CPP14Parser.Dynamic_cast) | (1 << CPP14Parser.Enum))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (CPP14Parser.Float - 32)) | (1 << (CPP14Parser.Int - 32)) | (1 << (CPP14Parser.Long - 32)) | (1 << (CPP14Parser.New - 32)) | (1 << (CPP14Parser.Noexcept - 32)) | (1 << (CPP14Parser.Nullptr - 32)) | (1 << (CPP14Parser.Operator - 32)) | (1 << (CPP14Parser.Reinterpret_cast - 32)) | (1 << (CPP14Parser.Short - 32)) | (1 << (CPP14Parser.Signed - 32)) | (1 << (CPP14Parser.Sizeof - 32)) | (1 << (CPP14Parser.Static_cast - 32)) | (1 << (CPP14Parser.Struct - 32)) | (1 << (CPP14Parser.This - 32)))) !== 0) || ((((_la - 68)) & ~0x1f) == 0 && ((1 << (_la - 68)) & ((1 << (CPP14Parser.Typeid - 68)) | (1 << (CPP14Parser.Typename - 68)) | (1 << (CPP14Parser.Union - 68)) | (1 << (CPP14Parser.Unsigned - 68)) | (1 << (CPP14Parser.Void - 68)) | (1 << (CPP14Parser.Volatile - 68)) | (1 << (CPP14Parser.Wchar - 68)) | (1 << (CPP14Parser.LeftParen - 68)) | (1 << (CPP14Parser.LeftBracket - 68)) | (1 << (CPP14Parser.Plus - 68)) | (1 << (CPP14Parser.Minus - 68)) | (1 << (CPP14Parser.Star - 68)) | (1 << (CPP14Parser.And - 68)) | (1 << (CPP14Parser.Or - 68)) | (1 << (CPP14Parser.Tilde - 68)) | (1 << (CPP14Parser.Not - 68)))) !== 0) || ((((_la - 113)) & ~0x1f) == 0 && ((1 << (_la - 113)) & ((1 << (CPP14Parser.PlusPlus - 113)) | (1 << (CPP14Parser.MinusMinus - 113)) | (1 << (CPP14Parser.Doublecolon - 113)) | (1 << (CPP14Parser.Identifier - 113)) | (1 << (CPP14Parser.Integerliteral - 113)) | (1 << (CPP14Parser.Characterliteral - 113)) | (1 << (CPP14Parser.Floatingliteral - 113)) | (1 << (CPP14Parser.Stringliteral - 113)) | (1 << (CPP14Parser.Booleanliteral - 113)) | (1 << (CPP14Parser.Userdefinedintegerliteral - 113)) | (1 << (CPP14Parser.Userdefinedfloatingliteral - 113)) | (1 << (CPP14Parser.Userdefinedstringliteral - 113)) | (1 << (CPP14Parser.Userdefinedcharacterliteral - 113)))) !== 0)) {
                this.state = 2469;
                this.templateargumentlist(0);
            }

            this.state = 2472;
            this.match(CPP14Parser.Greater);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TemplatenameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_templatename;
    return this;
}

TemplatenameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TemplatenameContext.prototype.constructor = TemplatenameContext;

TemplatenameContext.prototype.Identifier = function() {
    return this.getToken(CPP14Parser.Identifier, 0);
};

TemplatenameContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitTemplatename(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.TemplatenameContext = TemplatenameContext;

CPP14Parser.prototype.templatename = function() {

    var localctx = new TemplatenameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 408, CPP14Parser.RULE_templatename);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2476;
        this.match(CPP14Parser.Identifier);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TemplateargumentlistContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_templateargumentlist;
    return this;
}

TemplateargumentlistContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TemplateargumentlistContext.prototype.constructor = TemplateargumentlistContext;

TemplateargumentlistContext.prototype.templateargument = function() {
    return this.getTypedRuleContext(TemplateargumentContext,0);
};

TemplateargumentlistContext.prototype.templateargumentlist = function() {
    return this.getTypedRuleContext(TemplateargumentlistContext,0);
};

TemplateargumentlistContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitTemplateargumentlist(this);
    } else {
        return visitor.visitChildren(this);
    }
};



CPP14Parser.prototype.templateargumentlist = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new TemplateargumentlistContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 410;
    this.enterRecursionRule(localctx, 410, CPP14Parser.RULE_templateargumentlist, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2479;
        this.templateargument();
        this.state = 2481;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,321,this._ctx);
        if(la_===1) {
            this.state = 2480;
            this.match(CPP14Parser.Ellipsis);

        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 2491;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,323,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new TemplateargumentlistContext(this, _parentctx, _parentState);
                this.pushNewRecursionContext(localctx, _startState, CPP14Parser.RULE_templateargumentlist);
                this.state = 2483;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 2484;
                this.match(CPP14Parser.Comma);
                this.state = 2485;
                this.templateargument();
                this.state = 2487;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,322,this._ctx);
                if(la_===1) {
                    this.state = 2486;
                    this.match(CPP14Parser.Ellipsis);

                } 
            }
            this.state = 2493;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,323,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function TemplateargumentContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_templateargument;
    return this;
}

TemplateargumentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TemplateargumentContext.prototype.constructor = TemplateargumentContext;

TemplateargumentContext.prototype.constantexpression = function() {
    return this.getTypedRuleContext(ConstantexpressionContext,0);
};

TemplateargumentContext.prototype.typeid = function() {
    return this.getTypedRuleContext(TypeidContext,0);
};

TemplateargumentContext.prototype.idexpression = function() {
    return this.getTypedRuleContext(IdexpressionContext,0);
};

TemplateargumentContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitTemplateargument(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.TemplateargumentContext = TemplateargumentContext;

CPP14Parser.prototype.templateargument = function() {

    var localctx = new TemplateargumentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 412, CPP14Parser.RULE_templateargument);
    try {
        this.state = 2497;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,324,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2494;
            this.constantexpression();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2495;
            this.typeid();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 2496;
            this.idexpression();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TypenamespecifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_typenamespecifier;
    return this;
}

TypenamespecifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypenamespecifierContext.prototype.constructor = TypenamespecifierContext;

TypenamespecifierContext.prototype.Typename = function() {
    return this.getToken(CPP14Parser.Typename, 0);
};

TypenamespecifierContext.prototype.nestednamespecifier = function() {
    return this.getTypedRuleContext(NestednamespecifierContext,0);
};

TypenamespecifierContext.prototype.Identifier = function() {
    return this.getToken(CPP14Parser.Identifier, 0);
};

TypenamespecifierContext.prototype.simpletemplateid = function() {
    return this.getTypedRuleContext(SimpletemplateidContext,0);
};

TypenamespecifierContext.prototype.Template = function() {
    return this.getToken(CPP14Parser.Template, 0);
};

TypenamespecifierContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitTypenamespecifier(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.TypenamespecifierContext = TypenamespecifierContext;

CPP14Parser.prototype.typenamespecifier = function() {

    var localctx = new TypenamespecifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 414, CPP14Parser.RULE_typenamespecifier);
    var _la = 0; // Token type
    try {
        this.state = 2510;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,326,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2499;
            this.match(CPP14Parser.Typename);
            this.state = 2500;
            this.nestednamespecifier(0);
            this.state = 2501;
            this.match(CPP14Parser.Identifier);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2503;
            this.match(CPP14Parser.Typename);
            this.state = 2504;
            this.nestednamespecifier(0);
            this.state = 2506;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CPP14Parser.Template) {
                this.state = 2505;
                this.match(CPP14Parser.Template);
            }

            this.state = 2508;
            this.simpletemplateid();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ExplicitinstantiationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_explicitinstantiation;
    return this;
}

ExplicitinstantiationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExplicitinstantiationContext.prototype.constructor = ExplicitinstantiationContext;

ExplicitinstantiationContext.prototype.Template = function() {
    return this.getToken(CPP14Parser.Template, 0);
};

ExplicitinstantiationContext.prototype.declaration = function() {
    return this.getTypedRuleContext(DeclarationContext,0);
};

ExplicitinstantiationContext.prototype.Extern = function() {
    return this.getToken(CPP14Parser.Extern, 0);
};

ExplicitinstantiationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitExplicitinstantiation(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.ExplicitinstantiationContext = ExplicitinstantiationContext;

CPP14Parser.prototype.explicitinstantiation = function() {

    var localctx = new ExplicitinstantiationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 416, CPP14Parser.RULE_explicitinstantiation);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2513;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CPP14Parser.Extern) {
            this.state = 2512;
            this.match(CPP14Parser.Extern);
        }

        this.state = 2515;
        this.match(CPP14Parser.Template);
        this.state = 2516;
        this.declaration();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ExplicitspecializationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_explicitspecialization;
    return this;
}

ExplicitspecializationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExplicitspecializationContext.prototype.constructor = ExplicitspecializationContext;

ExplicitspecializationContext.prototype.Template = function() {
    return this.getToken(CPP14Parser.Template, 0);
};

ExplicitspecializationContext.prototype.declaration = function() {
    return this.getTypedRuleContext(DeclarationContext,0);
};

ExplicitspecializationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitExplicitspecialization(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.ExplicitspecializationContext = ExplicitspecializationContext;

CPP14Parser.prototype.explicitspecialization = function() {

    var localctx = new ExplicitspecializationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 418, CPP14Parser.RULE_explicitspecialization);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2518;
        this.match(CPP14Parser.Template);
        this.state = 2519;
        this.match(CPP14Parser.Less);
        this.state = 2520;
        this.match(CPP14Parser.Greater);
        this.state = 2521;
        this.declaration();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TryblockContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_tryblock;
    return this;
}

TryblockContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TryblockContext.prototype.constructor = TryblockContext;

TryblockContext.prototype.Try = function() {
    return this.getToken(CPP14Parser.Try, 0);
};

TryblockContext.prototype.compoundstatement = function() {
    return this.getTypedRuleContext(CompoundstatementContext,0);
};

TryblockContext.prototype.handlerseq = function() {
    return this.getTypedRuleContext(HandlerseqContext,0);
};

TryblockContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitTryblock(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.TryblockContext = TryblockContext;

CPP14Parser.prototype.tryblock = function() {

    var localctx = new TryblockContext(this, this._ctx, this.state);
    this.enterRule(localctx, 420, CPP14Parser.RULE_tryblock);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2523;
        this.match(CPP14Parser.Try);
        this.state = 2524;
        this.compoundstatement();
        this.state = 2525;
        this.handlerseq();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FunctiontryblockContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_functiontryblock;
    return this;
}

FunctiontryblockContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FunctiontryblockContext.prototype.constructor = FunctiontryblockContext;

FunctiontryblockContext.prototype.Try = function() {
    return this.getToken(CPP14Parser.Try, 0);
};

FunctiontryblockContext.prototype.compoundstatement = function() {
    return this.getTypedRuleContext(CompoundstatementContext,0);
};

FunctiontryblockContext.prototype.handlerseq = function() {
    return this.getTypedRuleContext(HandlerseqContext,0);
};

FunctiontryblockContext.prototype.ctorinitializer = function() {
    return this.getTypedRuleContext(CtorinitializerContext,0);
};

FunctiontryblockContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitFunctiontryblock(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.FunctiontryblockContext = FunctiontryblockContext;

CPP14Parser.prototype.functiontryblock = function() {

    var localctx = new FunctiontryblockContext(this, this._ctx, this.state);
    this.enterRule(localctx, 422, CPP14Parser.RULE_functiontryblock);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2527;
        this.match(CPP14Parser.Try);
        this.state = 2529;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CPP14Parser.Colon) {
            this.state = 2528;
            this.ctorinitializer();
        }

        this.state = 2531;
        this.compoundstatement();
        this.state = 2532;
        this.handlerseq();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function HandlerseqContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_handlerseq;
    return this;
}

HandlerseqContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
HandlerseqContext.prototype.constructor = HandlerseqContext;

HandlerseqContext.prototype.handler = function() {
    return this.getTypedRuleContext(HandlerContext,0);
};

HandlerseqContext.prototype.handlerseq = function() {
    return this.getTypedRuleContext(HandlerseqContext,0);
};

HandlerseqContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitHandlerseq(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.HandlerseqContext = HandlerseqContext;

CPP14Parser.prototype.handlerseq = function() {

    var localctx = new HandlerseqContext(this, this._ctx, this.state);
    this.enterRule(localctx, 424, CPP14Parser.RULE_handlerseq);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2534;
        this.handler();
        this.state = 2536;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,329,this._ctx);
        if(la_===1) {
            this.state = 2535;
            this.handlerseq();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function HandlerContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_handler;
    return this;
}

HandlerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
HandlerContext.prototype.constructor = HandlerContext;

HandlerContext.prototype.Catch = function() {
    return this.getToken(CPP14Parser.Catch, 0);
};

HandlerContext.prototype.exceptiondeclaration = function() {
    return this.getTypedRuleContext(ExceptiondeclarationContext,0);
};

HandlerContext.prototype.compoundstatement = function() {
    return this.getTypedRuleContext(CompoundstatementContext,0);
};

HandlerContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitHandler(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.HandlerContext = HandlerContext;

CPP14Parser.prototype.handler = function() {

    var localctx = new HandlerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 426, CPP14Parser.RULE_handler);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2538;
        this.match(CPP14Parser.Catch);
        this.state = 2539;
        this.match(CPP14Parser.LeftParen);
        this.state = 2540;
        this.exceptiondeclaration();
        this.state = 2541;
        this.match(CPP14Parser.RightParen);
        this.state = 2542;
        this.compoundstatement();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ExceptiondeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_exceptiondeclaration;
    return this;
}

ExceptiondeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExceptiondeclarationContext.prototype.constructor = ExceptiondeclarationContext;

ExceptiondeclarationContext.prototype.typespecifierseq = function() {
    return this.getTypedRuleContext(TypespecifierseqContext,0);
};

ExceptiondeclarationContext.prototype.declarator = function() {
    return this.getTypedRuleContext(DeclaratorContext,0);
};

ExceptiondeclarationContext.prototype.attributespecifierseq = function() {
    return this.getTypedRuleContext(AttributespecifierseqContext,0);
};

ExceptiondeclarationContext.prototype.abstractdeclarator = function() {
    return this.getTypedRuleContext(AbstractdeclaratorContext,0);
};

ExceptiondeclarationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitExceptiondeclaration(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.ExceptiondeclarationContext = ExceptiondeclarationContext;

CPP14Parser.prototype.exceptiondeclaration = function() {

    var localctx = new ExceptiondeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 428, CPP14Parser.RULE_exceptiondeclaration);
    var _la = 0; // Token type
    try {
        this.state = 2558;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,333,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2545;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CPP14Parser.Alignas || _la===CPP14Parser.LeftBracket) {
                this.state = 2544;
                this.attributespecifierseq(0);
            }

            this.state = 2547;
            this.typespecifierseq();
            this.state = 2548;
            this.declarator();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2551;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CPP14Parser.Alignas || _la===CPP14Parser.LeftBracket) {
                this.state = 2550;
                this.attributespecifierseq(0);
            }

            this.state = 2553;
            this.typespecifierseq();
            this.state = 2555;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CPP14Parser.Decltype || ((((_la - 78)) & ~0x1f) == 0 && ((1 << (_la - 78)) & ((1 << (CPP14Parser.LeftParen - 78)) | (1 << (CPP14Parser.LeftBracket - 78)) | (1 << (CPP14Parser.Star - 78)) | (1 << (CPP14Parser.And - 78)))) !== 0) || ((((_la - 111)) & ~0x1f) == 0 && ((1 << (_la - 111)) & ((1 << (CPP14Parser.AndAnd - 111)) | (1 << (CPP14Parser.Doublecolon - 111)) | (1 << (CPP14Parser.Ellipsis - 111)) | (1 << (CPP14Parser.Identifier - 111)))) !== 0)) {
                this.state = 2554;
                this.abstractdeclarator();
            }

            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 2557;
            this.match(CPP14Parser.Ellipsis);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ThrowexpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_throwexpression;
    return this;
}

ThrowexpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ThrowexpressionContext.prototype.constructor = ThrowexpressionContext;

ThrowexpressionContext.prototype.Throw = function() {
    return this.getToken(CPP14Parser.Throw, 0);
};

ThrowexpressionContext.prototype.assignmentexpression = function() {
    return this.getTypedRuleContext(AssignmentexpressionContext,0);
};

ThrowexpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitThrowexpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.ThrowexpressionContext = ThrowexpressionContext;

CPP14Parser.prototype.throwexpression = function() {

    var localctx = new ThrowexpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 430, CPP14Parser.RULE_throwexpression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2560;
        this.match(CPP14Parser.Throw);
        this.state = 2562;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,334,this._ctx);
        if(la_===1) {
            this.state = 2561;
            this.assignmentexpression();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ExceptionspecificationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_exceptionspecification;
    return this;
}

ExceptionspecificationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExceptionspecificationContext.prototype.constructor = ExceptionspecificationContext;

ExceptionspecificationContext.prototype.dynamicexceptionspecification = function() {
    return this.getTypedRuleContext(DynamicexceptionspecificationContext,0);
};

ExceptionspecificationContext.prototype.noexceptspecification = function() {
    return this.getTypedRuleContext(NoexceptspecificationContext,0);
};

ExceptionspecificationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitExceptionspecification(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.ExceptionspecificationContext = ExceptionspecificationContext;

CPP14Parser.prototype.exceptionspecification = function() {

    var localctx = new ExceptionspecificationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 432, CPP14Parser.RULE_exceptionspecification);
    try {
        this.state = 2566;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CPP14Parser.Throw:
            this.enterOuterAlt(localctx, 1);
            this.state = 2564;
            this.dynamicexceptionspecification();
            break;
        case CPP14Parser.Noexcept:
            this.enterOuterAlt(localctx, 2);
            this.state = 2565;
            this.noexceptspecification();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DynamicexceptionspecificationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_dynamicexceptionspecification;
    return this;
}

DynamicexceptionspecificationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DynamicexceptionspecificationContext.prototype.constructor = DynamicexceptionspecificationContext;

DynamicexceptionspecificationContext.prototype.Throw = function() {
    return this.getToken(CPP14Parser.Throw, 0);
};

DynamicexceptionspecificationContext.prototype.typeidlist = function() {
    return this.getTypedRuleContext(TypeidlistContext,0);
};

DynamicexceptionspecificationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitDynamicexceptionspecification(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.DynamicexceptionspecificationContext = DynamicexceptionspecificationContext;

CPP14Parser.prototype.dynamicexceptionspecification = function() {

    var localctx = new DynamicexceptionspecificationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 434, CPP14Parser.RULE_dynamicexceptionspecification);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2568;
        this.match(CPP14Parser.Throw);
        this.state = 2569;
        this.match(CPP14Parser.LeftParen);
        this.state = 2571;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Class) | (1 << CPP14Parser.Const) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.File) | (1 << CPP14Parser.Enum))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (CPP14Parser.Float - 32)) | (1 << (CPP14Parser.Int - 32)) | (1 << (CPP14Parser.Long - 32)) | (1 << (CPP14Parser.Short - 32)) | (1 << (CPP14Parser.Signed - 32)) | (1 << (CPP14Parser.Struct - 32)))) !== 0) || ((((_la - 69)) & ~0x1f) == 0 && ((1 << (_la - 69)) & ((1 << (CPP14Parser.Typename - 69)) | (1 << (CPP14Parser.Union - 69)) | (1 << (CPP14Parser.Unsigned - 69)) | (1 << (CPP14Parser.Void - 69)) | (1 << (CPP14Parser.Volatile - 69)) | (1 << (CPP14Parser.Wchar - 69)))) !== 0) || _la===CPP14Parser.Doublecolon || _la===CPP14Parser.Identifier) {
            this.state = 2570;
            this.typeidlist(0);
        }

        this.state = 2573;
        this.match(CPP14Parser.RightParen);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TypeidlistContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_typeidlist;
    return this;
}

TypeidlistContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeidlistContext.prototype.constructor = TypeidlistContext;

TypeidlistContext.prototype.typeid = function() {
    return this.getTypedRuleContext(TypeidContext,0);
};

TypeidlistContext.prototype.typeidlist = function() {
    return this.getTypedRuleContext(TypeidlistContext,0);
};

TypeidlistContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitTypeidlist(this);
    } else {
        return visitor.visitChildren(this);
    }
};



CPP14Parser.prototype.typeidlist = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new TypeidlistContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 436;
    this.enterRecursionRule(localctx, 436, CPP14Parser.RULE_typeidlist, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2576;
        this.typeid();
        this.state = 2578;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,337,this._ctx);
        if(la_===1) {
            this.state = 2577;
            this.match(CPP14Parser.Ellipsis);

        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 2588;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,339,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new TypeidlistContext(this, _parentctx, _parentState);
                this.pushNewRecursionContext(localctx, _startState, CPP14Parser.RULE_typeidlist);
                this.state = 2580;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 2581;
                this.match(CPP14Parser.Comma);
                this.state = 2582;
                this.typeid();
                this.state = 2584;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,338,this._ctx);
                if(la_===1) {
                    this.state = 2583;
                    this.match(CPP14Parser.Ellipsis);

                } 
            }
            this.state = 2590;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,339,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function NoexceptspecificationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_noexceptspecification;
    return this;
}

NoexceptspecificationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NoexceptspecificationContext.prototype.constructor = NoexceptspecificationContext;

NoexceptspecificationContext.prototype.Noexcept = function() {
    return this.getToken(CPP14Parser.Noexcept, 0);
};

NoexceptspecificationContext.prototype.constantexpression = function() {
    return this.getTypedRuleContext(ConstantexpressionContext,0);
};

NoexceptspecificationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitNoexceptspecification(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.NoexceptspecificationContext = NoexceptspecificationContext;

CPP14Parser.prototype.noexceptspecification = function() {

    var localctx = new NoexceptspecificationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 438, CPP14Parser.RULE_noexceptspecification);
    try {
        this.state = 2597;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,340,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2591;
            this.match(CPP14Parser.Noexcept);
            this.state = 2592;
            this.match(CPP14Parser.LeftParen);
            this.state = 2593;
            this.constantexpression();
            this.state = 2594;
            this.match(CPP14Parser.RightParen);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2596;
            this.match(CPP14Parser.Noexcept);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function RightShiftContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_rightShift;
    return this;
}

RightShiftContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RightShiftContext.prototype.constructor = RightShiftContext;

RightShiftContext.prototype.Greater = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CPP14Parser.Greater);
    } else {
        return this.getToken(CPP14Parser.Greater, i);
    }
};


RightShiftContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitRightShift(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.RightShiftContext = RightShiftContext;

CPP14Parser.prototype.rightShift = function() {

    var localctx = new RightShiftContext(this, this._ctx, this.state);
    this.enterRule(localctx, 440, CPP14Parser.RULE_rightShift);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2599;
        this.match(CPP14Parser.Greater);
        this.state = 2600;
        this.match(CPP14Parser.Greater);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function RightShiftAssignContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_rightShiftAssign;
    return this;
}

RightShiftAssignContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RightShiftAssignContext.prototype.constructor = RightShiftAssignContext;

RightShiftAssignContext.prototype.Greater = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CPP14Parser.Greater);
    } else {
        return this.getToken(CPP14Parser.Greater, i);
    }
};


RightShiftAssignContext.prototype.Assign = function() {
    return this.getToken(CPP14Parser.Assign, 0);
};

RightShiftAssignContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitRightShiftAssign(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.RightShiftAssignContext = RightShiftAssignContext;

CPP14Parser.prototype.rightShiftAssign = function() {

    var localctx = new RightShiftAssignContext(this, this._ctx, this.state);
    this.enterRule(localctx, 442, CPP14Parser.RULE_rightShiftAssign);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2602;
        this.match(CPP14Parser.Greater);
        this.state = 2603;
        this.match(CPP14Parser.Greater);
        this.state = 2604;
        this.match(CPP14Parser.Assign);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OperatorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_operator;
    return this;
}

OperatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OperatorContext.prototype.constructor = OperatorContext;

OperatorContext.prototype.New = function() {
    return this.getToken(CPP14Parser.New, 0);
};

OperatorContext.prototype.Delete = function() {
    return this.getToken(CPP14Parser.Delete, 0);
};

OperatorContext.prototype.rightShift = function() {
    return this.getTypedRuleContext(RightShiftContext,0);
};

OperatorContext.prototype.rightShiftAssign = function() {
    return this.getTypedRuleContext(RightShiftAssignContext,0);
};

OperatorContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitOperator(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.OperatorContext = OperatorContext;

CPP14Parser.prototype.operator = function() {

    var localctx = new OperatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 444, CPP14Parser.RULE_operator);
    try {
        this.state = 2654;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,341,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2606;
            this.match(CPP14Parser.New);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2607;
            this.match(CPP14Parser.Delete);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 2608;
            this.match(CPP14Parser.New);
            this.state = 2609;
            this.match(CPP14Parser.LeftBracket);
            this.state = 2610;
            this.match(CPP14Parser.RightBracket);
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 2611;
            this.match(CPP14Parser.Delete);
            this.state = 2612;
            this.match(CPP14Parser.LeftBracket);
            this.state = 2613;
            this.match(CPP14Parser.RightBracket);
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 2614;
            this.match(CPP14Parser.Plus);
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 2615;
            this.match(CPP14Parser.Minus);
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 2616;
            this.match(CPP14Parser.Star);
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 2617;
            this.match(CPP14Parser.Div);
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 2618;
            this.match(CPP14Parser.Mod);
            break;

        case 10:
            this.enterOuterAlt(localctx, 10);
            this.state = 2619;
            this.match(CPP14Parser.Caret);
            break;

        case 11:
            this.enterOuterAlt(localctx, 11);
            this.state = 2620;
            this.match(CPP14Parser.And);
            break;

        case 12:
            this.enterOuterAlt(localctx, 12);
            this.state = 2621;
            this.match(CPP14Parser.Or);
            break;

        case 13:
            this.enterOuterAlt(localctx, 13);
            this.state = 2622;
            this.match(CPP14Parser.Tilde);
            break;

        case 14:
            this.enterOuterAlt(localctx, 14);
            this.state = 2623;
            this.match(CPP14Parser.Not);
            break;

        case 15:
            this.enterOuterAlt(localctx, 15);
            this.state = 2624;
            this.match(CPP14Parser.Assign);
            break;

        case 16:
            this.enterOuterAlt(localctx, 16);
            this.state = 2625;
            this.match(CPP14Parser.Less);
            break;

        case 17:
            this.enterOuterAlt(localctx, 17);
            this.state = 2626;
            this.match(CPP14Parser.Greater);
            break;

        case 18:
            this.enterOuterAlt(localctx, 18);
            this.state = 2627;
            this.match(CPP14Parser.PlusAssign);
            break;

        case 19:
            this.enterOuterAlt(localctx, 19);
            this.state = 2628;
            this.match(CPP14Parser.MinusAssign);
            break;

        case 20:
            this.enterOuterAlt(localctx, 20);
            this.state = 2629;
            this.match(CPP14Parser.StarAssign);
            break;

        case 21:
            this.enterOuterAlt(localctx, 21);
            this.state = 2630;
            this.match(CPP14Parser.DivAssign);
            break;

        case 22:
            this.enterOuterAlt(localctx, 22);
            this.state = 2631;
            this.match(CPP14Parser.ModAssign);
            break;

        case 23:
            this.enterOuterAlt(localctx, 23);
            this.state = 2632;
            this.match(CPP14Parser.XorAssign);
            break;

        case 24:
            this.enterOuterAlt(localctx, 24);
            this.state = 2633;
            this.match(CPP14Parser.AndAssign);
            break;

        case 25:
            this.enterOuterAlt(localctx, 25);
            this.state = 2634;
            this.match(CPP14Parser.OrAssign);
            break;

        case 26:
            this.enterOuterAlt(localctx, 26);
            this.state = 2635;
            this.match(CPP14Parser.LeftShift);
            break;

        case 27:
            this.enterOuterAlt(localctx, 27);
            this.state = 2636;
            this.rightShift();
            break;

        case 28:
            this.enterOuterAlt(localctx, 28);
            this.state = 2637;
            this.rightShiftAssign();
            break;

        case 29:
            this.enterOuterAlt(localctx, 29);
            this.state = 2638;
            this.match(CPP14Parser.LeftShiftAssign);
            break;

        case 30:
            this.enterOuterAlt(localctx, 30);
            this.state = 2639;
            this.match(CPP14Parser.Equal);
            break;

        case 31:
            this.enterOuterAlt(localctx, 31);
            this.state = 2640;
            this.match(CPP14Parser.NotEqual);
            break;

        case 32:
            this.enterOuterAlt(localctx, 32);
            this.state = 2641;
            this.match(CPP14Parser.LessEqual);
            break;

        case 33:
            this.enterOuterAlt(localctx, 33);
            this.state = 2642;
            this.match(CPP14Parser.GreaterEqual);
            break;

        case 34:
            this.enterOuterAlt(localctx, 34);
            this.state = 2643;
            this.match(CPP14Parser.AndAnd);
            break;

        case 35:
            this.enterOuterAlt(localctx, 35);
            this.state = 2644;
            this.match(CPP14Parser.OrOr);
            break;

        case 36:
            this.enterOuterAlt(localctx, 36);
            this.state = 2645;
            this.match(CPP14Parser.PlusPlus);
            break;

        case 37:
            this.enterOuterAlt(localctx, 37);
            this.state = 2646;
            this.match(CPP14Parser.MinusMinus);
            break;

        case 38:
            this.enterOuterAlt(localctx, 38);
            this.state = 2647;
            this.match(CPP14Parser.Comma);
            break;

        case 39:
            this.enterOuterAlt(localctx, 39);
            this.state = 2648;
            this.match(CPP14Parser.ArrowStar);
            break;

        case 40:
            this.enterOuterAlt(localctx, 40);
            this.state = 2649;
            this.match(CPP14Parser.Arrow);
            break;

        case 41:
            this.enterOuterAlt(localctx, 41);
            this.state = 2650;
            this.match(CPP14Parser.LeftParen);
            this.state = 2651;
            this.match(CPP14Parser.RightParen);
            break;

        case 42:
            this.enterOuterAlt(localctx, 42);
            this.state = 2652;
            this.match(CPP14Parser.LeftBracket);
            this.state = 2653;
            this.match(CPP14Parser.RightBracket);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LiteralContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_literal;
    return this;
}

LiteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LiteralContext.prototype.constructor = LiteralContext;

LiteralContext.prototype.integerliteral = function() {
    return this.getTypedRuleContext(IntegerliteralContext,0);
};

LiteralContext.prototype.characterliteral = function() {
    return this.getTypedRuleContext(CharacterliteralContext,0);
};

LiteralContext.prototype.floatingliteral = function() {
    return this.getTypedRuleContext(FloatingliteralContext,0);
};

LiteralContext.prototype.stringliteral = function() {
    return this.getTypedRuleContext(StringliteralContext,0);
};

LiteralContext.prototype.booleanliteral = function() {
    return this.getTypedRuleContext(BooleanliteralContext,0);
};

LiteralContext.prototype.pointerliteral = function() {
    return this.getTypedRuleContext(PointerliteralContext,0);
};

LiteralContext.prototype.userdefinedliteral = function() {
    return this.getTypedRuleContext(UserdefinedliteralContext,0);
};

LiteralContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitLiteral(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.LiteralContext = LiteralContext;

CPP14Parser.prototype.literal = function() {

    var localctx = new LiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 446, CPP14Parser.RULE_literal);
    try {
        this.state = 2663;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CPP14Parser.Integerliteral:
            this.enterOuterAlt(localctx, 1);
            this.state = 2656;
            this.integerliteral();
            break;
        case CPP14Parser.Characterliteral:
            this.enterOuterAlt(localctx, 2);
            this.state = 2657;
            this.characterliteral();
            break;
        case CPP14Parser.Floatingliteral:
            this.enterOuterAlt(localctx, 3);
            this.state = 2658;
            this.floatingliteral();
            break;
        case CPP14Parser.Stringliteral:
            this.enterOuterAlt(localctx, 4);
            this.state = 2659;
            this.stringliteral();
            break;
        case CPP14Parser.Booleanliteral:
            this.enterOuterAlt(localctx, 5);
            this.state = 2660;
            this.booleanliteral();
            break;
        case CPP14Parser.Nullptr:
            this.enterOuterAlt(localctx, 6);
            this.state = 2661;
            this.pointerliteral();
            break;
        case CPP14Parser.Userdefinedintegerliteral:
        case CPP14Parser.Userdefinedfloatingliteral:
        case CPP14Parser.Userdefinedstringliteral:
        case CPP14Parser.Userdefinedcharacterliteral:
            this.enterOuterAlt(localctx, 7);
            this.state = 2662;
            this.userdefinedliteral();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function IntegerliteralContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_integerliteral;
    return this;
}

IntegerliteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IntegerliteralContext.prototype.constructor = IntegerliteralContext;

IntegerliteralContext.prototype.Integerliteral = function() {
    return this.getToken(CPP14Parser.Integerliteral, 0);
};

IntegerliteralContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitIntegerliteral(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.IntegerliteralContext = IntegerliteralContext;

CPP14Parser.prototype.integerliteral = function() {

    var localctx = new IntegerliteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 448, CPP14Parser.RULE_integerliteral);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2665;
        this.match(CPP14Parser.Integerliteral);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CharacterliteralContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_characterliteral;
    return this;
}

CharacterliteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CharacterliteralContext.prototype.constructor = CharacterliteralContext;

CharacterliteralContext.prototype.Characterliteral = function() {
    return this.getToken(CPP14Parser.Characterliteral, 0);
};

CharacterliteralContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitCharacterliteral(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.CharacterliteralContext = CharacterliteralContext;

CPP14Parser.prototype.characterliteral = function() {

    var localctx = new CharacterliteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 450, CPP14Parser.RULE_characterliteral);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2667;
        this.match(CPP14Parser.Characterliteral);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FloatingliteralContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_floatingliteral;
    return this;
}

FloatingliteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FloatingliteralContext.prototype.constructor = FloatingliteralContext;

FloatingliteralContext.prototype.Floatingliteral = function() {
    return this.getToken(CPP14Parser.Floatingliteral, 0);
};

FloatingliteralContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitFloatingliteral(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.FloatingliteralContext = FloatingliteralContext;

CPP14Parser.prototype.floatingliteral = function() {

    var localctx = new FloatingliteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 452, CPP14Parser.RULE_floatingliteral);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2669;
        this.match(CPP14Parser.Floatingliteral);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function StringliteralContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_stringliteral;
    return this;
}

StringliteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StringliteralContext.prototype.constructor = StringliteralContext;

StringliteralContext.prototype.Stringliteral = function() {
    return this.getToken(CPP14Parser.Stringliteral, 0);
};

StringliteralContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitStringliteral(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.StringliteralContext = StringliteralContext;

CPP14Parser.prototype.stringliteral = function() {

    var localctx = new StringliteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 454, CPP14Parser.RULE_stringliteral);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2671;
        this.match(CPP14Parser.Stringliteral);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BooleanliteralContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_booleanliteral;
    return this;
}

BooleanliteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BooleanliteralContext.prototype.constructor = BooleanliteralContext;

BooleanliteralContext.prototype.Booleanliteral = function() {
    return this.getToken(CPP14Parser.Booleanliteral, 0);
};

BooleanliteralContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitBooleanliteral(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.BooleanliteralContext = BooleanliteralContext;

CPP14Parser.prototype.booleanliteral = function() {

    var localctx = new BooleanliteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 456, CPP14Parser.RULE_booleanliteral);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2673;
        this.match(CPP14Parser.Booleanliteral);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PointerliteralContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_pointerliteral;
    return this;
}

PointerliteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PointerliteralContext.prototype.constructor = PointerliteralContext;

PointerliteralContext.prototype.Nullptr = function() {
    return this.getToken(CPP14Parser.Nullptr, 0);
};

PointerliteralContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitPointerliteral(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.PointerliteralContext = PointerliteralContext;

CPP14Parser.prototype.pointerliteral = function() {

    var localctx = new PointerliteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 458, CPP14Parser.RULE_pointerliteral);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2675;
        this.match(CPP14Parser.Nullptr);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function UserdefinedliteralContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_userdefinedliteral;
    return this;
}

UserdefinedliteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UserdefinedliteralContext.prototype.constructor = UserdefinedliteralContext;

UserdefinedliteralContext.prototype.Userdefinedintegerliteral = function() {
    return this.getToken(CPP14Parser.Userdefinedintegerliteral, 0);
};

UserdefinedliteralContext.prototype.Userdefinedfloatingliteral = function() {
    return this.getToken(CPP14Parser.Userdefinedfloatingliteral, 0);
};

UserdefinedliteralContext.prototype.Userdefinedstringliteral = function() {
    return this.getToken(CPP14Parser.Userdefinedstringliteral, 0);
};

UserdefinedliteralContext.prototype.Userdefinedcharacterliteral = function() {
    return this.getToken(CPP14Parser.Userdefinedcharacterliteral, 0);
};

UserdefinedliteralContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitUserdefinedliteral(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.UserdefinedliteralContext = UserdefinedliteralContext;

CPP14Parser.prototype.userdefinedliteral = function() {

    var localctx = new UserdefinedliteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 460, CPP14Parser.RULE_userdefinedliteral);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2677;
        _la = this._input.LA(1);
        if(!(((((_la - 136)) & ~0x1f) == 0 && ((1 << (_la - 136)) & ((1 << (CPP14Parser.Userdefinedintegerliteral - 136)) | (1 << (CPP14Parser.Userdefinedfloatingliteral - 136)) | (1 << (CPP14Parser.Userdefinedstringliteral - 136)) | (1 << (CPP14Parser.Userdefinedcharacterliteral - 136)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


CPP14Parser.prototype.sempred = function(localctx, ruleIndex, predIndex) {
	switch(ruleIndex) {
	case 6:
			return this.nestednamespecifier_sempred(localctx, predIndex);
	case 11:
			return this.capturelist_sempred(localctx, predIndex);
	case 18:
			return this.postfixexpression_sempred(localctx, predIndex);
	case 29:
			return this.noptrnewdeclarator_sempred(localctx, predIndex);
	case 34:
			return this.pmexpression_sempred(localctx, predIndex);
	case 35:
			return this.multiplicativeexpression_sempred(localctx, predIndex);
	case 36:
			return this.additiveexpression_sempred(localctx, predIndex);
	case 37:
			return this.shiftexpression_sempred(localctx, predIndex);
	case 38:
			return this.relationalexpression_sempred(localctx, predIndex);
	case 39:
			return this.equalityexpression_sempred(localctx, predIndex);
	case 40:
			return this.andexpression_sempred(localctx, predIndex);
	case 41:
			return this.exclusiveorexpression_sempred(localctx, predIndex);
	case 42:
			return this.inclusiveorexpression_sempred(localctx, predIndex);
	case 43:
			return this.logicalandexpression_sempred(localctx, predIndex);
	case 44:
			return this.logicalorexpression_sempred(localctx, predIndex);
	case 48:
			return this.expression_sempred(localctx, predIndex);
	case 70:
			return this.declarationseq_sempred(localctx, predIndex);
	case 108:
			return this.enumeratorlist_sempred(localctx, predIndex);
	case 126:
			return this.attributespecifierseq_sempred(localctx, predIndex);
	case 129:
			return this.attributelist_sempred(localctx, predIndex);
	case 135:
			return this.balancedtokenseq_sempred(localctx, predIndex);
	case 141:
			return this.noptrdeclarator_sempred(localctx, predIndex);
	case 152:
			return this.noptrabstractdeclarator_sempred(localctx, predIndex);
	case 154:
			return this.noptrabstractpackdeclarator_sempred(localctx, predIndex);
	case 156:
			return this.parameterdeclarationlist_sempred(localctx, predIndex);
	case 178:
			return this.memberdeclaratorlist_sempred(localctx, predIndex);
	case 180:
			return this.virtspecifierseq_sempred(localctx, predIndex);
	case 184:
			return this.basespecifierlist_sempred(localctx, predIndex);
	case 199:
			return this.templateparameterlist_sempred(localctx, predIndex);
	case 205:
			return this.templateargumentlist_sempred(localctx, predIndex);
	case 218:
			return this.typeidlist_sempred(localctx, predIndex);
    default:
        throw "No predicate with index:" + ruleIndex;
   }
};

CPP14Parser.prototype.nestednamespecifier_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 0:
			return this.precpred(this._ctx, 2);
		case 1:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

CPP14Parser.prototype.capturelist_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 2:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

CPP14Parser.prototype.postfixexpression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 3:
			return this.precpred(this._ctx, 18);
		case 4:
			return this.precpred(this._ctx, 17);
		case 5:
			return this.precpred(this._ctx, 12);
		case 6:
			return this.precpred(this._ctx, 11);
		case 7:
			return this.precpred(this._ctx, 10);
		case 8:
			return this.precpred(this._ctx, 9);
		case 9:
			return this.precpred(this._ctx, 8);
		case 10:
			return this.precpred(this._ctx, 7);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

CPP14Parser.prototype.noptrnewdeclarator_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 11:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

CPP14Parser.prototype.pmexpression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 12:
			return this.precpred(this._ctx, 2);
		case 13:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

CPP14Parser.prototype.multiplicativeexpression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 14:
			return this.precpred(this._ctx, 3);
		case 15:
			return this.precpred(this._ctx, 2);
		case 16:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

CPP14Parser.prototype.additiveexpression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 17:
			return this.precpred(this._ctx, 2);
		case 18:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

CPP14Parser.prototype.shiftexpression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 19:
			return this.precpred(this._ctx, 2);
		case 20:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

CPP14Parser.prototype.relationalexpression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 21:
			return this.precpred(this._ctx, 4);
		case 22:
			return this.precpred(this._ctx, 3);
		case 23:
			return this.precpred(this._ctx, 2);
		case 24:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

CPP14Parser.prototype.equalityexpression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 25:
			return this.precpred(this._ctx, 2);
		case 26:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

CPP14Parser.prototype.andexpression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 27:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

CPP14Parser.prototype.exclusiveorexpression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 28:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

CPP14Parser.prototype.inclusiveorexpression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 29:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

CPP14Parser.prototype.logicalandexpression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 30:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

CPP14Parser.prototype.logicalorexpression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 31:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

CPP14Parser.prototype.expression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 32:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

CPP14Parser.prototype.declarationseq_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 33:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

CPP14Parser.prototype.enumeratorlist_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 34:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

CPP14Parser.prototype.attributespecifierseq_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 35:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

CPP14Parser.prototype.attributelist_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 36:
			return this.precpred(this._ctx, 3);
		case 37:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

CPP14Parser.prototype.balancedtokenseq_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 38:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

CPP14Parser.prototype.noptrdeclarator_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 39:
			return this.precpred(this._ctx, 3);
		case 40:
			return this.precpred(this._ctx, 2);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

CPP14Parser.prototype.noptrabstractdeclarator_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 41:
			return this.precpred(this._ctx, 5);
		case 42:
			return this.precpred(this._ctx, 3);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

CPP14Parser.prototype.noptrabstractpackdeclarator_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 43:
			return this.precpred(this._ctx, 3);
		case 44:
			return this.precpred(this._ctx, 2);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

CPP14Parser.prototype.parameterdeclarationlist_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 45:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

CPP14Parser.prototype.memberdeclaratorlist_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 46:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

CPP14Parser.prototype.virtspecifierseq_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 47:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

CPP14Parser.prototype.basespecifierlist_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 48:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

CPP14Parser.prototype.templateparameterlist_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 49:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

CPP14Parser.prototype.templateargumentlist_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 50:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

CPP14Parser.prototype.typeidlist_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 51:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};


exports.CPP14Parser = CPP14Parser;


/***/ }),
/* 137 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var CodeLocation_1 = __webpack_require__(60);
var CodeRange_1 = __webpack_require__(61);
var UniNode_1 = __webpack_require__(34);
var UniParam_1 = __webpack_require__(40);
var UniExpr_1 = __webpack_require__(0);
var UniArray_1 = __webpack_require__(42);
var UniNumberLiteral_1 = __webpack_require__(23);
var UniBinOp_1 = __webpack_require__(35);
var UniBlock_1 = __webpack_require__(19);
var UniBoolLiteral_1 = __webpack_require__(51);
var UniBreak_1 = __webpack_require__(52);
var UniCast_1 = __webpack_require__(53);
var UniContinue_1 = __webpack_require__(54);
var UniDoWhile_1 = __webpack_require__(55);
var UniEmptyStatement_1 = __webpack_require__(81);
var UniFunctionDec_1 = __webpack_require__(24);
var UniFor_1 = __webpack_require__(43);
var UniIdent_1 = __webpack_require__(25);
var UniIf_1 = __webpack_require__(44);
var UniWhile_1 = __webpack_require__(36);
var UniUnaryOp_1 = __webpack_require__(37);
var UniTernaryOp_1 = __webpack_require__(56);
var UniStatement_1 = __webpack_require__(3);
var UniStringLiteral_1 = __webpack_require__(57);
var UniReturn_1 = __webpack_require__(38);
var UniVariableDec_1 = __webpack_require__(21);
var UniSwitchUnit_1 = __webpack_require__(82);
var UniSwitch_1 = __webpack_require__(83);
var UniMethodCall_1 = __webpack_require__(45);
var UniProgram_1 = __webpack_require__(39);
var UniVariableDef_1 = __webpack_require__(41);
var UniIntLiteral_1 = __webpack_require__(58);
var Engine_1 = __webpack_require__(85);
var CMapper_1 = __webpack_require__(138);
var CPP14Mapper_1 = __webpack_require__(131);
exports.default = {
    CodeLocation: CodeLocation_1.default,
    CodeRange: CodeRange_1.default,
    UniNode: UniNode_1.default,
    UniParam: UniParam_1.default,
    UniExpr: UniExpr_1.default,
    UniArray: UniArray_1.default,
    UniNumberLiteral: UniNumberLiteral_1.default,
    UniBinOp: UniBinOp_1.default,
    UniBlock: UniBlock_1.default,
    UniBoolLiteral: UniBoolLiteral_1.default,
    UniBreak: UniBreak_1.default,
    UniCast: UniCast_1.default,
    UniContinue: UniContinue_1.default,
    UniDoWhile: UniDoWhile_1.default,
    UniEmptyStatement: UniEmptyStatement_1.default,
    UniFunctionDec: UniFunctionDec_1.default,
    UniFor: UniFor_1.default,
    UniIdent: UniIdent_1.default,
    UniIf: UniIf_1.default,
    UniIntLiteral: UniIntLiteral_1.default,
    UniMethodCall: UniMethodCall_1.default,
    UniProgram: UniProgram_1.default,
    UniReturn: UniReturn_1.default,
    UniStatement: UniStatement_1.default,
    UniStringLiteral: UniStringLiteral_1.default,
    UniSwitch: UniSwitch_1.default,
    UniSwitchUnit: UniSwitchUnit_1.default,
    UniTernaryOp: UniTernaryOp_1.default,
    UniUnaryOp: UniUnaryOp_1.default,
    UniVariableDec: UniVariableDec_1.default,
    UniVariableDef: UniVariableDef_1.default,
    UniWhile: UniWhile_1.default,
    Engine: Engine_1.default,
    CMapper: CMapper_1.default,
    CPP14Mapper: CPP14Mapper_1.default
};

/***/ }),
/* 138 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var __extends = undefined && undefined.__extends || function () {
    var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
        d.__proto__ = b;
    } || function (d, b) {
        for (var p in b) {
            if (b.hasOwnProperty(p)) d[p] = b[p];
        }
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
var __read = undefined && undefined.__read || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o),
        r,
        ar = [],
        e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) {
            ar.push(r.value);
        }
    } catch (error) {
        e = { error: error };
    } finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        } finally {
            if (e) throw e.error;
        }
    }
    return ar;
};
var __values = undefined && undefined.__values || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator],
        i = 0;
    if (m) return m.call(o);
    return {
        next: function next() {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
Object.defineProperty(exports, "__esModule", { value: true });
var UniBinOp_1 = __webpack_require__(35);
var UniBlock_1 = __webpack_require__(19);
var UniFunctionDec_1 = __webpack_require__(24);
var UniIntLiteral_1 = __webpack_require__(58);
var UniUnaryOp_1 = __webpack_require__(37);
var UniStatement_1 = __webpack_require__(3);
var UniReturn_1 = __webpack_require__(38);
var UniProgram_1 = __webpack_require__(39);
var antlr4_1 = __webpack_require__(16);
var RuleContext_1 = __webpack_require__(20);
var Tree_1 = __webpack_require__(5);
var CLexer_1 = __webpack_require__(139);
var CParser_1 = __webpack_require__(140);
var CVisitor_1 = __webpack_require__(130);
var CMapper = /** @class */function (_super) {
    __extends(CMapper, _super);
    function CMapper() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.isDebugMode = false;
        return _this;
    }
    // val List<Comment> _comments = new ArrayList<Comment>;
    // var CommonTokenStream _stream;
    // var UniNode _lastNode;
    // var int _nextTokenIndex;
    /*static class Comment {
        val List<String> contents
        var ParseTree parent
          new(List<String> contents, ParseTree parent) {
            this.contents = contents
            this.parent = parent
        }
    }*/
    CMapper.prototype.setIsDebugMode = function (isDebugMode) {
        this.isDebugMode = isDebugMode;
    };
    CMapper.prototype.parse = function (code) {
        var chars = new antlr4_1.InputStream(code);
        var _a = __read(this.parseCore(chars), 2),
            tree = _a[0],
            parser = _a[1];
        return new UniProgram_1.default(this.visit(tree));
    };
    CMapper.prototype.getRawTree = function (code) {
        var chars = new antlr4_1.InputStream(code);
        return this.parseCore(chars);
    };
    CMapper.prototype.parseCore = function (chars) {
        var lexer = new CLexer_1.CLexer(chars);
        var tokens = new antlr4_1.CommonTokenStream(lexer);
        this.parser = new CParser_1.CParser(tokens);
        this.parser.buildParseTrees = true;
        var tree = this.parser.compilationUnit();
        return [tree, this.parser];
    };
    /*def parseFile(String path) {
        val inputStream = new FileInputStream(path)
        try {
            parseCore(new ANTLRInputStream(inputStream))
        } finally {
            inputStream.close
        }
    }
      def parseCore(CharStream chars) {
        parseCore(chars, [parser|parser.compilationUnit])
    }
      def parse(String code, Function1<CParser, ParseTree> parseAction) {
        parseCore(new ANTLRInputStream(code), parseAction)
    }
      def parseFile(String path, Function1<CParser, ParseTree> parseAction) {
        val inputStream = new FileInputStream(path)
        try {
            parseCore(new ANTLRInputStream(inputStream), parseAction)
        } finally {
            inputStream.close
        }
    }
      def parseCore(CharStream chars, Function1<CParser, ParseTree> parseAction) {
        val lexer = new CLexer(chars)
        val tokens = new CommonTokenStream(lexer)
        val parser = new CParser(tokens)
        val tree = parseAction.apply(parser) // parse
        _comments.clear()
        _stream = tokens
        _lastNode = null
        _nextTokenIndex = 0
          val ret = tree.visit.flatten
          if (_lastNode !== null) {
            val count = _stream.size - 1
            for (var i = _nextTokenIndex; i < count; i++) {
                val hiddenToken = _stream.get(i) // Includes skipped tokens (maybe)
                if (_lastNode.comments === null) {
                    _lastNode.comments = newArrayList
                }
                _lastNode.comments += hiddenToken.text
            }
        }
        ret
    }*/
    CMapper.prototype.visitChildren = function (node) {
        var n = node.getChildCount();
        var list = [];
        for (var i = 0; i < n; ++i) {
            var c = node.getChild(i);
            var childResult = this.visit(c);
            list.push(childResult);
        }
        var flatten = this.flatten(list);
        return flatten;
    };
    CMapper.prototype.visit = function (node) {
        if (!this.isDebugMode) {
            return node.accept(this);
        }
        if (!(node instanceof RuleContext_1.RuleContext)) {
            return node.accept(this);
        }
        var ruleName = this.getRuleName(node);
        console.log('*** visit Rule : ' + ruleName + ' ***');
        var ret = node.accept(this);
        console.log('returned: ' + ret);
        return ret;
        /*val node = if (result instanceof List<?>) {
                if(result.size == 1) result.get(0) else result
            } else {
                result
            }
        if (node instanceof UniNode) {
            if (tree instanceof RuleContext)
            {
                val start = (tree as ParserRuleContext).start
                val stop = (tree as ParserRuleContext).stop
                val begin = new CodeLocation(start.charPositionInLine,start.line)
                val endPos = stop.charPositionInLine
                val length = 1 + stop.stopIndex - stop.startIndex
                val end = new CodeLocation(endPos + length, stop.line)
                node.codeRange = new CodeRange(begin,end)
            }
            var List<String> contents = newArrayList
            for (var i = _comments.size - 1; i >= 0 && _comments.get(i).parent == tree; i--) {
                _comments.get(i).contents += contents
                contents = _comments.get(i).contents
                _comments.remove(i)
            }
            if (contents.size > 0) {
                if (node.comments === null) {
                    node.comments = contents
                } else {
                    node.comments += contents
                }
            }
            _lastNode = node
        } else {
            for (var i = _comments.size - 1; i >= 0 && _comments.get(i).parent == tree; i--) {
                _comments.get(i).parent = _comments.get(i).parent.parent
            }
            _lastNode = null
        }
          result*/
    };
    CMapper.prototype.isNonEmptyNode = function (node) {
        if (node instanceof antlr4_1.ParserRuleContext) {
            var n = node.getChildCount();
            if (n > 1) {
                return true;
            }
            // n === 1 && node.children.exists[isNonEmptyNode]
            return n === 1;
        } else {
            return true;
        }
    };
    CMapper.prototype.getRuleName = function (node) {
        return this.parser.ruleNames[node.ruleIndex];
    };
    CMapper.prototype.visitTerminal = function (node) {
        if (this.isDebugMode) {
            console.log("visit TERMINAL : " + node.text);
        }
        var token = node.symbol;
        /*if (token.type > 0) {
            val count = token.tokenIndex
            val List<String> contents = newArrayList
            var i = _nextTokenIndex
            for (; i < count; i++) {
                val hiddenToken = _stream.get(i) // Includes skipped tokens (maybe)
                if (_lastNode !== null && _stream.get(_nextTokenIndex - 1).line == hiddenToken.line) {
                    if (_lastNode.comments === null) {
                        _lastNode.comments = newArrayList
                    }
                    _lastNode.comments += hiddenToken.text
                } else {
                    contents += hiddenToken.text
                }
            }
            val count2 = _stream.size - 1
            for (i = count + 1; i < count2 && _stream.get(i).channel == Token.HIDDEN_CHANNEL &&
                _stream.get(count).line == _stream.get(i).line; i++) {
                contents += _stream.get(i).text
            }
            if (contents.size > 0) {
                _comments.add(new Comment(contents, node.parent))
            }
            _nextTokenIndex = i
        }*/
        return token.text;
    };
    CMapper.prototype.flatten = function (obj) {
        var _this = this;
        if (Array.isArray(obj)) {
            if (obj.length === 1) {
                return this.flatten(obj[0]);
            }
            var ret_1 = [];
            obj.forEach(function (it) {
                ret_1.push(_this.flatten(it));
            });
            return ret_1;
        }
        if (obj instanceof Map) {
            if (obj.size === 1) {
                return this.flatten(obj.get(obj.keys[0]));
            }
            var ret_2 = new Map();
            obj.forEach(function (value, key) {
                ret_2.set(key, _this.flatten(value));
            });
            return ret_2;
        }
        return obj;
    };
    // tslint:disable-next-line:prefer-array-literal
    CMapper.prototype.castToList = function (obj, clazz) {
        var _this = this;
        var temp = this.flatten(obj);
        var ret = [];
        if (temp instanceof Map) {
            var add_1 = temp.has('add');
            temp.forEach(function (value, key) {
                switch (key) {
                    case 'add':
                        {
                            if (value instanceof Map) {
                                ret.push(_this.castTo(value, clazz));
                            } else if (Array.isArray(value)) {
                                value.forEach(function (it) {
                                    var t = _this.castTo(it, clazz);
                                    if (t != null) {
                                        ret.push(t);
                                    }
                                });
                            } else {
                                ret.push(_this.castToList(value, clazz));
                            }
                        }
                        break;
                    default:
                        if (!add_1) {
                            ret.push(_this.castToList(value, clazz));
                        }
                        break;
                }
            });
        } else if (Array.isArray(temp)) {
            temp.forEach(function (it) {
                ret.push(_this.castToList(it, clazz));
            });
        } else {
            ret.push(this.castTo(temp, clazz));
        }
        return ret;
    };
    CMapper.prototype.castTo = function (obj, clazz) {
        var _this = this;
        var temp = this.flatten(obj);
        var instance = new clazz();
        var fields = instance.fields;
        var fieldsName = [];
        for (var it in instance) {
            fieldsName.push(it);
        }
        if (temp instanceof Map) {
            if (clazz instanceof String) {
                var builder_1 = '';
                var hasAdd_1 = temp.has('add');
                temp.forEach(function (value, key) {
                    switch (key) {
                        case 'add':
                            {
                                builder_1 += _this.castTo(value, clazz);
                            }
                            break;
                        default:
                            {
                                if (!hasAdd_1) {
                                    builder_1 += _this.castTo(value, clazz);
                                }
                            }
                            break;
                    }
                });
                return builder_1.length > 0 ? builder_1 : null;
            }
            temp.forEach(function (value, key) {
                if (fieldsName.includes(key)) {
                    var field = fields.get(key);
                    if (Array.isArray(instance[key])) {
                        var list = _this.flatten(_this.castToList(value, field));
                        if (!Array.isArray(list)) {
                            instance[key] = [list];
                        } else {
                            instance[key] = list;
                        }
                    } else {
                        instance[key] = _this.castTo(value, field);
                    }
                }
            });
            return instance;
        }
        if (Array.isArray(temp)) {
            if (clazz instanceof String) {
                var builder_2 = '';
                temp.forEach(function (it) {
                    builder_2 += _this.castTo(it, clazz);
                });
                return builder_2.length > 0 ? builder_2 : null;
            }
            var first = temp.find(function (it) {
                return it instanceof clazz;
            });
            if (first === null) {
                try {
                    return instance;
                } catch (e) {
                    return null;
                }
            } else {
                return this.castTo(first, clazz);
            }
        }
        if (temp != null) {
            return temp;
        }
        return instance;
    };
    CMapper.prototype.visitUnaryExpression = function (ctx) {
        var map = new Map();
        var none = [];
        map.set("none", none);
        var ret = [];
        var n = ctx.getChildCount();
        for (var i = 0; i < n; ++i) {
            var it = ctx.getChild(i);
            if (it instanceof RuleContext_1.RuleContext) {
                switch (it.invokingState) {
                    case 311:
                        {
                            ret.push(this.visit(it));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            } else if (it instanceof Tree_1.TerminalNode) {
                switch (it.symbol.type) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        if (ret != []) {
            return ret;
        }
        var node = this.castTo(map, UniUnaryOp_1.default);
        return node;
    };
    CMapper.prototype.visitAdditiveExpression = function (ctx) {
        var map = new Map();
        var none = [];
        map.set("none", none);
        var ret = [];
        var left = [];
        map.set("left", left);
        var right = [];
        map.set("right", right);
        var operator = [];
        map.set("operator", operator);
        var n = ctx.getChildCount();
        for (var i = 0; i < n; ++i) {
            var it = ctx.getChild(i);
            if (it instanceof RuleContext_1.RuleContext) {
                switch (it.invokingState) {
                    case 370:
                        {
                            ret.push(this.visit(it));
                        }
                        break;
                    case 20:
                        {
                            left.push(this.visit(it));
                        }
                        break;
                    case 374:
                        {
                            right.push(this.visit(it));
                        }
                        break;
                    case 377:
                        {
                            right.push(this.visit(it));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            } else if (it instanceof Tree_1.TerminalNode) {
                switch (it.symbol.type) {
                    case CParser_1.CParser.Plus:
                        {
                            operator.push(this.flatten(this.visit(it)));
                        }
                        break;
                    case CParser_1.CParser.Minus:
                        {
                            operator.push(this.flatten(this.visit(it)));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        if (ret != []) {
            return ret;
        }
        var node = this.castTo(map, UniBinOp_1.default);
        return node;
    };
    CMapper.prototype.visitDeclarator = function (ctx) {
        var _this = this;
        var map = new Map();
        var none = [];
        map.set("none", none);
        var merge = [];
        var n = ctx.getChildCount();
        for (var i = 0; i < n; ++i) {
            var it = ctx.getChild(i);
            if (it instanceof RuleContext_1.RuleContext) {
                switch (it.invokingState) {
                    case 714:
                        {
                            merge.push(this.visit(it));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            } else if (it instanceof Tree_1.TerminalNode) {
                switch (it.symbol.type) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        var node = this.castTo(map, UniFunctionDec_1.default);
        merge.forEach(function (it) {
            node.merge(_this.castTo(it, UniFunctionDec_1.default));
        });
        return node;
    };
    CMapper.prototype.visitDirectDeclarator = function (ctx) {
        var _this = this;
        var map = new Map();
        var none = [];
        map.set("none", none);
        var name = [];
        map.set("name", name);
        var merge = [];
        var n = ctx.getChildCount();
        for (var i = 0; i < n; ++i) {
            var it = ctx.getChild(i);
            if (it instanceof RuleContext_1.RuleContext) {
                switch (it.invokingState) {
                    case 96:
                        {
                            merge.push(this.visit(it));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            } else if (it instanceof Tree_1.TerminalNode) {
                switch (it.symbol.type) {
                    case CParser_1.CParser.Identifier:
                        {
                            name.push(this.flatten(this.visit(it)));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        var node = this.castTo(map, UniFunctionDec_1.default);
        merge.forEach(function (it) {
            node.merge(_this.castTo(it, UniFunctionDec_1.default));
        });
        return node;
    };
    CMapper.prototype.visitCompoundStatement = function (ctx) {
        var map = new Map();
        var none = [];
        map.set("none", none);
        var body = [];
        map.set("body", body);
        var n = ctx.getChildCount();
        for (var i = 0; i < n; ++i) {
            var it = ctx.getChild(i);
            if (it instanceof RuleContext_1.RuleContext) {
                switch (it.invokingState) {
                    case 1126:
                        {
                            body.push(this.visit(it));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            } else if (it instanceof Tree_1.TerminalNode) {
                switch (it.symbol.type) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        var node = this.castTo(map, UniBlock_1.default);
        return node;
    };
    CMapper.prototype.visitBlockItemList = function (ctx) {
        var map = new Map();
        var none = [];
        map.set("none", none);
        var add = [];
        map.set("add", add);
        var n = ctx.getChildCount();
        if (0 < n) {
            for (var i = 0; i < n; ++i) {
                var it = ctx.getChild(i);
                if (it instanceof RuleContext_1.RuleContext) {
                    switch (it.invokingState) {
                        case 1132:
                            {
                                var results = this.flatten(this.visit(it));
                                if (Array.isArray(results)) {
                                    try {
                                        for (var results_1 = __values(results), results_1_1 = results_1.next(); !results_1_1.done; results_1_1 = results_1.next()) {
                                            var result = results_1_1.value;
                                            add.push(result);
                                        }
                                    } catch (e_1_1) {
                                        e_1 = { error: e_1_1 };
                                    } finally {
                                        try {
                                            if (results_1_1 && !results_1_1.done && (_a = results_1.return)) _a.call(results_1);
                                        } finally {
                                            if (e_1) throw e_1.error;
                                        }
                                    }
                                } else add.push(results);
                            }
                            break;
                        case 146:
                            {
                                var results = this.flatten(this.visit(it));
                                if (Array.isArray(results)) {
                                    try {
                                        for (var results_2 = __values(results), results_2_1 = results_2.next(); !results_2_1.done; results_2_1 = results_2.next()) {
                                            var result = results_2_1.value;
                                            add.push(result);
                                        }
                                    } catch (e_2_1) {
                                        e_2 = { error: e_2_1 };
                                    } finally {
                                        try {
                                            if (results_2_1 && !results_2_1.done && (_b = results_2.return)) _b.call(results_2);
                                        } finally {
                                            if (e_2) throw e_2.error;
                                        }
                                    }
                                } else add.push(results);
                            }
                            break;
                        case 1135:
                            {
                                var results = this.flatten(this.visit(it));
                                if (Array.isArray(results)) {
                                    try {
                                        for (var results_3 = __values(results), results_3_1 = results_3.next(); !results_3_1.done; results_3_1 = results_3.next()) {
                                            var result = results_3_1.value;
                                            add.push(result);
                                        }
                                    } catch (e_3_1) {
                                        e_3 = { error: e_3_1 };
                                    } finally {
                                        try {
                                            if (results_3_1 && !results_3_1.done && (_c = results_3.return)) _c.call(results_3);
                                        } finally {
                                            if (e_3) throw e_3.error;
                                        }
                                    }
                                } else add.push(results);
                            }
                            break;
                        default:
                            {
                                none.push(this.visit(it));
                            }
                            break;
                    }
                } else if (it instanceof Tree_1.TerminalNode) {
                    switch (it.symbol.type) {
                        default:
                            {
                                none.push(this.visit(it));
                            }
                            break;
                    }
                }
            }
        }
        var node = this.castToList(map, UniStatement_1.default);
        return node;
        var e_1, _a, e_2, _b, e_3, _c;
    };
    CMapper.prototype.visitJumpStatement = function (ctx) {
        var map = new Map();
        var none = [];
        map.set("none", none);
        var value = [];
        map.set("value", value);
        var n = ctx.getChildCount();
        for (var i = 0; i < n; ++i) {
            var it = ctx.getChild(i);
            if (it instanceof RuleContext_1.RuleContext) {
                switch (it.invokingState) {
                    case 1236:
                        {
                            value.push(this.visit(it));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            } else if (it instanceof Tree_1.TerminalNode) {
                switch (it.symbol.type) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        var node = this.castTo(map, UniReturn_1.default);
        return node;
    };
    CMapper.prototype.visitCompilationUnit = function (ctx) {
        var map = new Map();
        var none = [];
        map.set("none", none);
        var body = [];
        map.set("body", body);
        var n = ctx.getChildCount();
        for (var i = 0; i < n; ++i) {
            var it = ctx.getChild(i);
            if (it instanceof RuleContext_1.RuleContext) {
                switch (it.invokingState) {
                    case 1246:
                        {
                            body.push(this.visit(it));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            } else if (it instanceof Tree_1.TerminalNode) {
                switch (it.symbol.type) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        var node = this.castTo(map, UniBlock_1.default);
        return node;
    };
    CMapper.prototype.visitTranslationUnit = function (ctx) {
        var map = new Map();
        var none = [];
        map.set("none", none);
        var add = [];
        map.set("add", add);
        var n = ctx.getChildCount();
        if (0 < n) {
            for (var i = 0; i < n; ++i) {
                var it = ctx.getChild(i);
                if (it instanceof RuleContext_1.RuleContext) {
                    switch (it.invokingState) {
                        case 1250:
                            {
                                var results = this.flatten(this.visit(it));
                                if (Array.isArray(results)) {
                                    try {
                                        for (var results_4 = __values(results), results_4_1 = results_4.next(); !results_4_1.done; results_4_1 = results_4.next()) {
                                            var result = results_4_1.value;
                                            add.push(result);
                                        }
                                    } catch (e_4_1) {
                                        e_4 = { error: e_4_1 };
                                    } finally {
                                        try {
                                            if (results_4_1 && !results_4_1.done && (_a = results_4.return)) _a.call(results_4);
                                        } finally {
                                            if (e_4) throw e_4.error;
                                        }
                                    }
                                } else add.push(results);
                            }
                            break;
                        case 166:
                            {
                                var results = this.flatten(this.visit(it));
                                if (Array.isArray(results)) {
                                    try {
                                        for (var results_5 = __values(results), results_5_1 = results_5.next(); !results_5_1.done; results_5_1 = results_5.next()) {
                                            var result = results_5_1.value;
                                            add.push(result);
                                        }
                                    } catch (e_5_1) {
                                        e_5 = { error: e_5_1 };
                                    } finally {
                                        try {
                                            if (results_5_1 && !results_5_1.done && (_b = results_5.return)) _b.call(results_5);
                                        } finally {
                                            if (e_5) throw e_5.error;
                                        }
                                    }
                                } else add.push(results);
                            }
                            break;
                        case 1253:
                            {
                                var results = this.flatten(this.visit(it));
                                if (Array.isArray(results)) {
                                    try {
                                        for (var results_6 = __values(results), results_6_1 = results_6.next(); !results_6_1.done; results_6_1 = results_6.next()) {
                                            var result = results_6_1.value;
                                            add.push(result);
                                        }
                                    } catch (e_6_1) {
                                        e_6 = { error: e_6_1 };
                                    } finally {
                                        try {
                                            if (results_6_1 && !results_6_1.done && (_c = results_6.return)) _c.call(results_6);
                                        } finally {
                                            if (e_6) throw e_6.error;
                                        }
                                    }
                                } else add.push(results);
                            }
                            break;
                        default:
                            {
                                none.push(this.visit(it));
                            }
                            break;
                    }
                } else if (it instanceof Tree_1.TerminalNode) {
                    switch (it.symbol.type) {
                        default:
                            {
                                none.push(this.visit(it));
                            }
                            break;
                    }
                }
            }
        }
        var node = this.castToList(map, UniStatement_1.default);
        return node;
        var e_4, _a, e_5, _b, e_6, _c;
    };
    CMapper.prototype.visitFunctionDefinition = function (ctx) {
        var _this = this;
        var map = new Map();
        var none = [];
        map.set("none", none);
        var block = [];
        map.set("block", block);
        var returnType = [];
        map.set("returnType", returnType);
        var merge = [];
        var n = ctx.getChildCount();
        for (var i = 0; i < n; ++i) {
            var it = ctx.getChild(i);
            if (it instanceof RuleContext_1.RuleContext) {
                switch (it.invokingState) {
                    case 1264:
                        {
                            returnType.push(this.visit(it));
                        }
                        break;
                    case 1267:
                        {
                            merge.push(this.visit(it));
                        }
                        break;
                    case 1271:
                        {
                            block.push(this.visit(it));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            } else if (it instanceof Tree_1.TerminalNode) {
                switch (it.symbol.type) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        var node = this.castTo(map, UniFunctionDec_1.default);
        merge.forEach(function (it) {
            node.merge(_this.castTo(it, UniFunctionDec_1.default));
        });
        return node;
    };
    CMapper.prototype.visitConstant = function (ctx) {
        var findFirst = function findFirst(ctx) {
            var n = ctx.getChildCount();
            for (var i = 0; i < n; ++i) {
                var it = ctx.getChild(i);
                if (it instanceof Tree_1.TerminalNodeImpl) {
                    if (it.symbol.type == CParser_1.CParser.Constant) {
                        return it;
                    }
                }
            }
            return undefined;
        };
        var text = this.visit(findFirst(ctx));
        return new UniIntLiteral_1.default(Number(text));
    };
    return CMapper;
}(CVisitor_1.CVisitor);
exports.default = CMapper;

/***/ }),
/* 139 */
/***/ (function(module, exports, __webpack_require__) {

// Generated from C:\Users\RYOSUKE\eclipse\java-oxygen\eclipse\..\..\..\eclipse-workspace\net.unicoen\UniMapperGenerator\src-gen\C.g4 by ANTLR 4.7.1
// jshint ignore: start
var antlr4 = __webpack_require__(16);


var serializedATN = ["\u0003\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964",
    "\u0002w\u0538\b\u0001\u0004\u0002\t\u0002\u0004\u0003\t\u0003\u0004",
    "\u0004\t\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\u0007\t",
    "\u0007\u0004\b\t\b\u0004\t\t\t\u0004\n\t\n\u0004\u000b\t\u000b\u0004",
    "\f\t\f\u0004\r\t\r\u0004\u000e\t\u000e\u0004\u000f\t\u000f\u0004\u0010",
    "\t\u0010\u0004\u0011\t\u0011\u0004\u0012\t\u0012\u0004\u0013\t\u0013",
    "\u0004\u0014\t\u0014\u0004\u0015\t\u0015\u0004\u0016\t\u0016\u0004\u0017",
    "\t\u0017\u0004\u0018\t\u0018\u0004\u0019\t\u0019\u0004\u001a\t\u001a",
    "\u0004\u001b\t\u001b\u0004\u001c\t\u001c\u0004\u001d\t\u001d\u0004\u001e",
    "\t\u001e\u0004\u001f\t\u001f\u0004 \t \u0004!\t!\u0004\"\t\"\u0004#",
    "\t#\u0004$\t$\u0004%\t%\u0004&\t&\u0004\'\t\'\u0004(\t(\u0004)\t)\u0004",
    "*\t*\u0004+\t+\u0004,\t,\u0004-\t-\u0004.\t.\u0004/\t/\u00040\t0\u0004",
    "1\t1\u00042\t2\u00043\t3\u00044\t4\u00045\t5\u00046\t6\u00047\t7\u0004",
    "8\t8\u00049\t9\u0004:\t:\u0004;\t;\u0004<\t<\u0004=\t=\u0004>\t>\u0004",
    "?\t?\u0004@\t@\u0004A\tA\u0004B\tB\u0004C\tC\u0004D\tD\u0004E\tE\u0004",
    "F\tF\u0004G\tG\u0004H\tH\u0004I\tI\u0004J\tJ\u0004K\tK\u0004L\tL\u0004",
    "M\tM\u0004N\tN\u0004O\tO\u0004P\tP\u0004Q\tQ\u0004R\tR\u0004S\tS\u0004",
    "T\tT\u0004U\tU\u0004V\tV\u0004W\tW\u0004X\tX\u0004Y\tY\u0004Z\tZ\u0004",
    "[\t[\u0004\\\t\\\u0004]\t]\u0004^\t^\u0004_\t_\u0004`\t`\u0004a\ta\u0004",
    "b\tb\u0004c\tc\u0004d\td\u0004e\te\u0004f\tf\u0004g\tg\u0004h\th\u0004",
    "i\ti\u0004j\tj\u0004k\tk\u0004l\tl\u0004m\tm\u0004n\tn\u0004o\to\u0004",
    "p\tp\u0004q\tq\u0004r\tr\u0004s\ts\u0004t\tt\u0004u\tu\u0004v\tv\u0004",
    "w\tw\u0004x\tx\u0004y\ty\u0004z\tz\u0004{\t{\u0004|\t|\u0004}\t}\u0004",
    "~\t~\u0004\u007f\t\u007f\u0004\u0080\t\u0080\u0004\u0081\t\u0081\u0004",
    "\u0082\t\u0082\u0004\u0083\t\u0083\u0004\u0084\t\u0084\u0004\u0085\t",
    "\u0085\u0004\u0086\t\u0086\u0004\u0087\t\u0087\u0004\u0088\t\u0088\u0004",
    "\u0089\t\u0089\u0004\u008a\t\u008a\u0004\u008b\t\u008b\u0004\u008c\t",
    "\u008c\u0004\u008d\t\u008d\u0004\u008e\t\u008e\u0004\u008f\t\u008f\u0004",
    "\u0090\t\u0090\u0004\u0091\t\u0091\u0004\u0092\t\u0092\u0004\u0093\t",
    "\u0093\u0004\u0094\t\u0094\u0004\u0095\t\u0095\u0004\u0096\t\u0096\u0004",
    "\u0097\t\u0097\u0004\u0098\t\u0098\u0004\u0099\t\u0099\u0004\u009a\t",
    "\u009a\u0004\u009b\t\u009b\u0004\u009c\t\u009c\u0003\u0002\u0003\u0002",
    "\u0003\u0002\u0003\u0002\u0003\u0002\u0003\u0002\u0003\u0002\u0003\u0002",
    "\u0003\u0002\u0003\u0002\u0003\u0002\u0003\u0002\u0003\u0002\u0003\u0002",
    "\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003",
    "\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003",
    "\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0004",
    "\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004",
    "\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004",
    "\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004",
    "\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005",
    "\u0003\u0005\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006",
    "\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0007\u0003\u0007\u0003\u0007",
    "\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\b",
    "\u0003\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003",
    "\b\u0003\b\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003",
    "\t\u0003\t\u0003\t\u0003\t\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003",
    "\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003\u000b\u0003\u000b\u0003\u000b",
    "\u0003\u000b\u0003\u000b\u0003\u000b\u0003\u000b\u0003\u000b\u0003\u000b",
    "\u0003\u000b\u0003\u000b\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003",
    "\f\u0003\r\u0003\r\u0003\r\u0003\r\u0003\r\u0003\r\u0003\r\u0003\r\u0003",
    "\r\u0003\r\u0003\r\u0003\r\u0003\r\u0003\r\u0003\u000e\u0003\u000e\u0003",
    "\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003",
    "\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003",
    "\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003",
    "\u000f\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0003",
    "\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0003",
    "\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0013\u0003",
    "\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0014\u0003\u0014\u0003",
    "\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0015\u0003\u0015\u0003",
    "\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003",
    "\u0015\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003",
    "\u0016\u0003\u0016\u0003\u0016\u0003\u0017\u0003\u0017\u0003\u0017\u0003",
    "\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0003",
    "\u0018\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0003",
    "\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001b\u0003",
    "\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0003",
    "\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003",
    "\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001e\u0003\u001e\u0003",
    "\u001e\u0003\u001e\u0003\u001e\u0003\u001f\u0003\u001f\u0003\u001f\u0003",
    " \u0003 \u0003 \u0003 \u0003 \u0003 \u0003 \u0003!\u0003!\u0003!\u0003",
    "!\u0003\"\u0003\"\u0003\"\u0003\"\u0003\"\u0003#\u0003#\u0003#\u0003",
    "#\u0003#\u0003#\u0003#\u0003#\u0003#\u0003$\u0003$\u0003$\u0003$\u0003",
    "$\u0003$\u0003$\u0003$\u0003$\u0003%\u0003%\u0003%\u0003%\u0003%\u0003",
    "%\u0003%\u0003&\u0003&\u0003&\u0003&\u0003&\u0003&\u0003\'\u0003\'\u0003",
    "\'\u0003\'\u0003\'\u0003\'\u0003\'\u0003(\u0003(\u0003(\u0003(\u0003",
    "(\u0003(\u0003(\u0003)\u0003)\u0003)\u0003)\u0003)\u0003)\u0003)\u0003",
    "*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003+\u0003+\u0003+\u0003",
    "+\u0003+\u0003+\u0003+\u0003,\u0003,\u0003,\u0003,\u0003,\u0003,\u0003",
    ",\u0003,\u0003-\u0003-\u0003-\u0003-\u0003-\u0003-\u0003.\u0003.\u0003",
    ".\u0003.\u0003.\u0003.\u0003.\u0003.\u0003.\u0003/\u0003/\u0003/\u0003",
    "/\u0003/\u00030\u00030\u00030\u00030\u00030\u00030\u00030\u00030\u0003",
    "0\u00031\u00031\u00031\u00031\u00031\u00031\u00032\u00032\u00032\u0003",
    "2\u00032\u00032\u00032\u00032\u00032\u00033\u00033\u00033\u00033\u0003",
    "3\u00033\u00033\u00033\u00033\u00034\u00034\u00034\u00034\u00034\u0003",
    "4\u00034\u00034\u00035\u00035\u00035\u00035\u00035\u00035\u00036\u0003",
    "6\u00036\u00036\u00036\u00036\u00036\u00036\u00036\u00037\u00037\u0003",
    "7\u00037\u00037\u00037\u00037\u00037\u00037\u00038\u00038\u00038\u0003",
    "8\u00038\u00038\u00038\u00038\u00038\u00038\u00038\u00039\u00039\u0003",
    "9\u00039\u00039\u00039\u00039\u00039\u00039\u00039\u0003:\u0003:\u0003",
    ":\u0003:\u0003:\u0003:\u0003:\u0003:\u0003:\u0003:\u0003:\u0003:\u0003",
    ":\u0003:\u0003:\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003",
    ";\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003<\u0003<\u0003=\u0003",
    "=\u0003>\u0003>\u0003?\u0003?\u0003@\u0003@\u0003A\u0003A\u0003B\u0003",
    "B\u0003C\u0003C\u0003C\u0003D\u0003D\u0003E\u0003E\u0003E\u0003F\u0003",
    "F\u0003F\u0003G\u0003G\u0003G\u0003H\u0003H\u0003I\u0003I\u0003I\u0003",
    "J\u0003J\u0003K\u0003K\u0003K\u0003L\u0003L\u0003M\u0003M\u0003N\u0003",
    "N\u0003O\u0003O\u0003P\u0003P\u0003Q\u0003Q\u0003Q\u0003R\u0003R\u0003",
    "R\u0003S\u0003S\u0003T\u0003T\u0003U\u0003U\u0003V\u0003V\u0003W\u0003",
    "W\u0003X\u0003X\u0003Y\u0003Y\u0003Z\u0003Z\u0003[\u0003[\u0003[\u0003",
    "\\\u0003\\\u0003\\\u0003]\u0003]\u0003]\u0003^\u0003^\u0003^\u0003_",
    "\u0003_\u0003_\u0003`\u0003`\u0003`\u0003`\u0003a\u0003a\u0003a\u0003",
    "a\u0003b\u0003b\u0003b\u0003c\u0003c\u0003c\u0003d\u0003d\u0003d\u0003",
    "e\u0003e\u0003e\u0003f\u0003f\u0003f\u0003g\u0003g\u0003g\u0003h\u0003",
    "h\u0003i\u0003i\u0003i\u0003i\u0003j\u0003j\u0003j\u0007j\u0389\nj\f",
    "j\u000ej\u038c\u000bj\u0003k\u0003k\u0005k\u0390\nk\u0003l\u0003l\u0003",
    "m\u0003m\u0003n\u0003n\u0003n\u0003n\u0003n\u0003n\u0003n\u0003n\u0003",
    "n\u0003n\u0005n\u03a0\nn\u0003o\u0003o\u0003o\u0003o\u0003o\u0003p\u0003",
    "p\u0003p\u0005p\u03aa\np\u0003q\u0003q\u0005q\u03ae\nq\u0003q\u0003",
    "q\u0005q\u03b2\nq\u0003q\u0003q\u0005q\u03b6\nq\u0003q\u0005q\u03b9",
    "\nq\u0003r\u0003r\u0003r\u0006r\u03be\nr\rr\u000er\u03bf\u0003s\u0003",
    "s\u0007s\u03c4\ns\fs\u000es\u03c7\u000bs\u0003t\u0003t\u0007t\u03cb",
    "\nt\ft\u000et\u03ce\u000bt\u0003u\u0003u\u0006u\u03d2\nu\ru\u000eu\u03d3",
    "\u0003v\u0003v\u0003v\u0003w\u0003w\u0003x\u0003x\u0003y\u0003y\u0003",
    "z\u0003z\u0005z\u03e1\nz\u0003z\u0003z\u0003z\u0003z\u0003z\u0005z\u03e8",
    "\nz\u0003z\u0003z\u0005z\u03ec\nz\u0005z\u03ee\nz\u0003{\u0003{\u0003",
    "|\u0003|\u0003}\u0003}\u0003}\u0003}\u0005}\u03f8\n}\u0003~\u0003~\u0005",
    "~\u03fc\n~\u0003\u007f\u0003\u007f\u0005\u007f\u0400\n\u007f\u0003\u007f",
    "\u0005\u007f\u0403\n\u007f\u0003\u007f\u0003\u007f\u0003\u007f\u0005",
    "\u007f\u0408\n\u007f\u0005\u007f\u040a\n\u007f\u0003\u0080\u0003\u0080",
    "\u0003\u0080\u0003\u0080\u0005\u0080\u0410\n\u0080\u0003\u0080\u0003",
    "\u0080\u0003\u0080\u0003\u0080\u0005\u0080\u0416\n\u0080\u0005\u0080",
    "\u0418\n\u0080\u0003\u0081\u0005\u0081\u041b\n\u0081\u0003\u0081\u0003",
    "\u0081\u0003\u0081\u0003\u0081\u0003\u0081\u0005\u0081\u0422\n\u0081",
    "\u0003\u0082\u0003\u0082\u0005\u0082\u0426\n\u0082\u0003\u0082\u0003",
    "\u0082\u0003\u0082\u0005\u0082\u042b\n\u0082\u0003\u0082\u0005\u0082",
    "\u042e\n\u0082\u0003\u0083\u0003\u0083\u0003\u0084\u0006\u0084\u0433",
    "\n\u0084\r\u0084\u000e\u0084\u0434\u0003\u0085\u0005\u0085\u0438\n\u0085",
    "\u0003\u0085\u0003\u0085\u0003\u0085\u0003\u0085\u0003\u0085\u0005\u0085",
    "\u043f\n\u0085\u0003\u0086\u0003\u0086\u0005\u0086\u0443\n\u0086\u0003",
    "\u0086\u0003\u0086\u0003\u0086\u0005\u0086\u0448\n\u0086\u0003\u0086",
    "\u0005\u0086\u044b\n\u0086\u0003\u0087\u0006\u0087\u044e\n\u0087\r\u0087",
    "\u000e\u0087\u044f\u0003\u0088\u0003\u0088\u0003\u0089\u0003\u0089\u0003",
    "\u0089\u0003\u0089\u0003\u0089\u0003\u0089\u0003\u0089\u0003\u0089\u0003",
    "\u0089\u0003\u0089\u0003\u0089\u0003\u0089\u0003\u0089\u0003\u0089\u0003",
    "\u0089\u0003\u0089\u0003\u0089\u0003\u0089\u0003\u0089\u0003\u0089\u0003",
    "\u0089\u0003\u0089\u0005\u0089\u046a\n\u0089\u0003\u008a\u0006\u008a",
    "\u046d\n\u008a\r\u008a\u000e\u008a\u046e\u0003\u008b\u0003\u008b\u0005",
    "\u008b\u0473\n\u008b\u0003\u008c\u0003\u008c\u0003\u008c\u0003\u008c",
    "\u0005\u008c\u0479\n\u008c\u0003\u008d\u0003\u008d\u0003\u008d\u0003",
    "\u008e\u0003\u008e\u0003\u008e\u0003\u008e\u0003\u008e\u0003\u008e\u0003",
    "\u008e\u0003\u008e\u0003\u008e\u0003\u008e\u0003\u008e\u0005\u008e\u0489",
    "\n\u008e\u0003\u008f\u0003\u008f\u0003\u008f\u0003\u008f\u0006\u008f",
    "\u048f\n\u008f\r\u008f\u000e\u008f\u0490\u0003\u0090\u0005\u0090\u0494",
    "\n\u0090\u0003\u0090\u0003\u0090\u0005\u0090\u0498\n\u0090\u0003\u0090",
    "\u0003\u0090\u0003\u0091\u0003\u0091\u0003\u0091\u0005\u0091\u049f\n",
    "\u0091\u0003\u0092\u0006\u0092\u04a2\n\u0092\r\u0092\u000e\u0092\u04a3",
    "\u0003\u0093\u0003\u0093\u0003\u0093\u0003\u0093\u0003\u0093\u0003\u0093",
    "\u0003\u0093\u0005\u0093\u04ad\n\u0093\u0003\u0094\u0003\u0094\u0005",
    "\u0094\u04b1\n\u0094\u0003\u0094\u0003\u0094\u0003\u0094\u0003\u0094",
    "\u0003\u0094\u0003\u0094\u0003\u0094\u0003\u0094\u0007\u0094\u04bb\n",
    "\u0094\f\u0094\u000e\u0094\u04be\u000b\u0094\u0003\u0094\u0003\u0094",
    "\u0003\u0095\u0003\u0095\u0003\u0095\u0003\u0095\u0003\u0095\u0007\u0095",
    "\u04c7\n\u0095\f\u0095\u000e\u0095\u04ca\u000b\u0095\u0003\u0095\u0003",
    "\u0095\u0007\u0095\u04ce\n\u0095\f\u0095\u000e\u0095\u04d1\u000b\u0095",
    "\u0003\u0095\u0003\u0095\u0003\u0095\u0003\u0095\u0003\u0096\u0003\u0096",
    "\u0003\u0096\u0003\u0096\u0003\u0096\u0003\u0096\u0003\u0096\u0007\u0096",
    "\u04de\n\u0096\f\u0096\u000e\u0096\u04e1\u000b\u0096\u0003\u0096\u0007",
    "\u0096\u04e4\n\u0096\f\u0096\u000e\u0096\u04e7\u000b\u0096\u0003\u0096",
    "\u0003\u0096\u0003\u0097\u0003\u0097\u0005\u0097\u04ed\n\u0097\u0003",
    "\u0097\u0003\u0097\u0005\u0097\u04f1\n\u0097\u0003\u0097\u0003\u0097",
    "\u0007\u0097\u04f5\n\u0097\f\u0097\u000e\u0097\u04f8\u000b\u0097\u0003",
    "\u0097\u0003\u0097\u0003\u0098\u0003\u0098\u0005\u0098\u04fe\n\u0098",
    "\u0003\u0098\u0003\u0098\u0003\u0098\u0003\u0098\u0003\u0098\u0003\u0098",
    "\u0003\u0098\u0003\u0098\u0003\u0098\u0007\u0098\u0509\n\u0098\f\u0098",
    "\u000e\u0098\u050c\u000b\u0098\u0003\u0098\u0003\u0098\u0003\u0099\u0006",
    "\u0099\u0511\n\u0099\r\u0099\u000e\u0099\u0512\u0003\u0099\u0003\u0099",
    "\u0003\u009a\u0003\u009a\u0005\u009a\u0519\n\u009a\u0003\u009a\u0005",
    "\u009a\u051c\n\u009a\u0003\u009a\u0003\u009a\u0003\u009b\u0003\u009b",
    "\u0003\u009b\u0003\u009b\u0007\u009b\u0524\n\u009b\f\u009b\u000e\u009b",
    "\u0527\u000b\u009b\u0003\u009b\u0003\u009b\u0003\u009b\u0003\u009b\u0003",
    "\u009b\u0003\u009c\u0003\u009c\u0003\u009c\u0003\u009c\u0007\u009c\u0532",
    "\n\u009c\f\u009c\u000e\u009c\u0535\u000b\u009c\u0003\u009c\u0003\u009c",
    "\u0003\u0525\u0002\u009d\u0003\u0003\u0005\u0004\u0007\u0005\t\u0006",
    "\u000b\u0007\r\b\u000f\t\u0011\n\u0013\u000b\u0015\f\u0017\r\u0019\u000e",
    "\u001b\u000f\u001d\u0010\u001f\u0011!\u0012#\u0013%\u0014\'\u0015)\u0016",
    "+\u0017-\u0018/\u00191\u001a3\u001b5\u001c7\u001d9\u001e;\u001f= ?!",
    "A\"C#E$G%I&K\'M(O)Q*S+U,W-Y.[/]0_1a2c3e4g5i6k7m8o9q:s;u<w=y>{?}@\u007f",
    "A\u0081B\u0083C\u0085D\u0087E\u0089F\u008bG\u008dH\u008fI\u0091J\u0093",
    "K\u0095L\u0097M\u0099N\u009bO\u009dP\u009fQ\u00a1R\u00a3S\u00a5T\u00a7",
    "U\u00a9V\u00abW\u00adX\u00afY\u00b1Z\u00b3[\u00b5\\\u00b7]\u00b9^\u00bb",
    "_\u00bd`\u00bfa\u00c1b\u00c3c\u00c5d\u00c7e\u00c9f\u00cbg\u00cdh\u00cf",
    "i\u00d1j\u00d3k\u00d5\u0002\u00d7\u0002\u00d9\u0002\u00db\u0002\u00dd",
    "\u0002\u00dfl\u00e1\u0002\u00e3\u0002\u00e5\u0002\u00e7\u0002\u00e9",
    "\u0002\u00eb\u0002\u00ed\u0002\u00ef\u0002\u00f1\u0002\u00f3\u0002\u00f5",
    "\u0002\u00f7\u0002\u00f9\u0002\u00fb\u0002\u00fd\u0002\u00ff\u0002\u0101",
    "\u0002\u0103\u0002\u0105\u0002\u0107m\u0109\u0002\u010b\u0002\u010d",
    "\u0002\u010f\u0002\u0111\u0002\u0113\u0002\u0115\u0002\u0117\u0002\u0119",
    "\u0002\u011b\u0002\u011d\u0002\u011fn\u0121\u0002\u0123\u0002\u0125",
    "\u0002\u0127o\u0129p\u012bq\u012dr\u012fs\u0131t\u0133u\u0135v\u0137",
    "w\u0003\u0002\u0017\u0005\u0002C\\aac|\u0003\u00022;\u0004\u0002DDd",
    "d\u0003\u000223\u0004\u0002ZZzz\u0003\u00023;\u0003\u000229\u0005\u0002",
    "2;CHch\u0004\u0002WWww\u0004\u0002NNnn\u0004\u0002--//\u0006\u0002H",
    "HNNhhnn\u0006\u0002\f\f\u000f\u000f))^^\f\u0002$$))AA^^cdhhppttvvxx",
    "\u0005\u0002NNWWww\u0006\u0002\f\f\u000f\u000f$$^^\u0003\u0002%%\u0003",
    "\u0002}}\u0003\u0002\u007f\u007f\u0004\u0002\f\f\u000f\u000f\u0004\u0002",
    "\u000b\u000b\"\"\u0002\u055e\u0002\u0003\u0003\u0002\u0002\u0002\u0002",
    "\u0005\u0003\u0002\u0002\u0002\u0002\u0007\u0003\u0002\u0002\u0002\u0002",
    "\t\u0003\u0002\u0002\u0002\u0002\u000b\u0003\u0002\u0002\u0002\u0002",
    "\r\u0003\u0002\u0002\u0002\u0002\u000f\u0003\u0002\u0002\u0002\u0002",
    "\u0011\u0003\u0002\u0002\u0002\u0002\u0013\u0003\u0002\u0002\u0002\u0002",
    "\u0015\u0003\u0002\u0002\u0002\u0002\u0017\u0003\u0002\u0002\u0002\u0002",
    "\u0019\u0003\u0002\u0002\u0002\u0002\u001b\u0003\u0002\u0002\u0002\u0002",
    "\u001d\u0003\u0002\u0002\u0002\u0002\u001f\u0003\u0002\u0002\u0002\u0002",
    "!\u0003\u0002\u0002\u0002\u0002#\u0003\u0002\u0002\u0002\u0002%\u0003",
    "\u0002\u0002\u0002\u0002\'\u0003\u0002\u0002\u0002\u0002)\u0003\u0002",
    "\u0002\u0002\u0002+\u0003\u0002\u0002\u0002\u0002-\u0003\u0002\u0002",
    "\u0002\u0002/\u0003\u0002\u0002\u0002\u00021\u0003\u0002\u0002\u0002",
    "\u00023\u0003\u0002\u0002\u0002\u00025\u0003\u0002\u0002\u0002\u0002",
    "7\u0003\u0002\u0002\u0002\u00029\u0003\u0002\u0002\u0002\u0002;\u0003",
    "\u0002\u0002\u0002\u0002=\u0003\u0002\u0002\u0002\u0002?\u0003\u0002",
    "\u0002\u0002\u0002A\u0003\u0002\u0002\u0002\u0002C\u0003\u0002\u0002",
    "\u0002\u0002E\u0003\u0002\u0002\u0002\u0002G\u0003\u0002\u0002\u0002",
    "\u0002I\u0003\u0002\u0002\u0002\u0002K\u0003\u0002\u0002\u0002\u0002",
    "M\u0003\u0002\u0002\u0002\u0002O\u0003\u0002\u0002\u0002\u0002Q\u0003",
    "\u0002\u0002\u0002\u0002S\u0003\u0002\u0002\u0002\u0002U\u0003\u0002",
    "\u0002\u0002\u0002W\u0003\u0002\u0002\u0002\u0002Y\u0003\u0002\u0002",
    "\u0002\u0002[\u0003\u0002\u0002\u0002\u0002]\u0003\u0002\u0002\u0002",
    "\u0002_\u0003\u0002\u0002\u0002\u0002a\u0003\u0002\u0002\u0002\u0002",
    "c\u0003\u0002\u0002\u0002\u0002e\u0003\u0002\u0002\u0002\u0002g\u0003",
    "\u0002\u0002\u0002\u0002i\u0003\u0002\u0002\u0002\u0002k\u0003\u0002",
    "\u0002\u0002\u0002m\u0003\u0002\u0002\u0002\u0002o\u0003\u0002\u0002",
    "\u0002\u0002q\u0003\u0002\u0002\u0002\u0002s\u0003\u0002\u0002\u0002",
    "\u0002u\u0003\u0002\u0002\u0002\u0002w\u0003\u0002\u0002\u0002\u0002",
    "y\u0003\u0002\u0002\u0002\u0002{\u0003\u0002\u0002\u0002\u0002}\u0003",
    "\u0002\u0002\u0002\u0002\u007f\u0003\u0002\u0002\u0002\u0002\u0081\u0003",
    "\u0002\u0002\u0002\u0002\u0083\u0003\u0002\u0002\u0002\u0002\u0085\u0003",
    "\u0002\u0002\u0002\u0002\u0087\u0003\u0002\u0002\u0002\u0002\u0089\u0003",
    "\u0002\u0002\u0002\u0002\u008b\u0003\u0002\u0002\u0002\u0002\u008d\u0003",
    "\u0002\u0002\u0002\u0002\u008f\u0003\u0002\u0002\u0002\u0002\u0091\u0003",
    "\u0002\u0002\u0002\u0002\u0093\u0003\u0002\u0002\u0002\u0002\u0095\u0003",
    "\u0002\u0002\u0002\u0002\u0097\u0003\u0002\u0002\u0002\u0002\u0099\u0003",
    "\u0002\u0002\u0002\u0002\u009b\u0003\u0002\u0002\u0002\u0002\u009d\u0003",
    "\u0002\u0002\u0002\u0002\u009f\u0003\u0002\u0002\u0002\u0002\u00a1\u0003",
    "\u0002\u0002\u0002\u0002\u00a3\u0003\u0002\u0002\u0002\u0002\u00a5\u0003",
    "\u0002\u0002\u0002\u0002\u00a7\u0003\u0002\u0002\u0002\u0002\u00a9\u0003",
    "\u0002\u0002\u0002\u0002\u00ab\u0003\u0002\u0002\u0002\u0002\u00ad\u0003",
    "\u0002\u0002\u0002\u0002\u00af\u0003\u0002\u0002\u0002\u0002\u00b1\u0003",
    "\u0002\u0002\u0002\u0002\u00b3\u0003\u0002\u0002\u0002\u0002\u00b5\u0003",
    "\u0002\u0002\u0002\u0002\u00b7\u0003\u0002\u0002\u0002\u0002\u00b9\u0003",
    "\u0002\u0002\u0002\u0002\u00bb\u0003\u0002\u0002\u0002\u0002\u00bd\u0003",
    "\u0002\u0002\u0002\u0002\u00bf\u0003\u0002\u0002\u0002\u0002\u00c1\u0003",
    "\u0002\u0002\u0002\u0002\u00c3\u0003\u0002\u0002\u0002\u0002\u00c5\u0003",
    "\u0002\u0002\u0002\u0002\u00c7\u0003\u0002\u0002\u0002\u0002\u00c9\u0003",
    "\u0002\u0002\u0002\u0002\u00cb\u0003\u0002\u0002\u0002\u0002\u00cd\u0003",
    "\u0002\u0002\u0002\u0002\u00cf\u0003\u0002\u0002\u0002\u0002\u00d1\u0003",
    "\u0002\u0002\u0002\u0002\u00d3\u0003\u0002\u0002\u0002\u0002\u00df\u0003",
    "\u0002\u0002\u0002\u0002\u0107\u0003\u0002\u0002\u0002\u0002\u011f\u0003",
    "\u0002\u0002\u0002\u0002\u0127\u0003\u0002\u0002\u0002\u0002\u0129\u0003",
    "\u0002\u0002\u0002\u0002\u012b\u0003\u0002\u0002\u0002\u0002\u012d\u0003",
    "\u0002\u0002\u0002\u0002\u012f\u0003\u0002\u0002\u0002\u0002\u0131\u0003",
    "\u0002\u0002\u0002\u0002\u0133\u0003\u0002\u0002\u0002\u0002\u0135\u0003",
    "\u0002\u0002\u0002\u0002\u0137\u0003\u0002\u0002\u0002\u0003\u0139\u0003",
    "\u0002\u0002\u0002\u0005\u0147\u0003\u0002\u0002\u0002\u0007\u0158\u0003",
    "\u0002\u0002\u0002\t\u016b\u0003\u0002\u0002\u0002\u000b\u0172\u0003",
    "\u0002\u0002\u0002\r\u017a\u0003\u0002\u0002\u0002\u000f\u0182\u0003",
    "\u0002\u0002\u0002\u0011\u018d\u0003\u0002\u0002\u0002\u0013\u0198\u0003",
    "\u0002\u0002\u0002\u0015\u01a2\u0003\u0002\u0002\u0002\u0017\u01ad\u0003",
    "\u0002\u0002\u0002\u0019\u01b3\u0003\u0002\u0002\u0002\u001b\u01c1\u0003",
    "\u0002\u0002\u0002\u001d\u01c9\u0003\u0002\u0002\u0002\u001f\u01d6\u0003",
    "\u0002\u0002\u0002!\u01db\u0003\u0002\u0002\u0002#\u01e1\u0003\u0002",
    "\u0002\u0002%\u01e6\u0003\u0002\u0002\u0002\'\u01eb\u0003\u0002\u0002",
    "\u0002)\u01f1\u0003\u0002\u0002\u0002+\u01fa\u0003\u0002\u0002\u0002",
    "-\u0202\u0003\u0002\u0002\u0002/\u0205\u0003\u0002\u0002\u00021\u020c",
    "\u0003\u0002\u0002\u00023\u0211\u0003\u0002\u0002\u00025\u0216\u0003",
    "\u0002\u0002\u00027\u021d\u0003\u0002\u0002\u00029\u0223\u0003\u0002",
    "\u0002\u0002;\u0227\u0003\u0002\u0002\u0002=\u022c\u0003\u0002\u0002",
    "\u0002?\u022f\u0003\u0002\u0002\u0002A\u0236\u0003\u0002\u0002\u0002",
    "C\u023a\u0003\u0002\u0002\u0002E\u023f\u0003\u0002\u0002\u0002G\u0248",
    "\u0003\u0002\u0002\u0002I\u0251\u0003\u0002\u0002\u0002K\u0258\u0003",
    "\u0002\u0002\u0002M\u025e\u0003\u0002\u0002\u0002O\u0265\u0003\u0002",
    "\u0002\u0002Q\u026c\u0003\u0002\u0002\u0002S\u0273\u0003\u0002\u0002",
    "\u0002U\u027a\u0003\u0002\u0002\u0002W\u0281\u0003\u0002\u0002\u0002",
    "Y\u0289\u0003\u0002\u0002\u0002[\u028f\u0003\u0002\u0002\u0002]\u0298",
    "\u0003\u0002\u0002\u0002_\u029d\u0003\u0002\u0002\u0002a\u02a6\u0003",
    "\u0002\u0002\u0002c\u02ac\u0003\u0002\u0002\u0002e\u02b5\u0003\u0002",
    "\u0002\u0002g\u02be\u0003\u0002\u0002\u0002i\u02c6\u0003\u0002\u0002",
    "\u0002k\u02cc\u0003\u0002\u0002\u0002m\u02d5\u0003\u0002\u0002\u0002",
    "o\u02de\u0003\u0002\u0002\u0002q\u02e9\u0003\u0002\u0002\u0002s\u02f3",
    "\u0003\u0002\u0002\u0002u\u0302\u0003\u0002\u0002\u0002w\u0310\u0003",
    "\u0002\u0002\u0002y\u0312\u0003\u0002\u0002\u0002{\u0314\u0003\u0002",
    "\u0002\u0002}\u0316\u0003\u0002\u0002\u0002\u007f\u0318\u0003\u0002",
    "\u0002\u0002\u0081\u031a\u0003\u0002\u0002\u0002\u0083\u031c\u0003\u0002",
    "\u0002\u0002\u0085\u031e\u0003\u0002\u0002\u0002\u0087\u0321\u0003\u0002",
    "\u0002\u0002\u0089\u0323\u0003\u0002\u0002\u0002\u008b\u0326\u0003\u0002",
    "\u0002\u0002\u008d\u0329\u0003\u0002\u0002\u0002\u008f\u032c\u0003\u0002",
    "\u0002\u0002\u0091\u032e\u0003\u0002\u0002\u0002\u0093\u0331\u0003\u0002",
    "\u0002\u0002\u0095\u0333\u0003\u0002\u0002\u0002\u0097\u0336\u0003\u0002",
    "\u0002\u0002\u0099\u0338\u0003\u0002\u0002\u0002\u009b\u033a\u0003\u0002",
    "\u0002\u0002\u009d\u033c\u0003\u0002\u0002\u0002\u009f\u033e\u0003\u0002",
    "\u0002\u0002\u00a1\u0340\u0003\u0002\u0002\u0002\u00a3\u0343\u0003\u0002",
    "\u0002\u0002\u00a5\u0346\u0003\u0002\u0002\u0002\u00a7\u0348\u0003\u0002",
    "\u0002\u0002\u00a9\u034a\u0003\u0002\u0002\u0002\u00ab\u034c\u0003\u0002",
    "\u0002\u0002\u00ad\u034e\u0003\u0002\u0002\u0002\u00af\u0350\u0003\u0002",
    "\u0002\u0002\u00b1\u0352\u0003\u0002\u0002\u0002\u00b3\u0354\u0003\u0002",
    "\u0002\u0002\u00b5\u0356\u0003\u0002\u0002\u0002\u00b7\u0359\u0003\u0002",
    "\u0002\u0002\u00b9\u035c\u0003\u0002\u0002\u0002\u00bb\u035f\u0003\u0002",
    "\u0002\u0002\u00bd\u0362\u0003\u0002\u0002\u0002\u00bf\u0365\u0003\u0002",
    "\u0002\u0002\u00c1\u0369\u0003\u0002\u0002\u0002\u00c3\u036d\u0003\u0002",
    "\u0002\u0002\u00c5\u0370\u0003\u0002\u0002\u0002\u00c7\u0373\u0003\u0002",
    "\u0002\u0002\u00c9\u0376\u0003\u0002\u0002\u0002\u00cb\u0379\u0003\u0002",
    "\u0002\u0002\u00cd\u037c\u0003\u0002\u0002\u0002\u00cf\u037f\u0003\u0002",
    "\u0002\u0002\u00d1\u0381\u0003\u0002\u0002\u0002\u00d3\u0385\u0003\u0002",
    "\u0002\u0002\u00d5\u038f\u0003\u0002\u0002\u0002\u00d7\u0391\u0003\u0002",
    "\u0002\u0002\u00d9\u0393\u0003\u0002\u0002\u0002\u00db\u039f\u0003\u0002",
    "\u0002\u0002\u00dd\u03a1\u0003\u0002\u0002\u0002\u00df\u03a9\u0003\u0002",
    "\u0002\u0002\u00e1\u03b8\u0003\u0002\u0002\u0002\u00e3\u03ba\u0003\u0002",
    "\u0002\u0002\u00e5\u03c1\u0003\u0002\u0002\u0002\u00e7\u03c8\u0003\u0002",
    "\u0002\u0002\u00e9\u03cf\u0003\u0002\u0002\u0002\u00eb\u03d5\u0003\u0002",
    "\u0002\u0002\u00ed\u03d8\u0003\u0002\u0002\u0002\u00ef\u03da\u0003\u0002",
    "\u0002\u0002\u00f1\u03dc\u0003\u0002\u0002\u0002\u00f3\u03ed\u0003\u0002",
    "\u0002\u0002\u00f5\u03ef\u0003\u0002\u0002\u0002\u00f7\u03f1\u0003\u0002",
    "\u0002\u0002\u00f9\u03f7\u0003\u0002\u0002\u0002\u00fb\u03fb\u0003\u0002",
    "\u0002\u0002\u00fd\u0409\u0003\u0002\u0002\u0002\u00ff\u0417\u0003\u0002",
    "\u0002\u0002\u0101\u0421\u0003\u0002\u0002\u0002\u0103\u042d\u0003\u0002",
    "\u0002\u0002\u0105\u042f\u0003\u0002\u0002\u0002\u0107\u0432\u0003\u0002",
    "\u0002\u0002\u0109\u043e\u0003\u0002\u0002\u0002\u010b\u044a\u0003\u0002",
    "\u0002\u0002\u010d\u044d\u0003\u0002\u0002\u0002\u010f\u0451\u0003\u0002",
    "\u0002\u0002\u0111\u0469\u0003\u0002\u0002\u0002\u0113\u046c\u0003\u0002",
    "\u0002\u0002\u0115\u0472\u0003\u0002\u0002\u0002\u0117\u0478\u0003\u0002",
    "\u0002\u0002\u0119\u047a\u0003\u0002\u0002\u0002\u011b\u0488\u0003\u0002",
    "\u0002\u0002\u011d\u048a\u0003\u0002\u0002\u0002\u011f\u0493\u0003\u0002",
    "\u0002\u0002\u0121\u049e\u0003\u0002\u0002\u0002\u0123\u04a1\u0003\u0002",
    "\u0002\u0002\u0125\u04ac\u0003\u0002\u0002\u0002\u0127\u04ae\u0003\u0002",
    "\u0002\u0002\u0129\u04c1\u0003\u0002\u0002\u0002\u012b\u04d6\u0003\u0002",
    "\u0002\u0002\u012d\u04ea\u0003\u0002\u0002\u0002\u012f\u04fb\u0003\u0002",
    "\u0002\u0002\u0131\u0510\u0003\u0002\u0002\u0002\u0133\u051b\u0003\u0002",
    "\u0002\u0002\u0135\u051f\u0003\u0002\u0002\u0002\u0137\u052d\u0003\u0002",
    "\u0002\u0002\u0139\u013a\u0007a\u0002\u0002\u013a\u013b\u0007a\u0002",
    "\u0002\u013b\u013c\u0007g\u0002\u0002\u013c\u013d\u0007z\u0002\u0002",
    "\u013d\u013e\u0007v\u0002\u0002\u013e\u013f\u0007g\u0002\u0002\u013f",
    "\u0140\u0007p\u0002\u0002\u0140\u0141\u0007u\u0002\u0002\u0141\u0142",
    "\u0007k\u0002\u0002\u0142\u0143\u0007q\u0002\u0002\u0143\u0144\u0007",
    "p\u0002\u0002\u0144\u0145\u0007a\u0002\u0002\u0145\u0146\u0007a\u0002",
    "\u0002\u0146\u0004\u0003\u0002\u0002\u0002\u0147\u0148\u0007a\u0002",
    "\u0002\u0148\u0149\u0007a\u0002\u0002\u0149\u014a\u0007d\u0002\u0002",
    "\u014a\u014b\u0007w\u0002\u0002\u014b\u014c\u0007k\u0002\u0002\u014c",
    "\u014d\u0007n\u0002\u0002\u014d\u014e\u0007v\u0002\u0002\u014e\u014f",
    "\u0007k\u0002\u0002\u014f\u0150\u0007p\u0002\u0002\u0150\u0151\u0007",
    "a\u0002\u0002\u0151\u0152\u0007x\u0002\u0002\u0152\u0153\u0007c\u0002",
    "\u0002\u0153\u0154\u0007a\u0002\u0002\u0154\u0155\u0007c\u0002\u0002",
    "\u0155\u0156\u0007t\u0002\u0002\u0156\u0157\u0007i\u0002\u0002\u0157",
    "\u0006\u0003\u0002\u0002\u0002\u0158\u0159\u0007a\u0002\u0002\u0159",
    "\u015a\u0007a\u0002\u0002\u015a\u015b\u0007d\u0002\u0002\u015b\u015c",
    "\u0007w\u0002\u0002\u015c\u015d\u0007k\u0002\u0002\u015d\u015e\u0007",
    "n\u0002\u0002\u015e\u015f\u0007v\u0002\u0002\u015f\u0160\u0007k\u0002",
    "\u0002\u0160\u0161\u0007p\u0002\u0002\u0161\u0162\u0007a\u0002\u0002",
    "\u0162\u0163\u0007q\u0002\u0002\u0163\u0164\u0007h\u0002\u0002\u0164",
    "\u0165\u0007h\u0002\u0002\u0165\u0166\u0007u\u0002\u0002\u0166\u0167",
    "\u0007g\u0002\u0002\u0167\u0168\u0007v\u0002\u0002\u0168\u0169\u0007",
    "q\u0002\u0002\u0169\u016a\u0007h\u0002\u0002\u016a\b\u0003\u0002\u0002",
    "\u0002\u016b\u016c\u0007a\u0002\u0002\u016c\u016d\u0007a\u0002\u0002",
    "\u016d\u016e\u0007o\u0002\u0002\u016e\u016f\u00073\u0002\u0002\u016f",
    "\u0170\u00074\u0002\u0002\u0170\u0171\u0007:\u0002\u0002\u0171\n\u0003",
    "\u0002\u0002\u0002\u0172\u0173\u0007a\u0002\u0002\u0173\u0174\u0007",
    "a\u0002\u0002\u0174\u0175\u0007o\u0002\u0002\u0175\u0176\u00073\u0002",
    "\u0002\u0176\u0177\u00074\u0002\u0002\u0177\u0178\u0007:\u0002\u0002",
    "\u0178\u0179\u0007f\u0002\u0002\u0179\f\u0003\u0002\u0002\u0002\u017a",
    "\u017b\u0007a\u0002\u0002\u017b\u017c\u0007a\u0002\u0002\u017c\u017d",
    "\u0007o\u0002\u0002\u017d\u017e\u00073\u0002\u0002\u017e\u017f\u0007",
    "4\u0002\u0002\u017f\u0180\u0007:\u0002\u0002\u0180\u0181\u0007k\u0002",
    "\u0002\u0181\u000e\u0003\u0002\u0002\u0002\u0182\u0183\u0007a\u0002",
    "\u0002\u0183\u0184\u0007a\u0002\u0002\u0184\u0185\u0007v\u0002\u0002",
    "\u0185\u0186\u0007{\u0002\u0002\u0186\u0187\u0007r\u0002\u0002\u0187",
    "\u0188\u0007g\u0002\u0002\u0188\u0189\u0007q\u0002\u0002\u0189\u018a",
    "\u0007h\u0002\u0002\u018a\u018b\u0007a\u0002\u0002\u018b\u018c\u0007",
    "a\u0002\u0002\u018c\u0010\u0003\u0002\u0002\u0002\u018d\u018e\u0007",
    "a\u0002\u0002\u018e\u018f\u0007a\u0002\u0002\u018f\u0190\u0007k\u0002",
    "\u0002\u0190\u0191\u0007p\u0002\u0002\u0191\u0192\u0007n\u0002\u0002",
    "\u0192\u0193\u0007k\u0002\u0002\u0193\u0194\u0007p\u0002\u0002\u0194",
    "\u0195\u0007g\u0002\u0002\u0195\u0196\u0007a\u0002\u0002\u0196\u0197",
    "\u0007a\u0002\u0002\u0197\u0012\u0003\u0002\u0002\u0002\u0198\u0199",
    "\u0007a\u0002\u0002\u0199\u019a\u0007a\u0002\u0002\u019a\u019b\u0007",
    "u\u0002\u0002\u019b\u019c\u0007v\u0002\u0002\u019c\u019d\u0007f\u0002",
    "\u0002\u019d\u019e\u0007e\u0002\u0002\u019e\u019f\u0007c\u0002\u0002",
    "\u019f\u01a0\u0007n\u0002\u0002\u01a0\u01a1\u0007n\u0002\u0002\u01a1",
    "\u0014\u0003\u0002\u0002\u0002\u01a2\u01a3\u0007a\u0002\u0002\u01a3",
    "\u01a4\u0007a\u0002\u0002\u01a4\u01a5\u0007f\u0002\u0002\u01a5\u01a6",
    "\u0007g\u0002\u0002\u01a6\u01a7\u0007e\u0002\u0002\u01a7\u01a8\u0007",
    "n\u0002\u0002\u01a8\u01a9\u0007u\u0002\u0002\u01a9\u01aa\u0007r\u0002",
    "\u0002\u01aa\u01ab\u0007g\u0002\u0002\u01ab\u01ac\u0007e\u0002\u0002",
    "\u01ac\u0016\u0003\u0002\u0002\u0002\u01ad\u01ae\u0007a\u0002\u0002",
    "\u01ae\u01af\u0007a\u0002\u0002\u01af\u01b0\u0007c\u0002\u0002\u01b0",
    "\u01b1\u0007u\u0002\u0002\u01b1\u01b2\u0007o\u0002\u0002\u01b2\u0018",
    "\u0003\u0002\u0002\u0002\u01b3\u01b4\u0007a\u0002\u0002\u01b4\u01b5",
    "\u0007a\u0002\u0002\u01b5\u01b6\u0007c\u0002\u0002\u01b6\u01b7\u0007",
    "v\u0002\u0002\u01b7\u01b8\u0007v\u0002\u0002\u01b8\u01b9\u0007t\u0002",
    "\u0002\u01b9\u01ba\u0007k\u0002\u0002\u01ba\u01bb\u0007d\u0002\u0002",
    "\u01bb\u01bc\u0007w\u0002\u0002\u01bc\u01bd\u0007v\u0002\u0002\u01bd",
    "\u01be\u0007g\u0002\u0002\u01be\u01bf\u0007a\u0002\u0002\u01bf\u01c0",
    "\u0007a\u0002\u0002\u01c0\u001a\u0003\u0002\u0002\u0002\u01c1\u01c2",
    "\u0007a\u0002\u0002\u01c2\u01c3\u0007a\u0002\u0002\u01c3\u01c4\u0007",
    "c\u0002\u0002\u01c4\u01c5\u0007u\u0002\u0002\u01c5\u01c6\u0007o\u0002",
    "\u0002\u01c6\u01c7\u0007a\u0002\u0002\u01c7\u01c8\u0007a\u0002\u0002",
    "\u01c8\u001c\u0003\u0002\u0002\u0002\u01c9\u01ca\u0007a\u0002\u0002",
    "\u01ca\u01cb\u0007a\u0002\u0002\u01cb\u01cc\u0007x\u0002\u0002\u01cc",
    "\u01cd\u0007q\u0002\u0002\u01cd\u01ce\u0007n\u0002\u0002\u01ce\u01cf",
    "\u0007c\u0002\u0002\u01cf\u01d0\u0007v\u0002\u0002\u01d0\u01d1\u0007",
    "k\u0002\u0002\u01d1\u01d2\u0007n\u0002\u0002\u01d2\u01d3\u0007g\u0002",
    "\u0002\u01d3\u01d4\u0007a\u0002\u0002\u01d4\u01d5\u0007a\u0002\u0002",
    "\u01d5\u001e\u0003\u0002\u0002\u0002\u01d6\u01d7\u0007c\u0002\u0002",
    "\u01d7\u01d8\u0007w\u0002\u0002\u01d8\u01d9\u0007v\u0002\u0002\u01d9",
    "\u01da\u0007q\u0002\u0002\u01da \u0003\u0002\u0002\u0002\u01db\u01dc",
    "\u0007d\u0002\u0002\u01dc\u01dd\u0007t\u0002\u0002\u01dd\u01de\u0007",
    "g\u0002\u0002\u01de\u01df\u0007c\u0002\u0002\u01df\u01e0\u0007m\u0002",
    "\u0002\u01e0\"\u0003\u0002\u0002\u0002\u01e1\u01e2\u0007e\u0002\u0002",
    "\u01e2\u01e3\u0007c\u0002\u0002\u01e3\u01e4\u0007u\u0002\u0002\u01e4",
    "\u01e5\u0007g\u0002\u0002\u01e5$\u0003\u0002\u0002\u0002\u01e6\u01e7",
    "\u0007e\u0002\u0002\u01e7\u01e8\u0007j\u0002\u0002\u01e8\u01e9\u0007",
    "c\u0002\u0002\u01e9\u01ea\u0007t\u0002\u0002\u01ea&\u0003\u0002\u0002",
    "\u0002\u01eb\u01ec\u0007e\u0002\u0002\u01ec\u01ed\u0007q\u0002\u0002",
    "\u01ed\u01ee\u0007p\u0002\u0002\u01ee\u01ef\u0007u\u0002\u0002\u01ef",
    "\u01f0\u0007v\u0002\u0002\u01f0(\u0003\u0002\u0002\u0002\u01f1\u01f2",
    "\u0007e\u0002\u0002\u01f2\u01f3\u0007q\u0002\u0002\u01f3\u01f4\u0007",
    "p\u0002\u0002\u01f4\u01f5\u0007v\u0002\u0002\u01f5\u01f6\u0007k\u0002",
    "\u0002\u01f6\u01f7\u0007p\u0002\u0002\u01f7\u01f8\u0007w\u0002\u0002",
    "\u01f8\u01f9\u0007g\u0002\u0002\u01f9*\u0003\u0002\u0002\u0002\u01fa",
    "\u01fb\u0007f\u0002\u0002\u01fb\u01fc\u0007g\u0002\u0002\u01fc\u01fd",
    "\u0007h\u0002\u0002\u01fd\u01fe\u0007c\u0002\u0002\u01fe\u01ff\u0007",
    "w\u0002\u0002\u01ff\u0200\u0007n\u0002\u0002\u0200\u0201\u0007v\u0002",
    "\u0002\u0201,\u0003\u0002\u0002\u0002\u0202\u0203\u0007f\u0002\u0002",
    "\u0203\u0204\u0007q\u0002\u0002\u0204.\u0003\u0002\u0002\u0002\u0205",
    "\u0206\u0007f\u0002\u0002\u0206\u0207\u0007q\u0002\u0002\u0207\u0208",
    "\u0007w\u0002\u0002\u0208\u0209\u0007d\u0002\u0002\u0209\u020a\u0007",
    "n\u0002\u0002\u020a\u020b\u0007g\u0002\u0002\u020b0\u0003\u0002\u0002",
    "\u0002\u020c\u020d\u0007g\u0002\u0002\u020d\u020e\u0007n\u0002\u0002",
    "\u020e\u020f\u0007u\u0002\u0002\u020f\u0210\u0007g\u0002\u0002\u0210",
    "2\u0003\u0002\u0002\u0002\u0211\u0212\u0007g\u0002\u0002\u0212\u0213",
    "\u0007p\u0002\u0002\u0213\u0214\u0007w\u0002\u0002\u0214\u0215\u0007",
    "o\u0002\u0002\u02154\u0003\u0002\u0002\u0002\u0216\u0217\u0007g\u0002",
    "\u0002\u0217\u0218\u0007z\u0002\u0002\u0218\u0219\u0007v\u0002\u0002",
    "\u0219\u021a\u0007g\u0002\u0002\u021a\u021b\u0007t\u0002\u0002\u021b",
    "\u021c\u0007p\u0002\u0002\u021c6\u0003\u0002\u0002\u0002\u021d\u021e",
    "\u0007h\u0002\u0002\u021e\u021f\u0007n\u0002\u0002\u021f\u0220\u0007",
    "q\u0002\u0002\u0220\u0221\u0007c\u0002\u0002\u0221\u0222\u0007v\u0002",
    "\u0002\u02228\u0003\u0002\u0002\u0002\u0223\u0224\u0007h\u0002\u0002",
    "\u0224\u0225\u0007q\u0002\u0002\u0225\u0226\u0007t\u0002\u0002\u0226",
    ":\u0003\u0002\u0002\u0002\u0227\u0228\u0007i\u0002\u0002\u0228\u0229",
    "\u0007q\u0002\u0002\u0229\u022a\u0007v\u0002\u0002\u022a\u022b\u0007",
    "q\u0002\u0002\u022b<\u0003\u0002\u0002\u0002\u022c\u022d\u0007k\u0002",
    "\u0002\u022d\u022e\u0007h\u0002\u0002\u022e>\u0003\u0002\u0002\u0002",
    "\u022f\u0230\u0007k\u0002\u0002\u0230\u0231\u0007p\u0002\u0002\u0231",
    "\u0232\u0007n\u0002\u0002\u0232\u0233\u0007k\u0002\u0002\u0233\u0234",
    "\u0007p\u0002\u0002\u0234\u0235\u0007g\u0002\u0002\u0235@\u0003\u0002",
    "\u0002\u0002\u0236\u0237\u0007k\u0002\u0002\u0237\u0238\u0007p\u0002",
    "\u0002\u0238\u0239\u0007v\u0002\u0002\u0239B\u0003\u0002\u0002\u0002",
    "\u023a\u023b\u0007n\u0002\u0002\u023b\u023c\u0007q\u0002\u0002\u023c",
    "\u023d\u0007p\u0002\u0002\u023d\u023e\u0007i\u0002\u0002\u023eD\u0003",
    "\u0002\u0002\u0002\u023f\u0240\u0007t\u0002\u0002\u0240\u0241\u0007",
    "g\u0002\u0002\u0241\u0242\u0007i\u0002\u0002\u0242\u0243\u0007k\u0002",
    "\u0002\u0243\u0244\u0007u\u0002\u0002\u0244\u0245\u0007v\u0002\u0002",
    "\u0245\u0246\u0007g\u0002\u0002\u0246\u0247\u0007t\u0002\u0002\u0247",
    "F\u0003\u0002\u0002\u0002\u0248\u0249\u0007t\u0002\u0002\u0249\u024a",
    "\u0007g\u0002\u0002\u024a\u024b\u0007u\u0002\u0002\u024b\u024c\u0007",
    "v\u0002\u0002\u024c\u024d\u0007t\u0002\u0002\u024d\u024e\u0007k\u0002",
    "\u0002\u024e\u024f\u0007e\u0002\u0002\u024f\u0250\u0007v\u0002\u0002",
    "\u0250H\u0003\u0002\u0002\u0002\u0251\u0252\u0007t\u0002\u0002\u0252",
    "\u0253\u0007g\u0002\u0002\u0253\u0254\u0007v\u0002\u0002\u0254\u0255",
    "\u0007w\u0002\u0002\u0255\u0256\u0007t\u0002\u0002\u0256\u0257\u0007",
    "p\u0002\u0002\u0257J\u0003\u0002\u0002\u0002\u0258\u0259\u0007u\u0002",
    "\u0002\u0259\u025a\u0007j\u0002\u0002\u025a\u025b\u0007q\u0002\u0002",
    "\u025b\u025c\u0007t\u0002\u0002\u025c\u025d\u0007v\u0002\u0002\u025d",
    "L\u0003\u0002\u0002\u0002\u025e\u025f\u0007u\u0002\u0002\u025f\u0260",
    "\u0007k\u0002\u0002\u0260\u0261\u0007i\u0002\u0002\u0261\u0262\u0007",
    "p\u0002\u0002\u0262\u0263\u0007g\u0002\u0002\u0263\u0264\u0007f\u0002",
    "\u0002\u0264N\u0003\u0002\u0002\u0002\u0265\u0266\u0007u\u0002\u0002",
    "\u0266\u0267\u0007k\u0002\u0002\u0267\u0268\u0007|\u0002\u0002\u0268",
    "\u0269\u0007g\u0002\u0002\u0269\u026a\u0007q\u0002\u0002\u026a\u026b",
    "\u0007h\u0002\u0002\u026bP\u0003\u0002\u0002\u0002\u026c\u026d\u0007",
    "u\u0002\u0002\u026d\u026e\u0007v\u0002\u0002\u026e\u026f\u0007c\u0002",
    "\u0002\u026f\u0270\u0007v\u0002\u0002\u0270\u0271\u0007k\u0002\u0002",
    "\u0271\u0272\u0007e\u0002\u0002\u0272R\u0003\u0002\u0002\u0002\u0273",
    "\u0274\u0007u\u0002\u0002\u0274\u0275\u0007v\u0002\u0002\u0275\u0276",
    "\u0007t\u0002\u0002\u0276\u0277\u0007w\u0002\u0002\u0277\u0278\u0007",
    "e\u0002\u0002\u0278\u0279\u0007v\u0002\u0002\u0279T\u0003\u0002\u0002",
    "\u0002\u027a\u027b\u0007u\u0002\u0002\u027b\u027c\u0007y\u0002\u0002",
    "\u027c\u027d\u0007k\u0002\u0002\u027d\u027e\u0007v\u0002\u0002\u027e",
    "\u027f\u0007e\u0002\u0002\u027f\u0280\u0007j\u0002\u0002\u0280V\u0003",
    "\u0002\u0002\u0002\u0281\u0282\u0007v\u0002\u0002\u0282\u0283\u0007",
    "{\u0002\u0002\u0283\u0284\u0007r\u0002\u0002\u0284\u0285\u0007g\u0002",
    "\u0002\u0285\u0286\u0007f\u0002\u0002\u0286\u0287\u0007g\u0002\u0002",
    "\u0287\u0288\u0007h\u0002\u0002\u0288X\u0003\u0002\u0002\u0002\u0289",
    "\u028a\u0007w\u0002\u0002\u028a\u028b\u0007p\u0002\u0002\u028b\u028c",
    "\u0007k\u0002\u0002\u028c\u028d\u0007q\u0002\u0002\u028d\u028e\u0007",
    "p\u0002\u0002\u028eZ\u0003\u0002\u0002\u0002\u028f\u0290\u0007w\u0002",
    "\u0002\u0290\u0291\u0007p\u0002\u0002\u0291\u0292\u0007u\u0002\u0002",
    "\u0292\u0293\u0007k\u0002\u0002\u0293\u0294\u0007i\u0002\u0002\u0294",
    "\u0295\u0007p\u0002\u0002\u0295\u0296\u0007g\u0002\u0002\u0296\u0297",
    "\u0007f\u0002\u0002\u0297\\\u0003\u0002\u0002\u0002\u0298\u0299\u0007",
    "x\u0002\u0002\u0299\u029a\u0007q\u0002\u0002\u029a\u029b\u0007k\u0002",
    "\u0002\u029b\u029c\u0007f\u0002\u0002\u029c^\u0003\u0002\u0002\u0002",
    "\u029d\u029e\u0007x\u0002\u0002\u029e\u029f\u0007q\u0002\u0002\u029f",
    "\u02a0\u0007n\u0002\u0002\u02a0\u02a1\u0007c\u0002\u0002\u02a1\u02a2",
    "\u0007v\u0002\u0002\u02a2\u02a3\u0007k\u0002\u0002\u02a3\u02a4\u0007",
    "n\u0002\u0002\u02a4\u02a5\u0007g\u0002\u0002\u02a5`\u0003\u0002\u0002",
    "\u0002\u02a6\u02a7\u0007y\u0002\u0002\u02a7\u02a8\u0007j\u0002\u0002",
    "\u02a8\u02a9\u0007k\u0002\u0002\u02a9\u02aa\u0007n\u0002\u0002\u02aa",
    "\u02ab\u0007g\u0002\u0002\u02abb\u0003\u0002\u0002\u0002\u02ac\u02ad",
    "\u0007a\u0002\u0002\u02ad\u02ae\u0007C\u0002\u0002\u02ae\u02af\u0007",
    "n\u0002\u0002\u02af\u02b0\u0007k\u0002\u0002\u02b0\u02b1\u0007i\u0002",
    "\u0002\u02b1\u02b2\u0007p\u0002\u0002\u02b2\u02b3\u0007c\u0002\u0002",
    "\u02b3\u02b4\u0007u\u0002\u0002\u02b4d\u0003\u0002\u0002\u0002\u02b5",
    "\u02b6\u0007a\u0002\u0002\u02b6\u02b7\u0007C\u0002\u0002\u02b7\u02b8",
    "\u0007n\u0002\u0002\u02b8\u02b9\u0007k\u0002\u0002\u02b9\u02ba\u0007",
    "i\u0002\u0002\u02ba\u02bb\u0007p\u0002\u0002\u02bb\u02bc\u0007q\u0002",
    "\u0002\u02bc\u02bd\u0007h\u0002\u0002\u02bdf\u0003\u0002\u0002\u0002",
    "\u02be\u02bf\u0007a\u0002\u0002\u02bf\u02c0\u0007C\u0002\u0002\u02c0",
    "\u02c1\u0007v\u0002\u0002\u02c1\u02c2\u0007q\u0002\u0002\u02c2\u02c3",
    "\u0007o\u0002\u0002\u02c3\u02c4\u0007k\u0002\u0002\u02c4\u02c5\u0007",
    "e\u0002\u0002\u02c5h\u0003\u0002\u0002\u0002\u02c6\u02c7\u0007a\u0002",
    "\u0002\u02c7\u02c8\u0007D\u0002\u0002\u02c8\u02c9\u0007q\u0002\u0002",
    "\u02c9\u02ca\u0007q\u0002\u0002\u02ca\u02cb\u0007n\u0002\u0002\u02cb",
    "j\u0003\u0002\u0002\u0002\u02cc\u02cd\u0007a\u0002\u0002\u02cd\u02ce",
    "\u0007E\u0002\u0002\u02ce\u02cf\u0007q\u0002\u0002\u02cf\u02d0\u0007",
    "o\u0002\u0002\u02d0\u02d1\u0007r\u0002\u0002\u02d1\u02d2\u0007n\u0002",
    "\u0002\u02d2\u02d3\u0007g\u0002\u0002\u02d3\u02d4\u0007z\u0002\u0002",
    "\u02d4l\u0003\u0002\u0002\u0002\u02d5\u02d6\u0007a\u0002\u0002\u02d6",
    "\u02d7\u0007I\u0002\u0002\u02d7\u02d8\u0007g\u0002\u0002\u02d8\u02d9",
    "\u0007p\u0002\u0002\u02d9\u02da\u0007g\u0002\u0002\u02da\u02db\u0007",
    "t\u0002\u0002\u02db\u02dc\u0007k\u0002\u0002\u02dc\u02dd\u0007e\u0002",
    "\u0002\u02ddn\u0003\u0002\u0002\u0002\u02de\u02df\u0007a\u0002\u0002",
    "\u02df\u02e0\u0007K\u0002\u0002\u02e0\u02e1\u0007o\u0002\u0002\u02e1",
    "\u02e2\u0007c\u0002\u0002\u02e2\u02e3\u0007i\u0002\u0002\u02e3\u02e4",
    "\u0007k\u0002\u0002\u02e4\u02e5\u0007p\u0002\u0002\u02e5\u02e6\u0007",
    "c\u0002\u0002\u02e6\u02e7\u0007t\u0002\u0002\u02e7\u02e8\u0007{\u0002",
    "\u0002\u02e8p\u0003\u0002\u0002\u0002\u02e9\u02ea\u0007a\u0002\u0002",
    "\u02ea\u02eb\u0007P\u0002\u0002\u02eb\u02ec\u0007q\u0002\u0002\u02ec",
    "\u02ed\u0007t\u0002\u0002\u02ed\u02ee\u0007g\u0002\u0002\u02ee\u02ef",
    "\u0007v\u0002\u0002\u02ef\u02f0\u0007w\u0002\u0002\u02f0\u02f1\u0007",
    "t\u0002\u0002\u02f1\u02f2\u0007p\u0002\u0002\u02f2r\u0003\u0002\u0002",
    "\u0002\u02f3\u02f4\u0007a\u0002\u0002\u02f4\u02f5\u0007U\u0002\u0002",
    "\u02f5\u02f6\u0007v\u0002\u0002\u02f6\u02f7\u0007c\u0002\u0002\u02f7",
    "\u02f8\u0007v\u0002\u0002\u02f8\u02f9\u0007k\u0002\u0002\u02f9\u02fa",
    "\u0007e\u0002\u0002\u02fa\u02fb\u0007a\u0002\u0002\u02fb\u02fc\u0007",
    "c\u0002\u0002\u02fc\u02fd\u0007u\u0002\u0002\u02fd\u02fe\u0007u\u0002",
    "\u0002\u02fe\u02ff\u0007g\u0002\u0002\u02ff\u0300\u0007t\u0002\u0002",
    "\u0300\u0301\u0007v\u0002\u0002\u0301t\u0003\u0002\u0002\u0002\u0302",
    "\u0303\u0007a\u0002\u0002\u0303\u0304\u0007V\u0002\u0002\u0304\u0305",
    "\u0007j\u0002\u0002\u0305\u0306\u0007t\u0002\u0002\u0306\u0307\u0007",
    "g\u0002\u0002\u0307\u0308\u0007c\u0002\u0002\u0308\u0309\u0007f\u0002",
    "\u0002\u0309\u030a\u0007a\u0002\u0002\u030a\u030b\u0007n\u0002\u0002",
    "\u030b\u030c\u0007q\u0002\u0002\u030c\u030d\u0007e\u0002\u0002\u030d",
    "\u030e\u0007c\u0002\u0002\u030e\u030f\u0007n\u0002\u0002\u030fv\u0003",
    "\u0002\u0002\u0002\u0310\u0311\u0007*\u0002\u0002\u0311x\u0003\u0002",
    "\u0002\u0002\u0312\u0313\u0007+\u0002\u0002\u0313z\u0003\u0002\u0002",
    "\u0002\u0314\u0315\u0007]\u0002\u0002\u0315|\u0003\u0002\u0002\u0002",
    "\u0316\u0317\u0007_\u0002\u0002\u0317~\u0003\u0002\u0002\u0002\u0318",
    "\u0319\u0007}\u0002\u0002\u0319\u0080\u0003\u0002\u0002\u0002\u031a",
    "\u031b\u0007\u007f\u0002\u0002\u031b\u0082\u0003\u0002\u0002\u0002\u031c",
    "\u031d\u0007>\u0002\u0002\u031d\u0084\u0003\u0002\u0002\u0002\u031e",
    "\u031f\u0007>\u0002\u0002\u031f\u0320\u0007?\u0002\u0002\u0320\u0086",
    "\u0003\u0002\u0002\u0002\u0321\u0322\u0007@\u0002\u0002\u0322\u0088",
    "\u0003\u0002\u0002\u0002\u0323\u0324\u0007@\u0002\u0002\u0324\u0325",
    "\u0007?\u0002\u0002\u0325\u008a\u0003\u0002\u0002\u0002\u0326\u0327",
    "\u0007>\u0002\u0002\u0327\u0328\u0007>\u0002\u0002\u0328\u008c\u0003",
    "\u0002\u0002\u0002\u0329\u032a\u0007@\u0002\u0002\u032a\u032b\u0007",
    "@\u0002\u0002\u032b\u008e\u0003\u0002\u0002\u0002\u032c\u032d\u0007",
    "-\u0002\u0002\u032d\u0090\u0003\u0002\u0002\u0002\u032e\u032f\u0007",
    "-\u0002\u0002\u032f\u0330\u0007-\u0002\u0002\u0330\u0092\u0003\u0002",
    "\u0002\u0002\u0331\u0332\u0007/\u0002\u0002\u0332\u0094\u0003\u0002",
    "\u0002\u0002\u0333\u0334\u0007/\u0002\u0002\u0334\u0335\u0007/\u0002",
    "\u0002\u0335\u0096\u0003\u0002\u0002\u0002\u0336\u0337\u0007,\u0002",
    "\u0002\u0337\u0098\u0003\u0002\u0002\u0002\u0338\u0339\u00071\u0002",
    "\u0002\u0339\u009a\u0003\u0002\u0002\u0002\u033a\u033b\u0007\'\u0002",
    "\u0002\u033b\u009c\u0003\u0002\u0002\u0002\u033c\u033d\u0007(\u0002",
    "\u0002\u033d\u009e\u0003\u0002\u0002\u0002\u033e\u033f\u0007~\u0002",
    "\u0002\u033f\u00a0\u0003\u0002\u0002\u0002\u0340\u0341\u0007(\u0002",
    "\u0002\u0341\u0342\u0007(\u0002\u0002\u0342\u00a2\u0003\u0002\u0002",
    "\u0002\u0343\u0344\u0007~\u0002\u0002\u0344\u0345\u0007~\u0002\u0002",
    "\u0345\u00a4\u0003\u0002\u0002\u0002\u0346\u0347\u0007`\u0002\u0002",
    "\u0347\u00a6\u0003\u0002\u0002\u0002\u0348\u0349\u0007#\u0002\u0002",
    "\u0349\u00a8\u0003\u0002\u0002\u0002\u034a\u034b\u0007\u0080\u0002\u0002",
    "\u034b\u00aa\u0003\u0002\u0002\u0002\u034c\u034d\u0007A\u0002\u0002",
    "\u034d\u00ac\u0003\u0002\u0002\u0002\u034e\u034f\u0007<\u0002\u0002",
    "\u034f\u00ae\u0003\u0002\u0002\u0002\u0350\u0351\u0007=\u0002\u0002",
    "\u0351\u00b0\u0003\u0002\u0002\u0002\u0352\u0353\u0007.\u0002\u0002",
    "\u0353\u00b2\u0003\u0002\u0002\u0002\u0354\u0355\u0007?\u0002\u0002",
    "\u0355\u00b4\u0003\u0002\u0002\u0002\u0356\u0357\u0007,\u0002\u0002",
    "\u0357\u0358\u0007?\u0002\u0002\u0358\u00b6\u0003\u0002\u0002\u0002",
    "\u0359\u035a\u00071\u0002\u0002\u035a\u035b\u0007?\u0002\u0002\u035b",
    "\u00b8\u0003\u0002\u0002\u0002\u035c\u035d\u0007\'\u0002\u0002\u035d",
    "\u035e\u0007?\u0002\u0002\u035e\u00ba\u0003\u0002\u0002\u0002\u035f",
    "\u0360\u0007-\u0002\u0002\u0360\u0361\u0007?\u0002\u0002\u0361\u00bc",
    "\u0003\u0002\u0002\u0002\u0362\u0363\u0007/\u0002\u0002\u0363\u0364",
    "\u0007?\u0002\u0002\u0364\u00be\u0003\u0002\u0002\u0002\u0365\u0366",
    "\u0007>\u0002\u0002\u0366\u0367\u0007>\u0002\u0002\u0367\u0368\u0007",
    "?\u0002\u0002\u0368\u00c0\u0003\u0002\u0002\u0002\u0369\u036a\u0007",
    "@\u0002\u0002\u036a\u036b\u0007@\u0002\u0002\u036b\u036c\u0007?\u0002",
    "\u0002\u036c\u00c2\u0003\u0002\u0002\u0002\u036d\u036e\u0007(\u0002",
    "\u0002\u036e\u036f\u0007?\u0002\u0002\u036f\u00c4\u0003\u0002\u0002",
    "\u0002\u0370\u0371\u0007`\u0002\u0002\u0371\u0372\u0007?\u0002\u0002",
    "\u0372\u00c6\u0003\u0002\u0002\u0002\u0373\u0374\u0007~\u0002\u0002",
    "\u0374\u0375\u0007?\u0002\u0002\u0375\u00c8\u0003\u0002\u0002\u0002",
    "\u0376\u0377\u0007?\u0002\u0002\u0377\u0378\u0007?\u0002\u0002\u0378",
    "\u00ca\u0003\u0002\u0002\u0002\u0379\u037a\u0007#\u0002\u0002\u037a",
    "\u037b\u0007?\u0002\u0002\u037b\u00cc\u0003\u0002\u0002\u0002\u037c",
    "\u037d\u0007/\u0002\u0002\u037d\u037e\u0007@\u0002\u0002\u037e\u00ce",
    "\u0003\u0002\u0002\u0002\u037f\u0380\u00070\u0002\u0002\u0380\u00d0",
    "\u0003\u0002\u0002\u0002\u0381\u0382\u00070\u0002\u0002\u0382\u0383",
    "\u00070\u0002\u0002\u0383\u0384\u00070\u0002\u0002\u0384\u00d2\u0003",
    "\u0002\u0002\u0002\u0385\u038a\u0005\u00d5k\u0002\u0386\u0389\u0005",
    "\u00d5k\u0002\u0387\u0389\u0005\u00d9m\u0002\u0388\u0386\u0003\u0002",
    "\u0002\u0002\u0388\u0387\u0003\u0002\u0002\u0002\u0389\u038c\u0003\u0002",
    "\u0002\u0002\u038a\u0388\u0003\u0002\u0002\u0002\u038a\u038b\u0003\u0002",
    "\u0002\u0002\u038b\u00d4\u0003\u0002\u0002\u0002\u038c\u038a\u0003\u0002",
    "\u0002\u0002\u038d\u0390\u0005\u00d7l\u0002\u038e\u0390\u0005\u00db",
    "n\u0002\u038f\u038d\u0003\u0002\u0002\u0002\u038f\u038e\u0003\u0002",
    "\u0002\u0002\u0390\u00d6\u0003\u0002\u0002\u0002\u0391\u0392\t\u0002",
    "\u0002\u0002\u0392\u00d8\u0003\u0002\u0002\u0002\u0393\u0394\t\u0003",
    "\u0002\u0002\u0394\u00da\u0003\u0002\u0002\u0002\u0395\u0396\u0007^",
    "\u0002\u0002\u0396\u0397\u0007w\u0002\u0002\u0397\u0398\u0003\u0002",
    "\u0002\u0002\u0398\u03a0\u0005\u00ddo\u0002\u0399\u039a\u0007^\u0002",
    "\u0002\u039a\u039b\u0007W\u0002\u0002\u039b\u039c\u0003\u0002\u0002",
    "\u0002\u039c\u039d\u0005\u00ddo\u0002\u039d\u039e\u0005\u00ddo\u0002",
    "\u039e\u03a0\u0003\u0002\u0002\u0002\u039f\u0395\u0003\u0002\u0002\u0002",
    "\u039f\u0399\u0003\u0002\u0002\u0002\u03a0\u00dc\u0003\u0002\u0002\u0002",
    "\u03a1\u03a2\u0005\u00f1y\u0002\u03a2\u03a3\u0005\u00f1y\u0002\u03a3",
    "\u03a4\u0005\u00f1y\u0002\u03a4\u03a5\u0005\u00f1y\u0002\u03a5\u00de",
    "\u0003\u0002\u0002\u0002\u03a6\u03aa\u0005\u00e1q\u0002\u03a7\u03aa",
    "\u0005\u00fb~\u0002\u03a8\u03aa\u0005\u0111\u0089\u0002\u03a9\u03a6",
    "\u0003\u0002\u0002\u0002\u03a9\u03a7\u0003\u0002\u0002\u0002\u03a9\u03a8",
    "\u0003\u0002\u0002\u0002\u03aa\u00e0\u0003\u0002\u0002\u0002\u03ab\u03ad",
    "\u0005\u00e5s\u0002\u03ac\u03ae\u0005\u00f3z\u0002\u03ad\u03ac\u0003",
    "\u0002\u0002\u0002\u03ad\u03ae\u0003\u0002\u0002\u0002\u03ae\u03b9\u0003",
    "\u0002\u0002\u0002\u03af\u03b1\u0005\u00e7t\u0002\u03b0\u03b2\u0005",
    "\u00f3z\u0002\u03b1\u03b0\u0003\u0002\u0002\u0002\u03b1\u03b2\u0003",
    "\u0002\u0002\u0002\u03b2\u03b9\u0003\u0002\u0002\u0002\u03b3\u03b5\u0005",
    "\u00e9u\u0002\u03b4\u03b6\u0005\u00f3z\u0002\u03b5\u03b4\u0003\u0002",
    "\u0002\u0002\u03b5\u03b6\u0003\u0002\u0002\u0002\u03b6\u03b9\u0003\u0002",
    "\u0002\u0002\u03b7\u03b9\u0005\u00e3r\u0002\u03b8\u03ab\u0003\u0002",
    "\u0002\u0002\u03b8\u03af\u0003\u0002\u0002\u0002\u03b8\u03b3\u0003\u0002",
    "\u0002\u0002\u03b8\u03b7\u0003\u0002\u0002\u0002\u03b9\u00e2\u0003\u0002",
    "\u0002\u0002\u03ba\u03bb\u00072\u0002\u0002\u03bb\u03bd\t\u0004\u0002",
    "\u0002\u03bc\u03be\t\u0005\u0002\u0002\u03bd\u03bc\u0003\u0002\u0002",
    "\u0002\u03be\u03bf\u0003\u0002\u0002\u0002\u03bf\u03bd\u0003\u0002\u0002",
    "\u0002\u03bf\u03c0\u0003\u0002\u0002\u0002\u03c0\u00e4\u0003\u0002\u0002",
    "\u0002\u03c1\u03c5\u0005\u00edw\u0002\u03c2\u03c4\u0005\u00d9m\u0002",
    "\u03c3\u03c2\u0003\u0002\u0002\u0002\u03c4\u03c7\u0003\u0002\u0002\u0002",
    "\u03c5\u03c3\u0003\u0002\u0002\u0002\u03c5\u03c6\u0003\u0002\u0002\u0002",
    "\u03c6\u00e6\u0003\u0002\u0002\u0002\u03c7\u03c5\u0003\u0002\u0002\u0002",
    "\u03c8\u03cc\u00072\u0002\u0002\u03c9\u03cb\u0005\u00efx\u0002\u03ca",
    "\u03c9\u0003\u0002\u0002\u0002\u03cb\u03ce\u0003\u0002\u0002\u0002\u03cc",
    "\u03ca\u0003\u0002\u0002\u0002\u03cc\u03cd\u0003\u0002\u0002\u0002\u03cd",
    "\u00e8\u0003\u0002\u0002\u0002\u03ce\u03cc\u0003\u0002\u0002\u0002\u03cf",
    "\u03d1\u0005\u00ebv\u0002\u03d0\u03d2\u0005\u00f1y\u0002\u03d1\u03d0",
    "\u0003\u0002\u0002\u0002\u03d2\u03d3\u0003\u0002\u0002\u0002\u03d3\u03d1",
    "\u0003\u0002\u0002\u0002\u03d3\u03d4\u0003\u0002\u0002\u0002\u03d4\u00ea",
    "\u0003\u0002\u0002\u0002\u03d5\u03d6\u00072\u0002\u0002\u03d6\u03d7",
    "\t\u0006\u0002\u0002\u03d7\u00ec\u0003\u0002\u0002\u0002\u03d8\u03d9",
    "\t\u0007\u0002\u0002\u03d9\u00ee\u0003\u0002\u0002\u0002\u03da\u03db",
    "\t\b\u0002\u0002\u03db\u00f0\u0003\u0002\u0002\u0002\u03dc\u03dd\t\t",
    "\u0002\u0002\u03dd\u00f2\u0003\u0002\u0002\u0002\u03de\u03e0\u0005\u00f5",
    "{\u0002\u03df\u03e1\u0005\u00f7|\u0002\u03e0\u03df\u0003\u0002\u0002",
    "\u0002\u03e0\u03e1\u0003\u0002\u0002\u0002\u03e1\u03ee\u0003\u0002\u0002",
    "\u0002\u03e2\u03e3\u0005\u00f5{\u0002\u03e3\u03e4\u0005\u00f9}\u0002",
    "\u03e4\u03ee\u0003\u0002\u0002\u0002\u03e5\u03e7\u0005\u00f7|\u0002",
    "\u03e6\u03e8\u0005\u00f5{\u0002\u03e7\u03e6\u0003\u0002\u0002\u0002",
    "\u03e7\u03e8\u0003\u0002\u0002\u0002\u03e8\u03ee\u0003\u0002\u0002\u0002",
    "\u03e9\u03eb\u0005\u00f9}\u0002\u03ea\u03ec\u0005\u00f5{\u0002\u03eb",
    "\u03ea\u0003\u0002\u0002\u0002\u03eb\u03ec\u0003\u0002\u0002\u0002\u03ec",
    "\u03ee\u0003\u0002\u0002\u0002\u03ed\u03de\u0003\u0002\u0002\u0002\u03ed",
    "\u03e2\u0003\u0002\u0002\u0002\u03ed\u03e5\u0003\u0002\u0002\u0002\u03ed",
    "\u03e9\u0003\u0002\u0002\u0002\u03ee\u00f4\u0003\u0002\u0002\u0002\u03ef",
    "\u03f0\t\n\u0002\u0002\u03f0\u00f6\u0003\u0002\u0002\u0002\u03f1\u03f2",
    "\t\u000b\u0002\u0002\u03f2\u00f8\u0003\u0002\u0002\u0002\u03f3\u03f4",
    "\u0007n\u0002\u0002\u03f4\u03f8\u0007n\u0002\u0002\u03f5\u03f6\u0007",
    "N\u0002\u0002\u03f6\u03f8\u0007N\u0002\u0002\u03f7\u03f3\u0003\u0002",
    "\u0002\u0002\u03f7\u03f5\u0003\u0002\u0002\u0002\u03f8\u00fa\u0003\u0002",
    "\u0002\u0002\u03f9\u03fc\u0005\u00fd\u007f\u0002\u03fa\u03fc\u0005\u00ff",
    "\u0080\u0002\u03fb\u03f9\u0003\u0002\u0002\u0002\u03fb\u03fa\u0003\u0002",
    "\u0002\u0002\u03fc\u00fc\u0003\u0002\u0002\u0002\u03fd\u03ff\u0005\u0101",
    "\u0081\u0002\u03fe\u0400\u0005\u0103\u0082\u0002\u03ff\u03fe\u0003\u0002",
    "\u0002\u0002\u03ff\u0400\u0003\u0002\u0002\u0002\u0400\u0402\u0003\u0002",
    "\u0002\u0002\u0401\u0403\u0005\u010f\u0088\u0002\u0402\u0401\u0003\u0002",
    "\u0002\u0002\u0402\u0403\u0003\u0002\u0002\u0002\u0403\u040a\u0003\u0002",
    "\u0002\u0002\u0404\u0405\u0005\u0107\u0084\u0002\u0405\u0407\u0005\u0103",
    "\u0082\u0002\u0406\u0408\u0005\u010f\u0088\u0002\u0407\u0406\u0003\u0002",
    "\u0002\u0002\u0407\u0408\u0003\u0002\u0002\u0002\u0408\u040a\u0003\u0002",
    "\u0002\u0002\u0409\u03fd\u0003\u0002\u0002\u0002\u0409\u0404\u0003\u0002",
    "\u0002\u0002\u040a\u00fe\u0003\u0002\u0002\u0002\u040b\u040c\u0005\u00eb",
    "v\u0002\u040c\u040d\u0005\u0109\u0085\u0002\u040d\u040f\u0005\u010b",
    "\u0086\u0002\u040e\u0410\u0005\u010f\u0088\u0002\u040f\u040e\u0003\u0002",
    "\u0002\u0002\u040f\u0410\u0003\u0002\u0002\u0002\u0410\u0418\u0003\u0002",
    "\u0002\u0002\u0411\u0412\u0005\u00ebv\u0002\u0412\u0413\u0005\u010d",
    "\u0087\u0002\u0413\u0415\u0005\u010b\u0086\u0002\u0414\u0416\u0005\u010f",
    "\u0088\u0002\u0415\u0414\u0003\u0002\u0002\u0002\u0415\u0416\u0003\u0002",
    "\u0002\u0002\u0416\u0418\u0003\u0002\u0002\u0002\u0417\u040b\u0003\u0002",
    "\u0002\u0002\u0417\u0411\u0003\u0002\u0002\u0002\u0418\u0100\u0003\u0002",
    "\u0002\u0002\u0419\u041b\u0005\u0107\u0084\u0002\u041a\u0419\u0003\u0002",
    "\u0002\u0002\u041a\u041b\u0003\u0002\u0002\u0002\u041b\u041c\u0003\u0002",
    "\u0002\u0002\u041c\u041d\u00070\u0002\u0002\u041d\u0422\u0005\u0107",
    "\u0084\u0002\u041e\u041f\u0005\u0107\u0084\u0002\u041f\u0420\u00070",
    "\u0002\u0002\u0420\u0422\u0003\u0002\u0002\u0002\u0421\u041a\u0003\u0002",
    "\u0002\u0002\u0421\u041e\u0003\u0002\u0002\u0002\u0422\u0102\u0003\u0002",
    "\u0002\u0002\u0423\u0425\u0007g\u0002\u0002\u0424\u0426\u0005\u0105",
    "\u0083\u0002\u0425\u0424\u0003\u0002\u0002\u0002\u0425\u0426\u0003\u0002",
    "\u0002\u0002\u0426\u0427\u0003\u0002\u0002\u0002\u0427\u042e\u0005\u0107",
    "\u0084\u0002\u0428\u042a\u0007G\u0002\u0002\u0429\u042b\u0005\u0105",
    "\u0083\u0002\u042a\u0429\u0003\u0002\u0002\u0002\u042a\u042b\u0003\u0002",
    "\u0002\u0002\u042b\u042c\u0003\u0002\u0002\u0002\u042c\u042e\u0005\u0107",
    "\u0084\u0002\u042d\u0423\u0003\u0002\u0002\u0002\u042d\u0428\u0003\u0002",
    "\u0002\u0002\u042e\u0104\u0003\u0002\u0002\u0002\u042f\u0430\t\f\u0002",
    "\u0002\u0430\u0106\u0003\u0002\u0002\u0002\u0431\u0433\u0005\u00d9m",
    "\u0002\u0432\u0431\u0003\u0002\u0002\u0002\u0433\u0434\u0003\u0002\u0002",
    "\u0002\u0434\u0432\u0003\u0002\u0002\u0002\u0434\u0435\u0003\u0002\u0002",
    "\u0002\u0435\u0108\u0003\u0002\u0002\u0002\u0436\u0438\u0005\u010d\u0087",
    "\u0002\u0437\u0436\u0003\u0002\u0002\u0002\u0437\u0438\u0003\u0002\u0002",
    "\u0002\u0438\u0439\u0003\u0002\u0002\u0002\u0439\u043a\u00070\u0002",
    "\u0002\u043a\u043f\u0005\u010d\u0087\u0002\u043b\u043c\u0005\u010d\u0087",
    "\u0002\u043c\u043d\u00070\u0002\u0002\u043d\u043f\u0003\u0002\u0002",
    "\u0002\u043e\u0437\u0003\u0002\u0002\u0002\u043e\u043b\u0003\u0002\u0002",
    "\u0002\u043f\u010a\u0003\u0002\u0002\u0002\u0440\u0442\u0007r\u0002",
    "\u0002\u0441\u0443\u0005\u0105\u0083\u0002\u0442\u0441\u0003\u0002\u0002",
    "\u0002\u0442\u0443\u0003\u0002\u0002\u0002\u0443\u0444\u0003\u0002\u0002",
    "\u0002\u0444\u044b\u0005\u0107\u0084\u0002\u0445\u0447\u0007R\u0002",
    "\u0002\u0446\u0448\u0005\u0105\u0083\u0002\u0447\u0446\u0003\u0002\u0002",
    "\u0002\u0447\u0448\u0003\u0002\u0002\u0002\u0448\u0449\u0003\u0002\u0002",
    "\u0002\u0449\u044b\u0005\u0107\u0084\u0002\u044a\u0440\u0003\u0002\u0002",
    "\u0002\u044a\u0445\u0003\u0002\u0002\u0002\u044b\u010c\u0003\u0002\u0002",
    "\u0002\u044c\u044e\u0005\u00f1y\u0002\u044d\u044c\u0003\u0002\u0002",
    "\u0002\u044e\u044f\u0003\u0002\u0002\u0002\u044f\u044d\u0003\u0002\u0002",
    "\u0002\u044f\u0450\u0003\u0002\u0002\u0002\u0450\u010e\u0003\u0002\u0002",
    "\u0002\u0451\u0452\t\r\u0002\u0002\u0452\u0110\u0003\u0002\u0002\u0002",
    "\u0453\u0454\u0007)\u0002\u0002\u0454\u0455\u0005\u0113\u008a\u0002",
    "\u0455\u0456\u0007)\u0002\u0002\u0456\u046a\u0003\u0002\u0002\u0002",
    "\u0457\u0458\u0007N\u0002\u0002\u0458\u0459\u0007)\u0002\u0002\u0459",
    "\u045a\u0003\u0002\u0002\u0002\u045a\u045b\u0005\u0113\u008a\u0002\u045b",
    "\u045c\u0007)\u0002\u0002\u045c\u046a\u0003\u0002\u0002\u0002\u045d",
    "\u045e\u0007w\u0002\u0002\u045e\u045f\u0007)\u0002\u0002\u045f\u0460",
    "\u0003\u0002\u0002\u0002\u0460\u0461\u0005\u0113\u008a\u0002\u0461\u0462",
    "\u0007)\u0002\u0002\u0462\u046a\u0003\u0002\u0002\u0002\u0463\u0464",
    "\u0007W\u0002\u0002\u0464\u0465\u0007)\u0002\u0002\u0465\u0466\u0003",
    "\u0002\u0002\u0002\u0466\u0467\u0005\u0113\u008a\u0002\u0467\u0468\u0007",
    ")\u0002\u0002\u0468\u046a\u0003\u0002\u0002\u0002\u0469\u0453\u0003",
    "\u0002\u0002\u0002\u0469\u0457\u0003\u0002\u0002\u0002\u0469\u045d\u0003",
    "\u0002\u0002\u0002\u0469\u0463\u0003\u0002\u0002\u0002\u046a\u0112\u0003",
    "\u0002\u0002\u0002\u046b\u046d\u0005\u0115\u008b\u0002\u046c\u046b\u0003",
    "\u0002\u0002\u0002\u046d\u046e\u0003\u0002\u0002\u0002\u046e\u046c\u0003",
    "\u0002\u0002\u0002\u046e\u046f\u0003\u0002\u0002\u0002\u046f\u0114\u0003",
    "\u0002\u0002\u0002\u0470\u0473\n\u000e\u0002\u0002\u0471\u0473\u0005",
    "\u0117\u008c\u0002\u0472\u0470\u0003\u0002\u0002\u0002\u0472\u0471\u0003",
    "\u0002\u0002\u0002\u0473\u0116\u0003\u0002\u0002\u0002\u0474\u0479\u0005",
    "\u0119\u008d\u0002\u0475\u0479\u0005\u011b\u008e\u0002\u0476\u0479\u0005",
    "\u011d\u008f\u0002\u0477\u0479\u0005\u00dbn\u0002\u0478\u0474\u0003",
    "\u0002\u0002\u0002\u0478\u0475\u0003\u0002\u0002\u0002\u0478\u0476\u0003",
    "\u0002\u0002\u0002\u0478\u0477\u0003\u0002\u0002\u0002\u0479\u0118\u0003",
    "\u0002\u0002\u0002\u047a\u047b\u0007^\u0002\u0002\u047b\u047c\t\u000f",
    "\u0002\u0002\u047c\u011a\u0003\u0002\u0002\u0002\u047d\u047e\u0007^",
    "\u0002\u0002\u047e\u0489\u0005\u00efx\u0002\u047f\u0480\u0007^\u0002",
    "\u0002\u0480\u0481\u0005\u00efx\u0002\u0481\u0482\u0005\u00efx\u0002",
    "\u0482\u0489\u0003\u0002\u0002\u0002\u0483\u0484\u0007^\u0002\u0002",
    "\u0484\u0485\u0005\u00efx\u0002\u0485\u0486\u0005\u00efx\u0002\u0486",
    "\u0487\u0005\u00efx\u0002\u0487\u0489\u0003\u0002\u0002\u0002\u0488",
    "\u047d\u0003\u0002\u0002\u0002\u0488\u047f\u0003\u0002\u0002\u0002\u0488",
    "\u0483\u0003\u0002\u0002\u0002\u0489\u011c\u0003\u0002\u0002\u0002\u048a",
    "\u048b\u0007^\u0002\u0002\u048b\u048c\u0007z\u0002\u0002\u048c\u048e",
    "\u0003\u0002\u0002\u0002\u048d\u048f\u0005\u00f1y\u0002\u048e\u048d",
    "\u0003\u0002\u0002\u0002\u048f\u0490\u0003\u0002\u0002\u0002\u0490\u048e",
    "\u0003\u0002\u0002\u0002\u0490\u0491\u0003\u0002\u0002\u0002\u0491\u011e",
    "\u0003\u0002\u0002\u0002\u0492\u0494\u0005\u0121\u0091\u0002\u0493\u0492",
    "\u0003\u0002\u0002\u0002\u0493\u0494\u0003\u0002\u0002\u0002\u0494\u0495",
    "\u0003\u0002\u0002\u0002\u0495\u0497\u0007$\u0002\u0002\u0496\u0498",
    "\u0005\u0123\u0092\u0002\u0497\u0496\u0003\u0002\u0002\u0002\u0497\u0498",
    "\u0003\u0002\u0002\u0002\u0498\u0499\u0003\u0002\u0002\u0002\u0499\u049a",
    "\u0007$\u0002\u0002\u049a\u0120\u0003\u0002\u0002\u0002\u049b\u049c",
    "\u0007w\u0002\u0002\u049c\u049f\u0007:\u0002\u0002\u049d\u049f\t\u0010",
    "\u0002\u0002\u049e\u049b\u0003\u0002\u0002\u0002\u049e\u049d\u0003\u0002",
    "\u0002\u0002\u049f\u0122\u0003\u0002\u0002\u0002\u04a0\u04a2\u0005\u0125",
    "\u0093\u0002\u04a1\u04a0\u0003\u0002\u0002\u0002\u04a2\u04a3\u0003\u0002",
    "\u0002\u0002\u04a3\u04a1\u0003\u0002\u0002\u0002\u04a3\u04a4\u0003\u0002",
    "\u0002\u0002\u04a4\u0124\u0003\u0002\u0002\u0002\u04a5\u04ad\n\u0011",
    "\u0002\u0002\u04a6\u04ad\u0005\u0117\u008c\u0002\u04a7\u04a8\u0007^",
    "\u0002\u0002\u04a8\u04ad\u0007\f\u0002\u0002\u04a9\u04aa\u0007^\u0002",
    "\u0002\u04aa\u04ab\u0007\u000f\u0002\u0002\u04ab\u04ad\u0007\f\u0002",
    "\u0002\u04ac\u04a5\u0003\u0002\u0002\u0002\u04ac\u04a6\u0003\u0002\u0002",
    "\u0002\u04ac\u04a7\u0003\u0002\u0002\u0002\u04ac\u04a9\u0003\u0002\u0002",
    "\u0002\u04ad\u0126\u0003\u0002\u0002\u0002\u04ae\u04b0\u0007%\u0002",
    "\u0002\u04af\u04b1\u0005\u0131\u0099\u0002\u04b0\u04af\u0003\u0002\u0002",
    "\u0002\u04b0\u04b1\u0003\u0002\u0002\u0002\u04b1\u04b2\u0003\u0002\u0002",
    "\u0002\u04b2\u04b3\u0007f\u0002\u0002\u04b3\u04b4\u0007g\u0002\u0002",
    "\u04b4\u04b5\u0007h\u0002\u0002\u04b5\u04b6\u0007k\u0002\u0002\u04b6",
    "\u04b7\u0007p\u0002\u0002\u04b7\u04b8\u0007g\u0002\u0002\u04b8\u04bc",
    "\u0003\u0002\u0002\u0002\u04b9\u04bb\n\u0012\u0002\u0002\u04ba\u04b9",
    "\u0003\u0002\u0002\u0002\u04bb\u04be\u0003\u0002\u0002\u0002\u04bc\u04ba",
    "\u0003\u0002\u0002\u0002\u04bc\u04bd\u0003\u0002\u0002\u0002\u04bd\u04bf",
    "\u0003\u0002\u0002\u0002\u04be\u04bc\u0003\u0002\u0002\u0002\u04bf\u04c0",
    "\b\u0094\u0002\u0002\u04c0\u0128\u0003\u0002\u0002\u0002\u04c1\u04c2",
    "\u0007c\u0002\u0002\u04c2\u04c3\u0007u\u0002\u0002\u04c3\u04c4\u0007",
    "o\u0002\u0002\u04c4\u04c8\u0003\u0002\u0002\u0002\u04c5\u04c7\n\u0013",
    "\u0002\u0002\u04c6\u04c5\u0003\u0002\u0002\u0002\u04c7\u04ca\u0003\u0002",
    "\u0002\u0002\u04c8\u04c6\u0003\u0002\u0002\u0002\u04c8\u04c9\u0003\u0002",
    "\u0002\u0002\u04c9\u04cb\u0003\u0002\u0002\u0002\u04ca\u04c8\u0003\u0002",
    "\u0002\u0002\u04cb\u04cf\u0007}\u0002\u0002\u04cc\u04ce\n\u0014\u0002",
    "\u0002\u04cd\u04cc\u0003\u0002\u0002\u0002\u04ce\u04d1\u0003\u0002\u0002",
    "\u0002\u04cf\u04cd\u0003\u0002\u0002\u0002\u04cf\u04d0\u0003\u0002\u0002",
    "\u0002\u04d0\u04d2\u0003\u0002\u0002\u0002\u04d1\u04cf\u0003\u0002\u0002",
    "\u0002\u04d2\u04d3\u0007\u007f\u0002\u0002\u04d3\u04d4\u0003\u0002\u0002",
    "\u0002\u04d4\u04d5\b\u0095\u0002\u0002\u04d5\u012a\u0003\u0002\u0002",
    "\u0002\u04d6\u04d7\u0007%\u0002\u0002\u04d7\u04d8\u0007n\u0002\u0002",
    "\u04d8\u04d9\u0007k\u0002\u0002\u04d9\u04da\u0007p\u0002\u0002\u04da",
    "\u04db\u0007g\u0002\u0002\u04db\u04df\u0003\u0002\u0002\u0002\u04dc",
    "\u04de\u0005\u0131\u0099\u0002\u04dd\u04dc\u0003\u0002\u0002\u0002\u04de",
    "\u04e1\u0003\u0002\u0002\u0002\u04df\u04dd\u0003\u0002\u0002\u0002\u04df",
    "\u04e0\u0003\u0002\u0002\u0002\u04e0\u04e5\u0003\u0002\u0002\u0002\u04e1",
    "\u04df\u0003\u0002\u0002\u0002\u04e2\u04e4\n\u0015\u0002\u0002\u04e3",
    "\u04e2\u0003\u0002\u0002\u0002\u04e4\u04e7\u0003\u0002\u0002\u0002\u04e5",
    "\u04e3\u0003\u0002\u0002\u0002\u04e5\u04e6\u0003\u0002\u0002\u0002\u04e6",
    "\u04e8\u0003\u0002\u0002\u0002\u04e7\u04e5\u0003\u0002\u0002\u0002\u04e8",
    "\u04e9\b\u0096\u0002\u0002\u04e9\u012c\u0003\u0002\u0002\u0002\u04ea",
    "\u04ec\u0007%\u0002\u0002\u04eb\u04ed\u0005\u0131\u0099\u0002\u04ec",
    "\u04eb\u0003\u0002\u0002\u0002\u04ec\u04ed\u0003\u0002\u0002\u0002\u04ed",
    "\u04ee\u0003\u0002\u0002\u0002\u04ee\u04f0\u0005\u00e5s\u0002\u04ef",
    "\u04f1\u0005\u0131\u0099\u0002\u04f0\u04ef\u0003\u0002\u0002\u0002\u04f0",
    "\u04f1\u0003\u0002\u0002\u0002\u04f1\u04f2\u0003\u0002\u0002\u0002\u04f2",
    "\u04f6\u0005\u011f\u0090\u0002\u04f3\u04f5\n\u0015\u0002\u0002\u04f4",
    "\u04f3\u0003\u0002\u0002\u0002\u04f5\u04f8\u0003\u0002\u0002\u0002\u04f6",
    "\u04f4\u0003\u0002\u0002\u0002\u04f6\u04f7\u0003\u0002\u0002\u0002\u04f7",
    "\u04f9\u0003\u0002\u0002\u0002\u04f8\u04f6\u0003\u0002\u0002\u0002\u04f9",
    "\u04fa\b\u0097\u0002\u0002\u04fa\u012e\u0003\u0002\u0002\u0002\u04fb",
    "\u04fd\u0007%\u0002\u0002\u04fc\u04fe\u0005\u0131\u0099\u0002\u04fd",
    "\u04fc\u0003\u0002\u0002\u0002\u04fd\u04fe\u0003\u0002\u0002\u0002\u04fe",
    "\u04ff\u0003\u0002\u0002\u0002\u04ff\u0500\u0007r\u0002\u0002\u0500",
    "\u0501\u0007t\u0002\u0002\u0501\u0502\u0007c\u0002\u0002\u0502\u0503",
    "\u0007i\u0002\u0002\u0503\u0504\u0007o\u0002\u0002\u0504\u0505\u0007",
    "c\u0002\u0002\u0505\u0506\u0003\u0002\u0002\u0002\u0506\u050a\u0005",
    "\u0131\u0099\u0002\u0507\u0509\n\u0015\u0002\u0002\u0508\u0507\u0003",
    "\u0002\u0002\u0002\u0509\u050c\u0003\u0002\u0002\u0002\u050a\u0508\u0003",
    "\u0002\u0002\u0002\u050a\u050b\u0003\u0002\u0002\u0002\u050b\u050d\u0003",
    "\u0002\u0002\u0002\u050c\u050a\u0003\u0002\u0002\u0002\u050d\u050e\b",
    "\u0098\u0002\u0002\u050e\u0130\u0003\u0002\u0002\u0002\u050f\u0511\t",
    "\u0016\u0002\u0002\u0510\u050f\u0003\u0002\u0002\u0002\u0511\u0512\u0003",
    "\u0002\u0002\u0002\u0512\u0510\u0003\u0002\u0002\u0002\u0512\u0513\u0003",
    "\u0002\u0002\u0002\u0513\u0514\u0003\u0002\u0002\u0002\u0514\u0515\b",
    "\u0099\u0002\u0002\u0515\u0132\u0003\u0002\u0002\u0002\u0516\u0518\u0007",
    "\u000f\u0002\u0002\u0517\u0519\u0007\f\u0002\u0002\u0518\u0517\u0003",
    "\u0002\u0002\u0002\u0518\u0519\u0003\u0002\u0002\u0002\u0519\u051c\u0003",
    "\u0002\u0002\u0002\u051a\u051c\u0007\f\u0002\u0002\u051b\u0516\u0003",
    "\u0002\u0002\u0002\u051b\u051a\u0003\u0002\u0002\u0002\u051c\u051d\u0003",
    "\u0002\u0002\u0002\u051d\u051e\b\u009a\u0002\u0002\u051e\u0134\u0003",
    "\u0002\u0002\u0002\u051f\u0520\u00071\u0002\u0002\u0520\u0521\u0007",
    ",\u0002\u0002\u0521\u0525\u0003\u0002\u0002\u0002\u0522\u0524\u000b",
    "\u0002\u0002\u0002\u0523\u0522\u0003\u0002\u0002\u0002\u0524\u0527\u0003",
    "\u0002\u0002\u0002\u0525\u0526\u0003\u0002\u0002\u0002\u0525\u0523\u0003",
    "\u0002\u0002\u0002\u0526\u0528\u0003\u0002\u0002\u0002\u0527\u0525\u0003",
    "\u0002\u0002\u0002\u0528\u0529\u0007,\u0002\u0002\u0529\u052a\u0007",
    "1\u0002\u0002\u052a\u052b\u0003\u0002\u0002\u0002\u052b\u052c\b\u009b",
    "\u0002\u0002\u052c\u0136\u0003\u0002\u0002\u0002\u052d\u052e\u00071",
    "\u0002\u0002\u052e\u052f\u00071\u0002\u0002\u052f\u0533\u0003\u0002",
    "\u0002\u0002\u0530\u0532\n\u0015\u0002\u0002\u0531\u0530\u0003\u0002",
    "\u0002\u0002\u0532\u0535\u0003\u0002\u0002\u0002\u0533\u0531\u0003\u0002",
    "\u0002\u0002\u0533\u0534\u0003\u0002\u0002\u0002\u0534\u0536\u0003\u0002",
    "\u0002\u0002\u0535\u0533\u0003\u0002\u0002\u0002\u0536\u0537\b\u009c",
    "\u0002\u0002\u0537\u0138\u0003\u0002\u0002\u0002D\u0002\u0388\u038a",
    "\u038f\u039f\u03a9\u03ad\u03b1\u03b5\u03b8\u03bf\u03c5\u03cc\u03d3\u03e0",
    "\u03e7\u03eb\u03ed\u03f7\u03fb\u03ff\u0402\u0407\u0409\u040f\u0415\u0417",
    "\u041a\u0421\u0425\u042a\u042d\u0434\u0437\u043e\u0442\u0447\u044a\u044f",
    "\u0469\u046e\u0472\u0478\u0488\u0490\u0493\u0497\u049e\u04a3\u04ac\u04b0",
    "\u04bc\u04c8\u04cf\u04df\u04e5\u04ec\u04f0\u04f6\u04fd\u050a\u0512\u0518",
    "\u051b\u0525\u0533\u0003\b\u0002\u0002"].join("");


var atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

var decisionsToDFA = atn.decisionToState.map( function(ds, index) { return new antlr4.dfa.DFA(ds, index); });

function CLexer(input) {
	antlr4.Lexer.call(this, input);
    this._interp = new antlr4.atn.LexerATNSimulator(this, atn, decisionsToDFA, new antlr4.PredictionContextCache());
    return this;
}

CLexer.prototype = Object.create(antlr4.Lexer.prototype);
CLexer.prototype.constructor = CLexer;

Object.defineProperty(CLexer.prototype, "atn", {
        get : function() {
                return atn;
        }
});

CLexer.EOF = antlr4.Token.EOF;
CLexer.T__0 = 1;
CLexer.T__1 = 2;
CLexer.T__2 = 3;
CLexer.T__3 = 4;
CLexer.T__4 = 5;
CLexer.T__5 = 6;
CLexer.T__6 = 7;
CLexer.T__7 = 8;
CLexer.T__8 = 9;
CLexer.T__9 = 10;
CLexer.T__10 = 11;
CLexer.T__11 = 12;
CLexer.T__12 = 13;
CLexer.T__13 = 14;
CLexer.Auto = 15;
CLexer.Break = 16;
CLexer.Case = 17;
CLexer.Char = 18;
CLexer.Const = 19;
CLexer.Continue = 20;
CLexer.Default = 21;
CLexer.Do = 22;
CLexer.Double = 23;
CLexer.Else = 24;
CLexer.Enum = 25;
CLexer.Extern = 26;
CLexer.Float = 27;
CLexer.For = 28;
CLexer.Goto = 29;
CLexer.If = 30;
CLexer.Inline = 31;
CLexer.Int = 32;
CLexer.Long = 33;
CLexer.Register = 34;
CLexer.Restrict = 35;
CLexer.Return = 36;
CLexer.Short = 37;
CLexer.Signed = 38;
CLexer.Sizeof = 39;
CLexer.Static = 40;
CLexer.Struct = 41;
CLexer.Switch = 42;
CLexer.Typedef = 43;
CLexer.Union = 44;
CLexer.Unsigned = 45;
CLexer.Void = 46;
CLexer.Volatile = 47;
CLexer.While = 48;
CLexer.Alignas = 49;
CLexer.Alignof = 50;
CLexer.Atomic = 51;
CLexer.Bool = 52;
CLexer.Complex = 53;
CLexer.Generic = 54;
CLexer.Imaginary = 55;
CLexer.Noreturn = 56;
CLexer.StaticAssert = 57;
CLexer.ThreadLocal = 58;
CLexer.LeftParen = 59;
CLexer.RightParen = 60;
CLexer.LeftBracket = 61;
CLexer.RightBracket = 62;
CLexer.LeftBrace = 63;
CLexer.RightBrace = 64;
CLexer.Less = 65;
CLexer.LessEqual = 66;
CLexer.Greater = 67;
CLexer.GreaterEqual = 68;
CLexer.LeftShift = 69;
CLexer.RightShift = 70;
CLexer.Plus = 71;
CLexer.PlusPlus = 72;
CLexer.Minus = 73;
CLexer.MinusMinus = 74;
CLexer.Star = 75;
CLexer.Div = 76;
CLexer.Mod = 77;
CLexer.And = 78;
CLexer.Or = 79;
CLexer.AndAnd = 80;
CLexer.OrOr = 81;
CLexer.Caret = 82;
CLexer.Not = 83;
CLexer.Tilde = 84;
CLexer.Question = 85;
CLexer.Colon = 86;
CLexer.Semi = 87;
CLexer.Comma = 88;
CLexer.Assign = 89;
CLexer.StarAssign = 90;
CLexer.DivAssign = 91;
CLexer.ModAssign = 92;
CLexer.PlusAssign = 93;
CLexer.MinusAssign = 94;
CLexer.LeftShiftAssign = 95;
CLexer.RightShiftAssign = 96;
CLexer.AndAssign = 97;
CLexer.XorAssign = 98;
CLexer.OrAssign = 99;
CLexer.Equal = 100;
CLexer.NotEqual = 101;
CLexer.Arrow = 102;
CLexer.Dot = 103;
CLexer.Ellipsis = 104;
CLexer.Identifier = 105;
CLexer.Constant = 106;
CLexer.DigitSequence = 107;
CLexer.StringLiteral = 108;
CLexer.ComplexDefine = 109;
CLexer.AsmBlock = 110;
CLexer.LineAfterPreprocessing = 111;
CLexer.LineDirective = 112;
CLexer.PragmaDirective = 113;
CLexer.Whitespace = 114;
CLexer.Newline = 115;
CLexer.BlockComment = 116;
CLexer.LineComment = 117;

CLexer.prototype.channelNames = [ "DEFAULT_TOKEN_CHANNEL", "HIDDEN" ];

CLexer.prototype.modeNames = [ "DEFAULT_MODE" ];

CLexer.prototype.literalNames = [ null, "'__extension__'", "'__builtin_va_arg'", 
                                  "'__builtin_offsetof'", "'__m128'", "'__m128d'", 
                                  "'__m128i'", "'__typeof__'", "'__inline__'", 
                                  "'__stdcall'", "'__declspec'", "'__asm'", 
                                  "'__attribute__'", "'__asm__'", "'__volatile__'", 
                                  "'auto'", "'break'", "'case'", "'char'", 
                                  "'const'", "'continue'", "'default'", 
                                  "'do'", "'double'", "'else'", "'enum'", 
                                  "'extern'", "'float'", "'for'", "'goto'", 
                                  "'if'", "'inline'", "'int'", "'long'", 
                                  "'register'", "'restrict'", "'return'", 
                                  "'short'", "'signed'", "'sizeof'", "'static'", 
                                  "'struct'", "'switch'", "'typedef'", "'union'", 
                                  "'unsigned'", "'void'", "'volatile'", 
                                  "'while'", "'_Alignas'", "'_Alignof'", 
                                  "'_Atomic'", "'_Bool'", "'_Complex'", 
                                  "'_Generic'", "'_Imaginary'", "'_Noreturn'", 
                                  "'_Static_assert'", "'_Thread_local'", 
                                  "'('", "')'", "'['", "']'", "'{'", "'}'", 
                                  "'<'", "'<='", "'>'", "'>='", "'<<'", 
                                  "'>>'", "'+'", "'++'", "'-'", "'--'", 
                                  "'*'", "'/'", "'%'", "'&'", "'|'", "'&&'", 
                                  "'||'", "'^'", "'!'", "'~'", "'?'", "':'", 
                                  "';'", "','", "'='", "'*='", "'/='", "'%='", 
                                  "'+='", "'-='", "'<<='", "'>>='", "'&='", 
                                  "'^='", "'|='", "'=='", "'!='", "'->'", 
                                  "'.'", "'...'" ];

CLexer.prototype.symbolicNames = [ null, null, null, null, null, null, null, 
                                   null, null, null, null, null, null, null, 
                                   null, "Auto", "Break", "Case", "Char", 
                                   "Const", "Continue", "Default", "Do", 
                                   "Double", "Else", "Enum", "Extern", "Float", 
                                   "For", "Goto", "If", "Inline", "Int", 
                                   "Long", "Register", "Restrict", "Return", 
                                   "Short", "Signed", "Sizeof", "Static", 
                                   "Struct", "Switch", "Typedef", "Union", 
                                   "Unsigned", "Void", "Volatile", "While", 
                                   "Alignas", "Alignof", "Atomic", "Bool", 
                                   "Complex", "Generic", "Imaginary", "Noreturn", 
                                   "StaticAssert", "ThreadLocal", "LeftParen", 
                                   "RightParen", "LeftBracket", "RightBracket", 
                                   "LeftBrace", "RightBrace", "Less", "LessEqual", 
                                   "Greater", "GreaterEqual", "LeftShift", 
                                   "RightShift", "Plus", "PlusPlus", "Minus", 
                                   "MinusMinus", "Star", "Div", "Mod", "And", 
                                   "Or", "AndAnd", "OrOr", "Caret", "Not", 
                                   "Tilde", "Question", "Colon", "Semi", 
                                   "Comma", "Assign", "StarAssign", "DivAssign", 
                                   "ModAssign", "PlusAssign", "MinusAssign", 
                                   "LeftShiftAssign", "RightShiftAssign", 
                                   "AndAssign", "XorAssign", "OrAssign", 
                                   "Equal", "NotEqual", "Arrow", "Dot", 
                                   "Ellipsis", "Identifier", "Constant", 
                                   "DigitSequence", "StringLiteral", "ComplexDefine", 
                                   "AsmBlock", "LineAfterPreprocessing", 
                                   "LineDirective", "PragmaDirective", "Whitespace", 
                                   "Newline", "BlockComment", "LineComment" ];

CLexer.prototype.ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", 
                               "T__6", "T__7", "T__8", "T__9", "T__10", 
                               "T__11", "T__12", "T__13", "Auto", "Break", 
                               "Case", "Char", "Const", "Continue", "Default", 
                               "Do", "Double", "Else", "Enum", "Extern", 
                               "Float", "For", "Goto", "If", "Inline", "Int", 
                               "Long", "Register", "Restrict", "Return", 
                               "Short", "Signed", "Sizeof", "Static", "Struct", 
                               "Switch", "Typedef", "Union", "Unsigned", 
                               "Void", "Volatile", "While", "Alignas", "Alignof", 
                               "Atomic", "Bool", "Complex", "Generic", "Imaginary", 
                               "Noreturn", "StaticAssert", "ThreadLocal", 
                               "LeftParen", "RightParen", "LeftBracket", 
                               "RightBracket", "LeftBrace", "RightBrace", 
                               "Less", "LessEqual", "Greater", "GreaterEqual", 
                               "LeftShift", "RightShift", "Plus", "PlusPlus", 
                               "Minus", "MinusMinus", "Star", "Div", "Mod", 
                               "And", "Or", "AndAnd", "OrOr", "Caret", "Not", 
                               "Tilde", "Question", "Colon", "Semi", "Comma", 
                               "Assign", "StarAssign", "DivAssign", "ModAssign", 
                               "PlusAssign", "MinusAssign", "LeftShiftAssign", 
                               "RightShiftAssign", "AndAssign", "XorAssign", 
                               "OrAssign", "Equal", "NotEqual", "Arrow", 
                               "Dot", "Ellipsis", "Identifier", "IdentifierNondigit", 
                               "Nondigit", "Digit", "UniversalCharacterName", 
                               "HexQuad", "Constant", "IntegerConstant", 
                               "BinaryConstant", "DecimalConstant", "OctalConstant", 
                               "HexadecimalConstant", "HexadecimalPrefix", 
                               "NonzeroDigit", "OctalDigit", "HexadecimalDigit", 
                               "IntegerSuffix", "UnsignedSuffix", "LongSuffix", 
                               "LongLongSuffix", "FloatingConstant", "DecimalFloatingConstant", 
                               "HexadecimalFloatingConstant", "FractionalConstant", 
                               "ExponentPart", "Sign", "DigitSequence", 
                               "HexadecimalFractionalConstant", "BinaryExponentPart", 
                               "HexadecimalDigitSequence", "FloatingSuffix", 
                               "CharacterConstant", "CCharSequence", "CChar", 
                               "EscapeSequence", "SimpleEscapeSequence", 
                               "OctalEscapeSequence", "HexadecimalEscapeSequence", 
                               "StringLiteral", "EncodingPrefix", "SCharSequence", 
                               "SChar", "ComplexDefine", "AsmBlock", "LineAfterPreprocessing", 
                               "LineDirective", "PragmaDirective", "Whitespace", 
                               "Newline", "BlockComment", "LineComment" ];

CLexer.prototype.grammarFileName = "C.g4";



exports.CLexer = CLexer;



/***/ }),
/* 140 */
/***/ (function(module, exports, __webpack_require__) {

// Generated from C:\Users\RYOSUKE\eclipse\java-oxygen\eclipse\..\..\..\eclipse-workspace\net.unicoen\UniMapperGenerator\src-gen\C.g4 by ANTLR 4.7.1
// jshint ignore: start
var antlr4 = __webpack_require__(16);
var CVisitor = __webpack_require__(130).CVisitor;

var grammarFileName = "C.g4";

var serializedATN = ["\u0003\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964",
    "\u0003w\u0508\u0004\u0002\t\u0002\u0004\u0003\t\u0003\u0004\u0004\t",
    "\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\u0007\t\u0007\u0004",
    "\b\t\b\u0004\t\t\t\u0004\n\t\n\u0004\u000b\t\u000b\u0004\f\t\f\u0004",
    "\r\t\r\u0004\u000e\t\u000e\u0004\u000f\t\u000f\u0004\u0010\t\u0010\u0004",
    "\u0011\t\u0011\u0004\u0012\t\u0012\u0004\u0013\t\u0013\u0004\u0014\t",
    "\u0014\u0004\u0015\t\u0015\u0004\u0016\t\u0016\u0004\u0017\t\u0017\u0004",
    "\u0018\t\u0018\u0004\u0019\t\u0019\u0004\u001a\t\u001a\u0004\u001b\t",
    "\u001b\u0004\u001c\t\u001c\u0004\u001d\t\u001d\u0004\u001e\t\u001e\u0004",
    "\u001f\t\u001f\u0004 \t \u0004!\t!\u0004\"\t\"\u0004#\t#\u0004$\t$\u0004",
    "%\t%\u0004&\t&\u0004\'\t\'\u0004(\t(\u0004)\t)\u0004*\t*\u0004+\t+\u0004",
    ",\t,\u0004-\t-\u0004.\t.\u0004/\t/\u00040\t0\u00041\t1\u00042\t2\u0004",
    "3\t3\u00044\t4\u00045\t5\u00046\t6\u00047\t7\u00048\t8\u00049\t9\u0004",
    ":\t:\u0004;\t;\u0004<\t<\u0004=\t=\u0004>\t>\u0004?\t?\u0004@\t@\u0004",
    "A\tA\u0004B\tB\u0004C\tC\u0004D\tD\u0004E\tE\u0004F\tF\u0004G\tG\u0004",
    "H\tH\u0004I\tI\u0004J\tJ\u0004K\tK\u0004L\tL\u0004M\tM\u0004N\tN\u0004",
    "O\tO\u0004P\tP\u0004Q\tQ\u0004R\tR\u0004S\tS\u0004T\tT\u0004U\tU\u0004",
    "V\tV\u0004W\tW\u0004X\tX\u0004Y\tY\u0003\u0002\u0003\u0002\u0003\u0002",
    "\u0006\u0002\u00b6\n\u0002\r\u0002\u000e\u0002\u00b7\u0003\u0002\u0003",
    "\u0002\u0003\u0002\u0003\u0002\u0003\u0002\u0003\u0002\u0005\u0002\u00c0",
    "\n\u0002\u0003\u0002\u0003\u0002\u0003\u0002\u0003\u0002\u0003\u0002",
    "\u0003\u0002\u0003\u0002\u0003\u0002\u0003\u0002\u0003\u0002\u0003\u0002",
    "\u0003\u0002\u0003\u0002\u0003\u0002\u0003\u0002\u0003\u0002\u0003\u0002",
    "\u0003\u0002\u0005\u0002\u00d4\n\u0002\u0003\u0003\u0003\u0003\u0003",
    "\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0004\u0003",
    "\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0007\u0004\u00e3",
    "\n\u0004\f\u0004\u000e\u0004\u00e6\u000b\u0004\u0003\u0005\u0003\u0005",
    "\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0005\u0005",
    "\u00ef\n\u0005\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003",
    "\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003",
    "\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003",
    "\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003",
    "\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003",
    "\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0005",
    "\u0006\u0113\n\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006",
    "\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0005\u0006\u011d\n",
    "\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003",
    "\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0007",
    "\u0006\u012a\n\u0006\f\u0006\u000e\u0006\u012d\u000b\u0006\u0003\u0007",
    "\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0007\u0007",
    "\u0135\n\u0007\f\u0007\u000e\u0007\u0138\u000b\u0007\u0003\b\u0003\b",
    "\u0003\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003",
    "\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003",
    "\b\u0003\b\u0003\b\u0005\b\u0150\n\b\u0003\t\u0003\t\u0003\n\u0003\n",
    "\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003",
    "\n\u0003\n\u0003\n\u0005\n\u0161\n\n\u0003\u000b\u0003\u000b\u0003\u000b",
    "\u0003\u000b\u0003\u000b\u0003\u000b\u0003\u000b\u0003\u000b\u0003\u000b",
    "\u0003\u000b\u0003\u000b\u0003\u000b\u0007\u000b\u016f\n\u000b\f\u000b",
    "\u000e\u000b\u0172\u000b\u000b\u0003\f\u0003\f\u0003\f\u0003\f\u0003",
    "\f\u0003\f\u0003\f\u0003\f\u0003\f\u0007\f\u017d\n\f\f\f\u000e\f\u0180",
    "\u000b\f\u0003\r\u0003\r\u0003\r\u0003\r\u0003\r\u0003\r\u0003\r\u0003",
    "\r\u0003\r\u0007\r\u018b\n\r\f\r\u000e\r\u018e\u000b\r\u0003\u000e\u0003",
    "\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003",
    "\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003",
    "\u000e\u0003\u000e\u0007\u000e\u019f\n\u000e\f\u000e\u000e\u000e\u01a2",
    "\u000b\u000e\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f",
    "\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0007\u000f\u01ad\n",
    "\u000f\f\u000f\u000e\u000f\u01b0\u000b\u000f\u0003\u0010\u0003\u0010",
    "\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0007\u0010\u01b8\n",
    "\u0010\f\u0010\u000e\u0010\u01bb\u000b\u0010\u0003\u0011\u0003\u0011",
    "\u0003\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0007\u0011\u01c3\n",
    "\u0011\f\u0011\u000e\u0011\u01c6\u000b\u0011\u0003\u0012\u0003\u0012",
    "\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0007\u0012\u01ce\n",
    "\u0012\f\u0012\u000e\u0012\u01d1\u000b\u0012\u0003\u0013\u0003\u0013",
    "\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0007\u0013\u01d9\n",
    "\u0013\f\u0013\u000e\u0013\u01dc\u000b\u0013\u0003\u0014\u0003\u0014",
    "\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0007\u0014\u01e4\n",
    "\u0014\f\u0014\u000e\u0014\u01e7\u000b\u0014\u0003\u0015\u0003\u0015",
    "\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0005\u0015\u01ef\n",
    "\u0015\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003",
    "\u0016\u0005\u0016\u01f7\n\u0016\u0003\u0017\u0003\u0017\u0003\u0018",
    "\u0003\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0007\u0018",
    "\u0201\n\u0018\f\u0018\u000e\u0018\u0204\u000b\u0018\u0003\u0019\u0003",
    "\u0019\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003",
    "\u001a\u0003\u001a\u0003\u001a\u0005\u001a\u0210\n\u001a\u0003\u001b",
    "\u0006\u001b\u0213\n\u001b\r\u001b\u000e\u001b\u0214\u0003\u001c\u0006",
    "\u001c\u0218\n\u001c\r\u001c\u000e\u001c\u0219\u0003\u001d\u0003\u001d",
    "\u0003\u001d\u0003\u001d\u0003\u001d\u0005\u001d\u0221\n\u001d\u0003",
    "\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0007",
    "\u001e\u0229\n\u001e\f\u001e\u000e\u001e\u022c\u000b\u001e\u0003\u001f",
    "\u0003\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0005\u001f\u0233\n",
    "\u001f\u0003 \u0003 \u0003!\u0003!\u0003!\u0003!\u0003!\u0003!\u0003",
    "!\u0003!\u0003!\u0003!\u0003!\u0003!\u0003!\u0003!\u0005!\u0245\n!\u0003",
    "\"\u0003\"\u0005\"\u0249\n\"\u0003\"\u0003\"\u0003\"\u0003\"\u0003\"",
    "\u0003\"\u0003\"\u0005\"\u0252\n\"\u0003#\u0003#\u0003$\u0003$\u0003",
    "$\u0003$\u0003$\u0007$\u025b\n$\f$\u000e$\u025e\u000b$\u0003%\u0003",
    "%\u0005%\u0262\n%\u0003%\u0003%\u0003%\u0005%\u0267\n%\u0003&\u0003",
    "&\u0005&\u026b\n&\u0003&\u0003&\u0005&\u026f\n&\u0005&\u0271\n&\u0003",
    "\'\u0003\'\u0003\'\u0003\'\u0003\'\u0003\'\u0007\'\u0279\n\'\f\'\u000e",
    "\'\u027c\u000b\'\u0003(\u0003(\u0005(\u0280\n(\u0003(\u0003(\u0005(",
    "\u0284\n(\u0003)\u0003)\u0005)\u0288\n)\u0003)\u0003)\u0003)\u0003)",
    "\u0003)\u0003)\u0005)\u0290\n)\u0003)\u0003)\u0003)\u0003)\u0003)\u0003",
    ")\u0003)\u0005)\u0299\n)\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0007",
    "*\u02a1\n*\f*\u000e*\u02a4\u000b*\u0003+\u0003+\u0003+\u0003+\u0003",
    "+\u0005+\u02ab\n+\u0003,\u0003,\u0003-\u0003-\u0003-\u0003-\u0003-\u0003",
    ".\u0003.\u0003/\u0003/\u0003/\u0003/\u0003/\u0003/\u0005/\u02bc\n/\u0003",
    "0\u00030\u00030\u00030\u00030\u00030\u00030\u00030\u00030\u00030\u0005",
    "0\u02c8\n0\u00031\u00051\u02cb\n1\u00031\u00031\u00071\u02cf\n1\f1\u000e",
    "1\u02d2\u000b1\u00032\u00032\u00032\u00032\u00032\u00032\u00032\u0003",
    "2\u00032\u00052\u02dd\n2\u00032\u00032\u00032\u00052\u02e2\n2\u0003",
    "2\u00052\u02e5\n2\u00032\u00032\u00032\u00032\u00032\u00052\u02ec\n",
    "2\u00032\u00032\u00032\u00032\u00032\u00032\u00032\u00032\u00032\u0003",
    "2\u00032\u00032\u00032\u00052\u02fb\n2\u00032\u00032\u00032\u00032\u0003",
    "2\u00032\u00032\u00032\u00032\u00032\u00052\u0307\n2\u00032\u00072\u030a",
    "\n2\f2\u000e2\u030d\u000b2\u00033\u00033\u00033\u00063\u0312\n3\r3\u000e",
    "3\u0313\u00033\u00033\u00053\u0318\n3\u00034\u00034\u00034\u00034\u0003",
    "4\u00034\u00034\u00035\u00035\u00035\u00075\u0324\n5\f5\u000e5\u0327",
    "\u000b5\u00035\u00055\u032a\n5\u00036\u00036\u00036\u00056\u032f\n6",
    "\u00036\u00056\u0332\n6\u00036\u00056\u0335\n6\u00037\u00037\u00037",
    "\u00037\u00037\u00077\u033c\n7\f7\u000e7\u033f\u000b7\u00038\u00038",
    "\u00058\u0343\n8\u00038\u00038\u00058\u0347\n8\u00038\u00038\u00038",
    "\u00058\u034c\n8\u00038\u00038\u00058\u0350\n8\u00038\u00058\u0353\n",
    "8\u00039\u00039\u00039\u00039\u00039\u00079\u035a\n9\f9\u000e9\u035d",
    "\u000b9\u0003:\u0003:\u0003:\u0003:\u0003:\u0005:\u0364\n:\u0003;\u0003",
    ";\u0003;\u0003;\u0003;\u0003;\u0007;\u036c\n;\f;\u000e;\u036f\u000b",
    ";\u0003<\u0003<\u0003<\u0003<\u0003<\u0005<\u0376\n<\u0005<\u0378\n",
    "<\u0003=\u0003=\u0003=\u0003=\u0003=\u0003=\u0007=\u0380\n=\f=\u000e",
    "=\u0383\u000b=\u0003>\u0003>\u0005>\u0387\n>\u0003?\u0003?\u0005?\u038b",
    "\n?\u0003?\u0003?\u0007?\u038f\n?\f?\u000e?\u0392\u000b?\u0005?\u0394",
    "\n?\u0003@\u0003@\u0003@\u0003@\u0003@\u0007@\u039b\n@\f@\u000e@\u039e",
    "\u000b@\u0003@\u0003@\u0005@\u03a2\n@\u0003@\u0005@\u03a5\n@\u0003@",
    "\u0003@\u0003@\u0003@\u0005@\u03ab\n@\u0003@\u0003@\u0003@\u0003@\u0003",
    "@\u0003@\u0003@\u0003@\u0003@\u0003@\u0003@\u0003@\u0003@\u0003@\u0005",
    "@\u03bb\n@\u0003@\u0003@\u0007@\u03bf\n@\f@\u000e@\u03c2\u000b@\u0005",
    "@\u03c4\n@\u0003@\u0003@\u0003@\u0005@\u03c9\n@\u0003@\u0005@\u03cc",
    "\n@\u0003@\u0003@\u0003@\u0003@\u0003@\u0005@\u03d3\n@\u0003@\u0003",
    "@\u0003@\u0003@\u0003@\u0003@\u0003@\u0003@\u0003@\u0003@\u0003@\u0003",
    "@\u0003@\u0003@\u0003@\u0003@\u0003@\u0005@\u03e6\n@\u0003@\u0003@\u0007",
    "@\u03ea\n@\f@\u000e@\u03ed\u000b@\u0007@\u03ef\n@\f@\u000e@\u03f2\u000b",
    "@\u0003A\u0003A\u0003B\u0003B\u0003B\u0003B\u0003B\u0003B\u0003B\u0003",
    "B\u0003B\u0003B\u0005B\u0400\nB\u0003C\u0003C\u0005C\u0404\nC\u0003",
    "C\u0003C\u0003C\u0003C\u0003C\u0005C\u040b\nC\u0003C\u0007C\u040e\n",
    "C\fC\u000eC\u0411\u000bC\u0003D\u0003D\u0003D\u0003E\u0003E\u0003E\u0003",
    "E\u0003E\u0007E\u041b\nE\fE\u000eE\u041e\u000bE\u0003F\u0003F\u0003",
    "F\u0003F\u0003F\u0003F\u0005F\u0426\nF\u0003G\u0003G\u0003G\u0003G\u0003",
    "G\u0006G\u042d\nG\rG\u000eG\u042e\u0003G\u0003G\u0003G\u0003H\u0003",
    "H\u0003H\u0003H\u0003H\u0003H\u0003H\u0003H\u0003H\u0003H\u0003H\u0003",
    "H\u0007H\u0440\nH\fH\u000eH\u0443\u000bH\u0005H\u0445\nH\u0003H\u0003",
    "H\u0003H\u0003H\u0007H\u044b\nH\fH\u000eH\u044e\u000bH\u0005H\u0450",
    "\nH\u0007H\u0452\nH\fH\u000eH\u0455\u000bH\u0003H\u0003H\u0005H\u0459",
    "\nH\u0003I\u0003I\u0003I\u0003I\u0003I\u0003I\u0003I\u0003I\u0003I\u0003",
    "I\u0003I\u0005I\u0466\nI\u0003J\u0003J\u0005J\u046a\nJ\u0003J\u0003",
    "J\u0003K\u0003K\u0003K\u0003K\u0003K\u0007K\u0473\nK\fK\u000eK\u0476",
    "\u000bK\u0003L\u0003L\u0005L\u047a\nL\u0003M\u0005M\u047d\nM\u0003M",
    "\u0003M\u0003N\u0003N\u0003N\u0003N\u0003N\u0003N\u0003N\u0005N\u0488",
    "\nN\u0003N\u0003N\u0003N\u0003N\u0003N\u0003N\u0005N\u0490\nN\u0003",
    "O\u0003O\u0003O\u0003O\u0003O\u0003O\u0003O\u0003O\u0003O\u0003O\u0003",
    "O\u0003O\u0003O\u0003O\u0003O\u0003O\u0003O\u0003O\u0003O\u0003O\u0005",
    "O\u04a6\nO\u0003P\u0003P\u0003P\u0005P\u04ab\nP\u0003P\u0003P\u0005",
    "P\u04af\nP\u0003P\u0005P\u04b2\nP\u0003P\u0003P\u0005P\u04b6\nP\u0003",
    "P\u0003P\u0005P\u04ba\nP\u0005P\u04bc\nP\u0003Q\u0003Q\u0003Q\u0003",
    "Q\u0005Q\u04c2\nQ\u0003R\u0003R\u0003R\u0003R\u0003R\u0003R\u0007R\u04ca",
    "\nR\fR\u000eR\u04cd\u000bR\u0003S\u0003S\u0003S\u0003S\u0003S\u0003",
    "S\u0003S\u0003S\u0003S\u0005S\u04d8\nS\u0003S\u0003S\u0003S\u0003S\u0003",
    "S\u0005S\u04df\nS\u0003T\u0005T\u04e2\nT\u0003U\u0003U\u0003U\u0003",
    "U\u0003U\u0007U\u04e9\nU\fU\u000eU\u04ec\u000bU\u0003V\u0003V\u0003",
    "V\u0005V\u04f1\nV\u0003W\u0005W\u04f4\nW\u0003W\u0003W\u0005W\u04f8",
    "\nW\u0003W\u0003W\u0003X\u0003X\u0003X\u0003X\u0003X\u0007X\u0501\n",
    "X\fX\u000eX\u0504\u000bX\u0003Y\u0003Y\u0003Y\u0002\u001f\u0006\n\f",
    "\u0014\u0016\u0018\u001a\u001c\u001e \"$&.:FLRbptx~\u0084\u0088\u0094",
    "\u00a2\u00a8\u00aeZ\u0002\u0004\u0006\b\n\f\u000e\u0010\u0012\u0014",
    "\u0016\u0018\u001a\u001c\u001e \"$&(*,.02468:<>@BDFHJLNPRTVXZ\\^`bd",
    "fhjlnprtvxz|~\u0080\u0082\u0084\u0086\u0088\u008a\u008c\u008e\u0090",
    "\u0092\u0094\u0096\u0098\u009a\u009c\u009e\u00a0\u00a2\u00a4\u00a6\u00a8",
    "\u00aa\u00ac\u00ae\u00b0\u0002\u000e\u0007\u0002IIKKMMPPUV\u0003\u0002",
    "[e\b\u0002\u0011\u0011\u001c\u001c$$**--<<\n\u0002\u0006\b\u0014\u0014",
    "\u0019\u0019\u001d\u001d\"#\'(/067\u0003\u0002\u0006\b\u0004\u0002+",
    "+..\u0006\u0002\u0015\u0015%%1155\u0005\u0002\n\u000b!!::\u0004\u0002",
    "=>ZZ\u0003\u0002=>\u0004\u0002\r\r\u000f\u000f\u0004\u0002\u0010\u0010",
    "11\u0002\u0579\u0002\u00d3\u0003\u0002\u0002\u0002\u0004\u00d5\u0003",
    "\u0002\u0002\u0002\u0006\u00dc\u0003\u0002\u0002\u0002\b\u00ee\u0003",
    "\u0002\u0002\u0002\n\u0112\u0003\u0002\u0002\u0002\f\u012e\u0003\u0002",
    "\u0002\u0002\u000e\u014f\u0003\u0002\u0002\u0002\u0010\u0151\u0003\u0002",
    "\u0002\u0002\u0012\u0160\u0003\u0002\u0002\u0002\u0014\u0162\u0003\u0002",
    "\u0002\u0002\u0016\u0173\u0003\u0002\u0002\u0002\u0018\u0181\u0003\u0002",
    "\u0002\u0002\u001a\u018f\u0003\u0002\u0002\u0002\u001c\u01a3\u0003\u0002",
    "\u0002\u0002\u001e\u01b1\u0003\u0002\u0002\u0002 \u01bc\u0003\u0002",
    "\u0002\u0002\"\u01c7\u0003\u0002\u0002\u0002$\u01d2\u0003\u0002\u0002",
    "\u0002&\u01dd\u0003\u0002\u0002\u0002(\u01e8\u0003\u0002\u0002\u0002",
    "*\u01f6\u0003\u0002\u0002\u0002,\u01f8\u0003\u0002\u0002\u0002.\u01fa",
    "\u0003\u0002\u0002\u00020\u0205\u0003\u0002\u0002\u00022\u020f\u0003",
    "\u0002\u0002\u00024\u0212\u0003\u0002\u0002\u00026\u0217\u0003\u0002",
    "\u0002\u00028\u0220\u0003\u0002\u0002\u0002:\u0222\u0003\u0002\u0002",
    "\u0002<\u0232\u0003\u0002\u0002\u0002>\u0234\u0003\u0002\u0002\u0002",
    "@\u0244\u0003\u0002\u0002\u0002B\u0251\u0003\u0002\u0002\u0002D\u0253",
    "\u0003\u0002\u0002\u0002F\u0255\u0003\u0002\u0002\u0002H\u0266\u0003",
    "\u0002\u0002\u0002J\u0270\u0003\u0002\u0002\u0002L\u0272\u0003\u0002",
    "\u0002\u0002N\u0283\u0003\u0002\u0002\u0002P\u0298\u0003\u0002\u0002",
    "\u0002R\u029a\u0003\u0002\u0002\u0002T\u02aa\u0003\u0002\u0002\u0002",
    "V\u02ac\u0003\u0002\u0002\u0002X\u02ae\u0003\u0002\u0002\u0002Z\u02b3",
    "\u0003\u0002\u0002\u0002\\\u02bb\u0003\u0002\u0002\u0002^\u02c7\u0003",
    "\u0002\u0002\u0002`\u02ca\u0003\u0002\u0002\u0002b\u02dc\u0003\u0002",
    "\u0002\u0002d\u0317\u0003\u0002\u0002\u0002f\u0319\u0003\u0002\u0002",
    "\u0002h\u0329\u0003\u0002\u0002\u0002j\u0334\u0003\u0002\u0002\u0002",
    "l\u033d\u0003\u0002\u0002\u0002n\u0352\u0003\u0002\u0002\u0002p\u0354",
    "\u0003\u0002\u0002\u0002r\u0363\u0003\u0002\u0002\u0002t\u0365\u0003",
    "\u0002\u0002\u0002v\u0377\u0003\u0002\u0002\u0002x\u0379\u0003\u0002",
    "\u0002\u0002z\u0384\u0003\u0002\u0002\u0002|\u0393\u0003\u0002\u0002",
    "\u0002~\u03c3\u0003\u0002\u0002\u0002\u0080\u03f3\u0003\u0002\u0002",
    "\u0002\u0082\u03ff\u0003\u0002\u0002\u0002\u0084\u0401\u0003\u0002\u0002",
    "\u0002\u0086\u0412\u0003\u0002\u0002\u0002\u0088\u0415\u0003\u0002\u0002",
    "\u0002\u008a\u0425\u0003\u0002\u0002\u0002\u008c\u0427\u0003\u0002\u0002",
    "\u0002\u008e\u0458\u0003\u0002\u0002\u0002\u0090\u0465\u0003\u0002\u0002",
    "\u0002\u0092\u0467\u0003\u0002\u0002\u0002\u0094\u046d\u0003\u0002\u0002",
    "\u0002\u0096\u0479\u0003\u0002\u0002\u0002\u0098\u047c\u0003\u0002\u0002",
    "\u0002\u009a\u048f\u0003\u0002\u0002\u0002\u009c\u04a5\u0003\u0002\u0002",
    "\u0002\u009e\u04bb\u0003\u0002\u0002\u0002\u00a0\u04c1\u0003\u0002\u0002",
    "\u0002\u00a2\u04c3\u0003\u0002\u0002\u0002\u00a4\u04de\u0003\u0002\u0002",
    "\u0002\u00a6\u04e1\u0003\u0002\u0002\u0002\u00a8\u04e3\u0003\u0002\u0002",
    "\u0002\u00aa\u04f0\u0003\u0002\u0002\u0002\u00ac\u04f3\u0003\u0002\u0002",
    "\u0002\u00ae\u04fb\u0003\u0002\u0002\u0002\u00b0\u0505\u0003\u0002\u0002",
    "\u0002\u00b2\u00d4\u0007k\u0002\u0002\u00b3\u00d4\u0005\u00b0Y\u0002",
    "\u00b4\u00b6\u0007n\u0002\u0002\u00b5\u00b4\u0003\u0002\u0002\u0002",
    "\u00b6\u00b7\u0003\u0002\u0002\u0002\u00b7\u00b5\u0003\u0002\u0002\u0002",
    "\u00b7\u00b8\u0003\u0002\u0002\u0002\u00b8\u00d4\u0003\u0002\u0002\u0002",
    "\u00b9\u00ba\u0007=\u0002\u0002\u00ba\u00bb\u0005.\u0018\u0002\u00bb",
    "\u00bc\u0007>\u0002\u0002\u00bc\u00d4\u0003\u0002\u0002\u0002\u00bd",
    "\u00d4\u0005\u0004\u0003\u0002\u00be\u00c0\u0007\u0003\u0002\u0002\u00bf",
    "\u00be\u0003\u0002\u0002\u0002\u00bf\u00c0\u0003\u0002\u0002\u0002\u00c0",
    "\u00c1\u0003\u0002\u0002\u0002\u00c1\u00c2\u0007=\u0002\u0002\u00c2",
    "\u00c3\u0005\u0092J\u0002\u00c3\u00c4\u0007>\u0002\u0002\u00c4\u00d4",
    "\u0003\u0002\u0002\u0002\u00c5\u00c6\u0007\u0004\u0002\u0002\u00c6\u00c7",
    "\u0007=\u0002\u0002\u00c7\u00c8\u0005\u000e\b\u0002\u00c8\u00c9\u0007",
    "Z\u0002\u0002\u00c9\u00ca\u0005z>\u0002\u00ca\u00cb\u0007>\u0002\u0002",
    "\u00cb\u00d4\u0003\u0002\u0002\u0002\u00cc\u00cd\u0007\u0005\u0002\u0002",
    "\u00cd\u00ce\u0007=\u0002\u0002\u00ce\u00cf\u0005z>\u0002\u00cf\u00d0",
    "\u0007Z\u0002\u0002\u00d0\u00d1\u0005\u000e\b\u0002\u00d1\u00d2\u0007",
    ">\u0002\u0002\u00d2\u00d4\u0003\u0002\u0002\u0002\u00d3\u00b2\u0003",
    "\u0002\u0002\u0002\u00d3\u00b3\u0003\u0002\u0002\u0002\u00d3\u00b5\u0003",
    "\u0002\u0002\u0002\u00d3\u00b9\u0003\u0002\u0002\u0002\u00d3\u00bd\u0003",
    "\u0002\u0002\u0002\u00d3\u00bf\u0003\u0002\u0002\u0002\u00d3\u00c5\u0003",
    "\u0002\u0002\u0002\u00d3\u00cc\u0003\u0002\u0002\u0002\u00d4\u0003\u0003",
    "\u0002\u0002\u0002\u00d5\u00d6\u00078\u0002\u0002\u00d6\u00d7\u0007",
    "=\u0002\u0002\u00d7\u00d8\u0005*\u0016\u0002\u00d8\u00d9\u0007Z\u0002",
    "\u0002\u00d9\u00da\u0005\u0006\u0004\u0002\u00da\u00db\u0007>\u0002",
    "\u0002\u00db\u0005\u0003\u0002\u0002\u0002\u00dc\u00dd\b\u0004\u0001",
    "\u0002\u00dd\u00de\u0005\b\u0005\u0002\u00de\u00e4\u0003\u0002\u0002",
    "\u0002\u00df\u00e0\f\u0003\u0002\u0002\u00e0\u00e1\u0007Z\u0002\u0002",
    "\u00e1\u00e3\u0005\b\u0005\u0002\u00e2\u00df\u0003\u0002\u0002\u0002",
    "\u00e3\u00e6\u0003\u0002\u0002\u0002\u00e4\u00e2\u0003\u0002\u0002\u0002",
    "\u00e4\u00e5\u0003\u0002\u0002\u0002\u00e5\u0007\u0003\u0002\u0002\u0002",
    "\u00e6\u00e4\u0003\u0002\u0002\u0002\u00e7\u00e8\u0005z>\u0002\u00e8",
    "\u00e9\u0007X\u0002\u0002\u00e9\u00ea\u0005*\u0016\u0002\u00ea\u00ef",
    "\u0003\u0002\u0002\u0002\u00eb\u00ec\u0007\u0017\u0002\u0002\u00ec\u00ed",
    "\u0007X\u0002\u0002\u00ed\u00ef\u0005*\u0016\u0002\u00ee\u00e7\u0003",
    "\u0002\u0002\u0002\u00ee\u00eb\u0003\u0002\u0002\u0002\u00ef\t\u0003",
    "\u0002\u0002\u0002\u00f0\u00f1\b\u0006\u0001\u0002\u00f1\u0113\u0005",
    "\u0002\u0002\u0002\u00f2\u00f3\u0007=\u0002\u0002\u00f3\u00f4\u0005",
    "z>\u0002\u00f4\u00f5\u0007>\u0002\u0002\u00f5\u00f6\u0007A\u0002\u0002",
    "\u00f6\u00f7\u0005\u0084C\u0002\u00f7\u00f8\u0007B\u0002\u0002\u00f8",
    "\u0113\u0003\u0002\u0002\u0002\u00f9\u00fa\u0007=\u0002\u0002\u00fa",
    "\u00fb\u0005z>\u0002\u00fb\u00fc\u0007>\u0002\u0002\u00fc\u00fd\u0007",
    "A\u0002\u0002\u00fd\u00fe\u0005\u0084C\u0002\u00fe\u00ff\u0007Z\u0002",
    "\u0002\u00ff\u0100\u0007B\u0002\u0002\u0100\u0113\u0003\u0002\u0002",
    "\u0002\u0101\u0102\u0007\u0003\u0002\u0002\u0102\u0103\u0007=\u0002",
    "\u0002\u0103\u0104\u0005z>\u0002\u0104\u0105\u0007>\u0002\u0002\u0105",
    "\u0106\u0007A\u0002\u0002\u0106\u0107\u0005\u0084C\u0002\u0107\u0108",
    "\u0007B\u0002\u0002\u0108\u0113\u0003\u0002\u0002\u0002\u0109\u010a",
    "\u0007\u0003\u0002\u0002\u010a\u010b\u0007=\u0002\u0002\u010b\u010c",
    "\u0005z>\u0002\u010c\u010d\u0007>\u0002\u0002\u010d\u010e\u0007A\u0002",
    "\u0002\u010e\u010f\u0005\u0084C\u0002\u010f\u0110\u0007Z\u0002\u0002",
    "\u0110\u0111\u0007B\u0002\u0002\u0111\u0113\u0003\u0002\u0002\u0002",
    "\u0112\u00f0\u0003\u0002\u0002\u0002\u0112\u00f2\u0003\u0002\u0002\u0002",
    "\u0112\u00f9\u0003\u0002\u0002\u0002\u0112\u0101\u0003\u0002\u0002\u0002",
    "\u0112\u0109\u0003\u0002\u0002\u0002\u0113\u012b\u0003\u0002\u0002\u0002",
    "\u0114\u0115\f\f\u0002\u0002\u0115\u0116\u0007?\u0002\u0002\u0116\u0117",
    "\u0005.\u0018\u0002\u0117\u0118\u0007@\u0002\u0002\u0118\u012a\u0003",
    "\u0002\u0002\u0002\u0119\u011a\f\u000b\u0002\u0002\u011a\u011c\u0007",
    "=\u0002\u0002\u011b\u011d\u0005\f\u0007\u0002\u011c\u011b\u0003\u0002",
    "\u0002\u0002\u011c\u011d\u0003\u0002\u0002\u0002\u011d\u011e\u0003\u0002",
    "\u0002\u0002\u011e\u012a\u0007>\u0002\u0002\u011f\u0120\f\n\u0002\u0002",
    "\u0120\u0121\u0007i\u0002\u0002\u0121\u012a\u0007k\u0002\u0002\u0122",
    "\u0123\f\t\u0002\u0002\u0123\u0124\u0007h\u0002\u0002\u0124\u012a\u0007",
    "k\u0002\u0002\u0125\u0126\f\b\u0002\u0002\u0126\u012a\u0007J\u0002\u0002",
    "\u0127\u0128\f\u0007\u0002\u0002\u0128\u012a\u0007L\u0002\u0002\u0129",
    "\u0114\u0003\u0002\u0002\u0002\u0129\u0119\u0003\u0002\u0002\u0002\u0129",
    "\u011f\u0003\u0002\u0002\u0002\u0129\u0122\u0003\u0002\u0002\u0002\u0129",
    "\u0125\u0003\u0002\u0002\u0002\u0129\u0127\u0003\u0002\u0002\u0002\u012a",
    "\u012d\u0003\u0002\u0002\u0002\u012b\u0129\u0003\u0002\u0002\u0002\u012b",
    "\u012c\u0003\u0002\u0002\u0002\u012c\u000b\u0003\u0002\u0002\u0002\u012d",
    "\u012b\u0003\u0002\u0002\u0002\u012e\u012f\b\u0007\u0001\u0002\u012f",
    "\u0130\u0005*\u0016\u0002\u0130\u0136\u0003\u0002\u0002\u0002\u0131",
    "\u0132\f\u0003\u0002\u0002\u0132\u0133\u0007Z\u0002\u0002\u0133\u0135",
    "\u0005*\u0016\u0002\u0134\u0131\u0003\u0002\u0002\u0002\u0135\u0138",
    "\u0003\u0002\u0002\u0002\u0136\u0134\u0003\u0002\u0002\u0002\u0136\u0137",
    "\u0003\u0002\u0002\u0002\u0137\r\u0003\u0002\u0002\u0002\u0138\u0136",
    "\u0003\u0002\u0002\u0002\u0139\u0150\u0005\n\u0006\u0002\u013a\u013b",
    "\u0007J\u0002\u0002\u013b\u0150\u0005\u000e\b\u0002\u013c\u013d\u0007",
    "L\u0002\u0002\u013d\u0150\u0005\u000e\b\u0002\u013e\u013f\u0005\u0010",
    "\t\u0002\u013f\u0140\u0005\u0012\n\u0002\u0140\u0150\u0003\u0002\u0002",
    "\u0002\u0141\u0142\u0007)\u0002\u0002\u0142\u0150\u0005\u000e\b\u0002",
    "\u0143\u0144\u0007)\u0002\u0002\u0144\u0145\u0007=\u0002\u0002\u0145",
    "\u0146\u0005z>\u0002\u0146\u0147\u0007>\u0002\u0002\u0147\u0150\u0003",
    "\u0002\u0002\u0002\u0148\u0149\u00074\u0002\u0002\u0149\u014a\u0007",
    "=\u0002\u0002\u014a\u014b\u0005z>\u0002\u014b\u014c\u0007>\u0002\u0002",
    "\u014c\u0150\u0003\u0002\u0002\u0002\u014d\u014e\u0007R\u0002\u0002",
    "\u014e\u0150\u0007k\u0002\u0002\u014f\u0139\u0003\u0002\u0002\u0002",
    "\u014f\u013a\u0003\u0002\u0002\u0002\u014f\u013c\u0003\u0002\u0002\u0002",
    "\u014f\u013e\u0003\u0002\u0002\u0002\u014f\u0141\u0003\u0002\u0002\u0002",
    "\u014f\u0143\u0003\u0002\u0002\u0002\u014f\u0148\u0003\u0002\u0002\u0002",
    "\u014f\u014d\u0003\u0002\u0002\u0002\u0150\u000f\u0003\u0002\u0002\u0002",
    "\u0151\u0152\t\u0002\u0002\u0002\u0152\u0011\u0003\u0002\u0002\u0002",
    "\u0153\u0161\u0005\u000e\b\u0002\u0154\u0155\u0007=\u0002\u0002\u0155",
    "\u0156\u0005z>\u0002\u0156\u0157\u0007>\u0002\u0002\u0157\u0158\u0005",
    "\u0012\n\u0002\u0158\u0161\u0003\u0002\u0002\u0002\u0159\u015a\u0007",
    "\u0003\u0002\u0002\u015a\u015b\u0007=\u0002\u0002\u015b\u015c\u0005",
    "z>\u0002\u015c\u015d\u0007>\u0002\u0002\u015d\u015e\u0005\u0012\n\u0002",
    "\u015e\u0161\u0003\u0002\u0002\u0002\u015f\u0161\u0007m\u0002\u0002",
    "\u0160\u0153\u0003\u0002\u0002\u0002\u0160\u0154\u0003\u0002\u0002\u0002",
    "\u0160\u0159\u0003\u0002\u0002\u0002\u0160\u015f\u0003\u0002\u0002\u0002",
    "\u0161\u0013\u0003\u0002\u0002\u0002\u0162\u0163\b\u000b\u0001\u0002",
    "\u0163\u0164\u0005\u0012\n\u0002\u0164\u0170\u0003\u0002\u0002\u0002",
    "\u0165\u0166\f\u0005\u0002\u0002\u0166\u0167\u0007M\u0002\u0002\u0167",
    "\u016f\u0005\u0012\n\u0002\u0168\u0169\f\u0004\u0002\u0002\u0169\u016a",
    "\u0007N\u0002\u0002\u016a\u016f\u0005\u0012\n\u0002\u016b\u016c\f\u0003",
    "\u0002\u0002\u016c\u016d\u0007O\u0002\u0002\u016d\u016f\u0005\u0012",
    "\n\u0002\u016e\u0165\u0003\u0002\u0002\u0002\u016e\u0168\u0003\u0002",
    "\u0002\u0002\u016e\u016b\u0003\u0002\u0002\u0002\u016f\u0172\u0003\u0002",
    "\u0002\u0002\u0170\u016e\u0003\u0002\u0002\u0002\u0170\u0171\u0003\u0002",
    "\u0002\u0002\u0171\u0015\u0003\u0002\u0002\u0002\u0172\u0170\u0003\u0002",
    "\u0002\u0002\u0173\u0174\b\f\u0001\u0002\u0174\u0175\u0005\u0014\u000b",
    "\u0002\u0175\u017e\u0003\u0002\u0002\u0002\u0176\u0177\f\u0004\u0002",
    "\u0002\u0177\u0178\u0007I\u0002\u0002\u0178\u017d\u0005\u0014\u000b",
    "\u0002\u0179\u017a\f\u0003\u0002\u0002\u017a\u017b\u0007K\u0002\u0002",
    "\u017b\u017d\u0005\u0014\u000b\u0002\u017c\u0176\u0003\u0002\u0002\u0002",
    "\u017c\u0179\u0003\u0002\u0002\u0002\u017d\u0180\u0003\u0002\u0002\u0002",
    "\u017e\u017c\u0003\u0002\u0002\u0002\u017e\u017f\u0003\u0002\u0002\u0002",
    "\u017f\u0017\u0003\u0002\u0002\u0002\u0180\u017e\u0003\u0002\u0002\u0002",
    "\u0181\u0182\b\r\u0001\u0002\u0182\u0183\u0005\u0016\f\u0002\u0183\u018c",
    "\u0003\u0002\u0002\u0002\u0184\u0185\f\u0004\u0002\u0002\u0185\u0186",
    "\u0007G\u0002\u0002\u0186\u018b\u0005\u0016\f\u0002\u0187\u0188\f\u0003",
    "\u0002\u0002\u0188\u0189\u0007H\u0002\u0002\u0189\u018b\u0005\u0016",
    "\f\u0002\u018a\u0184\u0003\u0002\u0002\u0002\u018a\u0187\u0003\u0002",
    "\u0002\u0002\u018b\u018e\u0003\u0002\u0002\u0002\u018c\u018a\u0003\u0002",
    "\u0002\u0002\u018c\u018d\u0003\u0002\u0002\u0002\u018d\u0019\u0003\u0002",
    "\u0002\u0002\u018e\u018c\u0003\u0002\u0002\u0002\u018f\u0190\b\u000e",
    "\u0001\u0002\u0190\u0191\u0005\u0018\r\u0002\u0191\u01a0\u0003\u0002",
    "\u0002\u0002\u0192\u0193\f\u0006\u0002\u0002\u0193\u0194\u0007C\u0002",
    "\u0002\u0194\u019f\u0005\u0018\r\u0002\u0195\u0196\f\u0005\u0002\u0002",
    "\u0196\u0197\u0007E\u0002\u0002\u0197\u019f\u0005\u0018\r\u0002\u0198",
    "\u0199\f\u0004\u0002\u0002\u0199\u019a\u0007D\u0002\u0002\u019a\u019f",
    "\u0005\u0018\r\u0002\u019b\u019c\f\u0003\u0002\u0002\u019c\u019d\u0007",
    "F\u0002\u0002\u019d\u019f\u0005\u0018\r\u0002\u019e\u0192\u0003\u0002",
    "\u0002\u0002\u019e\u0195\u0003\u0002\u0002\u0002\u019e\u0198\u0003\u0002",
    "\u0002\u0002\u019e\u019b\u0003\u0002\u0002\u0002\u019f\u01a2\u0003\u0002",
    "\u0002\u0002\u01a0\u019e\u0003\u0002\u0002\u0002\u01a0\u01a1\u0003\u0002",
    "\u0002\u0002\u01a1\u001b\u0003\u0002\u0002\u0002\u01a2\u01a0\u0003\u0002",
    "\u0002\u0002\u01a3\u01a4\b\u000f\u0001\u0002\u01a4\u01a5\u0005\u001a",
    "\u000e\u0002\u01a5\u01ae\u0003\u0002\u0002\u0002\u01a6\u01a7\f\u0004",
    "\u0002\u0002\u01a7\u01a8\u0007f\u0002\u0002\u01a8\u01ad\u0005\u001a",
    "\u000e\u0002\u01a9\u01aa\f\u0003\u0002\u0002\u01aa\u01ab\u0007g\u0002",
    "\u0002\u01ab\u01ad\u0005\u001a\u000e\u0002\u01ac\u01a6\u0003\u0002\u0002",
    "\u0002\u01ac\u01a9\u0003\u0002\u0002\u0002\u01ad\u01b0\u0003\u0002\u0002",
    "\u0002\u01ae\u01ac\u0003\u0002\u0002\u0002\u01ae\u01af\u0003\u0002\u0002",
    "\u0002\u01af\u001d\u0003\u0002\u0002\u0002\u01b0\u01ae\u0003\u0002\u0002",
    "\u0002\u01b1\u01b2\b\u0010\u0001\u0002\u01b2\u01b3\u0005\u001c\u000f",
    "\u0002\u01b3\u01b9\u0003\u0002\u0002\u0002\u01b4\u01b5\f\u0003\u0002",
    "\u0002\u01b5\u01b6\u0007P\u0002\u0002\u01b6\u01b8\u0005\u001c\u000f",
    "\u0002\u01b7\u01b4\u0003\u0002\u0002\u0002\u01b8\u01bb\u0003\u0002\u0002",
    "\u0002\u01b9\u01b7\u0003\u0002\u0002\u0002\u01b9\u01ba\u0003\u0002\u0002",
    "\u0002\u01ba\u001f\u0003\u0002\u0002\u0002\u01bb\u01b9\u0003\u0002\u0002",
    "\u0002\u01bc\u01bd\b\u0011\u0001\u0002\u01bd\u01be\u0005\u001e\u0010",
    "\u0002\u01be\u01c4\u0003\u0002\u0002\u0002\u01bf\u01c0\f\u0003\u0002",
    "\u0002\u01c0\u01c1\u0007T\u0002\u0002\u01c1\u01c3\u0005\u001e\u0010",
    "\u0002\u01c2\u01bf\u0003\u0002\u0002\u0002\u01c3\u01c6\u0003\u0002\u0002",
    "\u0002\u01c4\u01c2\u0003\u0002\u0002\u0002\u01c4\u01c5\u0003\u0002\u0002",
    "\u0002\u01c5!\u0003\u0002\u0002\u0002\u01c6\u01c4\u0003\u0002\u0002",
    "\u0002\u01c7\u01c8\b\u0012\u0001\u0002\u01c8\u01c9\u0005 \u0011\u0002",
    "\u01c9\u01cf\u0003\u0002\u0002\u0002\u01ca\u01cb\f\u0003\u0002\u0002",
    "\u01cb\u01cc\u0007Q\u0002\u0002\u01cc\u01ce\u0005 \u0011\u0002\u01cd",
    "\u01ca\u0003\u0002\u0002\u0002\u01ce\u01d1\u0003\u0002\u0002\u0002\u01cf",
    "\u01cd\u0003\u0002\u0002\u0002\u01cf\u01d0\u0003\u0002\u0002\u0002\u01d0",
    "#\u0003\u0002\u0002\u0002\u01d1\u01cf\u0003\u0002\u0002\u0002\u01d2",
    "\u01d3\b\u0013\u0001\u0002\u01d3\u01d4\u0005\"\u0012\u0002\u01d4\u01da",
    "\u0003\u0002\u0002\u0002\u01d5\u01d6\f\u0003\u0002\u0002\u01d6\u01d7",
    "\u0007R\u0002\u0002\u01d7\u01d9\u0005\"\u0012\u0002\u01d8\u01d5\u0003",
    "\u0002\u0002\u0002\u01d9\u01dc\u0003\u0002\u0002\u0002\u01da\u01d8\u0003",
    "\u0002\u0002\u0002\u01da\u01db\u0003\u0002\u0002\u0002\u01db%\u0003",
    "\u0002\u0002\u0002\u01dc\u01da\u0003\u0002\u0002\u0002\u01dd\u01de\b",
    "\u0014\u0001\u0002\u01de\u01df\u0005$\u0013\u0002\u01df\u01e5\u0003",
    "\u0002\u0002\u0002\u01e0\u01e1\f\u0003\u0002\u0002\u01e1\u01e2\u0007",
    "S\u0002\u0002\u01e2\u01e4\u0005$\u0013\u0002\u01e3\u01e0\u0003\u0002",
    "\u0002\u0002\u01e4\u01e7\u0003\u0002\u0002\u0002\u01e5\u01e3\u0003\u0002",
    "\u0002\u0002\u01e5\u01e6\u0003\u0002\u0002\u0002\u01e6\'\u0003\u0002",
    "\u0002\u0002\u01e7\u01e5\u0003\u0002\u0002\u0002\u01e8\u01ee\u0005&",
    "\u0014\u0002\u01e9\u01ea\u0007W\u0002\u0002\u01ea\u01eb\u0005.\u0018",
    "\u0002\u01eb\u01ec\u0007X\u0002\u0002\u01ec\u01ed\u0005(\u0015\u0002",
    "\u01ed\u01ef\u0003\u0002\u0002\u0002\u01ee\u01e9\u0003\u0002\u0002\u0002",
    "\u01ee\u01ef\u0003\u0002\u0002\u0002\u01ef)\u0003\u0002\u0002\u0002",
    "\u01f0\u01f7\u0005(\u0015\u0002\u01f1\u01f2\u0005\u000e\b\u0002\u01f2",
    "\u01f3\u0005,\u0017\u0002\u01f3\u01f4\u0005*\u0016\u0002\u01f4\u01f7",
    "\u0003\u0002\u0002\u0002\u01f5\u01f7\u0007m\u0002\u0002\u01f6\u01f0",
    "\u0003\u0002\u0002\u0002\u01f6\u01f1\u0003\u0002\u0002\u0002\u01f6\u01f5",
    "\u0003\u0002\u0002\u0002\u01f7+\u0003\u0002\u0002\u0002\u01f8\u01f9",
    "\t\u0003\u0002\u0002\u01f9-\u0003\u0002\u0002\u0002\u01fa\u01fb\b\u0018",
    "\u0001\u0002\u01fb\u01fc\u0005*\u0016\u0002\u01fc\u0202\u0003\u0002",
    "\u0002\u0002\u01fd\u01fe\f\u0003\u0002\u0002\u01fe\u01ff\u0007Z\u0002",
    "\u0002\u01ff\u0201\u0005*\u0016\u0002\u0200\u01fd\u0003\u0002\u0002",
    "\u0002\u0201\u0204\u0003\u0002\u0002\u0002\u0202\u0200\u0003\u0002\u0002",
    "\u0002\u0202\u0203\u0003\u0002\u0002\u0002\u0203/\u0003\u0002\u0002",
    "\u0002\u0204\u0202\u0003\u0002\u0002\u0002\u0205\u0206\u0005(\u0015",
    "\u0002\u02061\u0003\u0002\u0002\u0002\u0207\u0208\u00054\u001b\u0002",
    "\u0208\u0209\u0005:\u001e\u0002\u0209\u020a\u0007Y\u0002\u0002\u020a",
    "\u0210\u0003\u0002\u0002\u0002\u020b\u020c\u00054\u001b\u0002\u020c",
    "\u020d\u0007Y\u0002\u0002\u020d\u0210\u0003\u0002\u0002\u0002\u020e",
    "\u0210\u0005\u008cG\u0002\u020f\u0207\u0003\u0002\u0002\u0002\u020f",
    "\u020b\u0003\u0002\u0002\u0002\u020f\u020e\u0003\u0002\u0002\u0002\u0210",
    "3\u0003\u0002\u0002\u0002\u0211\u0213\u00058\u001d\u0002\u0212\u0211",
    "\u0003\u0002\u0002\u0002\u0213\u0214\u0003\u0002\u0002\u0002\u0214\u0212",
    "\u0003\u0002\u0002\u0002\u0214\u0215\u0003\u0002\u0002\u0002\u02155",
    "\u0003\u0002\u0002\u0002\u0216\u0218\u00058\u001d\u0002\u0217\u0216",
    "\u0003\u0002\u0002\u0002\u0218\u0219\u0003\u0002\u0002\u0002\u0219\u0217",
    "\u0003\u0002\u0002\u0002\u0219\u021a\u0003\u0002\u0002\u0002\u021a7",
    "\u0003\u0002\u0002\u0002\u021b\u0221\u0005> \u0002\u021c\u0221\u0005",
    "@!\u0002\u021d\u0221\u0005Z.\u0002\u021e\u0221\u0005\\/\u0002\u021f",
    "\u0221\u0005^0\u0002\u0220\u021b\u0003\u0002\u0002\u0002\u0220\u021c",
    "\u0003\u0002\u0002\u0002\u0220\u021d\u0003\u0002\u0002\u0002\u0220\u021e",
    "\u0003\u0002\u0002\u0002\u0220\u021f\u0003\u0002\u0002\u0002\u02219",
    "\u0003\u0002\u0002\u0002\u0222\u0223\b\u001e\u0001\u0002\u0223\u0224",
    "\u0005<\u001f\u0002\u0224\u022a\u0003\u0002\u0002\u0002\u0225\u0226",
    "\f\u0003\u0002\u0002\u0226\u0227\u0007Z\u0002\u0002\u0227\u0229\u0005",
    "<\u001f\u0002\u0228\u0225\u0003\u0002\u0002\u0002\u0229\u022c\u0003",
    "\u0002\u0002\u0002\u022a\u0228\u0003\u0002\u0002\u0002\u022a\u022b\u0003",
    "\u0002\u0002\u0002\u022b;\u0003\u0002\u0002\u0002\u022c\u022a\u0003",
    "\u0002\u0002\u0002\u022d\u0233\u0005`1\u0002\u022e\u022f\u0005`1\u0002",
    "\u022f\u0230\u0007[\u0002\u0002\u0230\u0231\u0005\u0082B\u0002\u0231",
    "\u0233\u0003\u0002\u0002\u0002\u0232\u022d\u0003\u0002\u0002\u0002\u0232",
    "\u022e\u0003\u0002\u0002\u0002\u0233=\u0003\u0002\u0002\u0002\u0234",
    "\u0235\t\u0004\u0002\u0002\u0235?\u0003\u0002\u0002\u0002\u0236\u0245",
    "\t\u0005\u0002\u0002\u0237\u0238\u0007\u0003\u0002\u0002\u0238\u0239",
    "\u0007=\u0002\u0002\u0239\u023a\t\u0006\u0002\u0002\u023a\u0245\u0007",
    ">\u0002\u0002\u023b\u0245\u0005X-\u0002\u023c\u0245\u0005B\"\u0002\u023d",
    "\u0245\u0005P)\u0002\u023e\u0245\u0005\u0080A\u0002\u023f\u0240\u0007",
    "\t\u0002\u0002\u0240\u0241\u0007=\u0002\u0002\u0241\u0242\u00050\u0019",
    "\u0002\u0242\u0243\u0007>\u0002\u0002\u0243\u0245\u0003\u0002\u0002",
    "\u0002\u0244\u0236\u0003\u0002\u0002\u0002\u0244\u0237\u0003\u0002\u0002",
    "\u0002\u0244\u023b\u0003\u0002\u0002\u0002\u0244\u023c\u0003\u0002\u0002",
    "\u0002\u0244\u023d\u0003\u0002\u0002\u0002\u0244\u023e\u0003\u0002\u0002",
    "\u0002\u0244\u023f\u0003\u0002\u0002\u0002\u0245A\u0003\u0002\u0002",
    "\u0002\u0246\u0248\u0005D#\u0002\u0247\u0249\u0007k\u0002\u0002\u0248",
    "\u0247\u0003\u0002\u0002\u0002\u0248\u0249\u0003\u0002\u0002\u0002\u0249",
    "\u024a\u0003\u0002\u0002\u0002\u024a\u024b\u0007A\u0002\u0002\u024b",
    "\u024c\u0005F$\u0002\u024c\u024d\u0007B\u0002\u0002\u024d\u0252\u0003",
    "\u0002\u0002\u0002\u024e\u024f\u0005D#\u0002\u024f\u0250\u0007k\u0002",
    "\u0002\u0250\u0252\u0003\u0002\u0002\u0002\u0251\u0246\u0003\u0002\u0002",
    "\u0002\u0251\u024e\u0003\u0002\u0002\u0002\u0252C\u0003\u0002\u0002",
    "\u0002\u0253\u0254\t\u0007\u0002\u0002\u0254E\u0003\u0002\u0002\u0002",
    "\u0255\u0256\b$\u0001\u0002\u0256\u0257\u0005H%\u0002\u0257\u025c\u0003",
    "\u0002\u0002\u0002\u0258\u0259\f\u0003\u0002\u0002\u0259\u025b\u0005",
    "H%\u0002\u025a\u0258\u0003\u0002\u0002\u0002\u025b\u025e\u0003\u0002",
    "\u0002\u0002\u025c\u025a\u0003\u0002\u0002\u0002\u025c\u025d\u0003\u0002",
    "\u0002\u0002\u025dG\u0003\u0002\u0002\u0002\u025e\u025c\u0003\u0002",
    "\u0002\u0002\u025f\u0261\u0005J&\u0002\u0260\u0262\u0005L\'\u0002\u0261",
    "\u0260\u0003\u0002\u0002\u0002\u0261\u0262\u0003\u0002\u0002\u0002\u0262",
    "\u0263\u0003\u0002\u0002\u0002\u0263\u0264\u0007Y\u0002\u0002\u0264",
    "\u0267\u0003\u0002\u0002\u0002\u0265\u0267\u0005\u008cG\u0002\u0266",
    "\u025f\u0003\u0002\u0002\u0002\u0266\u0265\u0003\u0002\u0002\u0002\u0267",
    "I\u0003\u0002\u0002\u0002\u0268\u026a\u0005@!\u0002\u0269\u026b\u0005",
    "J&\u0002\u026a\u0269\u0003\u0002\u0002\u0002\u026a\u026b\u0003\u0002",
    "\u0002\u0002\u026b\u0271\u0003\u0002\u0002\u0002\u026c\u026e\u0005Z",
    ".\u0002\u026d\u026f\u0005J&\u0002\u026e\u026d\u0003\u0002\u0002\u0002",
    "\u026e\u026f\u0003\u0002\u0002\u0002\u026f\u0271\u0003\u0002\u0002\u0002",
    "\u0270\u0268\u0003\u0002\u0002\u0002\u0270\u026c\u0003\u0002\u0002\u0002",
    "\u0271K\u0003\u0002\u0002\u0002\u0272\u0273\b\'\u0001\u0002\u0273\u0274",
    "\u0005N(\u0002\u0274\u027a\u0003\u0002\u0002\u0002\u0275\u0276\f\u0003",
    "\u0002\u0002\u0276\u0277\u0007Z\u0002\u0002\u0277\u0279\u0005N(\u0002",
    "\u0278\u0275\u0003\u0002\u0002\u0002\u0279\u027c\u0003\u0002\u0002\u0002",
    "\u027a\u0278\u0003\u0002\u0002\u0002\u027a\u027b\u0003\u0002\u0002\u0002",
    "\u027bM\u0003\u0002\u0002\u0002\u027c\u027a\u0003\u0002\u0002\u0002",
    "\u027d\u0284\u0005`1\u0002\u027e\u0280\u0005`1\u0002\u027f\u027e\u0003",
    "\u0002\u0002\u0002\u027f\u0280\u0003\u0002\u0002\u0002\u0280\u0281\u0003",
    "\u0002\u0002\u0002\u0281\u0282\u0007X\u0002\u0002\u0282\u0284\u0005",
    "0\u0019\u0002\u0283\u027d\u0003\u0002\u0002\u0002\u0283\u027f\u0003",
    "\u0002\u0002\u0002\u0284O\u0003\u0002\u0002\u0002\u0285\u0287\u0007",
    "\u001b\u0002\u0002\u0286\u0288\u0007k\u0002\u0002\u0287\u0286\u0003",
    "\u0002\u0002\u0002\u0287\u0288\u0003\u0002\u0002\u0002\u0288\u0289\u0003",
    "\u0002\u0002\u0002\u0289\u028a\u0007A\u0002\u0002\u028a\u028b\u0005",
    "R*\u0002\u028b\u028c\u0007B\u0002\u0002\u028c\u0299\u0003\u0002\u0002",
    "\u0002\u028d\u028f\u0007\u001b\u0002\u0002\u028e\u0290\u0007k\u0002",
    "\u0002\u028f\u028e\u0003\u0002\u0002\u0002\u028f\u0290\u0003\u0002\u0002",
    "\u0002\u0290\u0291\u0003\u0002\u0002\u0002\u0291\u0292\u0007A\u0002",
    "\u0002\u0292\u0293\u0005R*\u0002\u0293\u0294\u0007Z\u0002\u0002\u0294",
    "\u0295\u0007B\u0002\u0002\u0295\u0299\u0003\u0002\u0002\u0002\u0296",
    "\u0297\u0007\u001b\u0002\u0002\u0297\u0299\u0007k\u0002\u0002\u0298",
    "\u0285\u0003\u0002\u0002\u0002\u0298\u028d\u0003\u0002\u0002\u0002\u0298",
    "\u0296\u0003\u0002\u0002\u0002\u0299Q\u0003\u0002\u0002\u0002\u029a",
    "\u029b\b*\u0001\u0002\u029b\u029c\u0005T+\u0002\u029c\u02a2\u0003\u0002",
    "\u0002\u0002\u029d\u029e\f\u0003\u0002\u0002\u029e\u029f\u0007Z\u0002",
    "\u0002\u029f\u02a1\u0005T+\u0002\u02a0\u029d\u0003\u0002\u0002\u0002",
    "\u02a1\u02a4\u0003\u0002\u0002\u0002\u02a2\u02a0\u0003\u0002\u0002\u0002",
    "\u02a2\u02a3\u0003\u0002\u0002\u0002\u02a3S\u0003\u0002\u0002\u0002",
    "\u02a4\u02a2\u0003\u0002\u0002\u0002\u02a5\u02ab\u0005V,\u0002\u02a6",
    "\u02a7\u0005V,\u0002\u02a7\u02a8\u0007[\u0002\u0002\u02a8\u02a9\u0005",
    "0\u0019\u0002\u02a9\u02ab\u0003\u0002\u0002\u0002\u02aa\u02a5\u0003",
    "\u0002\u0002\u0002\u02aa\u02a6\u0003\u0002\u0002\u0002\u02abU\u0003",
    "\u0002\u0002\u0002\u02ac\u02ad\u0007k\u0002\u0002\u02adW\u0003\u0002",
    "\u0002\u0002\u02ae\u02af\u00075\u0002\u0002\u02af\u02b0\u0007=\u0002",
    "\u0002\u02b0\u02b1\u0005z>\u0002\u02b1\u02b2\u0007>\u0002\u0002\u02b2",
    "Y\u0003\u0002\u0002\u0002\u02b3\u02b4\t\b\u0002\u0002\u02b4[\u0003\u0002",
    "\u0002\u0002\u02b5\u02bc\t\t\u0002\u0002\u02b6\u02bc\u0005f4\u0002\u02b7",
    "\u02b8\u0007\f\u0002\u0002\u02b8\u02b9\u0007=\u0002\u0002\u02b9\u02ba",
    "\u0007k\u0002\u0002\u02ba\u02bc\u0007>\u0002\u0002\u02bb\u02b5\u0003",
    "\u0002\u0002\u0002\u02bb\u02b6\u0003\u0002\u0002\u0002\u02bb\u02b7\u0003",
    "\u0002\u0002\u0002\u02bc]\u0003\u0002\u0002\u0002\u02bd\u02be\u0007",
    "3\u0002\u0002\u02be\u02bf\u0007=\u0002\u0002\u02bf\u02c0\u0005z>\u0002",
    "\u02c0\u02c1\u0007>\u0002\u0002\u02c1\u02c8\u0003\u0002\u0002\u0002",
    "\u02c2\u02c3\u00073\u0002\u0002\u02c3\u02c4\u0007=\u0002\u0002\u02c4",
    "\u02c5\u00050\u0019\u0002\u02c5\u02c6\u0007>\u0002\u0002\u02c6\u02c8",
    "\u0003\u0002\u0002\u0002\u02c7\u02bd\u0003\u0002\u0002\u0002\u02c7\u02c2",
    "\u0003\u0002\u0002\u0002\u02c8_\u0003\u0002\u0002\u0002\u02c9\u02cb",
    "\u0005n8\u0002\u02ca\u02c9\u0003\u0002\u0002\u0002\u02ca\u02cb\u0003",
    "\u0002\u0002\u0002\u02cb\u02cc\u0003\u0002\u0002\u0002\u02cc\u02d0\u0005",
    "b2\u0002\u02cd\u02cf\u0005d3\u0002\u02ce\u02cd\u0003\u0002\u0002\u0002",
    "\u02cf\u02d2\u0003\u0002\u0002\u0002\u02d0\u02ce\u0003\u0002\u0002\u0002",
    "\u02d0\u02d1\u0003\u0002\u0002\u0002\u02d1a\u0003\u0002\u0002\u0002",
    "\u02d2\u02d0\u0003\u0002\u0002\u0002\u02d3\u02d4\b2\u0001\u0002\u02d4",
    "\u02dd\u0007k\u0002\u0002\u02d5\u02d6\u0007=\u0002\u0002\u02d6\u02d7",
    "\u0005`1\u0002\u02d7\u02d8\u0007>\u0002\u0002\u02d8\u02dd\u0003\u0002",
    "\u0002\u0002\u02d9\u02da\u0007k\u0002\u0002\u02da\u02db\u0007X\u0002",
    "\u0002\u02db\u02dd\u0007m\u0002\u0002\u02dc\u02d3\u0003\u0002\u0002",
    "\u0002\u02dc\u02d5\u0003\u0002\u0002\u0002\u02dc\u02d9\u0003\u0002\u0002",
    "\u0002\u02dd\u030b\u0003\u0002\u0002\u0002\u02de\u02df\f\t\u0002\u0002",
    "\u02df\u02e1\u0007?\u0002\u0002\u02e0\u02e2\u0005p9\u0002\u02e1\u02e0",
    "\u0003\u0002\u0002\u0002\u02e1\u02e2\u0003\u0002\u0002\u0002\u02e2\u02e4",
    "\u0003\u0002\u0002\u0002\u02e3\u02e5\u0005*\u0016\u0002\u02e4\u02e3",
    "\u0003\u0002\u0002\u0002\u02e4\u02e5\u0003\u0002\u0002\u0002\u02e5\u02e6",
    "\u0003\u0002\u0002\u0002\u02e6\u030a\u0007@\u0002\u0002\u02e7\u02e8",
    "\f\b\u0002\u0002\u02e8\u02e9\u0007?\u0002\u0002\u02e9\u02eb\u0007*\u0002",
    "\u0002\u02ea\u02ec\u0005p9\u0002\u02eb\u02ea\u0003\u0002\u0002\u0002",
    "\u02eb\u02ec\u0003\u0002\u0002\u0002\u02ec\u02ed\u0003\u0002\u0002\u0002",
    "\u02ed\u02ee\u0005*\u0016\u0002\u02ee\u02ef\u0007@\u0002\u0002\u02ef",
    "\u030a\u0003\u0002\u0002\u0002\u02f0\u02f1\f\u0007\u0002\u0002\u02f1",
    "\u02f2\u0007?\u0002\u0002\u02f2\u02f3\u0005p9\u0002\u02f3\u02f4\u0007",
    "*\u0002\u0002\u02f4\u02f5\u0005*\u0016\u0002\u02f5\u02f6\u0007@\u0002",
    "\u0002\u02f6\u030a\u0003\u0002\u0002\u0002\u02f7\u02f8\f\u0006\u0002",
    "\u0002\u02f8\u02fa\u0007?\u0002\u0002\u02f9\u02fb\u0005p9\u0002\u02fa",
    "\u02f9\u0003\u0002\u0002\u0002\u02fa\u02fb\u0003\u0002\u0002\u0002\u02fb",
    "\u02fc\u0003\u0002\u0002\u0002\u02fc\u02fd\u0007M\u0002\u0002\u02fd",
    "\u030a\u0007@\u0002\u0002\u02fe\u02ff\f\u0005\u0002\u0002\u02ff\u0300",
    "\u0007=\u0002\u0002\u0300\u0301\u0005r:\u0002\u0301\u0302\u0007>\u0002",
    "\u0002\u0302\u030a\u0003\u0002\u0002\u0002\u0303\u0304\f\u0004\u0002",
    "\u0002\u0304\u0306\u0007=\u0002\u0002\u0305\u0307\u0005x=\u0002\u0306",
    "\u0305\u0003\u0002\u0002\u0002\u0306\u0307\u0003\u0002\u0002\u0002\u0307",
    "\u0308\u0003\u0002\u0002\u0002\u0308\u030a\u0007>\u0002\u0002\u0309",
    "\u02de\u0003\u0002\u0002\u0002\u0309\u02e7\u0003\u0002\u0002\u0002\u0309",
    "\u02f0\u0003\u0002\u0002\u0002\u0309\u02f7\u0003\u0002\u0002\u0002\u0309",
    "\u02fe\u0003\u0002\u0002\u0002\u0309\u0303\u0003\u0002\u0002\u0002\u030a",
    "\u030d\u0003\u0002\u0002\u0002\u030b\u0309\u0003\u0002\u0002\u0002\u030b",
    "\u030c\u0003\u0002\u0002\u0002\u030cc\u0003\u0002\u0002\u0002\u030d",
    "\u030b\u0003\u0002\u0002\u0002\u030e\u030f\u0007\r\u0002\u0002\u030f",
    "\u0311\u0007=\u0002\u0002\u0310\u0312\u0007n\u0002\u0002\u0311\u0310",
    "\u0003\u0002\u0002\u0002\u0312\u0313\u0003\u0002\u0002\u0002\u0313\u0311",
    "\u0003\u0002\u0002\u0002\u0313\u0314\u0003\u0002\u0002\u0002\u0314\u0315",
    "\u0003\u0002\u0002\u0002\u0315\u0318\u0007>\u0002\u0002\u0316\u0318",
    "\u0005f4\u0002\u0317\u030e\u0003\u0002\u0002\u0002\u0317\u0316\u0003",
    "\u0002\u0002\u0002\u0318e\u0003\u0002\u0002\u0002\u0319\u031a\u0007",
    "\u000e\u0002\u0002\u031a\u031b\u0007=\u0002\u0002\u031b\u031c\u0007",
    "=\u0002\u0002\u031c\u031d\u0005h5\u0002\u031d\u031e\u0007>\u0002\u0002",
    "\u031e\u031f\u0007>\u0002\u0002\u031fg\u0003\u0002\u0002\u0002\u0320",
    "\u0325\u0005j6\u0002\u0321\u0322\u0007Z\u0002\u0002\u0322\u0324\u0005",
    "j6\u0002\u0323\u0321\u0003\u0002\u0002\u0002\u0324\u0327\u0003\u0002",
    "\u0002\u0002\u0325\u0323\u0003\u0002\u0002\u0002\u0325\u0326\u0003\u0002",
    "\u0002\u0002\u0326\u032a\u0003\u0002\u0002\u0002\u0327\u0325\u0003\u0002",
    "\u0002\u0002\u0328\u032a\u0003\u0002\u0002\u0002\u0329\u0320\u0003\u0002",
    "\u0002\u0002\u0329\u0328\u0003\u0002\u0002\u0002\u032ai\u0003\u0002",
    "\u0002\u0002\u032b\u0331\n\n\u0002\u0002\u032c\u032e\u0007=\u0002\u0002",
    "\u032d\u032f\u0005\f\u0007\u0002\u032e\u032d\u0003\u0002\u0002\u0002",
    "\u032e\u032f\u0003\u0002\u0002\u0002\u032f\u0330\u0003\u0002\u0002\u0002",
    "\u0330\u0332\u0007>\u0002\u0002\u0331\u032c\u0003\u0002\u0002\u0002",
    "\u0331\u0332\u0003\u0002\u0002\u0002\u0332\u0335\u0003\u0002\u0002\u0002",
    "\u0333\u0335\u0003\u0002\u0002\u0002\u0334\u032b\u0003\u0002\u0002\u0002",
    "\u0334\u0333\u0003\u0002\u0002\u0002\u0335k\u0003\u0002\u0002\u0002",
    "\u0336\u033c\n\u000b\u0002\u0002\u0337\u0338\u0007=\u0002\u0002\u0338",
    "\u0339\u0005l7\u0002\u0339\u033a\u0007>\u0002\u0002\u033a\u033c\u0003",
    "\u0002\u0002\u0002\u033b\u0336\u0003\u0002\u0002\u0002\u033b\u0337\u0003",
    "\u0002\u0002\u0002\u033c\u033f\u0003\u0002\u0002\u0002\u033d\u033b\u0003",
    "\u0002\u0002\u0002\u033d\u033e\u0003\u0002\u0002\u0002\u033em\u0003",
    "\u0002\u0002\u0002\u033f\u033d\u0003\u0002\u0002\u0002\u0340\u0342\u0007",
    "M\u0002\u0002\u0341\u0343\u0005p9\u0002\u0342\u0341\u0003\u0002\u0002",
    "\u0002\u0342\u0343\u0003\u0002\u0002\u0002\u0343\u0353\u0003\u0002\u0002",
    "\u0002\u0344\u0346\u0007M\u0002\u0002\u0345\u0347\u0005p9\u0002\u0346",
    "\u0345\u0003\u0002\u0002\u0002\u0346\u0347\u0003\u0002\u0002\u0002\u0347",
    "\u0348\u0003\u0002\u0002\u0002\u0348\u0353\u0005n8\u0002\u0349\u034b",
    "\u0007T\u0002\u0002\u034a\u034c\u0005p9\u0002\u034b\u034a\u0003\u0002",
    "\u0002\u0002\u034b\u034c\u0003\u0002\u0002\u0002\u034c\u0353\u0003\u0002",
    "\u0002\u0002\u034d\u034f\u0007T\u0002\u0002\u034e\u0350\u0005p9\u0002",
    "\u034f\u034e\u0003\u0002\u0002\u0002\u034f\u0350\u0003\u0002\u0002\u0002",
    "\u0350\u0351\u0003\u0002\u0002\u0002\u0351\u0353\u0005n8\u0002\u0352",
    "\u0340\u0003\u0002\u0002\u0002\u0352\u0344\u0003\u0002\u0002\u0002\u0352",
    "\u0349\u0003\u0002\u0002\u0002\u0352\u034d\u0003\u0002\u0002\u0002\u0353",
    "o\u0003\u0002\u0002\u0002\u0354\u0355\b9\u0001\u0002\u0355\u0356\u0005",
    "Z.\u0002\u0356\u035b\u0003\u0002\u0002\u0002\u0357\u0358\f\u0003\u0002",
    "\u0002\u0358\u035a\u0005Z.\u0002\u0359\u0357\u0003\u0002\u0002\u0002",
    "\u035a\u035d\u0003\u0002\u0002\u0002\u035b\u0359\u0003\u0002\u0002\u0002",
    "\u035b\u035c\u0003\u0002\u0002\u0002\u035cq\u0003\u0002\u0002\u0002",
    "\u035d\u035b\u0003\u0002\u0002\u0002\u035e\u0364\u0005t;\u0002\u035f",
    "\u0360\u0005t;\u0002\u0360\u0361\u0007Z\u0002\u0002\u0361\u0362\u0007",
    "j\u0002\u0002\u0362\u0364\u0003\u0002\u0002\u0002\u0363\u035e\u0003",
    "\u0002\u0002\u0002\u0363\u035f\u0003\u0002\u0002\u0002\u0364s\u0003",
    "\u0002\u0002\u0002\u0365\u0366\b;\u0001\u0002\u0366\u0367\u0005v<\u0002",
    "\u0367\u036d\u0003\u0002\u0002\u0002\u0368\u0369\f\u0003\u0002\u0002",
    "\u0369\u036a\u0007Z\u0002\u0002\u036a\u036c\u0005v<\u0002\u036b\u0368",
    "\u0003\u0002\u0002\u0002\u036c\u036f\u0003\u0002\u0002\u0002\u036d\u036b",
    "\u0003\u0002\u0002\u0002\u036d\u036e\u0003\u0002\u0002\u0002\u036eu",
    "\u0003\u0002\u0002\u0002\u036f\u036d\u0003\u0002\u0002\u0002\u0370\u0371",
    "\u00054\u001b\u0002\u0371\u0372\u0005`1\u0002\u0372\u0378\u0003\u0002",
    "\u0002\u0002\u0373\u0375\u00056\u001c\u0002\u0374\u0376\u0005|?\u0002",
    "\u0375\u0374\u0003\u0002\u0002\u0002\u0375\u0376\u0003\u0002\u0002\u0002",
    "\u0376\u0378\u0003\u0002\u0002\u0002\u0377\u0370\u0003\u0002\u0002\u0002",
    "\u0377\u0373\u0003\u0002\u0002\u0002\u0378w\u0003\u0002\u0002\u0002",
    "\u0379\u037a\b=\u0001\u0002\u037a\u037b\u0007k\u0002\u0002\u037b\u0381",
    "\u0003\u0002\u0002\u0002\u037c\u037d\f\u0003\u0002\u0002\u037d\u037e",
    "\u0007Z\u0002\u0002\u037e\u0380\u0007k\u0002\u0002\u037f\u037c\u0003",
    "\u0002\u0002\u0002\u0380\u0383\u0003\u0002\u0002\u0002\u0381\u037f\u0003",
    "\u0002\u0002\u0002\u0381\u0382\u0003\u0002\u0002\u0002\u0382y\u0003",
    "\u0002\u0002\u0002\u0383\u0381\u0003\u0002\u0002\u0002\u0384\u0386\u0005",
    "J&\u0002\u0385\u0387\u0005|?\u0002\u0386\u0385\u0003\u0002\u0002\u0002",
    "\u0386\u0387\u0003\u0002\u0002\u0002\u0387{\u0003\u0002\u0002\u0002",
    "\u0388\u0394\u0005n8\u0002\u0389\u038b\u0005n8\u0002\u038a\u0389\u0003",
    "\u0002\u0002\u0002\u038a\u038b\u0003\u0002\u0002\u0002\u038b\u038c\u0003",
    "\u0002\u0002\u0002\u038c\u0390\u0005~@\u0002\u038d\u038f\u0005d3\u0002",
    "\u038e\u038d\u0003\u0002\u0002\u0002\u038f\u0392\u0003\u0002\u0002\u0002",
    "\u0390\u038e\u0003\u0002\u0002\u0002\u0390\u0391\u0003\u0002\u0002\u0002",
    "\u0391\u0394\u0003\u0002\u0002\u0002\u0392\u0390\u0003\u0002\u0002\u0002",
    "\u0393\u0388\u0003\u0002\u0002\u0002\u0393\u038a\u0003\u0002\u0002\u0002",
    "\u0394}\u0003\u0002\u0002\u0002\u0395\u0396\b@\u0001\u0002\u0396\u0397",
    "\u0007=\u0002\u0002\u0397\u0398\u0005|?\u0002\u0398\u039c\u0007>\u0002",
    "\u0002\u0399\u039b\u0005d3\u0002\u039a\u0399\u0003\u0002\u0002\u0002",
    "\u039b\u039e\u0003\u0002\u0002\u0002\u039c\u039a\u0003\u0002\u0002\u0002",
    "\u039c\u039d\u0003\u0002\u0002\u0002\u039d\u03c4\u0003\u0002\u0002\u0002",
    "\u039e\u039c\u0003\u0002\u0002\u0002\u039f\u03a1\u0007?\u0002\u0002",
    "\u03a0\u03a2\u0005p9\u0002\u03a1\u03a0\u0003\u0002\u0002\u0002\u03a1",
    "\u03a2\u0003\u0002\u0002\u0002\u03a2\u03a4\u0003\u0002\u0002\u0002\u03a3",
    "\u03a5\u0005*\u0016\u0002\u03a4\u03a3\u0003\u0002\u0002\u0002\u03a4",
    "\u03a5\u0003\u0002\u0002\u0002\u03a5\u03a6\u0003\u0002\u0002\u0002\u03a6",
    "\u03c4\u0007@\u0002\u0002\u03a7\u03a8\u0007?\u0002\u0002\u03a8\u03aa",
    "\u0007*\u0002\u0002\u03a9\u03ab\u0005p9\u0002\u03aa\u03a9\u0003\u0002",
    "\u0002\u0002\u03aa\u03ab\u0003\u0002\u0002\u0002\u03ab\u03ac\u0003\u0002",
    "\u0002\u0002\u03ac\u03ad\u0005*\u0016\u0002\u03ad\u03ae\u0007@\u0002",
    "\u0002\u03ae\u03c4\u0003\u0002\u0002\u0002\u03af\u03b0\u0007?\u0002",
    "\u0002\u03b0\u03b1\u0005p9\u0002\u03b1\u03b2\u0007*\u0002\u0002\u03b2",
    "\u03b3\u0005*\u0016\u0002\u03b3\u03b4\u0007@\u0002\u0002\u03b4\u03c4",
    "\u0003\u0002\u0002\u0002\u03b5\u03b6\u0007?\u0002\u0002\u03b6\u03b7",
    "\u0007M\u0002\u0002\u03b7\u03c4\u0007@\u0002\u0002\u03b8\u03ba\u0007",
    "=\u0002\u0002\u03b9\u03bb\u0005r:\u0002\u03ba\u03b9\u0003\u0002\u0002",
    "\u0002\u03ba\u03bb\u0003\u0002\u0002\u0002\u03bb\u03bc\u0003\u0002\u0002",
    "\u0002\u03bc\u03c0\u0007>\u0002\u0002\u03bd\u03bf\u0005d3\u0002\u03be",
    "\u03bd\u0003\u0002\u0002\u0002\u03bf\u03c2\u0003\u0002\u0002\u0002\u03c0",
    "\u03be\u0003\u0002\u0002\u0002\u03c0\u03c1\u0003\u0002\u0002\u0002\u03c1",
    "\u03c4\u0003\u0002\u0002\u0002\u03c2\u03c0\u0003\u0002\u0002\u0002\u03c3",
    "\u0395\u0003\u0002\u0002\u0002\u03c3\u039f\u0003\u0002\u0002\u0002\u03c3",
    "\u03a7\u0003\u0002\u0002\u0002\u03c3\u03af\u0003\u0002\u0002\u0002\u03c3",
    "\u03b5\u0003\u0002\u0002\u0002\u03c3\u03b8\u0003\u0002\u0002\u0002\u03c4",
    "\u03f0\u0003\u0002\u0002\u0002\u03c5\u03c6\f\u0007\u0002\u0002\u03c6",
    "\u03c8\u0007?\u0002\u0002\u03c7\u03c9\u0005p9\u0002\u03c8\u03c7\u0003",
    "\u0002\u0002\u0002\u03c8\u03c9\u0003\u0002\u0002\u0002\u03c9\u03cb\u0003",
    "\u0002\u0002\u0002\u03ca\u03cc\u0005*\u0016\u0002\u03cb\u03ca\u0003",
    "\u0002\u0002\u0002\u03cb\u03cc\u0003\u0002\u0002\u0002\u03cc\u03cd\u0003",
    "\u0002\u0002\u0002\u03cd\u03ef\u0007@\u0002\u0002\u03ce\u03cf\f\u0006",
    "\u0002\u0002\u03cf\u03d0\u0007?\u0002\u0002\u03d0\u03d2\u0007*\u0002",
    "\u0002\u03d1\u03d3\u0005p9\u0002\u03d2\u03d1\u0003\u0002\u0002\u0002",
    "\u03d2\u03d3\u0003\u0002\u0002\u0002\u03d3\u03d4\u0003\u0002\u0002\u0002",
    "\u03d4\u03d5\u0005*\u0016\u0002\u03d5\u03d6\u0007@\u0002\u0002\u03d6",
    "\u03ef\u0003\u0002\u0002\u0002\u03d7\u03d8\f\u0005\u0002\u0002\u03d8",
    "\u03d9\u0007?\u0002\u0002\u03d9\u03da\u0005p9\u0002\u03da\u03db\u0007",
    "*\u0002\u0002\u03db\u03dc\u0005*\u0016\u0002\u03dc\u03dd\u0007@\u0002",
    "\u0002\u03dd\u03ef\u0003\u0002\u0002\u0002\u03de\u03df\f\u0004\u0002",
    "\u0002\u03df\u03e0\u0007?\u0002\u0002\u03e0\u03e1\u0007M\u0002\u0002",
    "\u03e1\u03ef\u0007@\u0002\u0002\u03e2\u03e3\f\u0003\u0002\u0002\u03e3",
    "\u03e5\u0007=\u0002\u0002\u03e4\u03e6\u0005r:\u0002\u03e5\u03e4\u0003",
    "\u0002\u0002\u0002\u03e5\u03e6\u0003\u0002\u0002\u0002\u03e6\u03e7\u0003",
    "\u0002\u0002\u0002\u03e7\u03eb\u0007>\u0002\u0002\u03e8\u03ea\u0005",
    "d3\u0002\u03e9\u03e8\u0003\u0002\u0002\u0002\u03ea\u03ed\u0003\u0002",
    "\u0002\u0002\u03eb\u03e9\u0003\u0002\u0002\u0002\u03eb\u03ec\u0003\u0002",
    "\u0002\u0002\u03ec\u03ef\u0003\u0002\u0002\u0002\u03ed\u03eb\u0003\u0002",
    "\u0002\u0002\u03ee\u03c5\u0003\u0002\u0002\u0002\u03ee\u03ce\u0003\u0002",
    "\u0002\u0002\u03ee\u03d7\u0003\u0002\u0002\u0002\u03ee\u03de\u0003\u0002",
    "\u0002\u0002\u03ee\u03e2\u0003\u0002\u0002\u0002\u03ef\u03f2\u0003\u0002",
    "\u0002\u0002\u03f0\u03ee\u0003\u0002\u0002\u0002\u03f0\u03f1\u0003\u0002",
    "\u0002\u0002\u03f1\u007f\u0003\u0002\u0002\u0002\u03f2\u03f0\u0003\u0002",
    "\u0002\u0002\u03f3\u03f4\u0007k\u0002\u0002\u03f4\u0081\u0003\u0002",
    "\u0002\u0002\u03f5\u0400\u0005*\u0016\u0002\u03f6\u03f7\u0007A\u0002",
    "\u0002\u03f7\u03f8\u0005\u0084C\u0002\u03f8\u03f9\u0007B\u0002\u0002",
    "\u03f9\u0400\u0003\u0002\u0002\u0002\u03fa\u03fb\u0007A\u0002\u0002",
    "\u03fb\u03fc\u0005\u0084C\u0002\u03fc\u03fd\u0007Z\u0002\u0002\u03fd",
    "\u03fe\u0007B\u0002\u0002\u03fe\u0400\u0003\u0002\u0002\u0002\u03ff",
    "\u03f5\u0003\u0002\u0002\u0002\u03ff\u03f6\u0003\u0002\u0002\u0002\u03ff",
    "\u03fa\u0003\u0002\u0002\u0002\u0400\u0083\u0003\u0002\u0002\u0002\u0401",
    "\u0403\bC\u0001\u0002\u0402\u0404\u0005\u0086D\u0002\u0403\u0402\u0003",
    "\u0002\u0002\u0002\u0403\u0404\u0003\u0002\u0002\u0002\u0404\u0405\u0003",
    "\u0002\u0002\u0002\u0405\u0406\u0005\u0082B\u0002\u0406\u040f\u0003",
    "\u0002\u0002\u0002\u0407\u0408\f\u0003\u0002\u0002\u0408\u040a\u0007",
    "Z\u0002\u0002\u0409\u040b\u0005\u0086D\u0002\u040a\u0409\u0003\u0002",
    "\u0002\u0002\u040a\u040b\u0003\u0002\u0002\u0002\u040b\u040c\u0003\u0002",
    "\u0002\u0002\u040c\u040e\u0005\u0082B\u0002\u040d\u0407\u0003\u0002",
    "\u0002\u0002\u040e\u0411\u0003\u0002\u0002\u0002\u040f\u040d\u0003\u0002",
    "\u0002\u0002\u040f\u0410\u0003\u0002\u0002\u0002\u0410\u0085\u0003\u0002",
    "\u0002\u0002\u0411\u040f\u0003\u0002\u0002\u0002\u0412\u0413\u0005\u0088",
    "E\u0002\u0413\u0414\u0007[\u0002\u0002\u0414\u0087\u0003\u0002\u0002",
    "\u0002\u0415\u0416\bE\u0001\u0002\u0416\u0417\u0005\u008aF\u0002\u0417",
    "\u041c\u0003\u0002\u0002\u0002\u0418\u0419\f\u0003\u0002\u0002\u0419",
    "\u041b\u0005\u008aF\u0002\u041a\u0418\u0003\u0002\u0002\u0002\u041b",
    "\u041e\u0003\u0002\u0002\u0002\u041c\u041a\u0003\u0002\u0002\u0002\u041c",
    "\u041d\u0003\u0002\u0002\u0002\u041d\u0089\u0003\u0002\u0002\u0002\u041e",
    "\u041c\u0003\u0002\u0002\u0002\u041f\u0420\u0007?\u0002\u0002\u0420",
    "\u0421\u00050\u0019\u0002\u0421\u0422\u0007@\u0002\u0002\u0422\u0426",
    "\u0003\u0002\u0002\u0002\u0423\u0424\u0007i\u0002\u0002\u0424\u0426",
    "\u0007k\u0002\u0002\u0425\u041f\u0003\u0002\u0002\u0002\u0425\u0423",
    "\u0003\u0002\u0002\u0002\u0426\u008b\u0003\u0002\u0002\u0002\u0427\u0428",
    "\u0007;\u0002\u0002\u0428\u0429\u0007=\u0002\u0002\u0429\u042a\u0005",
    "0\u0019\u0002\u042a\u042c\u0007Z\u0002\u0002\u042b\u042d\u0007n\u0002",
    "\u0002\u042c\u042b\u0003\u0002\u0002\u0002\u042d\u042e\u0003\u0002\u0002",
    "\u0002\u042e\u042c\u0003\u0002\u0002\u0002\u042e\u042f\u0003\u0002\u0002",
    "\u0002\u042f\u0430\u0003\u0002\u0002\u0002\u0430\u0431\u0007>\u0002",
    "\u0002\u0431\u0432\u0007Y\u0002\u0002\u0432\u008d\u0003\u0002\u0002",
    "\u0002\u0433\u0459\u0005\u0090I\u0002\u0434\u0459\u0005\u0092J\u0002",
    "\u0435\u0459\u0005\u0098M\u0002\u0436\u0459\u0005\u009aN\u0002\u0437",
    "\u0459\u0005\u009cO\u0002\u0438\u0459\u0005\u00a4S\u0002\u0439\u043a",
    "\t\f\u0002\u0002\u043a\u043b\t\r\u0002\u0002\u043b\u0444\u0007=\u0002",
    "\u0002\u043c\u0441\u0005&\u0014\u0002\u043d\u043e\u0007Z\u0002\u0002",
    "\u043e\u0440\u0005&\u0014\u0002\u043f\u043d\u0003\u0002\u0002\u0002",
    "\u0440\u0443\u0003\u0002\u0002\u0002\u0441\u043f\u0003\u0002\u0002\u0002",
    "\u0441\u0442\u0003\u0002\u0002\u0002\u0442\u0445\u0003\u0002\u0002\u0002",
    "\u0443\u0441\u0003\u0002\u0002\u0002\u0444\u043c\u0003\u0002\u0002\u0002",
    "\u0444\u0445\u0003\u0002\u0002\u0002\u0445\u0453\u0003\u0002\u0002\u0002",
    "\u0446\u044f\u0007X\u0002\u0002\u0447\u044c\u0005&\u0014\u0002\u0448",
    "\u0449\u0007Z\u0002\u0002\u0449\u044b\u0005&\u0014\u0002\u044a\u0448",
    "\u0003\u0002\u0002\u0002\u044b\u044e\u0003\u0002\u0002\u0002\u044c\u044a",
    "\u0003\u0002\u0002\u0002\u044c\u044d\u0003\u0002\u0002\u0002\u044d\u0450",
    "\u0003\u0002\u0002\u0002\u044e\u044c\u0003\u0002\u0002\u0002\u044f\u0447",
    "\u0003\u0002\u0002\u0002\u044f\u0450\u0003\u0002\u0002\u0002\u0450\u0452",
    "\u0003\u0002\u0002\u0002\u0451\u0446\u0003\u0002\u0002\u0002\u0452\u0455",
    "\u0003\u0002\u0002\u0002\u0453\u0451\u0003\u0002\u0002\u0002\u0453\u0454",
    "\u0003\u0002\u0002\u0002\u0454\u0456\u0003\u0002\u0002\u0002\u0455\u0453",
    "\u0003\u0002\u0002\u0002\u0456\u0457\u0007>\u0002\u0002\u0457\u0459",
    "\u0007Y\u0002\u0002\u0458\u0433\u0003\u0002\u0002\u0002\u0458\u0434",
    "\u0003\u0002\u0002\u0002\u0458\u0435\u0003\u0002\u0002\u0002\u0458\u0436",
    "\u0003\u0002\u0002\u0002\u0458\u0437\u0003\u0002\u0002\u0002\u0458\u0438",
    "\u0003\u0002\u0002\u0002\u0458\u0439\u0003\u0002\u0002\u0002\u0459\u008f",
    "\u0003\u0002\u0002\u0002\u045a\u045b\u0007k\u0002\u0002\u045b\u045c",
    "\u0007X\u0002\u0002\u045c\u0466\u0005\u008eH\u0002\u045d\u045e\u0007",
    "\u0013\u0002\u0002\u045e\u045f\u00050\u0019\u0002\u045f\u0460\u0007",
    "X\u0002\u0002\u0460\u0461\u0005\u008eH\u0002\u0461\u0466\u0003\u0002",
    "\u0002\u0002\u0462\u0463\u0007\u0017\u0002\u0002\u0463\u0464\u0007X",
    "\u0002\u0002\u0464\u0466\u0005\u008eH\u0002\u0465\u045a\u0003\u0002",
    "\u0002\u0002\u0465\u045d\u0003\u0002\u0002\u0002\u0465\u0462\u0003\u0002",
    "\u0002\u0002\u0466\u0091\u0003\u0002\u0002\u0002\u0467\u0469\u0007A",
    "\u0002\u0002\u0468\u046a\u0005\u0094K\u0002\u0469\u0468\u0003\u0002",
    "\u0002\u0002\u0469\u046a\u0003\u0002\u0002\u0002\u046a\u046b\u0003\u0002",
    "\u0002\u0002\u046b\u046c\u0007B\u0002\u0002\u046c\u0093\u0003\u0002",
    "\u0002\u0002\u046d\u046e\bK\u0001\u0002\u046e\u046f\u0005\u0096L\u0002",
    "\u046f\u0474\u0003\u0002\u0002\u0002\u0470\u0471\f\u0003\u0002\u0002",
    "\u0471\u0473\u0005\u0096L\u0002\u0472\u0470\u0003\u0002\u0002\u0002",
    "\u0473\u0476\u0003\u0002\u0002\u0002\u0474\u0472\u0003\u0002\u0002\u0002",
    "\u0474\u0475\u0003\u0002\u0002\u0002\u0475\u0095\u0003\u0002\u0002\u0002",
    "\u0476\u0474\u0003\u0002\u0002\u0002\u0477\u047a\u00052\u001a\u0002",
    "\u0478\u047a\u0005\u008eH\u0002\u0479\u0477\u0003\u0002\u0002\u0002",
    "\u0479\u0478\u0003\u0002\u0002\u0002\u047a\u0097\u0003\u0002\u0002\u0002",
    "\u047b\u047d\u0005.\u0018\u0002\u047c\u047b\u0003\u0002\u0002\u0002",
    "\u047c\u047d\u0003\u0002\u0002\u0002\u047d\u047e\u0003\u0002\u0002\u0002",
    "\u047e\u047f\u0007Y\u0002\u0002\u047f\u0099\u0003\u0002\u0002\u0002",
    "\u0480\u0481\u0007 \u0002\u0002\u0481\u0482\u0007=\u0002\u0002\u0482",
    "\u0483\u0005.\u0018\u0002\u0483\u0484\u0007>\u0002\u0002\u0484\u0487",
    "\u0005\u008eH\u0002\u0485\u0486\u0007\u001a\u0002\u0002\u0486\u0488",
    "\u0005\u008eH\u0002\u0487\u0485\u0003\u0002\u0002\u0002\u0487\u0488",
    "\u0003\u0002\u0002\u0002\u0488\u0490\u0003\u0002\u0002\u0002\u0489\u048a",
    "\u0007,\u0002\u0002\u048a\u048b\u0007=\u0002\u0002\u048b\u048c\u0005",
    ".\u0018\u0002\u048c\u048d\u0007>\u0002\u0002\u048d\u048e\u0005\u008e",
    "H\u0002\u048e\u0490\u0003\u0002\u0002\u0002\u048f\u0480\u0003\u0002",
    "\u0002\u0002\u048f\u0489\u0003\u0002\u0002\u0002\u0490\u009b\u0003\u0002",
    "\u0002\u0002\u0491\u0492\u00072\u0002\u0002\u0492\u0493\u0007=\u0002",
    "\u0002\u0493\u0494\u0005.\u0018\u0002\u0494\u0495\u0007>\u0002\u0002",
    "\u0495\u0496\u0005\u008eH\u0002\u0496\u04a6\u0003\u0002\u0002\u0002",
    "\u0497\u0498\u0007\u0018\u0002\u0002\u0498\u0499\u0005\u008eH\u0002",
    "\u0499\u049a\u00072\u0002\u0002\u049a\u049b\u0007=\u0002\u0002\u049b",
    "\u049c\u0005.\u0018\u0002\u049c\u049d\u0007>\u0002\u0002\u049d\u049e",
    "\u0007Y\u0002\u0002\u049e\u04a6\u0003\u0002\u0002\u0002\u049f\u04a0",
    "\u0007\u001e\u0002\u0002\u04a0\u04a1\u0007=\u0002\u0002\u04a1\u04a2",
    "\u0005\u009eP\u0002\u04a2\u04a3\u0007>\u0002\u0002\u04a3\u04a4\u0005",
    "\u008eH\u0002\u04a4\u04a6\u0003\u0002\u0002\u0002\u04a5\u0491\u0003",
    "\u0002\u0002\u0002\u04a5\u0497\u0003\u0002\u0002\u0002\u04a5\u049f\u0003",
    "\u0002\u0002\u0002\u04a6\u009d\u0003\u0002\u0002\u0002\u04a7\u04a8\u0005",
    "\u00a0Q\u0002\u04a8\u04aa\u0007Y\u0002\u0002\u04a9\u04ab\u0005\u00a2",
    "R\u0002\u04aa\u04a9\u0003\u0002\u0002\u0002\u04aa\u04ab\u0003\u0002",
    "\u0002\u0002\u04ab\u04ac\u0003\u0002\u0002\u0002\u04ac\u04ae\u0007Y",
    "\u0002\u0002\u04ad\u04af\u0005\u00a2R\u0002\u04ae\u04ad\u0003\u0002",
    "\u0002\u0002\u04ae\u04af\u0003\u0002\u0002\u0002\u04af\u04bc\u0003\u0002",
    "\u0002\u0002\u04b0\u04b2\u0005.\u0018\u0002\u04b1\u04b0\u0003\u0002",
    "\u0002\u0002\u04b1\u04b2\u0003\u0002\u0002\u0002\u04b2\u04b3\u0003\u0002",
    "\u0002\u0002\u04b3\u04b5\u0007Y\u0002\u0002\u04b4\u04b6\u0005\u00a2",
    "R\u0002\u04b5\u04b4\u0003\u0002\u0002\u0002\u04b5\u04b6\u0003\u0002",
    "\u0002\u0002\u04b6\u04b7\u0003\u0002\u0002\u0002\u04b7\u04b9\u0007Y",
    "\u0002\u0002\u04b8\u04ba\u0005\u00a2R\u0002\u04b9\u04b8\u0003\u0002",
    "\u0002\u0002\u04b9\u04ba\u0003\u0002\u0002\u0002\u04ba\u04bc\u0003\u0002",
    "\u0002\u0002\u04bb\u04a7\u0003\u0002\u0002\u0002\u04bb\u04b1\u0003\u0002",
    "\u0002\u0002\u04bc\u009f\u0003\u0002\u0002\u0002\u04bd\u04be\u00054",
    "\u001b\u0002\u04be\u04bf\u0005:\u001e\u0002\u04bf\u04c2\u0003\u0002",
    "\u0002\u0002\u04c0\u04c2\u00054\u001b\u0002\u04c1\u04bd\u0003\u0002",
    "\u0002\u0002\u04c1\u04c0\u0003\u0002\u0002\u0002\u04c2\u00a1\u0003\u0002",
    "\u0002\u0002\u04c3\u04c4\bR\u0001\u0002\u04c4\u04c5\u0005*\u0016\u0002",
    "\u04c5\u04cb\u0003\u0002\u0002\u0002\u04c6\u04c7\f\u0003\u0002\u0002",
    "\u04c7\u04c8\u0007Z\u0002\u0002\u04c8\u04ca\u0005*\u0016\u0002\u04c9",
    "\u04c6\u0003\u0002\u0002\u0002\u04ca\u04cd\u0003\u0002\u0002\u0002\u04cb",
    "\u04c9\u0003\u0002\u0002\u0002\u04cb\u04cc\u0003\u0002\u0002\u0002\u04cc",
    "\u00a3\u0003\u0002\u0002\u0002\u04cd\u04cb\u0003\u0002\u0002\u0002\u04ce",
    "\u04cf\u0007\u001f\u0002\u0002\u04cf\u04d0\u0007k\u0002\u0002\u04d0",
    "\u04df\u0007Y\u0002\u0002\u04d1\u04d2\u0007\u0016\u0002\u0002\u04d2",
    "\u04df\u0007Y\u0002\u0002\u04d3\u04d4\u0007\u0012\u0002\u0002\u04d4",
    "\u04df\u0007Y\u0002\u0002\u04d5\u04d7\u0007&\u0002\u0002\u04d6\u04d8",
    "\u0005.\u0018\u0002\u04d7\u04d6\u0003\u0002\u0002\u0002\u04d7\u04d8",
    "\u0003\u0002\u0002\u0002\u04d8\u04d9\u0003\u0002\u0002\u0002\u04d9\u04df",
    "\u0007Y\u0002\u0002\u04da\u04db\u0007\u001f\u0002\u0002\u04db\u04dc",
    "\u0005\u000e\b\u0002\u04dc\u04dd\u0007Y\u0002\u0002\u04dd\u04df\u0003",
    "\u0002\u0002\u0002\u04de\u04ce\u0003\u0002\u0002\u0002\u04de\u04d1\u0003",
    "\u0002\u0002\u0002\u04de\u04d3\u0003\u0002\u0002\u0002\u04de\u04d5\u0003",
    "\u0002\u0002\u0002\u04de\u04da\u0003\u0002\u0002\u0002\u04df\u00a5\u0003",
    "\u0002\u0002\u0002\u04e0\u04e2\u0005\u00a8U\u0002\u04e1\u04e0\u0003",
    "\u0002\u0002\u0002\u04e1\u04e2\u0003\u0002\u0002\u0002\u04e2\u00a7\u0003",
    "\u0002\u0002\u0002\u04e3\u04e4\bU\u0001\u0002\u04e4\u04e5\u0005\u00aa",
    "V\u0002\u04e5\u04ea\u0003\u0002\u0002\u0002\u04e6\u04e7\f\u0003\u0002",
    "\u0002\u04e7\u04e9\u0005\u00aaV\u0002\u04e8\u04e6\u0003\u0002\u0002",
    "\u0002\u04e9\u04ec\u0003\u0002\u0002\u0002\u04ea\u04e8\u0003\u0002\u0002",
    "\u0002\u04ea\u04eb\u0003\u0002\u0002\u0002\u04eb\u00a9\u0003\u0002\u0002",
    "\u0002\u04ec\u04ea\u0003\u0002\u0002\u0002\u04ed\u04f1\u0005\u00acW",
    "\u0002\u04ee\u04f1\u00052\u001a\u0002\u04ef\u04f1\u0007Y\u0002\u0002",
    "\u04f0\u04ed\u0003\u0002\u0002\u0002\u04f0\u04ee\u0003\u0002\u0002\u0002",
    "\u04f0\u04ef\u0003\u0002\u0002\u0002\u04f1\u00ab\u0003\u0002\u0002\u0002",
    "\u04f2\u04f4\u00054\u001b\u0002\u04f3\u04f2\u0003\u0002\u0002\u0002",
    "\u04f3\u04f4\u0003\u0002\u0002\u0002\u04f4\u04f5\u0003\u0002\u0002\u0002",
    "\u04f5\u04f7\u0005`1\u0002\u04f6\u04f8\u0005\u00aeX\u0002\u04f7\u04f6",
    "\u0003\u0002\u0002\u0002\u04f7\u04f8\u0003\u0002\u0002\u0002\u04f8\u04f9",
    "\u0003\u0002\u0002\u0002\u04f9\u04fa\u0005\u0092J\u0002\u04fa\u00ad",
    "\u0003\u0002\u0002\u0002\u04fb\u04fc\bX\u0001\u0002\u04fc\u04fd\u0005",
    "2\u001a\u0002\u04fd\u0502\u0003\u0002\u0002\u0002\u04fe\u04ff\f\u0003",
    "\u0002\u0002\u04ff\u0501\u00052\u001a\u0002\u0500\u04fe\u0003\u0002",
    "\u0002\u0002\u0501\u0504\u0003\u0002\u0002\u0002\u0502\u0500\u0003\u0002",
    "\u0002\u0002\u0502\u0503\u0003\u0002\u0002\u0002\u0503\u00af\u0003\u0002",
    "\u0002\u0002\u0504\u0502\u0003\u0002\u0002\u0002\u0505\u0506\u0007l",
    "\u0002\u0002\u0506\u00b1\u0003\u0002\u0002\u0002\u008e\u00b7\u00bf\u00d3",
    "\u00e4\u00ee\u0112\u011c\u0129\u012b\u0136\u014f\u0160\u016e\u0170\u017c",
    "\u017e\u018a\u018c\u019e\u01a0\u01ac\u01ae\u01b9\u01c4\u01cf\u01da\u01e5",
    "\u01ee\u01f6\u0202\u020f\u0214\u0219\u0220\u022a\u0232\u0244\u0248\u0251",
    "\u025c\u0261\u0266\u026a\u026e\u0270\u027a\u027f\u0283\u0287\u028f\u0298",
    "\u02a2\u02aa\u02bb\u02c7\u02ca\u02d0\u02dc\u02e1\u02e4\u02eb\u02fa\u0306",
    "\u0309\u030b\u0313\u0317\u0325\u0329\u032e\u0331\u0334\u033b\u033d\u0342",
    "\u0346\u034b\u034f\u0352\u035b\u0363\u036d\u0375\u0377\u0381\u0386\u038a",
    "\u0390\u0393\u039c\u03a1\u03a4\u03aa\u03ba\u03c0\u03c3\u03c8\u03cb\u03d2",
    "\u03e5\u03eb\u03ee\u03f0\u03ff\u0403\u040a\u040f\u041c\u0425\u042e\u0441",
    "\u0444\u044c\u044f\u0453\u0458\u0465\u0469\u0474\u0479\u047c\u0487\u048f",
    "\u04a5\u04aa\u04ae\u04b1\u04b5\u04b9\u04bb\u04c1\u04cb\u04d7\u04de\u04e1",
    "\u04ea\u04f0\u04f3\u04f7\u0502"].join("");


var atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

var decisionsToDFA = atn.decisionToState.map( function(ds, index) { return new antlr4.dfa.DFA(ds, index); });

var sharedContextCache = new antlr4.PredictionContextCache();

var literalNames = [ null, "'__extension__'", "'__builtin_va_arg'", "'__builtin_offsetof'", 
                     "'__m128'", "'__m128d'", "'__m128i'", "'__typeof__'", 
                     "'__inline__'", "'__stdcall'", "'__declspec'", "'__asm'", 
                     "'__attribute__'", "'__asm__'", "'__volatile__'", "'auto'", 
                     "'break'", "'case'", "'char'", "'const'", "'continue'", 
                     "'default'", "'do'", "'double'", "'else'", "'enum'", 
                     "'extern'", "'float'", "'for'", "'goto'", "'if'", "'inline'", 
                     "'int'", "'long'", "'register'", "'restrict'", "'return'", 
                     "'short'", "'signed'", "'sizeof'", "'static'", "'struct'", 
                     "'switch'", "'typedef'", "'union'", "'unsigned'", "'void'", 
                     "'volatile'", "'while'", "'_Alignas'", "'_Alignof'", 
                     "'_Atomic'", "'_Bool'", "'_Complex'", "'_Generic'", 
                     "'_Imaginary'", "'_Noreturn'", "'_Static_assert'", 
                     "'_Thread_local'", "'('", "')'", "'['", "']'", "'{'", 
                     "'}'", "'<'", "'<='", "'>'", "'>='", "'<<'", "'>>'", 
                     "'+'", "'++'", "'-'", "'--'", "'*'", "'/'", "'%'", 
                     "'&'", "'|'", "'&&'", "'||'", "'^'", "'!'", "'~'", 
                     "'?'", "':'", "';'", "','", "'='", "'*='", "'/='", 
                     "'%='", "'+='", "'-='", "'<<='", "'>>='", "'&='", "'^='", 
                     "'|='", "'=='", "'!='", "'->'", "'.'", "'...'" ];

var symbolicNames = [ null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, "Auto", "Break", 
                      "Case", "Char", "Const", "Continue", "Default", "Do", 
                      "Double", "Else", "Enum", "Extern", "Float", "For", 
                      "Goto", "If", "Inline", "Int", "Long", "Register", 
                      "Restrict", "Return", "Short", "Signed", "Sizeof", 
                      "Static", "Struct", "Switch", "Typedef", "Union", 
                      "Unsigned", "Void", "Volatile", "While", "Alignas", 
                      "Alignof", "Atomic", "Bool", "Complex", "Generic", 
                      "Imaginary", "Noreturn", "StaticAssert", "ThreadLocal", 
                      "LeftParen", "RightParen", "LeftBracket", "RightBracket", 
                      "LeftBrace", "RightBrace", "Less", "LessEqual", "Greater", 
                      "GreaterEqual", "LeftShift", "RightShift", "Plus", 
                      "PlusPlus", "Minus", "MinusMinus", "Star", "Div", 
                      "Mod", "And", "Or", "AndAnd", "OrOr", "Caret", "Not", 
                      "Tilde", "Question", "Colon", "Semi", "Comma", "Assign", 
                      "StarAssign", "DivAssign", "ModAssign", "PlusAssign", 
                      "MinusAssign", "LeftShiftAssign", "RightShiftAssign", 
                      "AndAssign", "XorAssign", "OrAssign", "Equal", "NotEqual", 
                      "Arrow", "Dot", "Ellipsis", "Identifier", "Constant", 
                      "DigitSequence", "StringLiteral", "ComplexDefine", 
                      "AsmBlock", "LineAfterPreprocessing", "LineDirective", 
                      "PragmaDirective", "Whitespace", "Newline", "BlockComment", 
                      "LineComment" ];

var ruleNames =  [ "primaryExpression", "genericSelection", "genericAssocList", 
                   "genericAssociation", "postfixExpression", "argumentExpressionList", 
                   "unaryExpression", "unaryOperator", "castExpression", 
                   "multiplicativeExpression", "additiveExpression", "shiftExpression", 
                   "relationalExpression", "equalityExpression", "andExpression", 
                   "exclusiveOrExpression", "inclusiveOrExpression", "logicalAndExpression", 
                   "logicalOrExpression", "conditionalExpression", "assignmentExpression", 
                   "assignmentOperator", "expression", "constantExpression", 
                   "declaration", "declarationSpecifiers", "declarationSpecifiers2", 
                   "declarationSpecifier", "initDeclaratorList", "initDeclarator", 
                   "storageClassSpecifier", "typeSpecifier", "structOrUnionSpecifier", 
                   "structOrUnion", "structDeclarationList", "structDeclaration", 
                   "specifierQualifierList", "structDeclaratorList", "structDeclarator", 
                   "enumSpecifier", "enumeratorList", "enumerator", "enumerationConstant", 
                   "atomicTypeSpecifier", "typeQualifier", "functionSpecifier", 
                   "alignmentSpecifier", "declarator", "directDeclarator", 
                   "gccDeclaratorExtension", "gccAttributeSpecifier", "gccAttributeList", 
                   "gccAttribute", "nestedParenthesesBlock", "pointer", 
                   "typeQualifierList", "parameterTypeList", "parameterList", 
                   "parameterDeclaration", "identifierList", "typeName", 
                   "abstractDeclarator", "directAbstractDeclarator", "typedefName", 
                   "initializer", "initializerList", "designation", "designatorList", 
                   "designator", "staticAssertDeclaration", "statement", 
                   "labeledStatement", "compoundStatement", "blockItemList", 
                   "blockItem", "expressionStatement", "selectionStatement", 
                   "iterationStatement", "forCondition", "forDeclaration", 
                   "forExpression", "jumpStatement", "compilationUnit", 
                   "translationUnit", "externalDeclaration", "functionDefinition", 
                   "declarationList", "constant" ];

function CParser (input) {
	antlr4.Parser.call(this, input);
    this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
    this.ruleNames = ruleNames;
    this.literalNames = literalNames;
    this.symbolicNames = symbolicNames;
    return this;
}

CParser.prototype = Object.create(antlr4.Parser.prototype);
CParser.prototype.constructor = CParser;

Object.defineProperty(CParser.prototype, "atn", {
	get : function() {
		return atn;
	}
});

CParser.EOF = antlr4.Token.EOF;
CParser.T__0 = 1;
CParser.T__1 = 2;
CParser.T__2 = 3;
CParser.T__3 = 4;
CParser.T__4 = 5;
CParser.T__5 = 6;
CParser.T__6 = 7;
CParser.T__7 = 8;
CParser.T__8 = 9;
CParser.T__9 = 10;
CParser.T__10 = 11;
CParser.T__11 = 12;
CParser.T__12 = 13;
CParser.T__13 = 14;
CParser.Auto = 15;
CParser.Break = 16;
CParser.Case = 17;
CParser.Char = 18;
CParser.Const = 19;
CParser.Continue = 20;
CParser.Default = 21;
CParser.Do = 22;
CParser.Double = 23;
CParser.Else = 24;
CParser.Enum = 25;
CParser.Extern = 26;
CParser.Float = 27;
CParser.For = 28;
CParser.Goto = 29;
CParser.If = 30;
CParser.Inline = 31;
CParser.Int = 32;
CParser.Long = 33;
CParser.Register = 34;
CParser.Restrict = 35;
CParser.Return = 36;
CParser.Short = 37;
CParser.Signed = 38;
CParser.Sizeof = 39;
CParser.Static = 40;
CParser.Struct = 41;
CParser.Switch = 42;
CParser.Typedef = 43;
CParser.Union = 44;
CParser.Unsigned = 45;
CParser.Void = 46;
CParser.Volatile = 47;
CParser.While = 48;
CParser.Alignas = 49;
CParser.Alignof = 50;
CParser.Atomic = 51;
CParser.Bool = 52;
CParser.Complex = 53;
CParser.Generic = 54;
CParser.Imaginary = 55;
CParser.Noreturn = 56;
CParser.StaticAssert = 57;
CParser.ThreadLocal = 58;
CParser.LeftParen = 59;
CParser.RightParen = 60;
CParser.LeftBracket = 61;
CParser.RightBracket = 62;
CParser.LeftBrace = 63;
CParser.RightBrace = 64;
CParser.Less = 65;
CParser.LessEqual = 66;
CParser.Greater = 67;
CParser.GreaterEqual = 68;
CParser.LeftShift = 69;
CParser.RightShift = 70;
CParser.Plus = 71;
CParser.PlusPlus = 72;
CParser.Minus = 73;
CParser.MinusMinus = 74;
CParser.Star = 75;
CParser.Div = 76;
CParser.Mod = 77;
CParser.And = 78;
CParser.Or = 79;
CParser.AndAnd = 80;
CParser.OrOr = 81;
CParser.Caret = 82;
CParser.Not = 83;
CParser.Tilde = 84;
CParser.Question = 85;
CParser.Colon = 86;
CParser.Semi = 87;
CParser.Comma = 88;
CParser.Assign = 89;
CParser.StarAssign = 90;
CParser.DivAssign = 91;
CParser.ModAssign = 92;
CParser.PlusAssign = 93;
CParser.MinusAssign = 94;
CParser.LeftShiftAssign = 95;
CParser.RightShiftAssign = 96;
CParser.AndAssign = 97;
CParser.XorAssign = 98;
CParser.OrAssign = 99;
CParser.Equal = 100;
CParser.NotEqual = 101;
CParser.Arrow = 102;
CParser.Dot = 103;
CParser.Ellipsis = 104;
CParser.Identifier = 105;
CParser.Constant = 106;
CParser.DigitSequence = 107;
CParser.StringLiteral = 108;
CParser.ComplexDefine = 109;
CParser.AsmBlock = 110;
CParser.LineAfterPreprocessing = 111;
CParser.LineDirective = 112;
CParser.PragmaDirective = 113;
CParser.Whitespace = 114;
CParser.Newline = 115;
CParser.BlockComment = 116;
CParser.LineComment = 117;

CParser.RULE_primaryExpression = 0;
CParser.RULE_genericSelection = 1;
CParser.RULE_genericAssocList = 2;
CParser.RULE_genericAssociation = 3;
CParser.RULE_postfixExpression = 4;
CParser.RULE_argumentExpressionList = 5;
CParser.RULE_unaryExpression = 6;
CParser.RULE_unaryOperator = 7;
CParser.RULE_castExpression = 8;
CParser.RULE_multiplicativeExpression = 9;
CParser.RULE_additiveExpression = 10;
CParser.RULE_shiftExpression = 11;
CParser.RULE_relationalExpression = 12;
CParser.RULE_equalityExpression = 13;
CParser.RULE_andExpression = 14;
CParser.RULE_exclusiveOrExpression = 15;
CParser.RULE_inclusiveOrExpression = 16;
CParser.RULE_logicalAndExpression = 17;
CParser.RULE_logicalOrExpression = 18;
CParser.RULE_conditionalExpression = 19;
CParser.RULE_assignmentExpression = 20;
CParser.RULE_assignmentOperator = 21;
CParser.RULE_expression = 22;
CParser.RULE_constantExpression = 23;
CParser.RULE_declaration = 24;
CParser.RULE_declarationSpecifiers = 25;
CParser.RULE_declarationSpecifiers2 = 26;
CParser.RULE_declarationSpecifier = 27;
CParser.RULE_initDeclaratorList = 28;
CParser.RULE_initDeclarator = 29;
CParser.RULE_storageClassSpecifier = 30;
CParser.RULE_typeSpecifier = 31;
CParser.RULE_structOrUnionSpecifier = 32;
CParser.RULE_structOrUnion = 33;
CParser.RULE_structDeclarationList = 34;
CParser.RULE_structDeclaration = 35;
CParser.RULE_specifierQualifierList = 36;
CParser.RULE_structDeclaratorList = 37;
CParser.RULE_structDeclarator = 38;
CParser.RULE_enumSpecifier = 39;
CParser.RULE_enumeratorList = 40;
CParser.RULE_enumerator = 41;
CParser.RULE_enumerationConstant = 42;
CParser.RULE_atomicTypeSpecifier = 43;
CParser.RULE_typeQualifier = 44;
CParser.RULE_functionSpecifier = 45;
CParser.RULE_alignmentSpecifier = 46;
CParser.RULE_declarator = 47;
CParser.RULE_directDeclarator = 48;
CParser.RULE_gccDeclaratorExtension = 49;
CParser.RULE_gccAttributeSpecifier = 50;
CParser.RULE_gccAttributeList = 51;
CParser.RULE_gccAttribute = 52;
CParser.RULE_nestedParenthesesBlock = 53;
CParser.RULE_pointer = 54;
CParser.RULE_typeQualifierList = 55;
CParser.RULE_parameterTypeList = 56;
CParser.RULE_parameterList = 57;
CParser.RULE_parameterDeclaration = 58;
CParser.RULE_identifierList = 59;
CParser.RULE_typeName = 60;
CParser.RULE_abstractDeclarator = 61;
CParser.RULE_directAbstractDeclarator = 62;
CParser.RULE_typedefName = 63;
CParser.RULE_initializer = 64;
CParser.RULE_initializerList = 65;
CParser.RULE_designation = 66;
CParser.RULE_designatorList = 67;
CParser.RULE_designator = 68;
CParser.RULE_staticAssertDeclaration = 69;
CParser.RULE_statement = 70;
CParser.RULE_labeledStatement = 71;
CParser.RULE_compoundStatement = 72;
CParser.RULE_blockItemList = 73;
CParser.RULE_blockItem = 74;
CParser.RULE_expressionStatement = 75;
CParser.RULE_selectionStatement = 76;
CParser.RULE_iterationStatement = 77;
CParser.RULE_forCondition = 78;
CParser.RULE_forDeclaration = 79;
CParser.RULE_forExpression = 80;
CParser.RULE_jumpStatement = 81;
CParser.RULE_compilationUnit = 82;
CParser.RULE_translationUnit = 83;
CParser.RULE_externalDeclaration = 84;
CParser.RULE_functionDefinition = 85;
CParser.RULE_declarationList = 86;
CParser.RULE_constant = 87;

function PrimaryExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CParser.RULE_primaryExpression;
    return this;
}

PrimaryExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PrimaryExpressionContext.prototype.constructor = PrimaryExpressionContext;

PrimaryExpressionContext.prototype.Identifier = function() {
    return this.getToken(CParser.Identifier, 0);
};

PrimaryExpressionContext.prototype.constant = function() {
    return this.getTypedRuleContext(ConstantContext,0);
};

PrimaryExpressionContext.prototype.StringLiteral = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CParser.StringLiteral);
    } else {
        return this.getToken(CParser.StringLiteral, i);
    }
};


PrimaryExpressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

PrimaryExpressionContext.prototype.genericSelection = function() {
    return this.getTypedRuleContext(GenericSelectionContext,0);
};

PrimaryExpressionContext.prototype.compoundStatement = function() {
    return this.getTypedRuleContext(CompoundStatementContext,0);
};

PrimaryExpressionContext.prototype.unaryExpression = function() {
    return this.getTypedRuleContext(UnaryExpressionContext,0);
};

PrimaryExpressionContext.prototype.typeName = function() {
    return this.getTypedRuleContext(TypeNameContext,0);
};

PrimaryExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CVisitor ) {
        return visitor.visitPrimaryExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CParser.PrimaryExpressionContext = PrimaryExpressionContext;

CParser.prototype.primaryExpression = function() {

    var localctx = new PrimaryExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 0, CParser.RULE_primaryExpression);
    var _la = 0; // Token type
    try {
        this.state = 209;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,2,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 176;
            this.match(CParser.Identifier);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 177;
            this.constant();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 179; 
            this._errHandler.sync(this);
            var _alt = 1;
            do {
            	switch (_alt) {
            	case 1:
            		this.state = 178;
            		this.match(CParser.StringLiteral);
            		break;
            	default:
            		throw new antlr4.error.NoViableAltException(this);
            	}
            	this.state = 181; 
            	this._errHandler.sync(this);
            	_alt = this._interp.adaptivePredict(this._input,0, this._ctx);
            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 183;
            this.match(CParser.LeftParen);
            this.state = 184;
            this.expression(0);
            this.state = 185;
            this.match(CParser.RightParen);
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 187;
            this.genericSelection();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 189;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CParser.T__0) {
                this.state = 188;
                this.match(CParser.T__0);
            }

            this.state = 191;
            this.match(CParser.LeftParen);
            this.state = 192;
            this.compoundStatement();
            this.state = 193;
            this.match(CParser.RightParen);
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 195;
            this.match(CParser.T__1);
            this.state = 196;
            this.match(CParser.LeftParen);
            this.state = 197;
            this.unaryExpression();
            this.state = 198;
            this.match(CParser.Comma);
            this.state = 199;
            this.typeName();
            this.state = 200;
            this.match(CParser.RightParen);
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 202;
            this.match(CParser.T__2);
            this.state = 203;
            this.match(CParser.LeftParen);
            this.state = 204;
            this.typeName();
            this.state = 205;
            this.match(CParser.Comma);
            this.state = 206;
            this.unaryExpression();
            this.state = 207;
            this.match(CParser.RightParen);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function GenericSelectionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CParser.RULE_genericSelection;
    return this;
}

GenericSelectionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
GenericSelectionContext.prototype.constructor = GenericSelectionContext;

GenericSelectionContext.prototype.assignmentExpression = function() {
    return this.getTypedRuleContext(AssignmentExpressionContext,0);
};

GenericSelectionContext.prototype.genericAssocList = function() {
    return this.getTypedRuleContext(GenericAssocListContext,0);
};

GenericSelectionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CVisitor ) {
        return visitor.visitGenericSelection(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CParser.GenericSelectionContext = GenericSelectionContext;

CParser.prototype.genericSelection = function() {

    var localctx = new GenericSelectionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 2, CParser.RULE_genericSelection);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 211;
        this.match(CParser.Generic);
        this.state = 212;
        this.match(CParser.LeftParen);
        this.state = 213;
        this.assignmentExpression();
        this.state = 214;
        this.match(CParser.Comma);
        this.state = 215;
        this.genericAssocList(0);
        this.state = 216;
        this.match(CParser.RightParen);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function GenericAssocListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CParser.RULE_genericAssocList;
    return this;
}

GenericAssocListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
GenericAssocListContext.prototype.constructor = GenericAssocListContext;

GenericAssocListContext.prototype.genericAssociation = function() {
    return this.getTypedRuleContext(GenericAssociationContext,0);
};

GenericAssocListContext.prototype.genericAssocList = function() {
    return this.getTypedRuleContext(GenericAssocListContext,0);
};

GenericAssocListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CVisitor ) {
        return visitor.visitGenericAssocList(this);
    } else {
        return visitor.visitChildren(this);
    }
};



CParser.prototype.genericAssocList = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new GenericAssocListContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 4;
    this.enterRecursionRule(localctx, 4, CParser.RULE_genericAssocList, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 219;
        this.genericAssociation();
        this._ctx.stop = this._input.LT(-1);
        this.state = 226;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,3,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new GenericAssocListContext(this, _parentctx, _parentState);
                this.pushNewRecursionContext(localctx, _startState, CParser.RULE_genericAssocList);
                this.state = 221;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 222;
                this.match(CParser.Comma);
                this.state = 223;
                this.genericAssociation(); 
            }
            this.state = 228;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,3,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function GenericAssociationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CParser.RULE_genericAssociation;
    return this;
}

GenericAssociationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
GenericAssociationContext.prototype.constructor = GenericAssociationContext;

GenericAssociationContext.prototype.typeName = function() {
    return this.getTypedRuleContext(TypeNameContext,0);
};

GenericAssociationContext.prototype.assignmentExpression = function() {
    return this.getTypedRuleContext(AssignmentExpressionContext,0);
};

GenericAssociationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CVisitor ) {
        return visitor.visitGenericAssociation(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CParser.GenericAssociationContext = GenericAssociationContext;

CParser.prototype.genericAssociation = function() {

    var localctx = new GenericAssociationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 6, CParser.RULE_genericAssociation);
    try {
        this.state = 236;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CParser.T__0:
        case CParser.T__3:
        case CParser.T__4:
        case CParser.T__5:
        case CParser.T__6:
        case CParser.Char:
        case CParser.Const:
        case CParser.Double:
        case CParser.Enum:
        case CParser.Float:
        case CParser.Int:
        case CParser.Long:
        case CParser.Restrict:
        case CParser.Short:
        case CParser.Signed:
        case CParser.Struct:
        case CParser.Union:
        case CParser.Unsigned:
        case CParser.Void:
        case CParser.Volatile:
        case CParser.Atomic:
        case CParser.Bool:
        case CParser.Complex:
        case CParser.Identifier:
            this.enterOuterAlt(localctx, 1);
            this.state = 229;
            this.typeName();
            this.state = 230;
            this.match(CParser.Colon);
            this.state = 231;
            this.assignmentExpression();
            break;
        case CParser.Default:
            this.enterOuterAlt(localctx, 2);
            this.state = 233;
            this.match(CParser.Default);
            this.state = 234;
            this.match(CParser.Colon);
            this.state = 235;
            this.assignmentExpression();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PostfixExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CParser.RULE_postfixExpression;
    return this;
}

PostfixExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PostfixExpressionContext.prototype.constructor = PostfixExpressionContext;

PostfixExpressionContext.prototype.primaryExpression = function() {
    return this.getTypedRuleContext(PrimaryExpressionContext,0);
};

PostfixExpressionContext.prototype.typeName = function() {
    return this.getTypedRuleContext(TypeNameContext,0);
};

PostfixExpressionContext.prototype.initializerList = function() {
    return this.getTypedRuleContext(InitializerListContext,0);
};

PostfixExpressionContext.prototype.postfixExpression = function() {
    return this.getTypedRuleContext(PostfixExpressionContext,0);
};

PostfixExpressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

PostfixExpressionContext.prototype.argumentExpressionList = function() {
    return this.getTypedRuleContext(ArgumentExpressionListContext,0);
};

PostfixExpressionContext.prototype.Identifier = function() {
    return this.getToken(CParser.Identifier, 0);
};

PostfixExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CVisitor ) {
        return visitor.visitPostfixExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};



CParser.prototype.postfixExpression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new PostfixExpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 8;
    this.enterRecursionRule(localctx, 8, CParser.RULE_postfixExpression, _p);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 272;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,5,this._ctx);
        switch(la_) {
        case 1:
            this.state = 239;
            this.primaryExpression();
            break;

        case 2:
            this.state = 240;
            this.match(CParser.LeftParen);
            this.state = 241;
            this.typeName();
            this.state = 242;
            this.match(CParser.RightParen);
            this.state = 243;
            this.match(CParser.LeftBrace);
            this.state = 244;
            this.initializerList(0);
            this.state = 245;
            this.match(CParser.RightBrace);
            break;

        case 3:
            this.state = 247;
            this.match(CParser.LeftParen);
            this.state = 248;
            this.typeName();
            this.state = 249;
            this.match(CParser.RightParen);
            this.state = 250;
            this.match(CParser.LeftBrace);
            this.state = 251;
            this.initializerList(0);
            this.state = 252;
            this.match(CParser.Comma);
            this.state = 253;
            this.match(CParser.RightBrace);
            break;

        case 4:
            this.state = 255;
            this.match(CParser.T__0);
            this.state = 256;
            this.match(CParser.LeftParen);
            this.state = 257;
            this.typeName();
            this.state = 258;
            this.match(CParser.RightParen);
            this.state = 259;
            this.match(CParser.LeftBrace);
            this.state = 260;
            this.initializerList(0);
            this.state = 261;
            this.match(CParser.RightBrace);
            break;

        case 5:
            this.state = 263;
            this.match(CParser.T__0);
            this.state = 264;
            this.match(CParser.LeftParen);
            this.state = 265;
            this.typeName();
            this.state = 266;
            this.match(CParser.RightParen);
            this.state = 267;
            this.match(CParser.LeftBrace);
            this.state = 268;
            this.initializerList(0);
            this.state = 269;
            this.match(CParser.Comma);
            this.state = 270;
            this.match(CParser.RightBrace);
            break;

        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 297;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,8,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 295;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,7,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new PostfixExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, CParser.RULE_postfixExpression);
                    this.state = 274;
                    if (!( this.precpred(this._ctx, 10))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 10)");
                    }
                    this.state = 275;
                    this.match(CParser.LeftBracket);
                    this.state = 276;
                    this.expression(0);
                    this.state = 277;
                    this.match(CParser.RightBracket);
                    break;

                case 2:
                    localctx = new PostfixExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, CParser.RULE_postfixExpression);
                    this.state = 279;
                    if (!( this.precpred(this._ctx, 9))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 9)");
                    }
                    this.state = 280;
                    this.match(CParser.LeftParen);
                    this.state = 282;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CParser.T__0) | (1 << CParser.T__1) | (1 << CParser.T__2))) !== 0) || ((((_la - 39)) & ~0x1f) == 0 && ((1 << (_la - 39)) & ((1 << (CParser.Sizeof - 39)) | (1 << (CParser.Alignof - 39)) | (1 << (CParser.Generic - 39)) | (1 << (CParser.LeftParen - 39)))) !== 0) || ((((_la - 71)) & ~0x1f) == 0 && ((1 << (_la - 71)) & ((1 << (CParser.Plus - 71)) | (1 << (CParser.PlusPlus - 71)) | (1 << (CParser.Minus - 71)) | (1 << (CParser.MinusMinus - 71)) | (1 << (CParser.Star - 71)) | (1 << (CParser.And - 71)) | (1 << (CParser.AndAnd - 71)) | (1 << (CParser.Not - 71)) | (1 << (CParser.Tilde - 71)))) !== 0) || ((((_la - 105)) & ~0x1f) == 0 && ((1 << (_la - 105)) & ((1 << (CParser.Identifier - 105)) | (1 << (CParser.Constant - 105)) | (1 << (CParser.DigitSequence - 105)) | (1 << (CParser.StringLiteral - 105)))) !== 0)) {
                        this.state = 281;
                        this.argumentExpressionList(0);
                    }

                    this.state = 284;
                    this.match(CParser.RightParen);
                    break;

                case 3:
                    localctx = new PostfixExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, CParser.RULE_postfixExpression);
                    this.state = 285;
                    if (!( this.precpred(this._ctx, 8))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 8)");
                    }
                    this.state = 286;
                    this.match(CParser.Dot);
                    this.state = 287;
                    this.match(CParser.Identifier);
                    break;

                case 4:
                    localctx = new PostfixExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, CParser.RULE_postfixExpression);
                    this.state = 288;
                    if (!( this.precpred(this._ctx, 7))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 7)");
                    }
                    this.state = 289;
                    this.match(CParser.Arrow);
                    this.state = 290;
                    this.match(CParser.Identifier);
                    break;

                case 5:
                    localctx = new PostfixExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, CParser.RULE_postfixExpression);
                    this.state = 291;
                    if (!( this.precpred(this._ctx, 6))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 6)");
                    }
                    this.state = 292;
                    this.match(CParser.PlusPlus);
                    break;

                case 6:
                    localctx = new PostfixExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, CParser.RULE_postfixExpression);
                    this.state = 293;
                    if (!( this.precpred(this._ctx, 5))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 5)");
                    }
                    this.state = 294;
                    this.match(CParser.MinusMinus);
                    break;

                } 
            }
            this.state = 299;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,8,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function ArgumentExpressionListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CParser.RULE_argumentExpressionList;
    return this;
}

ArgumentExpressionListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ArgumentExpressionListContext.prototype.constructor = ArgumentExpressionListContext;

ArgumentExpressionListContext.prototype.assignmentExpression = function() {
    return this.getTypedRuleContext(AssignmentExpressionContext,0);
};

ArgumentExpressionListContext.prototype.argumentExpressionList = function() {
    return this.getTypedRuleContext(ArgumentExpressionListContext,0);
};

ArgumentExpressionListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CVisitor ) {
        return visitor.visitArgumentExpressionList(this);
    } else {
        return visitor.visitChildren(this);
    }
};



CParser.prototype.argumentExpressionList = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new ArgumentExpressionListContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 10;
    this.enterRecursionRule(localctx, 10, CParser.RULE_argumentExpressionList, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 301;
        this.assignmentExpression();
        this._ctx.stop = this._input.LT(-1);
        this.state = 308;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,9,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new ArgumentExpressionListContext(this, _parentctx, _parentState);
                this.pushNewRecursionContext(localctx, _startState, CParser.RULE_argumentExpressionList);
                this.state = 303;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 304;
                this.match(CParser.Comma);
                this.state = 305;
                this.assignmentExpression(); 
            }
            this.state = 310;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,9,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function UnaryExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CParser.RULE_unaryExpression;
    return this;
}

UnaryExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UnaryExpressionContext.prototype.constructor = UnaryExpressionContext;

UnaryExpressionContext.prototype.postfixExpression = function() {
    return this.getTypedRuleContext(PostfixExpressionContext,0);
};

UnaryExpressionContext.prototype.unaryExpression = function() {
    return this.getTypedRuleContext(UnaryExpressionContext,0);
};

UnaryExpressionContext.prototype.unaryOperator = function() {
    return this.getTypedRuleContext(UnaryOperatorContext,0);
};

UnaryExpressionContext.prototype.castExpression = function() {
    return this.getTypedRuleContext(CastExpressionContext,0);
};

UnaryExpressionContext.prototype.typeName = function() {
    return this.getTypedRuleContext(TypeNameContext,0);
};

UnaryExpressionContext.prototype.Identifier = function() {
    return this.getToken(CParser.Identifier, 0);
};

UnaryExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CVisitor ) {
        return visitor.visitUnaryExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CParser.UnaryExpressionContext = UnaryExpressionContext;

CParser.prototype.unaryExpression = function() {

    var localctx = new UnaryExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 12, CParser.RULE_unaryExpression);
    try {
        this.state = 333;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,10,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 311;
            this.postfixExpression(0);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 312;
            this.match(CParser.PlusPlus);
            this.state = 313;
            this.unaryExpression();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 314;
            this.match(CParser.MinusMinus);
            this.state = 315;
            this.unaryExpression();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 316;
            this.unaryOperator();
            this.state = 317;
            this.castExpression();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 319;
            this.match(CParser.Sizeof);
            this.state = 320;
            this.unaryExpression();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 321;
            this.match(CParser.Sizeof);
            this.state = 322;
            this.match(CParser.LeftParen);
            this.state = 323;
            this.typeName();
            this.state = 324;
            this.match(CParser.RightParen);
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 326;
            this.match(CParser.Alignof);
            this.state = 327;
            this.match(CParser.LeftParen);
            this.state = 328;
            this.typeName();
            this.state = 329;
            this.match(CParser.RightParen);
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 331;
            this.match(CParser.AndAnd);
            this.state = 332;
            this.match(CParser.Identifier);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function UnaryOperatorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CParser.RULE_unaryOperator;
    return this;
}

UnaryOperatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UnaryOperatorContext.prototype.constructor = UnaryOperatorContext;


UnaryOperatorContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CVisitor ) {
        return visitor.visitUnaryOperator(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CParser.UnaryOperatorContext = UnaryOperatorContext;

CParser.prototype.unaryOperator = function() {

    var localctx = new UnaryOperatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 14, CParser.RULE_unaryOperator);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 335;
        _la = this._input.LA(1);
        if(!(((((_la - 71)) & ~0x1f) == 0 && ((1 << (_la - 71)) & ((1 << (CParser.Plus - 71)) | (1 << (CParser.Minus - 71)) | (1 << (CParser.Star - 71)) | (1 << (CParser.And - 71)) | (1 << (CParser.Not - 71)) | (1 << (CParser.Tilde - 71)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CastExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CParser.RULE_castExpression;
    return this;
}

CastExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CastExpressionContext.prototype.constructor = CastExpressionContext;

CastExpressionContext.prototype.unaryExpression = function() {
    return this.getTypedRuleContext(UnaryExpressionContext,0);
};

CastExpressionContext.prototype.typeName = function() {
    return this.getTypedRuleContext(TypeNameContext,0);
};

CastExpressionContext.prototype.castExpression = function() {
    return this.getTypedRuleContext(CastExpressionContext,0);
};

CastExpressionContext.prototype.DigitSequence = function() {
    return this.getToken(CParser.DigitSequence, 0);
};

CastExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CVisitor ) {
        return visitor.visitCastExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CParser.CastExpressionContext = CastExpressionContext;

CParser.prototype.castExpression = function() {

    var localctx = new CastExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 16, CParser.RULE_castExpression);
    try {
        this.state = 350;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,11,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 337;
            this.unaryExpression();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 338;
            this.match(CParser.LeftParen);
            this.state = 339;
            this.typeName();
            this.state = 340;
            this.match(CParser.RightParen);
            this.state = 341;
            this.castExpression();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 343;
            this.match(CParser.T__0);
            this.state = 344;
            this.match(CParser.LeftParen);
            this.state = 345;
            this.typeName();
            this.state = 346;
            this.match(CParser.RightParen);
            this.state = 347;
            this.castExpression();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 349;
            this.match(CParser.DigitSequence);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function MultiplicativeExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CParser.RULE_multiplicativeExpression;
    return this;
}

MultiplicativeExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MultiplicativeExpressionContext.prototype.constructor = MultiplicativeExpressionContext;

MultiplicativeExpressionContext.prototype.castExpression = function() {
    return this.getTypedRuleContext(CastExpressionContext,0);
};

MultiplicativeExpressionContext.prototype.multiplicativeExpression = function() {
    return this.getTypedRuleContext(MultiplicativeExpressionContext,0);
};

MultiplicativeExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CVisitor ) {
        return visitor.visitMultiplicativeExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};



CParser.prototype.multiplicativeExpression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new MultiplicativeExpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 18;
    this.enterRecursionRule(localctx, 18, CParser.RULE_multiplicativeExpression, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 353;
        this.castExpression();
        this._ctx.stop = this._input.LT(-1);
        this.state = 366;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,13,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 364;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,12,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new MultiplicativeExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, CParser.RULE_multiplicativeExpression);
                    this.state = 355;
                    if (!( this.precpred(this._ctx, 3))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
                    }
                    this.state = 356;
                    this.match(CParser.Star);
                    this.state = 357;
                    this.castExpression();
                    break;

                case 2:
                    localctx = new MultiplicativeExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, CParser.RULE_multiplicativeExpression);
                    this.state = 358;
                    if (!( this.precpred(this._ctx, 2))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
                    }
                    this.state = 359;
                    this.match(CParser.Div);
                    this.state = 360;
                    this.castExpression();
                    break;

                case 3:
                    localctx = new MultiplicativeExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, CParser.RULE_multiplicativeExpression);
                    this.state = 361;
                    if (!( this.precpred(this._ctx, 1))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                    }
                    this.state = 362;
                    this.match(CParser.Mod);
                    this.state = 363;
                    this.castExpression();
                    break;

                } 
            }
            this.state = 368;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,13,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function AdditiveExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CParser.RULE_additiveExpression;
    return this;
}

AdditiveExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AdditiveExpressionContext.prototype.constructor = AdditiveExpressionContext;

AdditiveExpressionContext.prototype.multiplicativeExpression = function() {
    return this.getTypedRuleContext(MultiplicativeExpressionContext,0);
};

AdditiveExpressionContext.prototype.additiveExpression = function() {
    return this.getTypedRuleContext(AdditiveExpressionContext,0);
};

AdditiveExpressionContext.prototype.Plus = function() {
    return this.getToken(CParser.Plus, 0);
};

AdditiveExpressionContext.prototype.Minus = function() {
    return this.getToken(CParser.Minus, 0);
};

AdditiveExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CVisitor ) {
        return visitor.visitAdditiveExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};



CParser.prototype.additiveExpression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new AdditiveExpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 20;
    this.enterRecursionRule(localctx, 20, CParser.RULE_additiveExpression, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 370;
        this.multiplicativeExpression(0);
        this._ctx.stop = this._input.LT(-1);
        this.state = 380;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,15,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 378;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,14,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new AdditiveExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, CParser.RULE_additiveExpression);
                    this.state = 372;
                    if (!( this.precpred(this._ctx, 2))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
                    }
                    this.state = 373;
                    this.match(CParser.Plus);
                    this.state = 374;
                    this.multiplicativeExpression(0);
                    break;

                case 2:
                    localctx = new AdditiveExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, CParser.RULE_additiveExpression);
                    this.state = 375;
                    if (!( this.precpred(this._ctx, 1))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                    }
                    this.state = 376;
                    this.match(CParser.Minus);
                    this.state = 377;
                    this.multiplicativeExpression(0);
                    break;

                } 
            }
            this.state = 382;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,15,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function ShiftExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CParser.RULE_shiftExpression;
    return this;
}

ShiftExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ShiftExpressionContext.prototype.constructor = ShiftExpressionContext;

ShiftExpressionContext.prototype.additiveExpression = function() {
    return this.getTypedRuleContext(AdditiveExpressionContext,0);
};

ShiftExpressionContext.prototype.shiftExpression = function() {
    return this.getTypedRuleContext(ShiftExpressionContext,0);
};

ShiftExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CVisitor ) {
        return visitor.visitShiftExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};



CParser.prototype.shiftExpression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new ShiftExpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 22;
    this.enterRecursionRule(localctx, 22, CParser.RULE_shiftExpression, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 384;
        this.additiveExpression(0);
        this._ctx.stop = this._input.LT(-1);
        this.state = 394;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,17,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 392;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,16,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new ShiftExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, CParser.RULE_shiftExpression);
                    this.state = 386;
                    if (!( this.precpred(this._ctx, 2))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
                    }
                    this.state = 387;
                    this.match(CParser.LeftShift);
                    this.state = 388;
                    this.additiveExpression(0);
                    break;

                case 2:
                    localctx = new ShiftExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, CParser.RULE_shiftExpression);
                    this.state = 389;
                    if (!( this.precpred(this._ctx, 1))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                    }
                    this.state = 390;
                    this.match(CParser.RightShift);
                    this.state = 391;
                    this.additiveExpression(0);
                    break;

                } 
            }
            this.state = 396;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,17,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function RelationalExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CParser.RULE_relationalExpression;
    return this;
}

RelationalExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RelationalExpressionContext.prototype.constructor = RelationalExpressionContext;

RelationalExpressionContext.prototype.shiftExpression = function() {
    return this.getTypedRuleContext(ShiftExpressionContext,0);
};

RelationalExpressionContext.prototype.relationalExpression = function() {
    return this.getTypedRuleContext(RelationalExpressionContext,0);
};

RelationalExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CVisitor ) {
        return visitor.visitRelationalExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};



CParser.prototype.relationalExpression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new RelationalExpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 24;
    this.enterRecursionRule(localctx, 24, CParser.RULE_relationalExpression, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 398;
        this.shiftExpression(0);
        this._ctx.stop = this._input.LT(-1);
        this.state = 414;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,19,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 412;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,18,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new RelationalExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, CParser.RULE_relationalExpression);
                    this.state = 400;
                    if (!( this.precpred(this._ctx, 4))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 4)");
                    }
                    this.state = 401;
                    this.match(CParser.Less);
                    this.state = 402;
                    this.shiftExpression(0);
                    break;

                case 2:
                    localctx = new RelationalExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, CParser.RULE_relationalExpression);
                    this.state = 403;
                    if (!( this.precpred(this._ctx, 3))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
                    }
                    this.state = 404;
                    this.match(CParser.Greater);
                    this.state = 405;
                    this.shiftExpression(0);
                    break;

                case 3:
                    localctx = new RelationalExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, CParser.RULE_relationalExpression);
                    this.state = 406;
                    if (!( this.precpred(this._ctx, 2))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
                    }
                    this.state = 407;
                    this.match(CParser.LessEqual);
                    this.state = 408;
                    this.shiftExpression(0);
                    break;

                case 4:
                    localctx = new RelationalExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, CParser.RULE_relationalExpression);
                    this.state = 409;
                    if (!( this.precpred(this._ctx, 1))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                    }
                    this.state = 410;
                    this.match(CParser.GreaterEqual);
                    this.state = 411;
                    this.shiftExpression(0);
                    break;

                } 
            }
            this.state = 416;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,19,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function EqualityExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CParser.RULE_equalityExpression;
    return this;
}

EqualityExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EqualityExpressionContext.prototype.constructor = EqualityExpressionContext;

EqualityExpressionContext.prototype.relationalExpression = function() {
    return this.getTypedRuleContext(RelationalExpressionContext,0);
};

EqualityExpressionContext.prototype.equalityExpression = function() {
    return this.getTypedRuleContext(EqualityExpressionContext,0);
};

EqualityExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CVisitor ) {
        return visitor.visitEqualityExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};



CParser.prototype.equalityExpression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new EqualityExpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 26;
    this.enterRecursionRule(localctx, 26, CParser.RULE_equalityExpression, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 418;
        this.relationalExpression(0);
        this._ctx.stop = this._input.LT(-1);
        this.state = 428;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,21,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 426;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,20,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new EqualityExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, CParser.RULE_equalityExpression);
                    this.state = 420;
                    if (!( this.precpred(this._ctx, 2))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
                    }
                    this.state = 421;
                    this.match(CParser.Equal);
                    this.state = 422;
                    this.relationalExpression(0);
                    break;

                case 2:
                    localctx = new EqualityExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, CParser.RULE_equalityExpression);
                    this.state = 423;
                    if (!( this.precpred(this._ctx, 1))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                    }
                    this.state = 424;
                    this.match(CParser.NotEqual);
                    this.state = 425;
                    this.relationalExpression(0);
                    break;

                } 
            }
            this.state = 430;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,21,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function AndExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CParser.RULE_andExpression;
    return this;
}

AndExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AndExpressionContext.prototype.constructor = AndExpressionContext;

AndExpressionContext.prototype.equalityExpression = function() {
    return this.getTypedRuleContext(EqualityExpressionContext,0);
};

AndExpressionContext.prototype.andExpression = function() {
    return this.getTypedRuleContext(AndExpressionContext,0);
};

AndExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CVisitor ) {
        return visitor.visitAndExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};



CParser.prototype.andExpression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new AndExpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 28;
    this.enterRecursionRule(localctx, 28, CParser.RULE_andExpression, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 432;
        this.equalityExpression(0);
        this._ctx.stop = this._input.LT(-1);
        this.state = 439;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,22,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new AndExpressionContext(this, _parentctx, _parentState);
                this.pushNewRecursionContext(localctx, _startState, CParser.RULE_andExpression);
                this.state = 434;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 435;
                this.match(CParser.And);
                this.state = 436;
                this.equalityExpression(0); 
            }
            this.state = 441;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,22,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function ExclusiveOrExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CParser.RULE_exclusiveOrExpression;
    return this;
}

ExclusiveOrExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExclusiveOrExpressionContext.prototype.constructor = ExclusiveOrExpressionContext;

ExclusiveOrExpressionContext.prototype.andExpression = function() {
    return this.getTypedRuleContext(AndExpressionContext,0);
};

ExclusiveOrExpressionContext.prototype.exclusiveOrExpression = function() {
    return this.getTypedRuleContext(ExclusiveOrExpressionContext,0);
};

ExclusiveOrExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CVisitor ) {
        return visitor.visitExclusiveOrExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};



CParser.prototype.exclusiveOrExpression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new ExclusiveOrExpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 30;
    this.enterRecursionRule(localctx, 30, CParser.RULE_exclusiveOrExpression, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 443;
        this.andExpression(0);
        this._ctx.stop = this._input.LT(-1);
        this.state = 450;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,23,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new ExclusiveOrExpressionContext(this, _parentctx, _parentState);
                this.pushNewRecursionContext(localctx, _startState, CParser.RULE_exclusiveOrExpression);
                this.state = 445;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 446;
                this.match(CParser.Caret);
                this.state = 447;
                this.andExpression(0); 
            }
            this.state = 452;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,23,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function InclusiveOrExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CParser.RULE_inclusiveOrExpression;
    return this;
}

InclusiveOrExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InclusiveOrExpressionContext.prototype.constructor = InclusiveOrExpressionContext;

InclusiveOrExpressionContext.prototype.exclusiveOrExpression = function() {
    return this.getTypedRuleContext(ExclusiveOrExpressionContext,0);
};

InclusiveOrExpressionContext.prototype.inclusiveOrExpression = function() {
    return this.getTypedRuleContext(InclusiveOrExpressionContext,0);
};

InclusiveOrExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CVisitor ) {
        return visitor.visitInclusiveOrExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};



CParser.prototype.inclusiveOrExpression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new InclusiveOrExpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 32;
    this.enterRecursionRule(localctx, 32, CParser.RULE_inclusiveOrExpression, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 454;
        this.exclusiveOrExpression(0);
        this._ctx.stop = this._input.LT(-1);
        this.state = 461;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,24,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new InclusiveOrExpressionContext(this, _parentctx, _parentState);
                this.pushNewRecursionContext(localctx, _startState, CParser.RULE_inclusiveOrExpression);
                this.state = 456;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 457;
                this.match(CParser.Or);
                this.state = 458;
                this.exclusiveOrExpression(0); 
            }
            this.state = 463;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,24,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function LogicalAndExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CParser.RULE_logicalAndExpression;
    return this;
}

LogicalAndExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LogicalAndExpressionContext.prototype.constructor = LogicalAndExpressionContext;

LogicalAndExpressionContext.prototype.inclusiveOrExpression = function() {
    return this.getTypedRuleContext(InclusiveOrExpressionContext,0);
};

LogicalAndExpressionContext.prototype.logicalAndExpression = function() {
    return this.getTypedRuleContext(LogicalAndExpressionContext,0);
};

LogicalAndExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CVisitor ) {
        return visitor.visitLogicalAndExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};



CParser.prototype.logicalAndExpression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new LogicalAndExpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 34;
    this.enterRecursionRule(localctx, 34, CParser.RULE_logicalAndExpression, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 465;
        this.inclusiveOrExpression(0);
        this._ctx.stop = this._input.LT(-1);
        this.state = 472;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,25,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new LogicalAndExpressionContext(this, _parentctx, _parentState);
                this.pushNewRecursionContext(localctx, _startState, CParser.RULE_logicalAndExpression);
                this.state = 467;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 468;
                this.match(CParser.AndAnd);
                this.state = 469;
                this.inclusiveOrExpression(0); 
            }
            this.state = 474;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,25,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function LogicalOrExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CParser.RULE_logicalOrExpression;
    return this;
}

LogicalOrExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LogicalOrExpressionContext.prototype.constructor = LogicalOrExpressionContext;

LogicalOrExpressionContext.prototype.logicalAndExpression = function() {
    return this.getTypedRuleContext(LogicalAndExpressionContext,0);
};

LogicalOrExpressionContext.prototype.logicalOrExpression = function() {
    return this.getTypedRuleContext(LogicalOrExpressionContext,0);
};

LogicalOrExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CVisitor ) {
        return visitor.visitLogicalOrExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};



CParser.prototype.logicalOrExpression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new LogicalOrExpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 36;
    this.enterRecursionRule(localctx, 36, CParser.RULE_logicalOrExpression, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 476;
        this.logicalAndExpression(0);
        this._ctx.stop = this._input.LT(-1);
        this.state = 483;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,26,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new LogicalOrExpressionContext(this, _parentctx, _parentState);
                this.pushNewRecursionContext(localctx, _startState, CParser.RULE_logicalOrExpression);
                this.state = 478;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 479;
                this.match(CParser.OrOr);
                this.state = 480;
                this.logicalAndExpression(0); 
            }
            this.state = 485;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,26,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function ConditionalExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CParser.RULE_conditionalExpression;
    return this;
}

ConditionalExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConditionalExpressionContext.prototype.constructor = ConditionalExpressionContext;

ConditionalExpressionContext.prototype.logicalOrExpression = function() {
    return this.getTypedRuleContext(LogicalOrExpressionContext,0);
};

ConditionalExpressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

ConditionalExpressionContext.prototype.conditionalExpression = function() {
    return this.getTypedRuleContext(ConditionalExpressionContext,0);
};

ConditionalExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CVisitor ) {
        return visitor.visitConditionalExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CParser.ConditionalExpressionContext = ConditionalExpressionContext;

CParser.prototype.conditionalExpression = function() {

    var localctx = new ConditionalExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 38, CParser.RULE_conditionalExpression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 486;
        this.logicalOrExpression(0);
        this.state = 492;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,27,this._ctx);
        if(la_===1) {
            this.state = 487;
            this.match(CParser.Question);
            this.state = 488;
            this.expression(0);
            this.state = 489;
            this.match(CParser.Colon);
            this.state = 490;
            this.conditionalExpression();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AssignmentExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CParser.RULE_assignmentExpression;
    return this;
}

AssignmentExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AssignmentExpressionContext.prototype.constructor = AssignmentExpressionContext;

AssignmentExpressionContext.prototype.conditionalExpression = function() {
    return this.getTypedRuleContext(ConditionalExpressionContext,0);
};

AssignmentExpressionContext.prototype.unaryExpression = function() {
    return this.getTypedRuleContext(UnaryExpressionContext,0);
};

AssignmentExpressionContext.prototype.assignmentOperator = function() {
    return this.getTypedRuleContext(AssignmentOperatorContext,0);
};

AssignmentExpressionContext.prototype.assignmentExpression = function() {
    return this.getTypedRuleContext(AssignmentExpressionContext,0);
};

AssignmentExpressionContext.prototype.DigitSequence = function() {
    return this.getToken(CParser.DigitSequence, 0);
};

AssignmentExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CVisitor ) {
        return visitor.visitAssignmentExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CParser.AssignmentExpressionContext = AssignmentExpressionContext;

CParser.prototype.assignmentExpression = function() {

    var localctx = new AssignmentExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 40, CParser.RULE_assignmentExpression);
    try {
        this.state = 500;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,28,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 494;
            this.conditionalExpression();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 495;
            this.unaryExpression();
            this.state = 496;
            this.assignmentOperator();
            this.state = 497;
            this.assignmentExpression();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 499;
            this.match(CParser.DigitSequence);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AssignmentOperatorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CParser.RULE_assignmentOperator;
    return this;
}

AssignmentOperatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AssignmentOperatorContext.prototype.constructor = AssignmentOperatorContext;


AssignmentOperatorContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CVisitor ) {
        return visitor.visitAssignmentOperator(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CParser.AssignmentOperatorContext = AssignmentOperatorContext;

CParser.prototype.assignmentOperator = function() {

    var localctx = new AssignmentOperatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 42, CParser.RULE_assignmentOperator);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 502;
        _la = this._input.LA(1);
        if(!(((((_la - 89)) & ~0x1f) == 0 && ((1 << (_la - 89)) & ((1 << (CParser.Assign - 89)) | (1 << (CParser.StarAssign - 89)) | (1 << (CParser.DivAssign - 89)) | (1 << (CParser.ModAssign - 89)) | (1 << (CParser.PlusAssign - 89)) | (1 << (CParser.MinusAssign - 89)) | (1 << (CParser.LeftShiftAssign - 89)) | (1 << (CParser.RightShiftAssign - 89)) | (1 << (CParser.AndAssign - 89)) | (1 << (CParser.XorAssign - 89)) | (1 << (CParser.OrAssign - 89)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CParser.RULE_expression;
    return this;
}

ExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExpressionContext.prototype.constructor = ExpressionContext;

ExpressionContext.prototype.assignmentExpression = function() {
    return this.getTypedRuleContext(AssignmentExpressionContext,0);
};

ExpressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

ExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CVisitor ) {
        return visitor.visitExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};



CParser.prototype.expression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new ExpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 44;
    this.enterRecursionRule(localctx, 44, CParser.RULE_expression, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 505;
        this.assignmentExpression();
        this._ctx.stop = this._input.LT(-1);
        this.state = 512;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,29,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new ExpressionContext(this, _parentctx, _parentState);
                this.pushNewRecursionContext(localctx, _startState, CParser.RULE_expression);
                this.state = 507;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 508;
                this.match(CParser.Comma);
                this.state = 509;
                this.assignmentExpression(); 
            }
            this.state = 514;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,29,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function ConstantExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CParser.RULE_constantExpression;
    return this;
}

ConstantExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConstantExpressionContext.prototype.constructor = ConstantExpressionContext;

ConstantExpressionContext.prototype.conditionalExpression = function() {
    return this.getTypedRuleContext(ConditionalExpressionContext,0);
};

ConstantExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CVisitor ) {
        return visitor.visitConstantExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CParser.ConstantExpressionContext = ConstantExpressionContext;

CParser.prototype.constantExpression = function() {

    var localctx = new ConstantExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 46, CParser.RULE_constantExpression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 515;
        this.conditionalExpression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CParser.RULE_declaration;
    return this;
}

DeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DeclarationContext.prototype.constructor = DeclarationContext;

DeclarationContext.prototype.declarationSpecifiers = function() {
    return this.getTypedRuleContext(DeclarationSpecifiersContext,0);
};

DeclarationContext.prototype.initDeclaratorList = function() {
    return this.getTypedRuleContext(InitDeclaratorListContext,0);
};

DeclarationContext.prototype.staticAssertDeclaration = function() {
    return this.getTypedRuleContext(StaticAssertDeclarationContext,0);
};

DeclarationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CVisitor ) {
        return visitor.visitDeclaration(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CParser.DeclarationContext = DeclarationContext;

CParser.prototype.declaration = function() {

    var localctx = new DeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 48, CParser.RULE_declaration);
    try {
        this.state = 525;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,30,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 517;
            this.declarationSpecifiers();
            this.state = 518;
            this.initDeclaratorList(0);
            this.state = 519;
            this.match(CParser.Semi);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 521;
            this.declarationSpecifiers();
            this.state = 522;
            this.match(CParser.Semi);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 524;
            this.staticAssertDeclaration();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DeclarationSpecifiersContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CParser.RULE_declarationSpecifiers;
    return this;
}

DeclarationSpecifiersContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DeclarationSpecifiersContext.prototype.constructor = DeclarationSpecifiersContext;

DeclarationSpecifiersContext.prototype.declarationSpecifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(DeclarationSpecifierContext);
    } else {
        return this.getTypedRuleContext(DeclarationSpecifierContext,i);
    }
};

DeclarationSpecifiersContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CVisitor ) {
        return visitor.visitDeclarationSpecifiers(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CParser.DeclarationSpecifiersContext = DeclarationSpecifiersContext;

CParser.prototype.declarationSpecifiers = function() {

    var localctx = new DeclarationSpecifiersContext(this, this._ctx, this.state);
    this.enterRule(localctx, 50, CParser.RULE_declarationSpecifiers);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 528; 
        this._errHandler.sync(this);
        var _alt = 1;
        do {
        	switch (_alt) {
        	case 1:
        		this.state = 527;
        		this.declarationSpecifier();
        		break;
        	default:
        		throw new antlr4.error.NoViableAltException(this);
        	}
        	this.state = 530; 
        	this._errHandler.sync(this);
        	_alt = this._interp.adaptivePredict(this._input,31, this._ctx);
        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DeclarationSpecifiers2Context(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CParser.RULE_declarationSpecifiers2;
    return this;
}

DeclarationSpecifiers2Context.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DeclarationSpecifiers2Context.prototype.constructor = DeclarationSpecifiers2Context;

DeclarationSpecifiers2Context.prototype.declarationSpecifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(DeclarationSpecifierContext);
    } else {
        return this.getTypedRuleContext(DeclarationSpecifierContext,i);
    }
};

DeclarationSpecifiers2Context.prototype.accept = function(visitor) {
    if ( visitor instanceof CVisitor ) {
        return visitor.visitDeclarationSpecifiers2(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CParser.DeclarationSpecifiers2Context = DeclarationSpecifiers2Context;

CParser.prototype.declarationSpecifiers2 = function() {

    var localctx = new DeclarationSpecifiers2Context(this, this._ctx, this.state);
    this.enterRule(localctx, 52, CParser.RULE_declarationSpecifiers2);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 533; 
        this._errHandler.sync(this);
        var _alt = 1;
        do {
        	switch (_alt) {
        	case 1:
        		this.state = 532;
        		this.declarationSpecifier();
        		break;
        	default:
        		throw new antlr4.error.NoViableAltException(this);
        	}
        	this.state = 535; 
        	this._errHandler.sync(this);
        	_alt = this._interp.adaptivePredict(this._input,32, this._ctx);
        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DeclarationSpecifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CParser.RULE_declarationSpecifier;
    return this;
}

DeclarationSpecifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DeclarationSpecifierContext.prototype.constructor = DeclarationSpecifierContext;

DeclarationSpecifierContext.prototype.storageClassSpecifier = function() {
    return this.getTypedRuleContext(StorageClassSpecifierContext,0);
};

DeclarationSpecifierContext.prototype.typeSpecifier = function() {
    return this.getTypedRuleContext(TypeSpecifierContext,0);
};

DeclarationSpecifierContext.prototype.typeQualifier = function() {
    return this.getTypedRuleContext(TypeQualifierContext,0);
};

DeclarationSpecifierContext.prototype.functionSpecifier = function() {
    return this.getTypedRuleContext(FunctionSpecifierContext,0);
};

DeclarationSpecifierContext.prototype.alignmentSpecifier = function() {
    return this.getTypedRuleContext(AlignmentSpecifierContext,0);
};

DeclarationSpecifierContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CVisitor ) {
        return visitor.visitDeclarationSpecifier(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CParser.DeclarationSpecifierContext = DeclarationSpecifierContext;

CParser.prototype.declarationSpecifier = function() {

    var localctx = new DeclarationSpecifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 54, CParser.RULE_declarationSpecifier);
    try {
        this.state = 542;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,33,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 537;
            this.storageClassSpecifier();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 538;
            this.typeSpecifier();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 539;
            this.typeQualifier();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 540;
            this.functionSpecifier();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 541;
            this.alignmentSpecifier();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function InitDeclaratorListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CParser.RULE_initDeclaratorList;
    return this;
}

InitDeclaratorListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InitDeclaratorListContext.prototype.constructor = InitDeclaratorListContext;

InitDeclaratorListContext.prototype.initDeclarator = function() {
    return this.getTypedRuleContext(InitDeclaratorContext,0);
};

InitDeclaratorListContext.prototype.initDeclaratorList = function() {
    return this.getTypedRuleContext(InitDeclaratorListContext,0);
};

InitDeclaratorListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CVisitor ) {
        return visitor.visitInitDeclaratorList(this);
    } else {
        return visitor.visitChildren(this);
    }
};



CParser.prototype.initDeclaratorList = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new InitDeclaratorListContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 56;
    this.enterRecursionRule(localctx, 56, CParser.RULE_initDeclaratorList, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 545;
        this.initDeclarator();
        this._ctx.stop = this._input.LT(-1);
        this.state = 552;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,34,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new InitDeclaratorListContext(this, _parentctx, _parentState);
                this.pushNewRecursionContext(localctx, _startState, CParser.RULE_initDeclaratorList);
                this.state = 547;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 548;
                this.match(CParser.Comma);
                this.state = 549;
                this.initDeclarator(); 
            }
            this.state = 554;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,34,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function InitDeclaratorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CParser.RULE_initDeclarator;
    return this;
}

InitDeclaratorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InitDeclaratorContext.prototype.constructor = InitDeclaratorContext;

InitDeclaratorContext.prototype.declarator = function() {
    return this.getTypedRuleContext(DeclaratorContext,0);
};

InitDeclaratorContext.prototype.initializer = function() {
    return this.getTypedRuleContext(InitializerContext,0);
};

InitDeclaratorContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CVisitor ) {
        return visitor.visitInitDeclarator(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CParser.InitDeclaratorContext = InitDeclaratorContext;

CParser.prototype.initDeclarator = function() {

    var localctx = new InitDeclaratorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 58, CParser.RULE_initDeclarator);
    try {
        this.state = 560;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,35,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 555;
            this.declarator();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 556;
            this.declarator();
            this.state = 557;
            this.match(CParser.Assign);
            this.state = 558;
            this.initializer();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function StorageClassSpecifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CParser.RULE_storageClassSpecifier;
    return this;
}

StorageClassSpecifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StorageClassSpecifierContext.prototype.constructor = StorageClassSpecifierContext;


StorageClassSpecifierContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CVisitor ) {
        return visitor.visitStorageClassSpecifier(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CParser.StorageClassSpecifierContext = StorageClassSpecifierContext;

CParser.prototype.storageClassSpecifier = function() {

    var localctx = new StorageClassSpecifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 60, CParser.RULE_storageClassSpecifier);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 562;
        _la = this._input.LA(1);
        if(!(_la===CParser.Auto || _la===CParser.Extern || ((((_la - 34)) & ~0x1f) == 0 && ((1 << (_la - 34)) & ((1 << (CParser.Register - 34)) | (1 << (CParser.Static - 34)) | (1 << (CParser.Typedef - 34)) | (1 << (CParser.ThreadLocal - 34)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TypeSpecifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CParser.RULE_typeSpecifier;
    return this;
}

TypeSpecifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeSpecifierContext.prototype.constructor = TypeSpecifierContext;

TypeSpecifierContext.prototype.atomicTypeSpecifier = function() {
    return this.getTypedRuleContext(AtomicTypeSpecifierContext,0);
};

TypeSpecifierContext.prototype.structOrUnionSpecifier = function() {
    return this.getTypedRuleContext(StructOrUnionSpecifierContext,0);
};

TypeSpecifierContext.prototype.enumSpecifier = function() {
    return this.getTypedRuleContext(EnumSpecifierContext,0);
};

TypeSpecifierContext.prototype.typedefName = function() {
    return this.getTypedRuleContext(TypedefNameContext,0);
};

TypeSpecifierContext.prototype.constantExpression = function() {
    return this.getTypedRuleContext(ConstantExpressionContext,0);
};

TypeSpecifierContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CVisitor ) {
        return visitor.visitTypeSpecifier(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CParser.TypeSpecifierContext = TypeSpecifierContext;

CParser.prototype.typeSpecifier = function() {

    var localctx = new TypeSpecifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 62, CParser.RULE_typeSpecifier);
    var _la = 0; // Token type
    try {
        this.state = 578;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CParser.T__3:
        case CParser.T__4:
        case CParser.T__5:
        case CParser.Char:
        case CParser.Double:
        case CParser.Float:
        case CParser.Int:
        case CParser.Long:
        case CParser.Short:
        case CParser.Signed:
        case CParser.Unsigned:
        case CParser.Void:
        case CParser.Bool:
        case CParser.Complex:
            this.enterOuterAlt(localctx, 1);
            this.state = 564;
            _la = this._input.LA(1);
            if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CParser.T__3) | (1 << CParser.T__4) | (1 << CParser.T__5) | (1 << CParser.Char) | (1 << CParser.Double) | (1 << CParser.Float))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (CParser.Int - 32)) | (1 << (CParser.Long - 32)) | (1 << (CParser.Short - 32)) | (1 << (CParser.Signed - 32)) | (1 << (CParser.Unsigned - 32)) | (1 << (CParser.Void - 32)) | (1 << (CParser.Bool - 32)) | (1 << (CParser.Complex - 32)))) !== 0))) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            break;
        case CParser.T__0:
            this.enterOuterAlt(localctx, 2);
            this.state = 565;
            this.match(CParser.T__0);
            this.state = 566;
            this.match(CParser.LeftParen);
            this.state = 567;
            _la = this._input.LA(1);
            if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CParser.T__3) | (1 << CParser.T__4) | (1 << CParser.T__5))) !== 0))) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 568;
            this.match(CParser.RightParen);
            break;
        case CParser.Atomic:
            this.enterOuterAlt(localctx, 3);
            this.state = 569;
            this.atomicTypeSpecifier();
            break;
        case CParser.Struct:
        case CParser.Union:
            this.enterOuterAlt(localctx, 4);
            this.state = 570;
            this.structOrUnionSpecifier();
            break;
        case CParser.Enum:
            this.enterOuterAlt(localctx, 5);
            this.state = 571;
            this.enumSpecifier();
            break;
        case CParser.Identifier:
            this.enterOuterAlt(localctx, 6);
            this.state = 572;
            this.typedefName();
            break;
        case CParser.T__6:
            this.enterOuterAlt(localctx, 7);
            this.state = 573;
            this.match(CParser.T__6);
            this.state = 574;
            this.match(CParser.LeftParen);
            this.state = 575;
            this.constantExpression();
            this.state = 576;
            this.match(CParser.RightParen);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function StructOrUnionSpecifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CParser.RULE_structOrUnionSpecifier;
    return this;
}

StructOrUnionSpecifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StructOrUnionSpecifierContext.prototype.constructor = StructOrUnionSpecifierContext;

StructOrUnionSpecifierContext.prototype.structOrUnion = function() {
    return this.getTypedRuleContext(StructOrUnionContext,0);
};

StructOrUnionSpecifierContext.prototype.structDeclarationList = function() {
    return this.getTypedRuleContext(StructDeclarationListContext,0);
};

StructOrUnionSpecifierContext.prototype.Identifier = function() {
    return this.getToken(CParser.Identifier, 0);
};

StructOrUnionSpecifierContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CVisitor ) {
        return visitor.visitStructOrUnionSpecifier(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CParser.StructOrUnionSpecifierContext = StructOrUnionSpecifierContext;

CParser.prototype.structOrUnionSpecifier = function() {

    var localctx = new StructOrUnionSpecifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 64, CParser.RULE_structOrUnionSpecifier);
    var _la = 0; // Token type
    try {
        this.state = 591;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,38,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 580;
            this.structOrUnion();
            this.state = 582;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CParser.Identifier) {
                this.state = 581;
                this.match(CParser.Identifier);
            }

            this.state = 584;
            this.match(CParser.LeftBrace);
            this.state = 585;
            this.structDeclarationList(0);
            this.state = 586;
            this.match(CParser.RightBrace);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 588;
            this.structOrUnion();
            this.state = 589;
            this.match(CParser.Identifier);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function StructOrUnionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CParser.RULE_structOrUnion;
    return this;
}

StructOrUnionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StructOrUnionContext.prototype.constructor = StructOrUnionContext;


StructOrUnionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CVisitor ) {
        return visitor.visitStructOrUnion(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CParser.StructOrUnionContext = StructOrUnionContext;

CParser.prototype.structOrUnion = function() {

    var localctx = new StructOrUnionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 66, CParser.RULE_structOrUnion);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 593;
        _la = this._input.LA(1);
        if(!(_la===CParser.Struct || _la===CParser.Union)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function StructDeclarationListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CParser.RULE_structDeclarationList;
    return this;
}

StructDeclarationListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StructDeclarationListContext.prototype.constructor = StructDeclarationListContext;

StructDeclarationListContext.prototype.structDeclaration = function() {
    return this.getTypedRuleContext(StructDeclarationContext,0);
};

StructDeclarationListContext.prototype.structDeclarationList = function() {
    return this.getTypedRuleContext(StructDeclarationListContext,0);
};

StructDeclarationListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CVisitor ) {
        return visitor.visitStructDeclarationList(this);
    } else {
        return visitor.visitChildren(this);
    }
};



CParser.prototype.structDeclarationList = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new StructDeclarationListContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 68;
    this.enterRecursionRule(localctx, 68, CParser.RULE_structDeclarationList, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 596;
        this.structDeclaration();
        this._ctx.stop = this._input.LT(-1);
        this.state = 602;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,39,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new StructDeclarationListContext(this, _parentctx, _parentState);
                this.pushNewRecursionContext(localctx, _startState, CParser.RULE_structDeclarationList);
                this.state = 598;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 599;
                this.structDeclaration(); 
            }
            this.state = 604;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,39,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function StructDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CParser.RULE_structDeclaration;
    return this;
}

StructDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StructDeclarationContext.prototype.constructor = StructDeclarationContext;

StructDeclarationContext.prototype.specifierQualifierList = function() {
    return this.getTypedRuleContext(SpecifierQualifierListContext,0);
};

StructDeclarationContext.prototype.structDeclaratorList = function() {
    return this.getTypedRuleContext(StructDeclaratorListContext,0);
};

StructDeclarationContext.prototype.staticAssertDeclaration = function() {
    return this.getTypedRuleContext(StaticAssertDeclarationContext,0);
};

StructDeclarationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CVisitor ) {
        return visitor.visitStructDeclaration(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CParser.StructDeclarationContext = StructDeclarationContext;

CParser.prototype.structDeclaration = function() {

    var localctx = new StructDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 70, CParser.RULE_structDeclaration);
    var _la = 0; // Token type
    try {
        this.state = 612;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CParser.T__0:
        case CParser.T__3:
        case CParser.T__4:
        case CParser.T__5:
        case CParser.T__6:
        case CParser.Char:
        case CParser.Const:
        case CParser.Double:
        case CParser.Enum:
        case CParser.Float:
        case CParser.Int:
        case CParser.Long:
        case CParser.Restrict:
        case CParser.Short:
        case CParser.Signed:
        case CParser.Struct:
        case CParser.Union:
        case CParser.Unsigned:
        case CParser.Void:
        case CParser.Volatile:
        case CParser.Atomic:
        case CParser.Bool:
        case CParser.Complex:
        case CParser.Identifier:
            this.enterOuterAlt(localctx, 1);
            this.state = 605;
            this.specifierQualifierList();
            this.state = 607;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(((((_la - 59)) & ~0x1f) == 0 && ((1 << (_la - 59)) & ((1 << (CParser.LeftParen - 59)) | (1 << (CParser.Star - 59)) | (1 << (CParser.Caret - 59)) | (1 << (CParser.Colon - 59)))) !== 0) || _la===CParser.Identifier) {
                this.state = 606;
                this.structDeclaratorList(0);
            }

            this.state = 609;
            this.match(CParser.Semi);
            break;
        case CParser.StaticAssert:
            this.enterOuterAlt(localctx, 2);
            this.state = 611;
            this.staticAssertDeclaration();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SpecifierQualifierListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CParser.RULE_specifierQualifierList;
    return this;
}

SpecifierQualifierListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SpecifierQualifierListContext.prototype.constructor = SpecifierQualifierListContext;

SpecifierQualifierListContext.prototype.typeSpecifier = function() {
    return this.getTypedRuleContext(TypeSpecifierContext,0);
};

SpecifierQualifierListContext.prototype.specifierQualifierList = function() {
    return this.getTypedRuleContext(SpecifierQualifierListContext,0);
};

SpecifierQualifierListContext.prototype.typeQualifier = function() {
    return this.getTypedRuleContext(TypeQualifierContext,0);
};

SpecifierQualifierListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CVisitor ) {
        return visitor.visitSpecifierQualifierList(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CParser.SpecifierQualifierListContext = SpecifierQualifierListContext;

CParser.prototype.specifierQualifierList = function() {

    var localctx = new SpecifierQualifierListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 72, CParser.RULE_specifierQualifierList);
    try {
        this.state = 622;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,44,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 614;
            this.typeSpecifier();
            this.state = 616;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,42,this._ctx);
            if(la_===1) {
                this.state = 615;
                this.specifierQualifierList();

            }
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 618;
            this.typeQualifier();
            this.state = 620;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,43,this._ctx);
            if(la_===1) {
                this.state = 619;
                this.specifierQualifierList();

            }
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function StructDeclaratorListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CParser.RULE_structDeclaratorList;
    return this;
}

StructDeclaratorListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StructDeclaratorListContext.prototype.constructor = StructDeclaratorListContext;

StructDeclaratorListContext.prototype.structDeclarator = function() {
    return this.getTypedRuleContext(StructDeclaratorContext,0);
};

StructDeclaratorListContext.prototype.structDeclaratorList = function() {
    return this.getTypedRuleContext(StructDeclaratorListContext,0);
};

StructDeclaratorListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CVisitor ) {
        return visitor.visitStructDeclaratorList(this);
    } else {
        return visitor.visitChildren(this);
    }
};



CParser.prototype.structDeclaratorList = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new StructDeclaratorListContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 74;
    this.enterRecursionRule(localctx, 74, CParser.RULE_structDeclaratorList, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 625;
        this.structDeclarator();
        this._ctx.stop = this._input.LT(-1);
        this.state = 632;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,45,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new StructDeclaratorListContext(this, _parentctx, _parentState);
                this.pushNewRecursionContext(localctx, _startState, CParser.RULE_structDeclaratorList);
                this.state = 627;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 628;
                this.match(CParser.Comma);
                this.state = 629;
                this.structDeclarator(); 
            }
            this.state = 634;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,45,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function StructDeclaratorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CParser.RULE_structDeclarator;
    return this;
}

StructDeclaratorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StructDeclaratorContext.prototype.constructor = StructDeclaratorContext;

StructDeclaratorContext.prototype.declarator = function() {
    return this.getTypedRuleContext(DeclaratorContext,0);
};

StructDeclaratorContext.prototype.constantExpression = function() {
    return this.getTypedRuleContext(ConstantExpressionContext,0);
};

StructDeclaratorContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CVisitor ) {
        return visitor.visitStructDeclarator(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CParser.StructDeclaratorContext = StructDeclaratorContext;

CParser.prototype.structDeclarator = function() {

    var localctx = new StructDeclaratorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 76, CParser.RULE_structDeclarator);
    var _la = 0; // Token type
    try {
        this.state = 641;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,47,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 635;
            this.declarator();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 637;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(((((_la - 59)) & ~0x1f) == 0 && ((1 << (_la - 59)) & ((1 << (CParser.LeftParen - 59)) | (1 << (CParser.Star - 59)) | (1 << (CParser.Caret - 59)))) !== 0) || _la===CParser.Identifier) {
                this.state = 636;
                this.declarator();
            }

            this.state = 639;
            this.match(CParser.Colon);
            this.state = 640;
            this.constantExpression();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function EnumSpecifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CParser.RULE_enumSpecifier;
    return this;
}

EnumSpecifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EnumSpecifierContext.prototype.constructor = EnumSpecifierContext;

EnumSpecifierContext.prototype.enumeratorList = function() {
    return this.getTypedRuleContext(EnumeratorListContext,0);
};

EnumSpecifierContext.prototype.Identifier = function() {
    return this.getToken(CParser.Identifier, 0);
};

EnumSpecifierContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CVisitor ) {
        return visitor.visitEnumSpecifier(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CParser.EnumSpecifierContext = EnumSpecifierContext;

CParser.prototype.enumSpecifier = function() {

    var localctx = new EnumSpecifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 78, CParser.RULE_enumSpecifier);
    var _la = 0; // Token type
    try {
        this.state = 662;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,50,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 643;
            this.match(CParser.Enum);
            this.state = 645;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CParser.Identifier) {
                this.state = 644;
                this.match(CParser.Identifier);
            }

            this.state = 647;
            this.match(CParser.LeftBrace);
            this.state = 648;
            this.enumeratorList(0);
            this.state = 649;
            this.match(CParser.RightBrace);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 651;
            this.match(CParser.Enum);
            this.state = 653;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CParser.Identifier) {
                this.state = 652;
                this.match(CParser.Identifier);
            }

            this.state = 655;
            this.match(CParser.LeftBrace);
            this.state = 656;
            this.enumeratorList(0);
            this.state = 657;
            this.match(CParser.Comma);
            this.state = 658;
            this.match(CParser.RightBrace);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 660;
            this.match(CParser.Enum);
            this.state = 661;
            this.match(CParser.Identifier);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function EnumeratorListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CParser.RULE_enumeratorList;
    return this;
}

EnumeratorListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EnumeratorListContext.prototype.constructor = EnumeratorListContext;

EnumeratorListContext.prototype.enumerator = function() {
    return this.getTypedRuleContext(EnumeratorContext,0);
};

EnumeratorListContext.prototype.enumeratorList = function() {
    return this.getTypedRuleContext(EnumeratorListContext,0);
};

EnumeratorListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CVisitor ) {
        return visitor.visitEnumeratorList(this);
    } else {
        return visitor.visitChildren(this);
    }
};



CParser.prototype.enumeratorList = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new EnumeratorListContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 80;
    this.enterRecursionRule(localctx, 80, CParser.RULE_enumeratorList, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 665;
        this.enumerator();
        this._ctx.stop = this._input.LT(-1);
        this.state = 672;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,51,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new EnumeratorListContext(this, _parentctx, _parentState);
                this.pushNewRecursionContext(localctx, _startState, CParser.RULE_enumeratorList);
                this.state = 667;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 668;
                this.match(CParser.Comma);
                this.state = 669;
                this.enumerator(); 
            }
            this.state = 674;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,51,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function EnumeratorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CParser.RULE_enumerator;
    return this;
}

EnumeratorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EnumeratorContext.prototype.constructor = EnumeratorContext;

EnumeratorContext.prototype.enumerationConstant = function() {
    return this.getTypedRuleContext(EnumerationConstantContext,0);
};

EnumeratorContext.prototype.constantExpression = function() {
    return this.getTypedRuleContext(ConstantExpressionContext,0);
};

EnumeratorContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CVisitor ) {
        return visitor.visitEnumerator(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CParser.EnumeratorContext = EnumeratorContext;

CParser.prototype.enumerator = function() {

    var localctx = new EnumeratorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 82, CParser.RULE_enumerator);
    try {
        this.state = 680;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,52,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 675;
            this.enumerationConstant();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 676;
            this.enumerationConstant();
            this.state = 677;
            this.match(CParser.Assign);
            this.state = 678;
            this.constantExpression();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function EnumerationConstantContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CParser.RULE_enumerationConstant;
    return this;
}

EnumerationConstantContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EnumerationConstantContext.prototype.constructor = EnumerationConstantContext;

EnumerationConstantContext.prototype.Identifier = function() {
    return this.getToken(CParser.Identifier, 0);
};

EnumerationConstantContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CVisitor ) {
        return visitor.visitEnumerationConstant(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CParser.EnumerationConstantContext = EnumerationConstantContext;

CParser.prototype.enumerationConstant = function() {

    var localctx = new EnumerationConstantContext(this, this._ctx, this.state);
    this.enterRule(localctx, 84, CParser.RULE_enumerationConstant);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 682;
        this.match(CParser.Identifier);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AtomicTypeSpecifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CParser.RULE_atomicTypeSpecifier;
    return this;
}

AtomicTypeSpecifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AtomicTypeSpecifierContext.prototype.constructor = AtomicTypeSpecifierContext;

AtomicTypeSpecifierContext.prototype.typeName = function() {
    return this.getTypedRuleContext(TypeNameContext,0);
};

AtomicTypeSpecifierContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CVisitor ) {
        return visitor.visitAtomicTypeSpecifier(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CParser.AtomicTypeSpecifierContext = AtomicTypeSpecifierContext;

CParser.prototype.atomicTypeSpecifier = function() {

    var localctx = new AtomicTypeSpecifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 86, CParser.RULE_atomicTypeSpecifier);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 684;
        this.match(CParser.Atomic);
        this.state = 685;
        this.match(CParser.LeftParen);
        this.state = 686;
        this.typeName();
        this.state = 687;
        this.match(CParser.RightParen);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TypeQualifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CParser.RULE_typeQualifier;
    return this;
}

TypeQualifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeQualifierContext.prototype.constructor = TypeQualifierContext;


TypeQualifierContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CVisitor ) {
        return visitor.visitTypeQualifier(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CParser.TypeQualifierContext = TypeQualifierContext;

CParser.prototype.typeQualifier = function() {

    var localctx = new TypeQualifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 88, CParser.RULE_typeQualifier);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 689;
        _la = this._input.LA(1);
        if(!(_la===CParser.Const || ((((_la - 35)) & ~0x1f) == 0 && ((1 << (_la - 35)) & ((1 << (CParser.Restrict - 35)) | (1 << (CParser.Volatile - 35)) | (1 << (CParser.Atomic - 35)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FunctionSpecifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CParser.RULE_functionSpecifier;
    return this;
}

FunctionSpecifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FunctionSpecifierContext.prototype.constructor = FunctionSpecifierContext;

FunctionSpecifierContext.prototype.gccAttributeSpecifier = function() {
    return this.getTypedRuleContext(GccAttributeSpecifierContext,0);
};

FunctionSpecifierContext.prototype.Identifier = function() {
    return this.getToken(CParser.Identifier, 0);
};

FunctionSpecifierContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CVisitor ) {
        return visitor.visitFunctionSpecifier(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CParser.FunctionSpecifierContext = FunctionSpecifierContext;

CParser.prototype.functionSpecifier = function() {

    var localctx = new FunctionSpecifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 90, CParser.RULE_functionSpecifier);
    var _la = 0; // Token type
    try {
        this.state = 697;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CParser.T__7:
        case CParser.T__8:
        case CParser.Inline:
        case CParser.Noreturn:
            this.enterOuterAlt(localctx, 1);
            this.state = 691;
            _la = this._input.LA(1);
            if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CParser.T__7) | (1 << CParser.T__8) | (1 << CParser.Inline))) !== 0) || _la===CParser.Noreturn)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            break;
        case CParser.T__11:
            this.enterOuterAlt(localctx, 2);
            this.state = 692;
            this.gccAttributeSpecifier();
            break;
        case CParser.T__9:
            this.enterOuterAlt(localctx, 3);
            this.state = 693;
            this.match(CParser.T__9);
            this.state = 694;
            this.match(CParser.LeftParen);
            this.state = 695;
            this.match(CParser.Identifier);
            this.state = 696;
            this.match(CParser.RightParen);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AlignmentSpecifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CParser.RULE_alignmentSpecifier;
    return this;
}

AlignmentSpecifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AlignmentSpecifierContext.prototype.constructor = AlignmentSpecifierContext;

AlignmentSpecifierContext.prototype.typeName = function() {
    return this.getTypedRuleContext(TypeNameContext,0);
};

AlignmentSpecifierContext.prototype.constantExpression = function() {
    return this.getTypedRuleContext(ConstantExpressionContext,0);
};

AlignmentSpecifierContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CVisitor ) {
        return visitor.visitAlignmentSpecifier(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CParser.AlignmentSpecifierContext = AlignmentSpecifierContext;

CParser.prototype.alignmentSpecifier = function() {

    var localctx = new AlignmentSpecifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 92, CParser.RULE_alignmentSpecifier);
    try {
        this.state = 709;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,54,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 699;
            this.match(CParser.Alignas);
            this.state = 700;
            this.match(CParser.LeftParen);
            this.state = 701;
            this.typeName();
            this.state = 702;
            this.match(CParser.RightParen);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 704;
            this.match(CParser.Alignas);
            this.state = 705;
            this.match(CParser.LeftParen);
            this.state = 706;
            this.constantExpression();
            this.state = 707;
            this.match(CParser.RightParen);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DeclaratorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CParser.RULE_declarator;
    return this;
}

DeclaratorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DeclaratorContext.prototype.constructor = DeclaratorContext;

DeclaratorContext.prototype.directDeclarator = function() {
    return this.getTypedRuleContext(DirectDeclaratorContext,0);
};

DeclaratorContext.prototype.pointer = function() {
    return this.getTypedRuleContext(PointerContext,0);
};

DeclaratorContext.prototype.gccDeclaratorExtension = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(GccDeclaratorExtensionContext);
    } else {
        return this.getTypedRuleContext(GccDeclaratorExtensionContext,i);
    }
};

DeclaratorContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CVisitor ) {
        return visitor.visitDeclarator(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CParser.DeclaratorContext = DeclaratorContext;

CParser.prototype.declarator = function() {

    var localctx = new DeclaratorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 94, CParser.RULE_declarator);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 712;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CParser.Star || _la===CParser.Caret) {
            this.state = 711;
            this.pointer();
        }

        this.state = 714;
        this.directDeclarator(0);
        this.state = 718;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,56,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 715;
                this.gccDeclaratorExtension(); 
            }
            this.state = 720;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,56,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DirectDeclaratorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CParser.RULE_directDeclarator;
    return this;
}

DirectDeclaratorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DirectDeclaratorContext.prototype.constructor = DirectDeclaratorContext;

DirectDeclaratorContext.prototype.Identifier = function() {
    return this.getToken(CParser.Identifier, 0);
};

DirectDeclaratorContext.prototype.declarator = function() {
    return this.getTypedRuleContext(DeclaratorContext,0);
};

DirectDeclaratorContext.prototype.DigitSequence = function() {
    return this.getToken(CParser.DigitSequence, 0);
};

DirectDeclaratorContext.prototype.directDeclarator = function() {
    return this.getTypedRuleContext(DirectDeclaratorContext,0);
};

DirectDeclaratorContext.prototype.typeQualifierList = function() {
    return this.getTypedRuleContext(TypeQualifierListContext,0);
};

DirectDeclaratorContext.prototype.assignmentExpression = function() {
    return this.getTypedRuleContext(AssignmentExpressionContext,0);
};

DirectDeclaratorContext.prototype.parameterTypeList = function() {
    return this.getTypedRuleContext(ParameterTypeListContext,0);
};

DirectDeclaratorContext.prototype.identifierList = function() {
    return this.getTypedRuleContext(IdentifierListContext,0);
};

DirectDeclaratorContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CVisitor ) {
        return visitor.visitDirectDeclarator(this);
    } else {
        return visitor.visitChildren(this);
    }
};



CParser.prototype.directDeclarator = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new DirectDeclaratorContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 96;
    this.enterRecursionRule(localctx, 96, CParser.RULE_directDeclarator, _p);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 730;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,57,this._ctx);
        switch(la_) {
        case 1:
            this.state = 722;
            this.match(CParser.Identifier);
            break;

        case 2:
            this.state = 723;
            this.match(CParser.LeftParen);
            this.state = 724;
            this.declarator();
            this.state = 725;
            this.match(CParser.RightParen);
            break;

        case 3:
            this.state = 727;
            this.match(CParser.Identifier);
            this.state = 728;
            this.match(CParser.Colon);
            this.state = 729;
            this.match(CParser.DigitSequence);
            break;

        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 777;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,64,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 775;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,63,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new DirectDeclaratorContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, CParser.RULE_directDeclarator);
                    this.state = 732;
                    if (!( this.precpred(this._ctx, 7))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 7)");
                    }
                    this.state = 733;
                    this.match(CParser.LeftBracket);
                    this.state = 735;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===CParser.Const || ((((_la - 35)) & ~0x1f) == 0 && ((1 << (_la - 35)) & ((1 << (CParser.Restrict - 35)) | (1 << (CParser.Volatile - 35)) | (1 << (CParser.Atomic - 35)))) !== 0)) {
                        this.state = 734;
                        this.typeQualifierList(0);
                    }

                    this.state = 738;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CParser.T__0) | (1 << CParser.T__1) | (1 << CParser.T__2))) !== 0) || ((((_la - 39)) & ~0x1f) == 0 && ((1 << (_la - 39)) & ((1 << (CParser.Sizeof - 39)) | (1 << (CParser.Alignof - 39)) | (1 << (CParser.Generic - 39)) | (1 << (CParser.LeftParen - 39)))) !== 0) || ((((_la - 71)) & ~0x1f) == 0 && ((1 << (_la - 71)) & ((1 << (CParser.Plus - 71)) | (1 << (CParser.PlusPlus - 71)) | (1 << (CParser.Minus - 71)) | (1 << (CParser.MinusMinus - 71)) | (1 << (CParser.Star - 71)) | (1 << (CParser.And - 71)) | (1 << (CParser.AndAnd - 71)) | (1 << (CParser.Not - 71)) | (1 << (CParser.Tilde - 71)))) !== 0) || ((((_la - 105)) & ~0x1f) == 0 && ((1 << (_la - 105)) & ((1 << (CParser.Identifier - 105)) | (1 << (CParser.Constant - 105)) | (1 << (CParser.DigitSequence - 105)) | (1 << (CParser.StringLiteral - 105)))) !== 0)) {
                        this.state = 737;
                        this.assignmentExpression();
                    }

                    this.state = 740;
                    this.match(CParser.RightBracket);
                    break;

                case 2:
                    localctx = new DirectDeclaratorContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, CParser.RULE_directDeclarator);
                    this.state = 741;
                    if (!( this.precpred(this._ctx, 6))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 6)");
                    }
                    this.state = 742;
                    this.match(CParser.LeftBracket);
                    this.state = 743;
                    this.match(CParser.Static);
                    this.state = 745;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===CParser.Const || ((((_la - 35)) & ~0x1f) == 0 && ((1 << (_la - 35)) & ((1 << (CParser.Restrict - 35)) | (1 << (CParser.Volatile - 35)) | (1 << (CParser.Atomic - 35)))) !== 0)) {
                        this.state = 744;
                        this.typeQualifierList(0);
                    }

                    this.state = 747;
                    this.assignmentExpression();
                    this.state = 748;
                    this.match(CParser.RightBracket);
                    break;

                case 3:
                    localctx = new DirectDeclaratorContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, CParser.RULE_directDeclarator);
                    this.state = 750;
                    if (!( this.precpred(this._ctx, 5))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 5)");
                    }
                    this.state = 751;
                    this.match(CParser.LeftBracket);
                    this.state = 752;
                    this.typeQualifierList(0);
                    this.state = 753;
                    this.match(CParser.Static);
                    this.state = 754;
                    this.assignmentExpression();
                    this.state = 755;
                    this.match(CParser.RightBracket);
                    break;

                case 4:
                    localctx = new DirectDeclaratorContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, CParser.RULE_directDeclarator);
                    this.state = 757;
                    if (!( this.precpred(this._ctx, 4))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 4)");
                    }
                    this.state = 758;
                    this.match(CParser.LeftBracket);
                    this.state = 760;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===CParser.Const || ((((_la - 35)) & ~0x1f) == 0 && ((1 << (_la - 35)) & ((1 << (CParser.Restrict - 35)) | (1 << (CParser.Volatile - 35)) | (1 << (CParser.Atomic - 35)))) !== 0)) {
                        this.state = 759;
                        this.typeQualifierList(0);
                    }

                    this.state = 762;
                    this.match(CParser.Star);
                    this.state = 763;
                    this.match(CParser.RightBracket);
                    break;

                case 5:
                    localctx = new DirectDeclaratorContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, CParser.RULE_directDeclarator);
                    this.state = 764;
                    if (!( this.precpred(this._ctx, 3))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
                    }
                    this.state = 765;
                    this.match(CParser.LeftParen);
                    this.state = 766;
                    this.parameterTypeList();
                    this.state = 767;
                    this.match(CParser.RightParen);
                    break;

                case 6:
                    localctx = new DirectDeclaratorContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, CParser.RULE_directDeclarator);
                    this.state = 769;
                    if (!( this.precpred(this._ctx, 2))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
                    }
                    this.state = 770;
                    this.match(CParser.LeftParen);
                    this.state = 772;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===CParser.Identifier) {
                        this.state = 771;
                        this.identifierList(0);
                    }

                    this.state = 774;
                    this.match(CParser.RightParen);
                    break;

                } 
            }
            this.state = 779;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,64,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function GccDeclaratorExtensionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CParser.RULE_gccDeclaratorExtension;
    return this;
}

GccDeclaratorExtensionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
GccDeclaratorExtensionContext.prototype.constructor = GccDeclaratorExtensionContext;

GccDeclaratorExtensionContext.prototype.StringLiteral = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CParser.StringLiteral);
    } else {
        return this.getToken(CParser.StringLiteral, i);
    }
};


GccDeclaratorExtensionContext.prototype.gccAttributeSpecifier = function() {
    return this.getTypedRuleContext(GccAttributeSpecifierContext,0);
};

GccDeclaratorExtensionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CVisitor ) {
        return visitor.visitGccDeclaratorExtension(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CParser.GccDeclaratorExtensionContext = GccDeclaratorExtensionContext;

CParser.prototype.gccDeclaratorExtension = function() {

    var localctx = new GccDeclaratorExtensionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 98, CParser.RULE_gccDeclaratorExtension);
    var _la = 0; // Token type
    try {
        this.state = 789;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CParser.T__10:
            this.enterOuterAlt(localctx, 1);
            this.state = 780;
            this.match(CParser.T__10);
            this.state = 781;
            this.match(CParser.LeftParen);
            this.state = 783; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 782;
                this.match(CParser.StringLiteral);
                this.state = 785; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(_la===CParser.StringLiteral);
            this.state = 787;
            this.match(CParser.RightParen);
            break;
        case CParser.T__11:
            this.enterOuterAlt(localctx, 2);
            this.state = 788;
            this.gccAttributeSpecifier();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function GccAttributeSpecifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CParser.RULE_gccAttributeSpecifier;
    return this;
}

GccAttributeSpecifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
GccAttributeSpecifierContext.prototype.constructor = GccAttributeSpecifierContext;

GccAttributeSpecifierContext.prototype.gccAttributeList = function() {
    return this.getTypedRuleContext(GccAttributeListContext,0);
};

GccAttributeSpecifierContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CVisitor ) {
        return visitor.visitGccAttributeSpecifier(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CParser.GccAttributeSpecifierContext = GccAttributeSpecifierContext;

CParser.prototype.gccAttributeSpecifier = function() {

    var localctx = new GccAttributeSpecifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 100, CParser.RULE_gccAttributeSpecifier);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 791;
        this.match(CParser.T__11);
        this.state = 792;
        this.match(CParser.LeftParen);
        this.state = 793;
        this.match(CParser.LeftParen);
        this.state = 794;
        this.gccAttributeList();
        this.state = 795;
        this.match(CParser.RightParen);
        this.state = 796;
        this.match(CParser.RightParen);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function GccAttributeListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CParser.RULE_gccAttributeList;
    return this;
}

GccAttributeListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
GccAttributeListContext.prototype.constructor = GccAttributeListContext;

GccAttributeListContext.prototype.gccAttribute = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(GccAttributeContext);
    } else {
        return this.getTypedRuleContext(GccAttributeContext,i);
    }
};

GccAttributeListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CVisitor ) {
        return visitor.visitGccAttributeList(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CParser.GccAttributeListContext = GccAttributeListContext;

CParser.prototype.gccAttributeList = function() {

    var localctx = new GccAttributeListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 102, CParser.RULE_gccAttributeList);
    var _la = 0; // Token type
    try {
        this.state = 807;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,68,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 798;
            this.gccAttribute();
            this.state = 803;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===CParser.Comma) {
                this.state = 799;
                this.match(CParser.Comma);
                this.state = 800;
                this.gccAttribute();
                this.state = 805;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);

            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function GccAttributeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CParser.RULE_gccAttribute;
    return this;
}

GccAttributeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
GccAttributeContext.prototype.constructor = GccAttributeContext;

GccAttributeContext.prototype.argumentExpressionList = function() {
    return this.getTypedRuleContext(ArgumentExpressionListContext,0);
};

GccAttributeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CVisitor ) {
        return visitor.visitGccAttribute(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CParser.GccAttributeContext = GccAttributeContext;

CParser.prototype.gccAttribute = function() {

    var localctx = new GccAttributeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 104, CParser.RULE_gccAttribute);
    var _la = 0; // Token type
    try {
        this.state = 818;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CParser.T__0:
        case CParser.T__1:
        case CParser.T__2:
        case CParser.T__3:
        case CParser.T__4:
        case CParser.T__5:
        case CParser.T__6:
        case CParser.T__7:
        case CParser.T__8:
        case CParser.T__9:
        case CParser.T__10:
        case CParser.T__11:
        case CParser.T__12:
        case CParser.T__13:
        case CParser.Auto:
        case CParser.Break:
        case CParser.Case:
        case CParser.Char:
        case CParser.Const:
        case CParser.Continue:
        case CParser.Default:
        case CParser.Do:
        case CParser.Double:
        case CParser.Else:
        case CParser.Enum:
        case CParser.Extern:
        case CParser.Float:
        case CParser.For:
        case CParser.Goto:
        case CParser.If:
        case CParser.Inline:
        case CParser.Int:
        case CParser.Long:
        case CParser.Register:
        case CParser.Restrict:
        case CParser.Return:
        case CParser.Short:
        case CParser.Signed:
        case CParser.Sizeof:
        case CParser.Static:
        case CParser.Struct:
        case CParser.Switch:
        case CParser.Typedef:
        case CParser.Union:
        case CParser.Unsigned:
        case CParser.Void:
        case CParser.Volatile:
        case CParser.While:
        case CParser.Alignas:
        case CParser.Alignof:
        case CParser.Atomic:
        case CParser.Bool:
        case CParser.Complex:
        case CParser.Generic:
        case CParser.Imaginary:
        case CParser.Noreturn:
        case CParser.StaticAssert:
        case CParser.ThreadLocal:
        case CParser.LeftBracket:
        case CParser.RightBracket:
        case CParser.LeftBrace:
        case CParser.RightBrace:
        case CParser.Less:
        case CParser.LessEqual:
        case CParser.Greater:
        case CParser.GreaterEqual:
        case CParser.LeftShift:
        case CParser.RightShift:
        case CParser.Plus:
        case CParser.PlusPlus:
        case CParser.Minus:
        case CParser.MinusMinus:
        case CParser.Star:
        case CParser.Div:
        case CParser.Mod:
        case CParser.And:
        case CParser.Or:
        case CParser.AndAnd:
        case CParser.OrOr:
        case CParser.Caret:
        case CParser.Not:
        case CParser.Tilde:
        case CParser.Question:
        case CParser.Colon:
        case CParser.Semi:
        case CParser.Assign:
        case CParser.StarAssign:
        case CParser.DivAssign:
        case CParser.ModAssign:
        case CParser.PlusAssign:
        case CParser.MinusAssign:
        case CParser.LeftShiftAssign:
        case CParser.RightShiftAssign:
        case CParser.AndAssign:
        case CParser.XorAssign:
        case CParser.OrAssign:
        case CParser.Equal:
        case CParser.NotEqual:
        case CParser.Arrow:
        case CParser.Dot:
        case CParser.Ellipsis:
        case CParser.Identifier:
        case CParser.Constant:
        case CParser.DigitSequence:
        case CParser.StringLiteral:
        case CParser.ComplexDefine:
        case CParser.AsmBlock:
        case CParser.LineAfterPreprocessing:
        case CParser.LineDirective:
        case CParser.PragmaDirective:
        case CParser.Whitespace:
        case CParser.Newline:
        case CParser.BlockComment:
        case CParser.LineComment:
            this.enterOuterAlt(localctx, 1);
            this.state = 809;
            _la = this._input.LA(1);
            if(_la<=0 || ((((_la - 59)) & ~0x1f) == 0 && ((1 << (_la - 59)) & ((1 << (CParser.LeftParen - 59)) | (1 << (CParser.RightParen - 59)) | (1 << (CParser.Comma - 59)))) !== 0)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 815;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CParser.LeftParen) {
                this.state = 810;
                this.match(CParser.LeftParen);
                this.state = 812;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CParser.T__0) | (1 << CParser.T__1) | (1 << CParser.T__2))) !== 0) || ((((_la - 39)) & ~0x1f) == 0 && ((1 << (_la - 39)) & ((1 << (CParser.Sizeof - 39)) | (1 << (CParser.Alignof - 39)) | (1 << (CParser.Generic - 39)) | (1 << (CParser.LeftParen - 39)))) !== 0) || ((((_la - 71)) & ~0x1f) == 0 && ((1 << (_la - 71)) & ((1 << (CParser.Plus - 71)) | (1 << (CParser.PlusPlus - 71)) | (1 << (CParser.Minus - 71)) | (1 << (CParser.MinusMinus - 71)) | (1 << (CParser.Star - 71)) | (1 << (CParser.And - 71)) | (1 << (CParser.AndAnd - 71)) | (1 << (CParser.Not - 71)) | (1 << (CParser.Tilde - 71)))) !== 0) || ((((_la - 105)) & ~0x1f) == 0 && ((1 << (_la - 105)) & ((1 << (CParser.Identifier - 105)) | (1 << (CParser.Constant - 105)) | (1 << (CParser.DigitSequence - 105)) | (1 << (CParser.StringLiteral - 105)))) !== 0)) {
                    this.state = 811;
                    this.argumentExpressionList(0);
                }

                this.state = 814;
                this.match(CParser.RightParen);
            }

            break;
        case CParser.RightParen:
        case CParser.Comma:
            this.enterOuterAlt(localctx, 2);

            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function NestedParenthesesBlockContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CParser.RULE_nestedParenthesesBlock;
    return this;
}

NestedParenthesesBlockContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NestedParenthesesBlockContext.prototype.constructor = NestedParenthesesBlockContext;

NestedParenthesesBlockContext.prototype.nestedParenthesesBlock = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(NestedParenthesesBlockContext);
    } else {
        return this.getTypedRuleContext(NestedParenthesesBlockContext,i);
    }
};

NestedParenthesesBlockContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CVisitor ) {
        return visitor.visitNestedParenthesesBlock(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CParser.NestedParenthesesBlockContext = NestedParenthesesBlockContext;

CParser.prototype.nestedParenthesesBlock = function() {

    var localctx = new NestedParenthesesBlockContext(this, this._ctx, this.state);
    this.enterRule(localctx, 106, CParser.RULE_nestedParenthesesBlock);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 827;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CParser.T__0) | (1 << CParser.T__1) | (1 << CParser.T__2) | (1 << CParser.T__3) | (1 << CParser.T__4) | (1 << CParser.T__5) | (1 << CParser.T__6) | (1 << CParser.T__7) | (1 << CParser.T__8) | (1 << CParser.T__9) | (1 << CParser.T__10) | (1 << CParser.T__11) | (1 << CParser.T__12) | (1 << CParser.T__13) | (1 << CParser.Auto) | (1 << CParser.Break) | (1 << CParser.Case) | (1 << CParser.Char) | (1 << CParser.Const) | (1 << CParser.Continue) | (1 << CParser.Default) | (1 << CParser.Do) | (1 << CParser.Double) | (1 << CParser.Else) | (1 << CParser.Enum) | (1 << CParser.Extern) | (1 << CParser.Float) | (1 << CParser.For) | (1 << CParser.Goto) | (1 << CParser.If) | (1 << CParser.Inline))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (CParser.Int - 32)) | (1 << (CParser.Long - 32)) | (1 << (CParser.Register - 32)) | (1 << (CParser.Restrict - 32)) | (1 << (CParser.Return - 32)) | (1 << (CParser.Short - 32)) | (1 << (CParser.Signed - 32)) | (1 << (CParser.Sizeof - 32)) | (1 << (CParser.Static - 32)) | (1 << (CParser.Struct - 32)) | (1 << (CParser.Switch - 32)) | (1 << (CParser.Typedef - 32)) | (1 << (CParser.Union - 32)) | (1 << (CParser.Unsigned - 32)) | (1 << (CParser.Void - 32)) | (1 << (CParser.Volatile - 32)) | (1 << (CParser.While - 32)) | (1 << (CParser.Alignas - 32)) | (1 << (CParser.Alignof - 32)) | (1 << (CParser.Atomic - 32)) | (1 << (CParser.Bool - 32)) | (1 << (CParser.Complex - 32)) | (1 << (CParser.Generic - 32)) | (1 << (CParser.Imaginary - 32)) | (1 << (CParser.Noreturn - 32)) | (1 << (CParser.StaticAssert - 32)) | (1 << (CParser.ThreadLocal - 32)) | (1 << (CParser.LeftParen - 32)) | (1 << (CParser.LeftBracket - 32)) | (1 << (CParser.RightBracket - 32)) | (1 << (CParser.LeftBrace - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (CParser.RightBrace - 64)) | (1 << (CParser.Less - 64)) | (1 << (CParser.LessEqual - 64)) | (1 << (CParser.Greater - 64)) | (1 << (CParser.GreaterEqual - 64)) | (1 << (CParser.LeftShift - 64)) | (1 << (CParser.RightShift - 64)) | (1 << (CParser.Plus - 64)) | (1 << (CParser.PlusPlus - 64)) | (1 << (CParser.Minus - 64)) | (1 << (CParser.MinusMinus - 64)) | (1 << (CParser.Star - 64)) | (1 << (CParser.Div - 64)) | (1 << (CParser.Mod - 64)) | (1 << (CParser.And - 64)) | (1 << (CParser.Or - 64)) | (1 << (CParser.AndAnd - 64)) | (1 << (CParser.OrOr - 64)) | (1 << (CParser.Caret - 64)) | (1 << (CParser.Not - 64)) | (1 << (CParser.Tilde - 64)) | (1 << (CParser.Question - 64)) | (1 << (CParser.Colon - 64)) | (1 << (CParser.Semi - 64)) | (1 << (CParser.Comma - 64)) | (1 << (CParser.Assign - 64)) | (1 << (CParser.StarAssign - 64)) | (1 << (CParser.DivAssign - 64)) | (1 << (CParser.ModAssign - 64)) | (1 << (CParser.PlusAssign - 64)) | (1 << (CParser.MinusAssign - 64)) | (1 << (CParser.LeftShiftAssign - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (CParser.RightShiftAssign - 96)) | (1 << (CParser.AndAssign - 96)) | (1 << (CParser.XorAssign - 96)) | (1 << (CParser.OrAssign - 96)) | (1 << (CParser.Equal - 96)) | (1 << (CParser.NotEqual - 96)) | (1 << (CParser.Arrow - 96)) | (1 << (CParser.Dot - 96)) | (1 << (CParser.Ellipsis - 96)) | (1 << (CParser.Identifier - 96)) | (1 << (CParser.Constant - 96)) | (1 << (CParser.DigitSequence - 96)) | (1 << (CParser.StringLiteral - 96)) | (1 << (CParser.ComplexDefine - 96)) | (1 << (CParser.AsmBlock - 96)) | (1 << (CParser.LineAfterPreprocessing - 96)) | (1 << (CParser.LineDirective - 96)) | (1 << (CParser.PragmaDirective - 96)) | (1 << (CParser.Whitespace - 96)) | (1 << (CParser.Newline - 96)) | (1 << (CParser.BlockComment - 96)) | (1 << (CParser.LineComment - 96)))) !== 0)) {
            this.state = 825;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case CParser.T__0:
            case CParser.T__1:
            case CParser.T__2:
            case CParser.T__3:
            case CParser.T__4:
            case CParser.T__5:
            case CParser.T__6:
            case CParser.T__7:
            case CParser.T__8:
            case CParser.T__9:
            case CParser.T__10:
            case CParser.T__11:
            case CParser.T__12:
            case CParser.T__13:
            case CParser.Auto:
            case CParser.Break:
            case CParser.Case:
            case CParser.Char:
            case CParser.Const:
            case CParser.Continue:
            case CParser.Default:
            case CParser.Do:
            case CParser.Double:
            case CParser.Else:
            case CParser.Enum:
            case CParser.Extern:
            case CParser.Float:
            case CParser.For:
            case CParser.Goto:
            case CParser.If:
            case CParser.Inline:
            case CParser.Int:
            case CParser.Long:
            case CParser.Register:
            case CParser.Restrict:
            case CParser.Return:
            case CParser.Short:
            case CParser.Signed:
            case CParser.Sizeof:
            case CParser.Static:
            case CParser.Struct:
            case CParser.Switch:
            case CParser.Typedef:
            case CParser.Union:
            case CParser.Unsigned:
            case CParser.Void:
            case CParser.Volatile:
            case CParser.While:
            case CParser.Alignas:
            case CParser.Alignof:
            case CParser.Atomic:
            case CParser.Bool:
            case CParser.Complex:
            case CParser.Generic:
            case CParser.Imaginary:
            case CParser.Noreturn:
            case CParser.StaticAssert:
            case CParser.ThreadLocal:
            case CParser.LeftBracket:
            case CParser.RightBracket:
            case CParser.LeftBrace:
            case CParser.RightBrace:
            case CParser.Less:
            case CParser.LessEqual:
            case CParser.Greater:
            case CParser.GreaterEqual:
            case CParser.LeftShift:
            case CParser.RightShift:
            case CParser.Plus:
            case CParser.PlusPlus:
            case CParser.Minus:
            case CParser.MinusMinus:
            case CParser.Star:
            case CParser.Div:
            case CParser.Mod:
            case CParser.And:
            case CParser.Or:
            case CParser.AndAnd:
            case CParser.OrOr:
            case CParser.Caret:
            case CParser.Not:
            case CParser.Tilde:
            case CParser.Question:
            case CParser.Colon:
            case CParser.Semi:
            case CParser.Comma:
            case CParser.Assign:
            case CParser.StarAssign:
            case CParser.DivAssign:
            case CParser.ModAssign:
            case CParser.PlusAssign:
            case CParser.MinusAssign:
            case CParser.LeftShiftAssign:
            case CParser.RightShiftAssign:
            case CParser.AndAssign:
            case CParser.XorAssign:
            case CParser.OrAssign:
            case CParser.Equal:
            case CParser.NotEqual:
            case CParser.Arrow:
            case CParser.Dot:
            case CParser.Ellipsis:
            case CParser.Identifier:
            case CParser.Constant:
            case CParser.DigitSequence:
            case CParser.StringLiteral:
            case CParser.ComplexDefine:
            case CParser.AsmBlock:
            case CParser.LineAfterPreprocessing:
            case CParser.LineDirective:
            case CParser.PragmaDirective:
            case CParser.Whitespace:
            case CParser.Newline:
            case CParser.BlockComment:
            case CParser.LineComment:
                this.state = 820;
                _la = this._input.LA(1);
                if(_la<=0 || _la===CParser.LeftParen || _la===CParser.RightParen) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
                break;
            case CParser.LeftParen:
                this.state = 821;
                this.match(CParser.LeftParen);
                this.state = 822;
                this.nestedParenthesesBlock();
                this.state = 823;
                this.match(CParser.RightParen);
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 829;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PointerContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CParser.RULE_pointer;
    return this;
}

PointerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PointerContext.prototype.constructor = PointerContext;

PointerContext.prototype.typeQualifierList = function() {
    return this.getTypedRuleContext(TypeQualifierListContext,0);
};

PointerContext.prototype.pointer = function() {
    return this.getTypedRuleContext(PointerContext,0);
};

PointerContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CVisitor ) {
        return visitor.visitPointer(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CParser.PointerContext = PointerContext;

CParser.prototype.pointer = function() {

    var localctx = new PointerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 108, CParser.RULE_pointer);
    var _la = 0; // Token type
    try {
        this.state = 848;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,78,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 830;
            this.match(CParser.Star);
            this.state = 832;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,74,this._ctx);
            if(la_===1) {
                this.state = 831;
                this.typeQualifierList(0);

            }
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 834;
            this.match(CParser.Star);
            this.state = 836;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CParser.Const || ((((_la - 35)) & ~0x1f) == 0 && ((1 << (_la - 35)) & ((1 << (CParser.Restrict - 35)) | (1 << (CParser.Volatile - 35)) | (1 << (CParser.Atomic - 35)))) !== 0)) {
                this.state = 835;
                this.typeQualifierList(0);
            }

            this.state = 838;
            this.pointer();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 839;
            this.match(CParser.Caret);
            this.state = 841;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,76,this._ctx);
            if(la_===1) {
                this.state = 840;
                this.typeQualifierList(0);

            }
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 843;
            this.match(CParser.Caret);
            this.state = 845;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CParser.Const || ((((_la - 35)) & ~0x1f) == 0 && ((1 << (_la - 35)) & ((1 << (CParser.Restrict - 35)) | (1 << (CParser.Volatile - 35)) | (1 << (CParser.Atomic - 35)))) !== 0)) {
                this.state = 844;
                this.typeQualifierList(0);
            }

            this.state = 847;
            this.pointer();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TypeQualifierListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CParser.RULE_typeQualifierList;
    return this;
}

TypeQualifierListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeQualifierListContext.prototype.constructor = TypeQualifierListContext;

TypeQualifierListContext.prototype.typeQualifier = function() {
    return this.getTypedRuleContext(TypeQualifierContext,0);
};

TypeQualifierListContext.prototype.typeQualifierList = function() {
    return this.getTypedRuleContext(TypeQualifierListContext,0);
};

TypeQualifierListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CVisitor ) {
        return visitor.visitTypeQualifierList(this);
    } else {
        return visitor.visitChildren(this);
    }
};



CParser.prototype.typeQualifierList = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new TypeQualifierListContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 110;
    this.enterRecursionRule(localctx, 110, CParser.RULE_typeQualifierList, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 851;
        this.typeQualifier();
        this._ctx.stop = this._input.LT(-1);
        this.state = 857;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,79,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new TypeQualifierListContext(this, _parentctx, _parentState);
                this.pushNewRecursionContext(localctx, _startState, CParser.RULE_typeQualifierList);
                this.state = 853;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 854;
                this.typeQualifier(); 
            }
            this.state = 859;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,79,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function ParameterTypeListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CParser.RULE_parameterTypeList;
    return this;
}

ParameterTypeListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ParameterTypeListContext.prototype.constructor = ParameterTypeListContext;

ParameterTypeListContext.prototype.parameterList = function() {
    return this.getTypedRuleContext(ParameterListContext,0);
};

ParameterTypeListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CVisitor ) {
        return visitor.visitParameterTypeList(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CParser.ParameterTypeListContext = ParameterTypeListContext;

CParser.prototype.parameterTypeList = function() {

    var localctx = new ParameterTypeListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 112, CParser.RULE_parameterTypeList);
    try {
        this.state = 865;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,80,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 860;
            this.parameterList(0);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 861;
            this.parameterList(0);
            this.state = 862;
            this.match(CParser.Comma);
            this.state = 863;
            this.match(CParser.Ellipsis);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ParameterListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CParser.RULE_parameterList;
    return this;
}

ParameterListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ParameterListContext.prototype.constructor = ParameterListContext;

ParameterListContext.prototype.parameterDeclaration = function() {
    return this.getTypedRuleContext(ParameterDeclarationContext,0);
};

ParameterListContext.prototype.parameterList = function() {
    return this.getTypedRuleContext(ParameterListContext,0);
};

ParameterListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CVisitor ) {
        return visitor.visitParameterList(this);
    } else {
        return visitor.visitChildren(this);
    }
};



CParser.prototype.parameterList = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new ParameterListContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 114;
    this.enterRecursionRule(localctx, 114, CParser.RULE_parameterList, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 868;
        this.parameterDeclaration();
        this._ctx.stop = this._input.LT(-1);
        this.state = 875;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,81,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new ParameterListContext(this, _parentctx, _parentState);
                this.pushNewRecursionContext(localctx, _startState, CParser.RULE_parameterList);
                this.state = 870;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 871;
                this.match(CParser.Comma);
                this.state = 872;
                this.parameterDeclaration(); 
            }
            this.state = 877;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,81,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function ParameterDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CParser.RULE_parameterDeclaration;
    return this;
}

ParameterDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ParameterDeclarationContext.prototype.constructor = ParameterDeclarationContext;

ParameterDeclarationContext.prototype.declarationSpecifiers = function() {
    return this.getTypedRuleContext(DeclarationSpecifiersContext,0);
};

ParameterDeclarationContext.prototype.declarator = function() {
    return this.getTypedRuleContext(DeclaratorContext,0);
};

ParameterDeclarationContext.prototype.declarationSpecifiers2 = function() {
    return this.getTypedRuleContext(DeclarationSpecifiers2Context,0);
};

ParameterDeclarationContext.prototype.abstractDeclarator = function() {
    return this.getTypedRuleContext(AbstractDeclaratorContext,0);
};

ParameterDeclarationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CVisitor ) {
        return visitor.visitParameterDeclaration(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CParser.ParameterDeclarationContext = ParameterDeclarationContext;

CParser.prototype.parameterDeclaration = function() {

    var localctx = new ParameterDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 116, CParser.RULE_parameterDeclaration);
    try {
        this.state = 885;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,83,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 878;
            this.declarationSpecifiers();
            this.state = 879;
            this.declarator();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 881;
            this.declarationSpecifiers2();
            this.state = 883;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,82,this._ctx);
            if(la_===1) {
                this.state = 882;
                this.abstractDeclarator();

            }
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function IdentifierListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CParser.RULE_identifierList;
    return this;
}

IdentifierListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IdentifierListContext.prototype.constructor = IdentifierListContext;

IdentifierListContext.prototype.Identifier = function() {
    return this.getToken(CParser.Identifier, 0);
};

IdentifierListContext.prototype.identifierList = function() {
    return this.getTypedRuleContext(IdentifierListContext,0);
};

IdentifierListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CVisitor ) {
        return visitor.visitIdentifierList(this);
    } else {
        return visitor.visitChildren(this);
    }
};



CParser.prototype.identifierList = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new IdentifierListContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 118;
    this.enterRecursionRule(localctx, 118, CParser.RULE_identifierList, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 888;
        this.match(CParser.Identifier);
        this._ctx.stop = this._input.LT(-1);
        this.state = 895;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,84,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new IdentifierListContext(this, _parentctx, _parentState);
                this.pushNewRecursionContext(localctx, _startState, CParser.RULE_identifierList);
                this.state = 890;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 891;
                this.match(CParser.Comma);
                this.state = 892;
                this.match(CParser.Identifier); 
            }
            this.state = 897;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,84,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function TypeNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CParser.RULE_typeName;
    return this;
}

TypeNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeNameContext.prototype.constructor = TypeNameContext;

TypeNameContext.prototype.specifierQualifierList = function() {
    return this.getTypedRuleContext(SpecifierQualifierListContext,0);
};

TypeNameContext.prototype.abstractDeclarator = function() {
    return this.getTypedRuleContext(AbstractDeclaratorContext,0);
};

TypeNameContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CVisitor ) {
        return visitor.visitTypeName(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CParser.TypeNameContext = TypeNameContext;

CParser.prototype.typeName = function() {

    var localctx = new TypeNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 120, CParser.RULE_typeName);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 898;
        this.specifierQualifierList();
        this.state = 900;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(((((_la - 59)) & ~0x1f) == 0 && ((1 << (_la - 59)) & ((1 << (CParser.LeftParen - 59)) | (1 << (CParser.LeftBracket - 59)) | (1 << (CParser.Star - 59)) | (1 << (CParser.Caret - 59)))) !== 0)) {
            this.state = 899;
            this.abstractDeclarator();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AbstractDeclaratorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CParser.RULE_abstractDeclarator;
    return this;
}

AbstractDeclaratorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AbstractDeclaratorContext.prototype.constructor = AbstractDeclaratorContext;

AbstractDeclaratorContext.prototype.pointer = function() {
    return this.getTypedRuleContext(PointerContext,0);
};

AbstractDeclaratorContext.prototype.directAbstractDeclarator = function() {
    return this.getTypedRuleContext(DirectAbstractDeclaratorContext,0);
};

AbstractDeclaratorContext.prototype.gccDeclaratorExtension = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(GccDeclaratorExtensionContext);
    } else {
        return this.getTypedRuleContext(GccDeclaratorExtensionContext,i);
    }
};

AbstractDeclaratorContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CVisitor ) {
        return visitor.visitAbstractDeclarator(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CParser.AbstractDeclaratorContext = AbstractDeclaratorContext;

CParser.prototype.abstractDeclarator = function() {

    var localctx = new AbstractDeclaratorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 122, CParser.RULE_abstractDeclarator);
    var _la = 0; // Token type
    try {
        this.state = 913;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,88,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 902;
            this.pointer();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 904;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CParser.Star || _la===CParser.Caret) {
                this.state = 903;
                this.pointer();
            }

            this.state = 906;
            this.directAbstractDeclarator(0);
            this.state = 910;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,87,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 907;
                    this.gccDeclaratorExtension(); 
                }
                this.state = 912;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,87,this._ctx);
            }

            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DirectAbstractDeclaratorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CParser.RULE_directAbstractDeclarator;
    return this;
}

DirectAbstractDeclaratorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DirectAbstractDeclaratorContext.prototype.constructor = DirectAbstractDeclaratorContext;

DirectAbstractDeclaratorContext.prototype.abstractDeclarator = function() {
    return this.getTypedRuleContext(AbstractDeclaratorContext,0);
};

DirectAbstractDeclaratorContext.prototype.gccDeclaratorExtension = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(GccDeclaratorExtensionContext);
    } else {
        return this.getTypedRuleContext(GccDeclaratorExtensionContext,i);
    }
};

DirectAbstractDeclaratorContext.prototype.typeQualifierList = function() {
    return this.getTypedRuleContext(TypeQualifierListContext,0);
};

DirectAbstractDeclaratorContext.prototype.assignmentExpression = function() {
    return this.getTypedRuleContext(AssignmentExpressionContext,0);
};

DirectAbstractDeclaratorContext.prototype.parameterTypeList = function() {
    return this.getTypedRuleContext(ParameterTypeListContext,0);
};

DirectAbstractDeclaratorContext.prototype.directAbstractDeclarator = function() {
    return this.getTypedRuleContext(DirectAbstractDeclaratorContext,0);
};

DirectAbstractDeclaratorContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CVisitor ) {
        return visitor.visitDirectAbstractDeclarator(this);
    } else {
        return visitor.visitChildren(this);
    }
};



CParser.prototype.directAbstractDeclarator = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new DirectAbstractDeclaratorContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 124;
    this.enterRecursionRule(localctx, 124, CParser.RULE_directAbstractDeclarator, _p);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 961;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,95,this._ctx);
        switch(la_) {
        case 1:
            this.state = 916;
            this.match(CParser.LeftParen);
            this.state = 917;
            this.abstractDeclarator();
            this.state = 918;
            this.match(CParser.RightParen);
            this.state = 922;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,89,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 919;
                    this.gccDeclaratorExtension(); 
                }
                this.state = 924;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,89,this._ctx);
            }

            break;

        case 2:
            this.state = 925;
            this.match(CParser.LeftBracket);
            this.state = 927;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CParser.Const || ((((_la - 35)) & ~0x1f) == 0 && ((1 << (_la - 35)) & ((1 << (CParser.Restrict - 35)) | (1 << (CParser.Volatile - 35)) | (1 << (CParser.Atomic - 35)))) !== 0)) {
                this.state = 926;
                this.typeQualifierList(0);
            }

            this.state = 930;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CParser.T__0) | (1 << CParser.T__1) | (1 << CParser.T__2))) !== 0) || ((((_la - 39)) & ~0x1f) == 0 && ((1 << (_la - 39)) & ((1 << (CParser.Sizeof - 39)) | (1 << (CParser.Alignof - 39)) | (1 << (CParser.Generic - 39)) | (1 << (CParser.LeftParen - 39)))) !== 0) || ((((_la - 71)) & ~0x1f) == 0 && ((1 << (_la - 71)) & ((1 << (CParser.Plus - 71)) | (1 << (CParser.PlusPlus - 71)) | (1 << (CParser.Minus - 71)) | (1 << (CParser.MinusMinus - 71)) | (1 << (CParser.Star - 71)) | (1 << (CParser.And - 71)) | (1 << (CParser.AndAnd - 71)) | (1 << (CParser.Not - 71)) | (1 << (CParser.Tilde - 71)))) !== 0) || ((((_la - 105)) & ~0x1f) == 0 && ((1 << (_la - 105)) & ((1 << (CParser.Identifier - 105)) | (1 << (CParser.Constant - 105)) | (1 << (CParser.DigitSequence - 105)) | (1 << (CParser.StringLiteral - 105)))) !== 0)) {
                this.state = 929;
                this.assignmentExpression();
            }

            this.state = 932;
            this.match(CParser.RightBracket);
            break;

        case 3:
            this.state = 933;
            this.match(CParser.LeftBracket);
            this.state = 934;
            this.match(CParser.Static);
            this.state = 936;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CParser.Const || ((((_la - 35)) & ~0x1f) == 0 && ((1 << (_la - 35)) & ((1 << (CParser.Restrict - 35)) | (1 << (CParser.Volatile - 35)) | (1 << (CParser.Atomic - 35)))) !== 0)) {
                this.state = 935;
                this.typeQualifierList(0);
            }

            this.state = 938;
            this.assignmentExpression();
            this.state = 939;
            this.match(CParser.RightBracket);
            break;

        case 4:
            this.state = 941;
            this.match(CParser.LeftBracket);
            this.state = 942;
            this.typeQualifierList(0);
            this.state = 943;
            this.match(CParser.Static);
            this.state = 944;
            this.assignmentExpression();
            this.state = 945;
            this.match(CParser.RightBracket);
            break;

        case 5:
            this.state = 947;
            this.match(CParser.LeftBracket);
            this.state = 948;
            this.match(CParser.Star);
            this.state = 949;
            this.match(CParser.RightBracket);
            break;

        case 6:
            this.state = 950;
            this.match(CParser.LeftParen);
            this.state = 952;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CParser.T__0) | (1 << CParser.T__3) | (1 << CParser.T__4) | (1 << CParser.T__5) | (1 << CParser.T__6) | (1 << CParser.T__7) | (1 << CParser.T__8) | (1 << CParser.T__9) | (1 << CParser.T__11) | (1 << CParser.Auto) | (1 << CParser.Char) | (1 << CParser.Const) | (1 << CParser.Double) | (1 << CParser.Enum) | (1 << CParser.Extern) | (1 << CParser.Float) | (1 << CParser.Inline))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (CParser.Int - 32)) | (1 << (CParser.Long - 32)) | (1 << (CParser.Register - 32)) | (1 << (CParser.Restrict - 32)) | (1 << (CParser.Short - 32)) | (1 << (CParser.Signed - 32)) | (1 << (CParser.Static - 32)) | (1 << (CParser.Struct - 32)) | (1 << (CParser.Typedef - 32)) | (1 << (CParser.Union - 32)) | (1 << (CParser.Unsigned - 32)) | (1 << (CParser.Void - 32)) | (1 << (CParser.Volatile - 32)) | (1 << (CParser.Alignas - 32)) | (1 << (CParser.Atomic - 32)) | (1 << (CParser.Bool - 32)) | (1 << (CParser.Complex - 32)) | (1 << (CParser.Noreturn - 32)) | (1 << (CParser.ThreadLocal - 32)))) !== 0) || _la===CParser.Identifier) {
                this.state = 951;
                this.parameterTypeList();
            }

            this.state = 954;
            this.match(CParser.RightParen);
            this.state = 958;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,94,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 955;
                    this.gccDeclaratorExtension(); 
                }
                this.state = 960;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,94,this._ctx);
            }

            break;

        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 1006;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,102,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 1004;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,101,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new DirectAbstractDeclaratorContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, CParser.RULE_directAbstractDeclarator);
                    this.state = 963;
                    if (!( this.precpred(this._ctx, 5))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 5)");
                    }
                    this.state = 964;
                    this.match(CParser.LeftBracket);
                    this.state = 966;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===CParser.Const || ((((_la - 35)) & ~0x1f) == 0 && ((1 << (_la - 35)) & ((1 << (CParser.Restrict - 35)) | (1 << (CParser.Volatile - 35)) | (1 << (CParser.Atomic - 35)))) !== 0)) {
                        this.state = 965;
                        this.typeQualifierList(0);
                    }

                    this.state = 969;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CParser.T__0) | (1 << CParser.T__1) | (1 << CParser.T__2))) !== 0) || ((((_la - 39)) & ~0x1f) == 0 && ((1 << (_la - 39)) & ((1 << (CParser.Sizeof - 39)) | (1 << (CParser.Alignof - 39)) | (1 << (CParser.Generic - 39)) | (1 << (CParser.LeftParen - 39)))) !== 0) || ((((_la - 71)) & ~0x1f) == 0 && ((1 << (_la - 71)) & ((1 << (CParser.Plus - 71)) | (1 << (CParser.PlusPlus - 71)) | (1 << (CParser.Minus - 71)) | (1 << (CParser.MinusMinus - 71)) | (1 << (CParser.Star - 71)) | (1 << (CParser.And - 71)) | (1 << (CParser.AndAnd - 71)) | (1 << (CParser.Not - 71)) | (1 << (CParser.Tilde - 71)))) !== 0) || ((((_la - 105)) & ~0x1f) == 0 && ((1 << (_la - 105)) & ((1 << (CParser.Identifier - 105)) | (1 << (CParser.Constant - 105)) | (1 << (CParser.DigitSequence - 105)) | (1 << (CParser.StringLiteral - 105)))) !== 0)) {
                        this.state = 968;
                        this.assignmentExpression();
                    }

                    this.state = 971;
                    this.match(CParser.RightBracket);
                    break;

                case 2:
                    localctx = new DirectAbstractDeclaratorContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, CParser.RULE_directAbstractDeclarator);
                    this.state = 972;
                    if (!( this.precpred(this._ctx, 4))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 4)");
                    }
                    this.state = 973;
                    this.match(CParser.LeftBracket);
                    this.state = 974;
                    this.match(CParser.Static);
                    this.state = 976;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===CParser.Const || ((((_la - 35)) & ~0x1f) == 0 && ((1 << (_la - 35)) & ((1 << (CParser.Restrict - 35)) | (1 << (CParser.Volatile - 35)) | (1 << (CParser.Atomic - 35)))) !== 0)) {
                        this.state = 975;
                        this.typeQualifierList(0);
                    }

                    this.state = 978;
                    this.assignmentExpression();
                    this.state = 979;
                    this.match(CParser.RightBracket);
                    break;

                case 3:
                    localctx = new DirectAbstractDeclaratorContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, CParser.RULE_directAbstractDeclarator);
                    this.state = 981;
                    if (!( this.precpred(this._ctx, 3))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
                    }
                    this.state = 982;
                    this.match(CParser.LeftBracket);
                    this.state = 983;
                    this.typeQualifierList(0);
                    this.state = 984;
                    this.match(CParser.Static);
                    this.state = 985;
                    this.assignmentExpression();
                    this.state = 986;
                    this.match(CParser.RightBracket);
                    break;

                case 4:
                    localctx = new DirectAbstractDeclaratorContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, CParser.RULE_directAbstractDeclarator);
                    this.state = 988;
                    if (!( this.precpred(this._ctx, 2))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
                    }
                    this.state = 989;
                    this.match(CParser.LeftBracket);
                    this.state = 990;
                    this.match(CParser.Star);
                    this.state = 991;
                    this.match(CParser.RightBracket);
                    break;

                case 5:
                    localctx = new DirectAbstractDeclaratorContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, CParser.RULE_directAbstractDeclarator);
                    this.state = 992;
                    if (!( this.precpred(this._ctx, 1))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                    }
                    this.state = 993;
                    this.match(CParser.LeftParen);
                    this.state = 995;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CParser.T__0) | (1 << CParser.T__3) | (1 << CParser.T__4) | (1 << CParser.T__5) | (1 << CParser.T__6) | (1 << CParser.T__7) | (1 << CParser.T__8) | (1 << CParser.T__9) | (1 << CParser.T__11) | (1 << CParser.Auto) | (1 << CParser.Char) | (1 << CParser.Const) | (1 << CParser.Double) | (1 << CParser.Enum) | (1 << CParser.Extern) | (1 << CParser.Float) | (1 << CParser.Inline))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (CParser.Int - 32)) | (1 << (CParser.Long - 32)) | (1 << (CParser.Register - 32)) | (1 << (CParser.Restrict - 32)) | (1 << (CParser.Short - 32)) | (1 << (CParser.Signed - 32)) | (1 << (CParser.Static - 32)) | (1 << (CParser.Struct - 32)) | (1 << (CParser.Typedef - 32)) | (1 << (CParser.Union - 32)) | (1 << (CParser.Unsigned - 32)) | (1 << (CParser.Void - 32)) | (1 << (CParser.Volatile - 32)) | (1 << (CParser.Alignas - 32)) | (1 << (CParser.Atomic - 32)) | (1 << (CParser.Bool - 32)) | (1 << (CParser.Complex - 32)) | (1 << (CParser.Noreturn - 32)) | (1 << (CParser.ThreadLocal - 32)))) !== 0) || _la===CParser.Identifier) {
                        this.state = 994;
                        this.parameterTypeList();
                    }

                    this.state = 997;
                    this.match(CParser.RightParen);
                    this.state = 1001;
                    this._errHandler.sync(this);
                    var _alt = this._interp.adaptivePredict(this._input,100,this._ctx)
                    while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                        if(_alt===1) {
                            this.state = 998;
                            this.gccDeclaratorExtension(); 
                        }
                        this.state = 1003;
                        this._errHandler.sync(this);
                        _alt = this._interp.adaptivePredict(this._input,100,this._ctx);
                    }

                    break;

                } 
            }
            this.state = 1008;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,102,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function TypedefNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CParser.RULE_typedefName;
    return this;
}

TypedefNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypedefNameContext.prototype.constructor = TypedefNameContext;

TypedefNameContext.prototype.Identifier = function() {
    return this.getToken(CParser.Identifier, 0);
};

TypedefNameContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CVisitor ) {
        return visitor.visitTypedefName(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CParser.TypedefNameContext = TypedefNameContext;

CParser.prototype.typedefName = function() {

    var localctx = new TypedefNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 126, CParser.RULE_typedefName);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1009;
        this.match(CParser.Identifier);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function InitializerContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CParser.RULE_initializer;
    return this;
}

InitializerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InitializerContext.prototype.constructor = InitializerContext;

InitializerContext.prototype.assignmentExpression = function() {
    return this.getTypedRuleContext(AssignmentExpressionContext,0);
};

InitializerContext.prototype.initializerList = function() {
    return this.getTypedRuleContext(InitializerListContext,0);
};

InitializerContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CVisitor ) {
        return visitor.visitInitializer(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CParser.InitializerContext = InitializerContext;

CParser.prototype.initializer = function() {

    var localctx = new InitializerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 128, CParser.RULE_initializer);
    try {
        this.state = 1021;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,103,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1011;
            this.assignmentExpression();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1012;
            this.match(CParser.LeftBrace);
            this.state = 1013;
            this.initializerList(0);
            this.state = 1014;
            this.match(CParser.RightBrace);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1016;
            this.match(CParser.LeftBrace);
            this.state = 1017;
            this.initializerList(0);
            this.state = 1018;
            this.match(CParser.Comma);
            this.state = 1019;
            this.match(CParser.RightBrace);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function InitializerListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CParser.RULE_initializerList;
    return this;
}

InitializerListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InitializerListContext.prototype.constructor = InitializerListContext;

InitializerListContext.prototype.initializer = function() {
    return this.getTypedRuleContext(InitializerContext,0);
};

InitializerListContext.prototype.designation = function() {
    return this.getTypedRuleContext(DesignationContext,0);
};

InitializerListContext.prototype.initializerList = function() {
    return this.getTypedRuleContext(InitializerListContext,0);
};

InitializerListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CVisitor ) {
        return visitor.visitInitializerList(this);
    } else {
        return visitor.visitChildren(this);
    }
};



CParser.prototype.initializerList = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new InitializerListContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 130;
    this.enterRecursionRule(localctx, 130, CParser.RULE_initializerList, _p);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1025;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CParser.LeftBracket || _la===CParser.Dot) {
            this.state = 1024;
            this.designation();
        }

        this.state = 1027;
        this.initializer();
        this._ctx.stop = this._input.LT(-1);
        this.state = 1037;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,106,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new InitializerListContext(this, _parentctx, _parentState);
                this.pushNewRecursionContext(localctx, _startState, CParser.RULE_initializerList);
                this.state = 1029;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 1030;
                this.match(CParser.Comma);
                this.state = 1032;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===CParser.LeftBracket || _la===CParser.Dot) {
                    this.state = 1031;
                    this.designation();
                }

                this.state = 1034;
                this.initializer(); 
            }
            this.state = 1039;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,106,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function DesignationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CParser.RULE_designation;
    return this;
}

DesignationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DesignationContext.prototype.constructor = DesignationContext;

DesignationContext.prototype.designatorList = function() {
    return this.getTypedRuleContext(DesignatorListContext,0);
};

DesignationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CVisitor ) {
        return visitor.visitDesignation(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CParser.DesignationContext = DesignationContext;

CParser.prototype.designation = function() {

    var localctx = new DesignationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 132, CParser.RULE_designation);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1040;
        this.designatorList(0);
        this.state = 1041;
        this.match(CParser.Assign);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DesignatorListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CParser.RULE_designatorList;
    return this;
}

DesignatorListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DesignatorListContext.prototype.constructor = DesignatorListContext;

DesignatorListContext.prototype.designator = function() {
    return this.getTypedRuleContext(DesignatorContext,0);
};

DesignatorListContext.prototype.designatorList = function() {
    return this.getTypedRuleContext(DesignatorListContext,0);
};

DesignatorListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CVisitor ) {
        return visitor.visitDesignatorList(this);
    } else {
        return visitor.visitChildren(this);
    }
};



CParser.prototype.designatorList = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new DesignatorListContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 134;
    this.enterRecursionRule(localctx, 134, CParser.RULE_designatorList, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1044;
        this.designator();
        this._ctx.stop = this._input.LT(-1);
        this.state = 1050;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,107,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new DesignatorListContext(this, _parentctx, _parentState);
                this.pushNewRecursionContext(localctx, _startState, CParser.RULE_designatorList);
                this.state = 1046;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 1047;
                this.designator(); 
            }
            this.state = 1052;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,107,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function DesignatorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CParser.RULE_designator;
    return this;
}

DesignatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DesignatorContext.prototype.constructor = DesignatorContext;

DesignatorContext.prototype.constantExpression = function() {
    return this.getTypedRuleContext(ConstantExpressionContext,0);
};

DesignatorContext.prototype.Identifier = function() {
    return this.getToken(CParser.Identifier, 0);
};

DesignatorContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CVisitor ) {
        return visitor.visitDesignator(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CParser.DesignatorContext = DesignatorContext;

CParser.prototype.designator = function() {

    var localctx = new DesignatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 136, CParser.RULE_designator);
    try {
        this.state = 1059;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CParser.LeftBracket:
            this.enterOuterAlt(localctx, 1);
            this.state = 1053;
            this.match(CParser.LeftBracket);
            this.state = 1054;
            this.constantExpression();
            this.state = 1055;
            this.match(CParser.RightBracket);
            break;
        case CParser.Dot:
            this.enterOuterAlt(localctx, 2);
            this.state = 1057;
            this.match(CParser.Dot);
            this.state = 1058;
            this.match(CParser.Identifier);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function StaticAssertDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CParser.RULE_staticAssertDeclaration;
    return this;
}

StaticAssertDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StaticAssertDeclarationContext.prototype.constructor = StaticAssertDeclarationContext;

StaticAssertDeclarationContext.prototype.constantExpression = function() {
    return this.getTypedRuleContext(ConstantExpressionContext,0);
};

StaticAssertDeclarationContext.prototype.StringLiteral = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CParser.StringLiteral);
    } else {
        return this.getToken(CParser.StringLiteral, i);
    }
};


StaticAssertDeclarationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CVisitor ) {
        return visitor.visitStaticAssertDeclaration(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CParser.StaticAssertDeclarationContext = StaticAssertDeclarationContext;

CParser.prototype.staticAssertDeclaration = function() {

    var localctx = new StaticAssertDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 138, CParser.RULE_staticAssertDeclaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1061;
        this.match(CParser.StaticAssert);
        this.state = 1062;
        this.match(CParser.LeftParen);
        this.state = 1063;
        this.constantExpression();
        this.state = 1064;
        this.match(CParser.Comma);
        this.state = 1066; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 1065;
            this.match(CParser.StringLiteral);
            this.state = 1068; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===CParser.StringLiteral);
        this.state = 1070;
        this.match(CParser.RightParen);
        this.state = 1071;
        this.match(CParser.Semi);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function StatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CParser.RULE_statement;
    return this;
}

StatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StatementContext.prototype.constructor = StatementContext;

StatementContext.prototype.labeledStatement = function() {
    return this.getTypedRuleContext(LabeledStatementContext,0);
};

StatementContext.prototype.compoundStatement = function() {
    return this.getTypedRuleContext(CompoundStatementContext,0);
};

StatementContext.prototype.expressionStatement = function() {
    return this.getTypedRuleContext(ExpressionStatementContext,0);
};

StatementContext.prototype.selectionStatement = function() {
    return this.getTypedRuleContext(SelectionStatementContext,0);
};

StatementContext.prototype.iterationStatement = function() {
    return this.getTypedRuleContext(IterationStatementContext,0);
};

StatementContext.prototype.jumpStatement = function() {
    return this.getTypedRuleContext(JumpStatementContext,0);
};

StatementContext.prototype.logicalOrExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(LogicalOrExpressionContext);
    } else {
        return this.getTypedRuleContext(LogicalOrExpressionContext,i);
    }
};

StatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CVisitor ) {
        return visitor.visitStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CParser.StatementContext = StatementContext;

CParser.prototype.statement = function() {

    var localctx = new StatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 140, CParser.RULE_statement);
    var _la = 0; // Token type
    try {
        this.state = 1110;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,115,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1073;
            this.labeledStatement();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1074;
            this.compoundStatement();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1075;
            this.expressionStatement();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 1076;
            this.selectionStatement();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 1077;
            this.iterationStatement();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 1078;
            this.jumpStatement();
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 1079;
            _la = this._input.LA(1);
            if(!(_la===CParser.T__10 || _la===CParser.T__12)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 1080;
            _la = this._input.LA(1);
            if(!(_la===CParser.T__13 || _la===CParser.Volatile)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 1081;
            this.match(CParser.LeftParen);
            this.state = 1090;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CParser.T__0) | (1 << CParser.T__1) | (1 << CParser.T__2))) !== 0) || ((((_la - 39)) & ~0x1f) == 0 && ((1 << (_la - 39)) & ((1 << (CParser.Sizeof - 39)) | (1 << (CParser.Alignof - 39)) | (1 << (CParser.Generic - 39)) | (1 << (CParser.LeftParen - 39)))) !== 0) || ((((_la - 71)) & ~0x1f) == 0 && ((1 << (_la - 71)) & ((1 << (CParser.Plus - 71)) | (1 << (CParser.PlusPlus - 71)) | (1 << (CParser.Minus - 71)) | (1 << (CParser.MinusMinus - 71)) | (1 << (CParser.Star - 71)) | (1 << (CParser.And - 71)) | (1 << (CParser.AndAnd - 71)) | (1 << (CParser.Not - 71)) | (1 << (CParser.Tilde - 71)))) !== 0) || ((((_la - 105)) & ~0x1f) == 0 && ((1 << (_la - 105)) & ((1 << (CParser.Identifier - 105)) | (1 << (CParser.Constant - 105)) | (1 << (CParser.DigitSequence - 105)) | (1 << (CParser.StringLiteral - 105)))) !== 0)) {
                this.state = 1082;
                this.logicalOrExpression(0);
                this.state = 1087;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===CParser.Comma) {
                    this.state = 1083;
                    this.match(CParser.Comma);
                    this.state = 1084;
                    this.logicalOrExpression(0);
                    this.state = 1089;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }

            this.state = 1105;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===CParser.Colon) {
                this.state = 1092;
                this.match(CParser.Colon);
                this.state = 1101;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CParser.T__0) | (1 << CParser.T__1) | (1 << CParser.T__2))) !== 0) || ((((_la - 39)) & ~0x1f) == 0 && ((1 << (_la - 39)) & ((1 << (CParser.Sizeof - 39)) | (1 << (CParser.Alignof - 39)) | (1 << (CParser.Generic - 39)) | (1 << (CParser.LeftParen - 39)))) !== 0) || ((((_la - 71)) & ~0x1f) == 0 && ((1 << (_la - 71)) & ((1 << (CParser.Plus - 71)) | (1 << (CParser.PlusPlus - 71)) | (1 << (CParser.Minus - 71)) | (1 << (CParser.MinusMinus - 71)) | (1 << (CParser.Star - 71)) | (1 << (CParser.And - 71)) | (1 << (CParser.AndAnd - 71)) | (1 << (CParser.Not - 71)) | (1 << (CParser.Tilde - 71)))) !== 0) || ((((_la - 105)) & ~0x1f) == 0 && ((1 << (_la - 105)) & ((1 << (CParser.Identifier - 105)) | (1 << (CParser.Constant - 105)) | (1 << (CParser.DigitSequence - 105)) | (1 << (CParser.StringLiteral - 105)))) !== 0)) {
                    this.state = 1093;
                    this.logicalOrExpression(0);
                    this.state = 1098;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while(_la===CParser.Comma) {
                        this.state = 1094;
                        this.match(CParser.Comma);
                        this.state = 1095;
                        this.logicalOrExpression(0);
                        this.state = 1100;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                }

                this.state = 1107;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1108;
            this.match(CParser.RightParen);
            this.state = 1109;
            this.match(CParser.Semi);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LabeledStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CParser.RULE_labeledStatement;
    return this;
}

LabeledStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LabeledStatementContext.prototype.constructor = LabeledStatementContext;

LabeledStatementContext.prototype.Identifier = function() {
    return this.getToken(CParser.Identifier, 0);
};

LabeledStatementContext.prototype.statement = function() {
    return this.getTypedRuleContext(StatementContext,0);
};

LabeledStatementContext.prototype.constantExpression = function() {
    return this.getTypedRuleContext(ConstantExpressionContext,0);
};

LabeledStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CVisitor ) {
        return visitor.visitLabeledStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CParser.LabeledStatementContext = LabeledStatementContext;

CParser.prototype.labeledStatement = function() {

    var localctx = new LabeledStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 142, CParser.RULE_labeledStatement);
    try {
        this.state = 1123;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CParser.Identifier:
            this.enterOuterAlt(localctx, 1);
            this.state = 1112;
            this.match(CParser.Identifier);
            this.state = 1113;
            this.match(CParser.Colon);
            this.state = 1114;
            this.statement();
            break;
        case CParser.Case:
            this.enterOuterAlt(localctx, 2);
            this.state = 1115;
            this.match(CParser.Case);
            this.state = 1116;
            this.constantExpression();
            this.state = 1117;
            this.match(CParser.Colon);
            this.state = 1118;
            this.statement();
            break;
        case CParser.Default:
            this.enterOuterAlt(localctx, 3);
            this.state = 1120;
            this.match(CParser.Default);
            this.state = 1121;
            this.match(CParser.Colon);
            this.state = 1122;
            this.statement();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CompoundStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CParser.RULE_compoundStatement;
    return this;
}

CompoundStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CompoundStatementContext.prototype.constructor = CompoundStatementContext;

CompoundStatementContext.prototype.blockItemList = function() {
    return this.getTypedRuleContext(BlockItemListContext,0);
};

CompoundStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CVisitor ) {
        return visitor.visitCompoundStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CParser.CompoundStatementContext = CompoundStatementContext;

CParser.prototype.compoundStatement = function() {

    var localctx = new CompoundStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 144, CParser.RULE_compoundStatement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1125;
        this.match(CParser.LeftBrace);
        this.state = 1127;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CParser.T__0) | (1 << CParser.T__1) | (1 << CParser.T__2) | (1 << CParser.T__3) | (1 << CParser.T__4) | (1 << CParser.T__5) | (1 << CParser.T__6) | (1 << CParser.T__7) | (1 << CParser.T__8) | (1 << CParser.T__9) | (1 << CParser.T__10) | (1 << CParser.T__11) | (1 << CParser.T__12) | (1 << CParser.Auto) | (1 << CParser.Break) | (1 << CParser.Case) | (1 << CParser.Char) | (1 << CParser.Const) | (1 << CParser.Continue) | (1 << CParser.Default) | (1 << CParser.Do) | (1 << CParser.Double) | (1 << CParser.Enum) | (1 << CParser.Extern) | (1 << CParser.Float) | (1 << CParser.For) | (1 << CParser.Goto) | (1 << CParser.If) | (1 << CParser.Inline))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (CParser.Int - 32)) | (1 << (CParser.Long - 32)) | (1 << (CParser.Register - 32)) | (1 << (CParser.Restrict - 32)) | (1 << (CParser.Return - 32)) | (1 << (CParser.Short - 32)) | (1 << (CParser.Signed - 32)) | (1 << (CParser.Sizeof - 32)) | (1 << (CParser.Static - 32)) | (1 << (CParser.Struct - 32)) | (1 << (CParser.Switch - 32)) | (1 << (CParser.Typedef - 32)) | (1 << (CParser.Union - 32)) | (1 << (CParser.Unsigned - 32)) | (1 << (CParser.Void - 32)) | (1 << (CParser.Volatile - 32)) | (1 << (CParser.While - 32)) | (1 << (CParser.Alignas - 32)) | (1 << (CParser.Alignof - 32)) | (1 << (CParser.Atomic - 32)) | (1 << (CParser.Bool - 32)) | (1 << (CParser.Complex - 32)) | (1 << (CParser.Generic - 32)) | (1 << (CParser.Noreturn - 32)) | (1 << (CParser.StaticAssert - 32)) | (1 << (CParser.ThreadLocal - 32)) | (1 << (CParser.LeftParen - 32)) | (1 << (CParser.LeftBrace - 32)))) !== 0) || ((((_la - 71)) & ~0x1f) == 0 && ((1 << (_la - 71)) & ((1 << (CParser.Plus - 71)) | (1 << (CParser.PlusPlus - 71)) | (1 << (CParser.Minus - 71)) | (1 << (CParser.MinusMinus - 71)) | (1 << (CParser.Star - 71)) | (1 << (CParser.And - 71)) | (1 << (CParser.AndAnd - 71)) | (1 << (CParser.Not - 71)) | (1 << (CParser.Tilde - 71)) | (1 << (CParser.Semi - 71)))) !== 0) || ((((_la - 105)) & ~0x1f) == 0 && ((1 << (_la - 105)) & ((1 << (CParser.Identifier - 105)) | (1 << (CParser.Constant - 105)) | (1 << (CParser.DigitSequence - 105)) | (1 << (CParser.StringLiteral - 105)))) !== 0)) {
            this.state = 1126;
            this.blockItemList(0);
        }

        this.state = 1129;
        this.match(CParser.RightBrace);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BlockItemListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CParser.RULE_blockItemList;
    return this;
}

BlockItemListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BlockItemListContext.prototype.constructor = BlockItemListContext;

BlockItemListContext.prototype.blockItem = function() {
    return this.getTypedRuleContext(BlockItemContext,0);
};

BlockItemListContext.prototype.blockItemList = function() {
    return this.getTypedRuleContext(BlockItemListContext,0);
};

BlockItemListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CVisitor ) {
        return visitor.visitBlockItemList(this);
    } else {
        return visitor.visitChildren(this);
    }
};



CParser.prototype.blockItemList = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new BlockItemListContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 146;
    this.enterRecursionRule(localctx, 146, CParser.RULE_blockItemList, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1132;
        this.blockItem();
        this._ctx.stop = this._input.LT(-1);
        this.state = 1138;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,118,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new BlockItemListContext(this, _parentctx, _parentState);
                this.pushNewRecursionContext(localctx, _startState, CParser.RULE_blockItemList);
                this.state = 1134;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 1135;
                this.blockItem(); 
            }
            this.state = 1140;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,118,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function BlockItemContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CParser.RULE_blockItem;
    return this;
}

BlockItemContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BlockItemContext.prototype.constructor = BlockItemContext;

BlockItemContext.prototype.declaration = function() {
    return this.getTypedRuleContext(DeclarationContext,0);
};

BlockItemContext.prototype.statement = function() {
    return this.getTypedRuleContext(StatementContext,0);
};

BlockItemContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CVisitor ) {
        return visitor.visitBlockItem(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CParser.BlockItemContext = BlockItemContext;

CParser.prototype.blockItem = function() {

    var localctx = new BlockItemContext(this, this._ctx, this.state);
    this.enterRule(localctx, 148, CParser.RULE_blockItem);
    try {
        this.state = 1143;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,119,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1141;
            this.declaration();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1142;
            this.statement();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ExpressionStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CParser.RULE_expressionStatement;
    return this;
}

ExpressionStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExpressionStatementContext.prototype.constructor = ExpressionStatementContext;

ExpressionStatementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

ExpressionStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CVisitor ) {
        return visitor.visitExpressionStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CParser.ExpressionStatementContext = ExpressionStatementContext;

CParser.prototype.expressionStatement = function() {

    var localctx = new ExpressionStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 150, CParser.RULE_expressionStatement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1146;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CParser.T__0) | (1 << CParser.T__1) | (1 << CParser.T__2))) !== 0) || ((((_la - 39)) & ~0x1f) == 0 && ((1 << (_la - 39)) & ((1 << (CParser.Sizeof - 39)) | (1 << (CParser.Alignof - 39)) | (1 << (CParser.Generic - 39)) | (1 << (CParser.LeftParen - 39)))) !== 0) || ((((_la - 71)) & ~0x1f) == 0 && ((1 << (_la - 71)) & ((1 << (CParser.Plus - 71)) | (1 << (CParser.PlusPlus - 71)) | (1 << (CParser.Minus - 71)) | (1 << (CParser.MinusMinus - 71)) | (1 << (CParser.Star - 71)) | (1 << (CParser.And - 71)) | (1 << (CParser.AndAnd - 71)) | (1 << (CParser.Not - 71)) | (1 << (CParser.Tilde - 71)))) !== 0) || ((((_la - 105)) & ~0x1f) == 0 && ((1 << (_la - 105)) & ((1 << (CParser.Identifier - 105)) | (1 << (CParser.Constant - 105)) | (1 << (CParser.DigitSequence - 105)) | (1 << (CParser.StringLiteral - 105)))) !== 0)) {
            this.state = 1145;
            this.expression(0);
        }

        this.state = 1148;
        this.match(CParser.Semi);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SelectionStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CParser.RULE_selectionStatement;
    return this;
}

SelectionStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SelectionStatementContext.prototype.constructor = SelectionStatementContext;

SelectionStatementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

SelectionStatementContext.prototype.statement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(StatementContext);
    } else {
        return this.getTypedRuleContext(StatementContext,i);
    }
};

SelectionStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CVisitor ) {
        return visitor.visitSelectionStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CParser.SelectionStatementContext = SelectionStatementContext;

CParser.prototype.selectionStatement = function() {

    var localctx = new SelectionStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 152, CParser.RULE_selectionStatement);
    try {
        this.state = 1165;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CParser.If:
            this.enterOuterAlt(localctx, 1);
            this.state = 1150;
            this.match(CParser.If);
            this.state = 1151;
            this.match(CParser.LeftParen);
            this.state = 1152;
            this.expression(0);
            this.state = 1153;
            this.match(CParser.RightParen);
            this.state = 1154;
            this.statement();
            this.state = 1157;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,121,this._ctx);
            if(la_===1) {
                this.state = 1155;
                this.match(CParser.Else);
                this.state = 1156;
                this.statement();

            }
            break;
        case CParser.Switch:
            this.enterOuterAlt(localctx, 2);
            this.state = 1159;
            this.match(CParser.Switch);
            this.state = 1160;
            this.match(CParser.LeftParen);
            this.state = 1161;
            this.expression(0);
            this.state = 1162;
            this.match(CParser.RightParen);
            this.state = 1163;
            this.statement();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function IterationStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CParser.RULE_iterationStatement;
    return this;
}

IterationStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IterationStatementContext.prototype.constructor = IterationStatementContext;

IterationStatementContext.prototype.While = function() {
    return this.getToken(CParser.While, 0);
};

IterationStatementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

IterationStatementContext.prototype.statement = function() {
    return this.getTypedRuleContext(StatementContext,0);
};

IterationStatementContext.prototype.Do = function() {
    return this.getToken(CParser.Do, 0);
};

IterationStatementContext.prototype.For = function() {
    return this.getToken(CParser.For, 0);
};

IterationStatementContext.prototype.forCondition = function() {
    return this.getTypedRuleContext(ForConditionContext,0);
};

IterationStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CVisitor ) {
        return visitor.visitIterationStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CParser.IterationStatementContext = IterationStatementContext;

CParser.prototype.iterationStatement = function() {

    var localctx = new IterationStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 154, CParser.RULE_iterationStatement);
    try {
        this.state = 1187;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CParser.While:
            this.enterOuterAlt(localctx, 1);
            this.state = 1167;
            this.match(CParser.While);
            this.state = 1168;
            this.match(CParser.LeftParen);
            this.state = 1169;
            this.expression(0);
            this.state = 1170;
            this.match(CParser.RightParen);
            this.state = 1171;
            this.statement();
            break;
        case CParser.Do:
            this.enterOuterAlt(localctx, 2);
            this.state = 1173;
            this.match(CParser.Do);
            this.state = 1174;
            this.statement();
            this.state = 1175;
            this.match(CParser.While);
            this.state = 1176;
            this.match(CParser.LeftParen);
            this.state = 1177;
            this.expression(0);
            this.state = 1178;
            this.match(CParser.RightParen);
            this.state = 1179;
            this.match(CParser.Semi);
            break;
        case CParser.For:
            this.enterOuterAlt(localctx, 3);
            this.state = 1181;
            this.match(CParser.For);
            this.state = 1182;
            this.match(CParser.LeftParen);
            this.state = 1183;
            this.forCondition();
            this.state = 1184;
            this.match(CParser.RightParen);
            this.state = 1185;
            this.statement();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ForConditionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CParser.RULE_forCondition;
    return this;
}

ForConditionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ForConditionContext.prototype.constructor = ForConditionContext;

ForConditionContext.prototype.forDeclaration = function() {
    return this.getTypedRuleContext(ForDeclarationContext,0);
};

ForConditionContext.prototype.forExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ForExpressionContext);
    } else {
        return this.getTypedRuleContext(ForExpressionContext,i);
    }
};

ForConditionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

ForConditionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CVisitor ) {
        return visitor.visitForCondition(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CParser.ForConditionContext = ForConditionContext;

CParser.prototype.forCondition = function() {

    var localctx = new ForConditionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 156, CParser.RULE_forCondition);
    var _la = 0; // Token type
    try {
        this.state = 1209;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,129,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1189;
            this.forDeclaration();
            this.state = 1190;
            this.match(CParser.Semi);
            this.state = 1192;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CParser.T__0) | (1 << CParser.T__1) | (1 << CParser.T__2))) !== 0) || ((((_la - 39)) & ~0x1f) == 0 && ((1 << (_la - 39)) & ((1 << (CParser.Sizeof - 39)) | (1 << (CParser.Alignof - 39)) | (1 << (CParser.Generic - 39)) | (1 << (CParser.LeftParen - 39)))) !== 0) || ((((_la - 71)) & ~0x1f) == 0 && ((1 << (_la - 71)) & ((1 << (CParser.Plus - 71)) | (1 << (CParser.PlusPlus - 71)) | (1 << (CParser.Minus - 71)) | (1 << (CParser.MinusMinus - 71)) | (1 << (CParser.Star - 71)) | (1 << (CParser.And - 71)) | (1 << (CParser.AndAnd - 71)) | (1 << (CParser.Not - 71)) | (1 << (CParser.Tilde - 71)))) !== 0) || ((((_la - 105)) & ~0x1f) == 0 && ((1 << (_la - 105)) & ((1 << (CParser.Identifier - 105)) | (1 << (CParser.Constant - 105)) | (1 << (CParser.DigitSequence - 105)) | (1 << (CParser.StringLiteral - 105)))) !== 0)) {
                this.state = 1191;
                this.forExpression(0);
            }

            this.state = 1194;
            this.match(CParser.Semi);
            this.state = 1196;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CParser.T__0) | (1 << CParser.T__1) | (1 << CParser.T__2))) !== 0) || ((((_la - 39)) & ~0x1f) == 0 && ((1 << (_la - 39)) & ((1 << (CParser.Sizeof - 39)) | (1 << (CParser.Alignof - 39)) | (1 << (CParser.Generic - 39)) | (1 << (CParser.LeftParen - 39)))) !== 0) || ((((_la - 71)) & ~0x1f) == 0 && ((1 << (_la - 71)) & ((1 << (CParser.Plus - 71)) | (1 << (CParser.PlusPlus - 71)) | (1 << (CParser.Minus - 71)) | (1 << (CParser.MinusMinus - 71)) | (1 << (CParser.Star - 71)) | (1 << (CParser.And - 71)) | (1 << (CParser.AndAnd - 71)) | (1 << (CParser.Not - 71)) | (1 << (CParser.Tilde - 71)))) !== 0) || ((((_la - 105)) & ~0x1f) == 0 && ((1 << (_la - 105)) & ((1 << (CParser.Identifier - 105)) | (1 << (CParser.Constant - 105)) | (1 << (CParser.DigitSequence - 105)) | (1 << (CParser.StringLiteral - 105)))) !== 0)) {
                this.state = 1195;
                this.forExpression(0);
            }

            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1199;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CParser.T__0) | (1 << CParser.T__1) | (1 << CParser.T__2))) !== 0) || ((((_la - 39)) & ~0x1f) == 0 && ((1 << (_la - 39)) & ((1 << (CParser.Sizeof - 39)) | (1 << (CParser.Alignof - 39)) | (1 << (CParser.Generic - 39)) | (1 << (CParser.LeftParen - 39)))) !== 0) || ((((_la - 71)) & ~0x1f) == 0 && ((1 << (_la - 71)) & ((1 << (CParser.Plus - 71)) | (1 << (CParser.PlusPlus - 71)) | (1 << (CParser.Minus - 71)) | (1 << (CParser.MinusMinus - 71)) | (1 << (CParser.Star - 71)) | (1 << (CParser.And - 71)) | (1 << (CParser.AndAnd - 71)) | (1 << (CParser.Not - 71)) | (1 << (CParser.Tilde - 71)))) !== 0) || ((((_la - 105)) & ~0x1f) == 0 && ((1 << (_la - 105)) & ((1 << (CParser.Identifier - 105)) | (1 << (CParser.Constant - 105)) | (1 << (CParser.DigitSequence - 105)) | (1 << (CParser.StringLiteral - 105)))) !== 0)) {
                this.state = 1198;
                this.expression(0);
            }

            this.state = 1201;
            this.match(CParser.Semi);
            this.state = 1203;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CParser.T__0) | (1 << CParser.T__1) | (1 << CParser.T__2))) !== 0) || ((((_la - 39)) & ~0x1f) == 0 && ((1 << (_la - 39)) & ((1 << (CParser.Sizeof - 39)) | (1 << (CParser.Alignof - 39)) | (1 << (CParser.Generic - 39)) | (1 << (CParser.LeftParen - 39)))) !== 0) || ((((_la - 71)) & ~0x1f) == 0 && ((1 << (_la - 71)) & ((1 << (CParser.Plus - 71)) | (1 << (CParser.PlusPlus - 71)) | (1 << (CParser.Minus - 71)) | (1 << (CParser.MinusMinus - 71)) | (1 << (CParser.Star - 71)) | (1 << (CParser.And - 71)) | (1 << (CParser.AndAnd - 71)) | (1 << (CParser.Not - 71)) | (1 << (CParser.Tilde - 71)))) !== 0) || ((((_la - 105)) & ~0x1f) == 0 && ((1 << (_la - 105)) & ((1 << (CParser.Identifier - 105)) | (1 << (CParser.Constant - 105)) | (1 << (CParser.DigitSequence - 105)) | (1 << (CParser.StringLiteral - 105)))) !== 0)) {
                this.state = 1202;
                this.forExpression(0);
            }

            this.state = 1205;
            this.match(CParser.Semi);
            this.state = 1207;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CParser.T__0) | (1 << CParser.T__1) | (1 << CParser.T__2))) !== 0) || ((((_la - 39)) & ~0x1f) == 0 && ((1 << (_la - 39)) & ((1 << (CParser.Sizeof - 39)) | (1 << (CParser.Alignof - 39)) | (1 << (CParser.Generic - 39)) | (1 << (CParser.LeftParen - 39)))) !== 0) || ((((_la - 71)) & ~0x1f) == 0 && ((1 << (_la - 71)) & ((1 << (CParser.Plus - 71)) | (1 << (CParser.PlusPlus - 71)) | (1 << (CParser.Minus - 71)) | (1 << (CParser.MinusMinus - 71)) | (1 << (CParser.Star - 71)) | (1 << (CParser.And - 71)) | (1 << (CParser.AndAnd - 71)) | (1 << (CParser.Not - 71)) | (1 << (CParser.Tilde - 71)))) !== 0) || ((((_la - 105)) & ~0x1f) == 0 && ((1 << (_la - 105)) & ((1 << (CParser.Identifier - 105)) | (1 << (CParser.Constant - 105)) | (1 << (CParser.DigitSequence - 105)) | (1 << (CParser.StringLiteral - 105)))) !== 0)) {
                this.state = 1206;
                this.forExpression(0);
            }

            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ForDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CParser.RULE_forDeclaration;
    return this;
}

ForDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ForDeclarationContext.prototype.constructor = ForDeclarationContext;

ForDeclarationContext.prototype.declarationSpecifiers = function() {
    return this.getTypedRuleContext(DeclarationSpecifiersContext,0);
};

ForDeclarationContext.prototype.initDeclaratorList = function() {
    return this.getTypedRuleContext(InitDeclaratorListContext,0);
};

ForDeclarationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CVisitor ) {
        return visitor.visitForDeclaration(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CParser.ForDeclarationContext = ForDeclarationContext;

CParser.prototype.forDeclaration = function() {

    var localctx = new ForDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 158, CParser.RULE_forDeclaration);
    try {
        this.state = 1215;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,130,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1211;
            this.declarationSpecifiers();
            this.state = 1212;
            this.initDeclaratorList(0);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1214;
            this.declarationSpecifiers();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ForExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CParser.RULE_forExpression;
    return this;
}

ForExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ForExpressionContext.prototype.constructor = ForExpressionContext;

ForExpressionContext.prototype.assignmentExpression = function() {
    return this.getTypedRuleContext(AssignmentExpressionContext,0);
};

ForExpressionContext.prototype.forExpression = function() {
    return this.getTypedRuleContext(ForExpressionContext,0);
};

ForExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CVisitor ) {
        return visitor.visitForExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};



CParser.prototype.forExpression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new ForExpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 160;
    this.enterRecursionRule(localctx, 160, CParser.RULE_forExpression, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1218;
        this.assignmentExpression();
        this._ctx.stop = this._input.LT(-1);
        this.state = 1225;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,131,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new ForExpressionContext(this, _parentctx, _parentState);
                this.pushNewRecursionContext(localctx, _startState, CParser.RULE_forExpression);
                this.state = 1220;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 1221;
                this.match(CParser.Comma);
                this.state = 1222;
                this.assignmentExpression(); 
            }
            this.state = 1227;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,131,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function JumpStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CParser.RULE_jumpStatement;
    return this;
}

JumpStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
JumpStatementContext.prototype.constructor = JumpStatementContext;

JumpStatementContext.prototype.Identifier = function() {
    return this.getToken(CParser.Identifier, 0);
};

JumpStatementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

JumpStatementContext.prototype.unaryExpression = function() {
    return this.getTypedRuleContext(UnaryExpressionContext,0);
};

JumpStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CVisitor ) {
        return visitor.visitJumpStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CParser.JumpStatementContext = JumpStatementContext;

CParser.prototype.jumpStatement = function() {

    var localctx = new JumpStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 162, CParser.RULE_jumpStatement);
    var _la = 0; // Token type
    try {
        this.state = 1244;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,133,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1228;
            this.match(CParser.Goto);
            this.state = 1229;
            this.match(CParser.Identifier);
            this.state = 1230;
            this.match(CParser.Semi);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1231;
            this.match(CParser.Continue);
            this.state = 1232;
            this.match(CParser.Semi);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1233;
            this.match(CParser.Break);
            this.state = 1234;
            this.match(CParser.Semi);
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 1235;
            this.match(CParser.Return);
            this.state = 1237;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CParser.T__0) | (1 << CParser.T__1) | (1 << CParser.T__2))) !== 0) || ((((_la - 39)) & ~0x1f) == 0 && ((1 << (_la - 39)) & ((1 << (CParser.Sizeof - 39)) | (1 << (CParser.Alignof - 39)) | (1 << (CParser.Generic - 39)) | (1 << (CParser.LeftParen - 39)))) !== 0) || ((((_la - 71)) & ~0x1f) == 0 && ((1 << (_la - 71)) & ((1 << (CParser.Plus - 71)) | (1 << (CParser.PlusPlus - 71)) | (1 << (CParser.Minus - 71)) | (1 << (CParser.MinusMinus - 71)) | (1 << (CParser.Star - 71)) | (1 << (CParser.And - 71)) | (1 << (CParser.AndAnd - 71)) | (1 << (CParser.Not - 71)) | (1 << (CParser.Tilde - 71)))) !== 0) || ((((_la - 105)) & ~0x1f) == 0 && ((1 << (_la - 105)) & ((1 << (CParser.Identifier - 105)) | (1 << (CParser.Constant - 105)) | (1 << (CParser.DigitSequence - 105)) | (1 << (CParser.StringLiteral - 105)))) !== 0)) {
                this.state = 1236;
                this.expression(0);
            }

            this.state = 1239;
            this.match(CParser.Semi);
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 1240;
            this.match(CParser.Goto);
            this.state = 1241;
            this.unaryExpression();
            this.state = 1242;
            this.match(CParser.Semi);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CompilationUnitContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CParser.RULE_compilationUnit;
    return this;
}

CompilationUnitContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CompilationUnitContext.prototype.constructor = CompilationUnitContext;

CompilationUnitContext.prototype.translationUnit = function() {
    return this.getTypedRuleContext(TranslationUnitContext,0);
};

CompilationUnitContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CVisitor ) {
        return visitor.visitCompilationUnit(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CParser.CompilationUnitContext = CompilationUnitContext;

CParser.prototype.compilationUnit = function() {

    var localctx = new CompilationUnitContext(this, this._ctx, this.state);
    this.enterRule(localctx, 164, CParser.RULE_compilationUnit);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1247;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CParser.T__0) | (1 << CParser.T__3) | (1 << CParser.T__4) | (1 << CParser.T__5) | (1 << CParser.T__6) | (1 << CParser.T__7) | (1 << CParser.T__8) | (1 << CParser.T__9) | (1 << CParser.T__11) | (1 << CParser.Auto) | (1 << CParser.Char) | (1 << CParser.Const) | (1 << CParser.Double) | (1 << CParser.Enum) | (1 << CParser.Extern) | (1 << CParser.Float) | (1 << CParser.Inline))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (CParser.Int - 32)) | (1 << (CParser.Long - 32)) | (1 << (CParser.Register - 32)) | (1 << (CParser.Restrict - 32)) | (1 << (CParser.Short - 32)) | (1 << (CParser.Signed - 32)) | (1 << (CParser.Static - 32)) | (1 << (CParser.Struct - 32)) | (1 << (CParser.Typedef - 32)) | (1 << (CParser.Union - 32)) | (1 << (CParser.Unsigned - 32)) | (1 << (CParser.Void - 32)) | (1 << (CParser.Volatile - 32)) | (1 << (CParser.Alignas - 32)) | (1 << (CParser.Atomic - 32)) | (1 << (CParser.Bool - 32)) | (1 << (CParser.Complex - 32)) | (1 << (CParser.Noreturn - 32)) | (1 << (CParser.StaticAssert - 32)) | (1 << (CParser.ThreadLocal - 32)) | (1 << (CParser.LeftParen - 32)))) !== 0) || ((((_la - 75)) & ~0x1f) == 0 && ((1 << (_la - 75)) & ((1 << (CParser.Star - 75)) | (1 << (CParser.Caret - 75)) | (1 << (CParser.Semi - 75)) | (1 << (CParser.Identifier - 75)))) !== 0)) {
            this.state = 1246;
            this.translationUnit(0);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TranslationUnitContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CParser.RULE_translationUnit;
    return this;
}

TranslationUnitContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TranslationUnitContext.prototype.constructor = TranslationUnitContext;

TranslationUnitContext.prototype.externalDeclaration = function() {
    return this.getTypedRuleContext(ExternalDeclarationContext,0);
};

TranslationUnitContext.prototype.translationUnit = function() {
    return this.getTypedRuleContext(TranslationUnitContext,0);
};

TranslationUnitContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CVisitor ) {
        return visitor.visitTranslationUnit(this);
    } else {
        return visitor.visitChildren(this);
    }
};



CParser.prototype.translationUnit = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new TranslationUnitContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 166;
    this.enterRecursionRule(localctx, 166, CParser.RULE_translationUnit, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1250;
        this.externalDeclaration();
        this._ctx.stop = this._input.LT(-1);
        this.state = 1256;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,135,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new TranslationUnitContext(this, _parentctx, _parentState);
                this.pushNewRecursionContext(localctx, _startState, CParser.RULE_translationUnit);
                this.state = 1252;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 1253;
                this.externalDeclaration(); 
            }
            this.state = 1258;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,135,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function ExternalDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CParser.RULE_externalDeclaration;
    return this;
}

ExternalDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExternalDeclarationContext.prototype.constructor = ExternalDeclarationContext;

ExternalDeclarationContext.prototype.functionDefinition = function() {
    return this.getTypedRuleContext(FunctionDefinitionContext,0);
};

ExternalDeclarationContext.prototype.declaration = function() {
    return this.getTypedRuleContext(DeclarationContext,0);
};

ExternalDeclarationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CVisitor ) {
        return visitor.visitExternalDeclaration(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CParser.ExternalDeclarationContext = ExternalDeclarationContext;

CParser.prototype.externalDeclaration = function() {

    var localctx = new ExternalDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 168, CParser.RULE_externalDeclaration);
    try {
        this.state = 1262;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,136,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1259;
            this.functionDefinition();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1260;
            this.declaration();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1261;
            this.match(CParser.Semi);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FunctionDefinitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CParser.RULE_functionDefinition;
    return this;
}

FunctionDefinitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FunctionDefinitionContext.prototype.constructor = FunctionDefinitionContext;

FunctionDefinitionContext.prototype.declarator = function() {
    return this.getTypedRuleContext(DeclaratorContext,0);
};

FunctionDefinitionContext.prototype.compoundStatement = function() {
    return this.getTypedRuleContext(CompoundStatementContext,0);
};

FunctionDefinitionContext.prototype.declarationSpecifiers = function() {
    return this.getTypedRuleContext(DeclarationSpecifiersContext,0);
};

FunctionDefinitionContext.prototype.declarationList = function() {
    return this.getTypedRuleContext(DeclarationListContext,0);
};

FunctionDefinitionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CVisitor ) {
        return visitor.visitFunctionDefinition(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CParser.FunctionDefinitionContext = FunctionDefinitionContext;

CParser.prototype.functionDefinition = function() {

    var localctx = new FunctionDefinitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 170, CParser.RULE_functionDefinition);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1265;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,137,this._ctx);
        if(la_===1) {
            this.state = 1264;
            this.declarationSpecifiers();

        }
        this.state = 1267;
        this.declarator();
        this.state = 1269;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CParser.T__0) | (1 << CParser.T__3) | (1 << CParser.T__4) | (1 << CParser.T__5) | (1 << CParser.T__6) | (1 << CParser.T__7) | (1 << CParser.T__8) | (1 << CParser.T__9) | (1 << CParser.T__11) | (1 << CParser.Auto) | (1 << CParser.Char) | (1 << CParser.Const) | (1 << CParser.Double) | (1 << CParser.Enum) | (1 << CParser.Extern) | (1 << CParser.Float) | (1 << CParser.Inline))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (CParser.Int - 32)) | (1 << (CParser.Long - 32)) | (1 << (CParser.Register - 32)) | (1 << (CParser.Restrict - 32)) | (1 << (CParser.Short - 32)) | (1 << (CParser.Signed - 32)) | (1 << (CParser.Static - 32)) | (1 << (CParser.Struct - 32)) | (1 << (CParser.Typedef - 32)) | (1 << (CParser.Union - 32)) | (1 << (CParser.Unsigned - 32)) | (1 << (CParser.Void - 32)) | (1 << (CParser.Volatile - 32)) | (1 << (CParser.Alignas - 32)) | (1 << (CParser.Atomic - 32)) | (1 << (CParser.Bool - 32)) | (1 << (CParser.Complex - 32)) | (1 << (CParser.Noreturn - 32)) | (1 << (CParser.StaticAssert - 32)) | (1 << (CParser.ThreadLocal - 32)))) !== 0) || _la===CParser.Identifier) {
            this.state = 1268;
            this.declarationList(0);
        }

        this.state = 1271;
        this.compoundStatement();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DeclarationListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CParser.RULE_declarationList;
    return this;
}

DeclarationListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DeclarationListContext.prototype.constructor = DeclarationListContext;

DeclarationListContext.prototype.declaration = function() {
    return this.getTypedRuleContext(DeclarationContext,0);
};

DeclarationListContext.prototype.declarationList = function() {
    return this.getTypedRuleContext(DeclarationListContext,0);
};

DeclarationListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CVisitor ) {
        return visitor.visitDeclarationList(this);
    } else {
        return visitor.visitChildren(this);
    }
};



CParser.prototype.declarationList = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new DeclarationListContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 172;
    this.enterRecursionRule(localctx, 172, CParser.RULE_declarationList, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1274;
        this.declaration();
        this._ctx.stop = this._input.LT(-1);
        this.state = 1280;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,139,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new DeclarationListContext(this, _parentctx, _parentState);
                this.pushNewRecursionContext(localctx, _startState, CParser.RULE_declarationList);
                this.state = 1276;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 1277;
                this.declaration(); 
            }
            this.state = 1282;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,139,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function ConstantContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CParser.RULE_constant;
    return this;
}

ConstantContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConstantContext.prototype.constructor = ConstantContext;

ConstantContext.prototype.Constant = function() {
    return this.getToken(CParser.Constant, 0);
};

ConstantContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CVisitor ) {
        return visitor.visitConstant(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CParser.ConstantContext = ConstantContext;

CParser.prototype.constant = function() {

    var localctx = new ConstantContext(this, this._ctx, this.state);
    this.enterRule(localctx, 174, CParser.RULE_constant);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1283;
        this.match(CParser.Constant);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


CParser.prototype.sempred = function(localctx, ruleIndex, predIndex) {
	switch(ruleIndex) {
	case 2:
			return this.genericAssocList_sempred(localctx, predIndex);
	case 4:
			return this.postfixExpression_sempred(localctx, predIndex);
	case 5:
			return this.argumentExpressionList_sempred(localctx, predIndex);
	case 9:
			return this.multiplicativeExpression_sempred(localctx, predIndex);
	case 10:
			return this.additiveExpression_sempred(localctx, predIndex);
	case 11:
			return this.shiftExpression_sempred(localctx, predIndex);
	case 12:
			return this.relationalExpression_sempred(localctx, predIndex);
	case 13:
			return this.equalityExpression_sempred(localctx, predIndex);
	case 14:
			return this.andExpression_sempred(localctx, predIndex);
	case 15:
			return this.exclusiveOrExpression_sempred(localctx, predIndex);
	case 16:
			return this.inclusiveOrExpression_sempred(localctx, predIndex);
	case 17:
			return this.logicalAndExpression_sempred(localctx, predIndex);
	case 18:
			return this.logicalOrExpression_sempred(localctx, predIndex);
	case 22:
			return this.expression_sempred(localctx, predIndex);
	case 28:
			return this.initDeclaratorList_sempred(localctx, predIndex);
	case 34:
			return this.structDeclarationList_sempred(localctx, predIndex);
	case 37:
			return this.structDeclaratorList_sempred(localctx, predIndex);
	case 40:
			return this.enumeratorList_sempred(localctx, predIndex);
	case 48:
			return this.directDeclarator_sempred(localctx, predIndex);
	case 55:
			return this.typeQualifierList_sempred(localctx, predIndex);
	case 57:
			return this.parameterList_sempred(localctx, predIndex);
	case 59:
			return this.identifierList_sempred(localctx, predIndex);
	case 62:
			return this.directAbstractDeclarator_sempred(localctx, predIndex);
	case 65:
			return this.initializerList_sempred(localctx, predIndex);
	case 67:
			return this.designatorList_sempred(localctx, predIndex);
	case 73:
			return this.blockItemList_sempred(localctx, predIndex);
	case 80:
			return this.forExpression_sempred(localctx, predIndex);
	case 83:
			return this.translationUnit_sempred(localctx, predIndex);
	case 86:
			return this.declarationList_sempred(localctx, predIndex);
    default:
        throw "No predicate with index:" + ruleIndex;
   }
};

CParser.prototype.genericAssocList_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 0:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

CParser.prototype.postfixExpression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 1:
			return this.precpred(this._ctx, 10);
		case 2:
			return this.precpred(this._ctx, 9);
		case 3:
			return this.precpred(this._ctx, 8);
		case 4:
			return this.precpred(this._ctx, 7);
		case 5:
			return this.precpred(this._ctx, 6);
		case 6:
			return this.precpred(this._ctx, 5);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

CParser.prototype.argumentExpressionList_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 7:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

CParser.prototype.multiplicativeExpression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 8:
			return this.precpred(this._ctx, 3);
		case 9:
			return this.precpred(this._ctx, 2);
		case 10:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

CParser.prototype.additiveExpression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 11:
			return this.precpred(this._ctx, 2);
		case 12:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

CParser.prototype.shiftExpression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 13:
			return this.precpred(this._ctx, 2);
		case 14:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

CParser.prototype.relationalExpression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 15:
			return this.precpred(this._ctx, 4);
		case 16:
			return this.precpred(this._ctx, 3);
		case 17:
			return this.precpred(this._ctx, 2);
		case 18:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

CParser.prototype.equalityExpression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 19:
			return this.precpred(this._ctx, 2);
		case 20:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

CParser.prototype.andExpression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 21:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

CParser.prototype.exclusiveOrExpression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 22:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

CParser.prototype.inclusiveOrExpression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 23:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

CParser.prototype.logicalAndExpression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 24:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

CParser.prototype.logicalOrExpression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 25:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

CParser.prototype.expression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 26:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

CParser.prototype.initDeclaratorList_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 27:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

CParser.prototype.structDeclarationList_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 28:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

CParser.prototype.structDeclaratorList_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 29:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

CParser.prototype.enumeratorList_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 30:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

CParser.prototype.directDeclarator_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 31:
			return this.precpred(this._ctx, 7);
		case 32:
			return this.precpred(this._ctx, 6);
		case 33:
			return this.precpred(this._ctx, 5);
		case 34:
			return this.precpred(this._ctx, 4);
		case 35:
			return this.precpred(this._ctx, 3);
		case 36:
			return this.precpred(this._ctx, 2);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

CParser.prototype.typeQualifierList_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 37:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

CParser.prototype.parameterList_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 38:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

CParser.prototype.identifierList_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 39:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

CParser.prototype.directAbstractDeclarator_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 40:
			return this.precpred(this._ctx, 5);
		case 41:
			return this.precpred(this._ctx, 4);
		case 42:
			return this.precpred(this._ctx, 3);
		case 43:
			return this.precpred(this._ctx, 2);
		case 44:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

CParser.prototype.initializerList_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 45:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

CParser.prototype.designatorList_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 46:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

CParser.prototype.blockItemList_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 47:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

CParser.prototype.forExpression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 48:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

CParser.prototype.translationUnit_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 49:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

CParser.prototype.declarationList_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 50:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};


exports.CParser = CParser;


/***/ })
/******/ ]);
